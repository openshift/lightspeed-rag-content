# Uninstalling a cluster on AWS


You can remove a cluster that you deployed to Amazon Web Services (AWS).

# Removing a cluster that uses installer-provisioned infrastructure

You can remove a cluster that uses installer-provisioned infrastructure that you provisioned from your cloud platform.


[NOTE]
----
After uninstallation, check your cloud provider for any resources that were not removed properly, especially with user-provisioned infrastructure clusters. Some resources might exist because either the installation program did not create the resource or could not access the resource.
----

* You have a copy of the installation program that you used to deploy the cluster.
* You have the files that the installation program generated when you created your
cluster.

1. From the directory that has the installation program on the computer that you used to install the cluster, run the following command:

```terminal
$ ./openshift-install destroy cluster \
--dir <installation_directory> --log-level info 1 2
```

For <installation_directory>, specify the path to the directory that you
stored the installation files in.
To view different details, specify warn, debug, or error instead of info.

[NOTE]
----
You must specify the directory that includes the cluster definition files for your cluster. The installation program requires the metadata.json file in this directory to delete the cluster.
----
2. Optional: Delete the <installation_directory> directory and the {product-title} installation program.

# Deleting Amazon Web Services resources with the Cloud Credential Operator utility

After uninstalling an {product-title} cluster that uses short-term credentials managed outside the cluster, you can use the CCO utility (ccoctl) to remove the {cp-first} ({cp}) resources that ccoctl created during installation.

* Extract and prepare the ccoctl binary.
* Uninstall an {product-title} cluster on {cp} that uses short-term credentials.

* Delete the {cp} resources that ccoctl created by running the following command:

```terminal
$ ccoctl {cp-name} delete \
  --name=<name> \1
  --region=<{cp-name}_region> 2
```

<name> matches the name that was originally used to create and tag the cloud resources.
<{cp-name}_region> is the {cp} region in which to delete cloud resources.
Example output

```text
2021/04/08 17:50:41 Identity Provider object .well-known/openid-configuration deleted from the bucket <name>-oidc
2021/04/08 17:50:42 Identity Provider object keys.json deleted from the bucket <name>-oidc
2021/04/08 17:50:43 Identity Provider bucket <name>-oidc deleted
2021/04/08 17:51:05 Policy <name>-openshift-cloud-credential-operator-cloud-credential-o associated with IAM Role <name>-openshift-cloud-credential-operator-cloud-credential-o deleted
2021/04/08 17:51:05 IAM Role <name>-openshift-cloud-credential-operator-cloud-credential-o deleted
2021/04/08 17:51:07 Policy <name>-openshift-cluster-csi-drivers-ebs-cloud-credentials associated with IAM Role <name>-openshift-cluster-csi-drivers-ebs-cloud-credentials deleted
2021/04/08 17:51:07 IAM Role <name>-openshift-cluster-csi-drivers-ebs-cloud-credentials deleted
2021/04/08 17:51:08 Policy <name>-openshift-image-registry-installer-cloud-credentials associated with IAM Role <name>-openshift-image-registry-installer-cloud-credentials deleted
2021/04/08 17:51:08 IAM Role <name>-openshift-image-registry-installer-cloud-credentials deleted
2021/04/08 17:51:09 Policy <name>-openshift-ingress-operator-cloud-credentials associated with IAM Role <name>-openshift-ingress-operator-cloud-credentials deleted
2021/04/08 17:51:10 IAM Role <name>-openshift-ingress-operator-cloud-credentials deleted
2021/04/08 17:51:11 Policy <name>-openshift-machine-api-aws-cloud-credentials associated with IAM Role <name>-openshift-machine-api-aws-cloud-credentials deleted
2021/04/08 17:51:11 IAM Role <name>-openshift-machine-api-aws-cloud-credentials deleted
2021/04/08 17:51:39 Identity Provider with ARN arn:aws:iam::<aws_account_id>:oidc-provider/<name>-oidc.s3.<aws_region>.amazonaws.com deleted
```


* To verify that the resources are deleted, query {cp}. For more information, refer to {cp} documentation.

# Deleting a cluster with a configured AWS Local Zone infrastructure

After you install a cluster on Amazon Web Services (AWS) into an existing Virtual Private Cloud (VPC), and you set subnets for each Local Zone location, you can delete the cluster and any AWS resources associated with it.

The example in the procedure assumes that you created a VPC and its subnets by using a CloudFormation template.

* You know the name of the CloudFormation stacks, <local_zone_stack_name> and <vpc_stack_name>, that were used during the creation of the network. You need the name of the stack to delete the cluster.
* You have access rights to the directory that contains the installation files that were created by the installation program.
* Your account includes a policy that provides you with permissions to delete the CloudFormation stack.

1. Change to the directory that contains the stored installation program, and delete the cluster by using the destroy cluster command:

```terminal
$ ./openshift-install destroy cluster --dir <installation_directory> \1
   --log-level=debug 2
```

For <installation_directory>, specify the directory that stored any files created by the installation program.
To view different log details, specify error, info, or warn instead of debug.
2. Delete the CloudFormation stack for the Local Zone subnet:

```terminal
$ aws cloudformation delete-stack --stack-name <local_zone_stack_name>
```

3. Delete the stack of resources that represent the VPC:

```terminal
$ aws cloudformation delete-stack --stack-name <vpc_stack_name>
```


* Check that you removed the stack resources by issuing the following commands in the AWS CLI. The AWS CLI outputs that no template component exists.

```terminal
$ aws cloudformation describe-stacks --stack-name <local_zone_stack_name>
```


```terminal
$ aws cloudformation describe-stacks --stack-name <vpc_stack_name>
```


* See Working with stacks in the AWS documentation for more information about AWS CloudFormation stacks.
* Opt into AWS Local Zones
* AWS Local Zones available locations
* AWS Local Zones features