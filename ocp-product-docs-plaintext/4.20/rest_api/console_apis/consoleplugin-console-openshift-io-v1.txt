# ConsolePlugin [console.openshift.io/v1]


Description:: 
ConsolePlugin is an extension for customizing OpenShift web console by
dynamically loading code from another service running on the cluster.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* metadata
* spec

# Specification



## .spec

Description:: 
spec contains the desired configuration for the console plugin.
Type:: object
Required:: 
* backend
* displayName



## .spec.backend

Description:: 
backend holds the configuration of backend which is serving console's plugin .
Type:: object
Required:: 
* type



## .spec.backend.service

Description:: 
service is a Kubernetes Service that exposes the plugin using a
deployment with an HTTP server. The Service must use HTTPS and
Service serving certificate. The console backend will proxy the
plugins assets from the Service using the service CA bundle.
Type:: object
Required:: 
* name
* namespace
* port



## .spec.contentSecurityPolicy

Description:: 
contentSecurityPolicy is a list of Content-Security-Policy (CSP) directives for the plugin.
Each directive specifies a list of values, appropriate for the given directive type,
for example a list of remote endpoints for fetch directives such as ScriptSrc.
Console web application uses CSP to detect and mitigate certain types of attacks,
such as cross-site scripting (XSS) and data injection attacks.
Dynamic plugins should specify this field if need to load assets from outside
the cluster or if violation reports are observed. Dynamic plugins should always prefer
loading their assets from within the cluster, either by vendoring them, or fetching
from a cluster service.
CSP violation reports can be viewed in the browser's console logs during development and
testing of the plugin in the OpenShift web console.
Available directive types are DefaultSrc, ScriptSrc, StyleSrc, ImgSrc, FontSrc and ConnectSrc.
Each of the available directives may be defined only once in the list.
The value 'self' is automatically included in all fetch directives by the OpenShift web
console's backend.
For more information about the CSP directives, see:
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
The OpenShift web console server aggregates the CSP directives and values across
its own default values and all enabled ConsolePlugin CRs, merging them into a single
policy string that is sent to the browser via Content-Security-Policy HTTP response header.
Example:
  ConsolePlugin A directives:
    script-src: https://script1.com/, https://script2.com/
    font-src: https://font1.com/
ConsolePlugin B directives:
  script-src: https://script2.com/, https://script3.com/
  font-src: https://font2.com/
  img-src: https://img1.com/
Unified set of CSP directives, passed to the OpenShift web console server:
  script-src: https://script1.com/, https://script2.com/, https://script3.com/
  font-src: https://font1.com/, https://font2.com/
  img-src: https://img1.com/
OpenShift web console server CSP response header:
  Content-Security-Policy: default-src 'self'; base-uri 'self'; script-src 'self' https://script1.com/ https://script2.com/ https://script3.com/; font-src 'self' https://font1.com/ https://font2.com/; img-src 'self' https://img1.com/; style-src 'self'; frame-src 'none'; object-src 'none'
Type:: array

## .spec.contentSecurityPolicy[]

Description:: 
ConsolePluginCSP holds configuration for a specific CSP directive
Type:: object
Required:: 
* directive
* values



## .spec.i18n

Description:: 
i18n is the configuration of plugin's localization resources.
Type:: object
Required:: 
* loadType



## .spec.proxy

Description:: 
proxy is a list of proxies that describe various service type
to which the plugin needs to connect to.
Type:: array

## .spec.proxy[]

Description:: 
ConsolePluginProxy holds information on various service types
to which console's backend will proxy the plugin's requests.
Type:: object
Required:: 
* alias
* endpoint



## .spec.proxy[].endpoint

Description:: 
endpoint provides information about endpoint to which the request is proxied to.
Type:: object
Required:: 
* type



## .spec.proxy[].endpoint.service

Description:: 
service is an in-cluster Service that the plugin will connect to.
The Service must use HTTPS. The console backend exposes an endpoint
in order to proxy communication between the plugin and the Service.
Note: service field is required for now, since currently only "Service"
type is supported.
Type:: object
Required:: 
* name
* namespace
* port



# API endpoints

The following API endpoints are available:

* /apis/console.openshift.io/v1/consoleplugins
* DELETE: delete collection of ConsolePlugin
* GET: list objects of kind ConsolePlugin
* POST: create a ConsolePlugin
* /apis/console.openshift.io/v1/consoleplugins/{name}
* DELETE: delete a ConsolePlugin
* GET: read the specified ConsolePlugin
* PATCH: partially update the specified ConsolePlugin
* PUT: replace the specified ConsolePlugin

## /apis/console.openshift.io/v1/consoleplugins

HTTP method:: DELETE
Description:: delete collection of ConsolePlugin



HTTP method:: GET
Description:: list objects of kind ConsolePlugin



HTTP method:: POST
Description:: create a ConsolePlugin







## /apis/console.openshift.io/v1/consoleplugins/{name}



HTTP method:: DELETE
Description:: delete a ConsolePlugin





HTTP method:: GET
Description:: read the specified ConsolePlugin



HTTP method:: PATCH
Description:: partially update the specified ConsolePlugin





HTTP method:: PUT
Description:: replace the specified ConsolePlugin





