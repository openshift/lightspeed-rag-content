# ImageTag [image.openshift.io/v1]


Description:: 
ImageTag represents a single tag within an image stream and includes the spec, the status history, and the currently referenced image (if any) of the provided tag. This type replaces the ImageStreamTag by providing a full view of the tag. ImageTags are returned for every spec or status tag present on the image stream. If no tag exists in either form a not found error will be returned by the API. A create operation will succeed if no spec tag has already been defined and the spec field is set. Delete will remove both spec and status elements from the image stream.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* spec
* status
* image

# Specification



## .image

Description:: 
Image is an immutable representation of a container image and metadata at a point in time. Images are named by taking a hash of their contents (metadata and content) and any change in format, content, or metadata results in a new name. The images resource is primarily for use by cluster administrators and integrations like the cluster image registry - end users instead access images via the imagestreamtags or imagestreamimages resources. While image metadata is stored in the API, any integration that implements the container image registry API must provide its own storage for the raw manifest data, image config, and layer contents.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object



## .image.dockerImageLayers

Description:: 
DockerImageLayers represents the layers in the image. May not be set if the image does not define that data or if the image represents a manifest list.
Type:: array

## .image.dockerImageLayers[]

Description:: 
ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.
Type:: object
Required:: 
* name
* size
* mediaType



## .image.dockerImageManifests

Description:: 
DockerImageManifests holds information about sub-manifests when the image represents a manifest list. When this field is present, no DockerImageLayers should be specified.
Type:: array

## .image.dockerImageManifests[]

Description:: 
ImageManifest represents sub-manifests of a manifest list. The Digest field points to a regular Image object.
Type:: object
Required:: 
* digest
* mediaType
* manifestSize
* architecture
* os



## .image.signatures

Description:: 
Signatures holds all signatures of the image.
Type:: array

## .image.signatures[]

Description:: 
ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* type
* content



## .image.signatures[].conditions

Description:: 
Conditions represent the latest available observations of a signature's current state.
Type:: array

## .image.signatures[].conditions[]

Description:: 
SignatureCondition describes an image signature condition of particular kind at particular probe time.
Type:: object
Required:: 
* type
* status



## .image.signatures[].issuedBy

Description:: 
SignatureIssuer holds information about an issuer of signing certificate or key.
Type:: object



## .image.signatures[].issuedTo

Description:: 
SignatureSubject holds information about a person or entity who created the signature.
Type:: object
Required:: 
* publicKeyID



## .spec

Description:: 
TagReference specifies optional annotations for images using this tag and an optional reference to an ImageStreamTag, ImageStreamImage, or DockerImage this tag should track.
Type:: object
Required:: 
* name



## .spec.importPolicy

Description:: 
TagImportPolicy controls how images related to this tag will be imported.
Type:: object



## .spec.referencePolicy

Description:: 
TagReferencePolicy describes how pull-specs for images in this image stream tag are generated when image change triggers in deployment configs or builds are resolved. This allows the image stream author to control how images are accessed.
Type:: object
Required:: 
* type



## .status

Description:: 
NamedTagEventList relates a tag to its image history.
Type:: object
Required:: 
* tag
* items



## .status.conditions

Description:: 
Conditions is an array of conditions that apply to the tag event list.
Type:: array

## .status.conditions[]

Description:: 
TagEventCondition contains condition information for a tag event.
Type:: object
Required:: 
* type
* status
* generation



## .status.items

Description:: 
Standard object's metadata.
Type:: array

## .status.items[]

Description:: 
TagEvent is used by ImageStreamStatus to keep a historical record of images associated with a tag.
Type:: object
Required:: 
* created
* dockerImageReference
* image
* generation



# API endpoints

The following API endpoints are available:

* /apis/image.openshift.io/v1/imagetags
* GET: list objects of kind ImageTag
* /apis/image.openshift.io/v1/namespaces/{namespace}/imagetags
* GET: list objects of kind ImageTag
* POST: create an ImageTag
* /apis/image.openshift.io/v1/namespaces/{namespace}/imagetags/{name}
* DELETE: delete an ImageTag
* GET: read the specified ImageTag
* PATCH: partially update the specified ImageTag
* PUT: replace the specified ImageTag

## /apis/image.openshift.io/v1/imagetags

HTTP method:: GET
Description:: list objects of kind ImageTag



## /apis/image.openshift.io/v1/namespaces/{namespace}/imagetags

HTTP method:: GET
Description:: list objects of kind ImageTag



HTTP method:: POST
Description:: create an ImageTag







## /apis/image.openshift.io/v1/namespaces/{namespace}/imagetags/{name}



HTTP method:: DELETE
Description:: delete an ImageTag





HTTP method:: GET
Description:: read the specified ImageTag



HTTP method:: PATCH
Description:: partially update the specified ImageTag





HTTP method:: PUT
Description:: replace the specified ImageTag





