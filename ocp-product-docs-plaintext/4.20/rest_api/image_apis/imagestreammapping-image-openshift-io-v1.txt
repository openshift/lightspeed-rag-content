# ImageStreamMapping [image.openshift.io/v1]


Description:: 
ImageStreamMapping represents a mapping from a single image stream tag to a container image as well as the reference to the container image stream the image came from. This resource is used by privileged integrators to create an image resource and to associate it with an image stream in the status tags field. Creating an ImageStreamMapping will allow any user who can view the image stream to tag or pull that image, so only create mappings where the user has proven they have access to the image contents directly. The only operation supported for this resource is create and the metadata name and namespace should be set to the image stream containing the tag that should be updated.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* image
* tag

# Specification



## .image

Description:: 
Image is an immutable representation of a container image and metadata at a point in time. Images are named by taking a hash of their contents (metadata and content) and any change in format, content, or metadata results in a new name. The images resource is primarily for use by cluster administrators and integrations like the cluster image registry - end users instead access images via the imagestreamtags or imagestreamimages resources. While image metadata is stored in the API, any integration that implements the container image registry API must provide its own storage for the raw manifest data, image config, and layer contents.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object



## .image.dockerImageLayers

Description:: 
DockerImageLayers represents the layers in the image. May not be set if the image does not define that data or if the image represents a manifest list.
Type:: array

## .image.dockerImageLayers[]

Description:: 
ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.
Type:: object
Required:: 
* name
* size
* mediaType



## .image.dockerImageManifests

Description:: 
DockerImageManifests holds information about sub-manifests when the image represents a manifest list. When this field is present, no DockerImageLayers should be specified.
Type:: array

## .image.dockerImageManifests[]

Description:: 
ImageManifest represents sub-manifests of a manifest list. The Digest field points to a regular Image object.
Type:: object
Required:: 
* digest
* mediaType
* manifestSize
* architecture
* os



## .image.signatures

Description:: 
Signatures holds all signatures of the image.
Type:: array

## .image.signatures[]

Description:: 
ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* type
* content



## .image.signatures[].conditions

Description:: 
Conditions represent the latest available observations of a signature's current state.
Type:: array

## .image.signatures[].conditions[]

Description:: 
SignatureCondition describes an image signature condition of particular kind at particular probe time.
Type:: object
Required:: 
* type
* status



## .image.signatures[].issuedBy

Description:: 
SignatureIssuer holds information about an issuer of signing certificate or key.
Type:: object



## .image.signatures[].issuedTo

Description:: 
SignatureSubject holds information about a person or entity who created the signature.
Type:: object
Required:: 
* publicKeyID



# API endpoints

The following API endpoints are available:

* /apis/image.openshift.io/v1/namespaces/{namespace}/imagestreammappings
* POST: create an ImageStreamMapping

## /apis/image.openshift.io/v1/namespaces/{namespace}/imagestreammappings



HTTP method:: POST
Description:: create an ImageStreamMapping



