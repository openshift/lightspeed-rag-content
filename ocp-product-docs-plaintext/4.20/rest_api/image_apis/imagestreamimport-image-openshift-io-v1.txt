# ImageStreamImport [image.openshift.io/v1]


Description:: 
The image stream import resource provides an easy way for a user to find and import container images from other container image registries into the server. Individual images or an entire image repository may be imported, and users may choose to see the results of the import prior to tagging the resulting images into the specified image stream.
This API is intended for end-user tools that need to see the metadata of the image prior to import (for instance, to generate an application from it). Clients that know the desired image can continue to create spec.tags directly into their image streams.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* spec
* status

# Specification



## .spec

Description:: 
ImageStreamImportSpec defines what images should be imported.
Type:: object
Required:: 
* import



## .spec.images

Description:: 
Images are a list of individual images to import.
Type:: array

## .spec.images[]

Description:: 
ImageImportSpec describes a request to import a specific image.
Type:: object
Required:: 
* from



## .spec.images[].importPolicy

Description:: 
TagImportPolicy controls how images related to this tag will be imported.
Type:: object



## .spec.images[].referencePolicy

Description:: 
TagReferencePolicy describes how pull-specs for images in this image stream tag are generated when image change triggers in deployment configs or builds are resolved. This allows the image stream author to control how images are accessed.
Type:: object
Required:: 
* type



## .spec.repository

Description:: 
RepositoryImportSpec describes a request to import images from a container image repository.
Type:: object
Required:: 
* from



## .spec.repository.importPolicy

Description:: 
TagImportPolicy controls how images related to this tag will be imported.
Type:: object



## .spec.repository.referencePolicy

Description:: 
TagReferencePolicy describes how pull-specs for images in this image stream tag are generated when image change triggers in deployment configs or builds are resolved. This allows the image stream author to control how images are accessed.
Type:: object
Required:: 
* type



## .status

Description:: 
ImageStreamImportStatus contains information about the status of an image stream import.
Type:: object



## .status.images

Description:: 
Images is set with the result of importing spec.images
Type:: array

## .status.images[]

Description:: 
ImageImportStatus describes the result of an image import.
Type:: object
Required:: 
* status



## .status.images[].image

Description:: 
Image is an immutable representation of a container image and metadata at a point in time. Images are named by taking a hash of their contents (metadata and content) and any change in format, content, or metadata results in a new name. The images resource is primarily for use by cluster administrators and integrations like the cluster image registry - end users instead access images via the imagestreamtags or imagestreamimages resources. While image metadata is stored in the API, any integration that implements the container image registry API must provide its own storage for the raw manifest data, image config, and layer contents.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object



## .status.images[].image.dockerImageLayers

Description:: 
DockerImageLayers represents the layers in the image. May not be set if the image does not define that data or if the image represents a manifest list.
Type:: array

## .status.images[].image.dockerImageLayers[]

Description:: 
ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.
Type:: object
Required:: 
* name
* size
* mediaType



## .status.images[].image.dockerImageManifests

Description:: 
DockerImageManifests holds information about sub-manifests when the image represents a manifest list. When this field is present, no DockerImageLayers should be specified.
Type:: array

## .status.images[].image.dockerImageManifests[]

Description:: 
ImageManifest represents sub-manifests of a manifest list. The Digest field points to a regular Image object.
Type:: object
Required:: 
* digest
* mediaType
* manifestSize
* architecture
* os



## .status.images[].image.signatures

Description:: 
Signatures holds all signatures of the image.
Type:: array

## .status.images[].image.signatures[]

Description:: 
ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* type
* content



## .status.images[].image.signatures[].conditions

Description:: 
Conditions represent the latest available observations of a signature's current state.
Type:: array

## .status.images[].image.signatures[].conditions[]

Description:: 
SignatureCondition describes an image signature condition of particular kind at particular probe time.
Type:: object
Required:: 
* type
* status



## .status.images[].image.signatures[].issuedBy

Description:: 
SignatureIssuer holds information about an issuer of signing certificate or key.
Type:: object



## .status.images[].image.signatures[].issuedTo

Description:: 
SignatureSubject holds information about a person or entity who created the signature.
Type:: object
Required:: 
* publicKeyID



## .status.images[].manifests

Description:: 
Manifests holds sub-manifests metadata when importing a manifest list
Type:: array

## .status.images[].manifests[]

Description:: 
Image is an immutable representation of a container image and metadata at a point in time. Images are named by taking a hash of their contents (metadata and content) and any change in format, content, or metadata results in a new name. The images resource is primarily for use by cluster administrators and integrations like the cluster image registry - end users instead access images via the imagestreamtags or imagestreamimages resources. While image metadata is stored in the API, any integration that implements the container image registry API must provide its own storage for the raw manifest data, image config, and layer contents.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object



## .status.images[].manifests[].dockerImageLayers

Description:: 
DockerImageLayers represents the layers in the image. May not be set if the image does not define that data or if the image represents a manifest list.
Type:: array

## .status.images[].manifests[].dockerImageLayers[]

Description:: 
ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.
Type:: object
Required:: 
* name
* size
* mediaType



## .status.images[].manifests[].dockerImageManifests

Description:: 
DockerImageManifests holds information about sub-manifests when the image represents a manifest list. When this field is present, no DockerImageLayers should be specified.
Type:: array

## .status.images[].manifests[].dockerImageManifests[]

Description:: 
ImageManifest represents sub-manifests of a manifest list. The Digest field points to a regular Image object.
Type:: object
Required:: 
* digest
* mediaType
* manifestSize
* architecture
* os



## .status.images[].manifests[].signatures

Description:: 
Signatures holds all signatures of the image.
Type:: array

## .status.images[].manifests[].signatures[]

Description:: 
ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* type
* content



## .status.images[].manifests[].signatures[].conditions

Description:: 
Conditions represent the latest available observations of a signature's current state.
Type:: array

## .status.images[].manifests[].signatures[].conditions[]

Description:: 
SignatureCondition describes an image signature condition of particular kind at particular probe time.
Type:: object
Required:: 
* type
* status



## .status.images[].manifests[].signatures[].issuedBy

Description:: 
SignatureIssuer holds information about an issuer of signing certificate or key.
Type:: object



## .status.images[].manifests[].signatures[].issuedTo

Description:: 
SignatureSubject holds information about a person or entity who created the signature.
Type:: object
Required:: 
* publicKeyID



## .status.import

Description:: 
An ImageStream stores a mapping of tags to images, metadata overrides that are applied when images are tagged in a stream, and an optional reference to a container image repository on a registry. Users typically update the spec.tags field to point to external images which are imported from container registries using credentials in your namespace with the pull secret type, or to existing image stream tags and images which are immediately accessible for tagging or pulling. The history of images applied to a tag is visible in the status.tags field and any user who can view an image stream is allowed to tag that image into their own image streams. Access to pull images from the integrated registry is granted by having the "get imagestreams/layers" permission on a given image stream. Users may remove a tag by deleting the imagestreamtag resource, which causes both spec and status for that tag to be removed. Image stream history is retained until an administrator runs the prune operation, which removes references that are no longer in use. To preserve a historical image, ensure there is a tag in spec pointing to that image by its digest.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object



## .status.import.spec

Description:: 
ImageStreamSpec represents options for ImageStreams.
Type:: object



## .status.import.spec.lookupPolicy

Description:: 
ImageLookupPolicy describes how an image stream can be used to override the image references used by pods, builds, and other resources in a namespace.
Type:: object
Required:: 
* local



## .status.import.spec.tags

Description:: 
tags map arbitrary string values to specific image locators
Type:: array

## .status.import.spec.tags[]

Description:: 
TagReference specifies optional annotations for images using this tag and an optional reference to an ImageStreamTag, ImageStreamImage, or DockerImage this tag should track.
Type:: object
Required:: 
* name



## .status.import.spec.tags[].importPolicy

Description:: 
TagImportPolicy controls how images related to this tag will be imported.
Type:: object



## .status.import.spec.tags[].referencePolicy

Description:: 
TagReferencePolicy describes how pull-specs for images in this image stream tag are generated when image change triggers in deployment configs or builds are resolved. This allows the image stream author to control how images are accessed.
Type:: object
Required:: 
* type



## .status.import.status

Description:: 
ImageStreamStatus contains information about the state of this image stream.
Type:: object
Required:: 
* dockerImageRepository



## .status.import.status.tags

Description:: 
Tags are a historical record of images associated with each tag. The first entry in the TagEvent array is the currently tagged image.
Type:: array

## .status.import.status.tags[]

Description:: 
NamedTagEventList relates a tag to its image history.
Type:: object
Required:: 
* tag
* items



## .status.import.status.tags[].conditions

Description:: 
Conditions is an array of conditions that apply to the tag event list.
Type:: array

## .status.import.status.tags[].conditions[]

Description:: 
TagEventCondition contains condition information for a tag event.
Type:: object
Required:: 
* type
* status
* generation



## .status.import.status.tags[].items

Description:: 
Standard object's metadata.
Type:: array

## .status.import.status.tags[].items[]

Description:: 
TagEvent is used by ImageStreamStatus to keep a historical record of images associated with a tag.
Type:: object
Required:: 
* created
* dockerImageReference
* image
* generation



## .status.repository

Description:: 
RepositoryImportStatus describes the result of an image repository import
Type:: object



## .status.repository.images

Description:: 
Images is a list of images successfully retrieved by the import of the repository.
Type:: array

## .status.repository.images[]

Description:: 
ImageImportStatus describes the result of an image import.
Type:: object
Required:: 
* status



## .status.repository.images[].image

Description:: 
Image is an immutable representation of a container image and metadata at a point in time. Images are named by taking a hash of their contents (metadata and content) and any change in format, content, or metadata results in a new name. The images resource is primarily for use by cluster administrators and integrations like the cluster image registry - end users instead access images via the imagestreamtags or imagestreamimages resources. While image metadata is stored in the API, any integration that implements the container image registry API must provide its own storage for the raw manifest data, image config, and layer contents.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object



## .status.repository.images[].image.dockerImageLayers

Description:: 
DockerImageLayers represents the layers in the image. May not be set if the image does not define that data or if the image represents a manifest list.
Type:: array

## .status.repository.images[].image.dockerImageLayers[]

Description:: 
ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.
Type:: object
Required:: 
* name
* size
* mediaType



## .status.repository.images[].image.dockerImageManifests

Description:: 
DockerImageManifests holds information about sub-manifests when the image represents a manifest list. When this field is present, no DockerImageLayers should be specified.
Type:: array

## .status.repository.images[].image.dockerImageManifests[]

Description:: 
ImageManifest represents sub-manifests of a manifest list. The Digest field points to a regular Image object.
Type:: object
Required:: 
* digest
* mediaType
* manifestSize
* architecture
* os



## .status.repository.images[].image.signatures

Description:: 
Signatures holds all signatures of the image.
Type:: array

## .status.repository.images[].image.signatures[]

Description:: 
ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* type
* content



## .status.repository.images[].image.signatures[].conditions

Description:: 
Conditions represent the latest available observations of a signature's current state.
Type:: array

## .status.repository.images[].image.signatures[].conditions[]

Description:: 
SignatureCondition describes an image signature condition of particular kind at particular probe time.
Type:: object
Required:: 
* type
* status



## .status.repository.images[].image.signatures[].issuedBy

Description:: 
SignatureIssuer holds information about an issuer of signing certificate or key.
Type:: object



## .status.repository.images[].image.signatures[].issuedTo

Description:: 
SignatureSubject holds information about a person or entity who created the signature.
Type:: object
Required:: 
* publicKeyID



## .status.repository.images[].manifests

Description:: 
Manifests holds sub-manifests metadata when importing a manifest list
Type:: array

## .status.repository.images[].manifests[]

Description:: 
Image is an immutable representation of a container image and metadata at a point in time. Images are named by taking a hash of their contents (metadata and content) and any change in format, content, or metadata results in a new name. The images resource is primarily for use by cluster administrators and integrations like the cluster image registry - end users instead access images via the imagestreamtags or imagestreamimages resources. While image metadata is stored in the API, any integration that implements the container image registry API must provide its own storage for the raw manifest data, image config, and layer contents.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object



## .status.repository.images[].manifests[].dockerImageLayers

Description:: 
DockerImageLayers represents the layers in the image. May not be set if the image does not define that data or if the image represents a manifest list.
Type:: array

## .status.repository.images[].manifests[].dockerImageLayers[]

Description:: 
ImageLayer represents a single layer of the image. Some images may have multiple layers. Some may have none.
Type:: object
Required:: 
* name
* size
* mediaType



## .status.repository.images[].manifests[].dockerImageManifests

Description:: 
DockerImageManifests holds information about sub-manifests when the image represents a manifest list. When this field is present, no DockerImageLayers should be specified.
Type:: array

## .status.repository.images[].manifests[].dockerImageManifests[]

Description:: 
ImageManifest represents sub-manifests of a manifest list. The Digest field points to a regular Image object.
Type:: object
Required:: 
* digest
* mediaType
* manifestSize
* architecture
* os



## .status.repository.images[].manifests[].signatures

Description:: 
Signatures holds all signatures of the image.
Type:: array

## .status.repository.images[].manifests[].signatures[]

Description:: 
ImageSignature holds a signature of an image. It allows to verify image identity and possibly other claims as long as the signature is trusted. Based on this information it is possible to restrict runnable images to those matching cluster-wide policy. Mandatory fields should be parsed by clients doing image verification. The others are parsed from signature's content by the server. They serve just an informative purpose.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* type
* content



## .status.repository.images[].manifests[].signatures[].conditions

Description:: 
Conditions represent the latest available observations of a signature's current state.
Type:: array

## .status.repository.images[].manifests[].signatures[].conditions[]

Description:: 
SignatureCondition describes an image signature condition of particular kind at particular probe time.
Type:: object
Required:: 
* type
* status



## .status.repository.images[].manifests[].signatures[].issuedBy

Description:: 
SignatureIssuer holds information about an issuer of signing certificate or key.
Type:: object



## .status.repository.images[].manifests[].signatures[].issuedTo

Description:: 
SignatureSubject holds information about a person or entity who created the signature.
Type:: object
Required:: 
* publicKeyID



# API endpoints

The following API endpoints are available:

* /apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamimports
* POST: create an ImageStreamImport

## /apis/image.openshift.io/v1/namespaces/{namespace}/imagestreamimports



HTTP method:: POST
Description:: create an ImageStreamImport



