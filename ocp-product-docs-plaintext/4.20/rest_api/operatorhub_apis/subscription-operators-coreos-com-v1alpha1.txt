# Subscription [operators.coreos.com/v1alpha1]


Description:: 
Subscription keeps operators up to date by tracking changes to Catalogs.
Type:: object
Required:: 
* metadata
* spec

# Specification



## .spec

Description:: 
SubscriptionSpec defines an Application that can be installed
Type:: object
Required:: 
* name
* source
* sourceNamespace



## .spec.config

Description:: 
SubscriptionConfig contains configuration specified for a subscription.
Type:: object



## .spec.config.affinity

Description:: 
If specified, overrides the pod's scheduling constraints.
nil sub-attributes will not override the original values in the pod.spec for those sub-attributes.
Use empty object ({}) to erase original sub-attribute values.
Type:: object



## .spec.config.affinity.nodeAffinity

Description:: 
Describes node affinity scheduling rules for the pod.
Type:: object



## .spec.config.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution

Description:: 
The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node matches the corresponding matchExpressions; the
node(s) with the highest sum are the most preferred.
Type:: array

## .spec.config.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[]

Description:: 
An empty preferred scheduling term matches all objects with implicit weight 0
(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
Type:: object
Required:: 
* preference
* weight



## .spec.config.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference

Description:: 
A node selector term, associated with the corresponding weight.
Type:: object



## .spec.config.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchExpressions

Description:: 
A list of node selector requirements by node's labels.
Type:: array

## .spec.config.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchExpressions[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchFields

Description:: 
A list of node selector requirements by node's fields.
Type:: array

## .spec.config.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchFields[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution

Description:: 
If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to an update), the system
may or may not try to eventually evict the pod from its node.
Type:: object
Required:: 
* nodeSelectorTerms



## .spec.config.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms

Description:: 
Required. A list of node selector terms. The terms are ORed.
Type:: array

## .spec.config.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[]

Description:: 
A null or empty node selector term matches no objects. The requirements of
them are ANDed.
The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
Type:: object



## .spec.config.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchExpressions

Description:: 
A list of node selector requirements by node's labels.
Type:: array

## .spec.config.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchExpressions[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchFields

Description:: 
A list of node selector requirements by node's fields.
Type:: array

## .spec.config.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchFields[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.affinity.podAffinity

Description:: 
Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
Type:: object



## .spec.config.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution

Description:: 
The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
Type:: array

## .spec.config.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[]

Description:: 
The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
Type:: object
Required:: 
* podAffinityTerm
* weight



## .spec.config.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm

Description:: 
Required. A pod affinity term, associated with the corresponding weight.
Type:: object
Required:: 
* topologyKey



## .spec.config.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector

Description:: 
A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
Type:: object



## .spec.config.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.config.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector

Description:: 
A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
Type:: object



## .spec.config.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.config.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution

Description:: 
If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
Type:: array

## .spec.config.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[]

Description:: 
Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
Type:: object
Required:: 
* topologyKey



## .spec.config.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector

Description:: 
A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
Type:: object



## .spec.config.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.config.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector

Description:: 
A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
Type:: object



## .spec.config.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.config.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.affinity.podAntiAffinity

Description:: 
Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
Type:: object



## .spec.config.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution

Description:: 
The scheduler will prefer to schedule pods to nodes that satisfy
the anti-affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling anti-affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
Type:: array

## .spec.config.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[]

Description:: 
The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
Type:: object
Required:: 
* podAffinityTerm
* weight



## .spec.config.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm

Description:: 
Required. A pod affinity term, associated with the corresponding weight.
Type:: object
Required:: 
* topologyKey



## .spec.config.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector

Description:: 
A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
Type:: object



## .spec.config.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.config.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector

Description:: 
A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
Type:: object



## .spec.config.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.config.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution

Description:: 
If the anti-affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the anti-affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
Type:: array

## .spec.config.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[]

Description:: 
Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
Type:: object
Required:: 
* topologyKey



## .spec.config.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector

Description:: 
A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
Type:: object



## .spec.config.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.config.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector

Description:: 
A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
Type:: object



## .spec.config.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.config.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.env

Description:: 
Env is a list of environment variables to set in the container.
Cannot be updated.
Type:: array

## .spec.config.env[]

Description:: 
EnvVar represents an environment variable present in a Container.
Type:: object
Required:: 
* name



## .spec.config.env[].valueFrom

Description:: 
Source for the environment variable's value. Cannot be used if value is not empty.
Type:: object



## .spec.config.env[].valueFrom.configMapKeyRef

Description:: 
Selects a key of a ConfigMap.
Type:: object
Required:: 
* key



## .spec.config.env[].valueFrom.fieldRef

Description:: 
Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels['<KEY>'], metadata.annotations['<KEY>'],
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
Type:: object
Required:: 
* fieldPath



## .spec.config.env[].valueFrom.resourceFieldRef

Description:: 
Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
Type:: object
Required:: 
* resource



## .spec.config.env[].valueFrom.secretKeyRef

Description:: 
Selects a key of a secret in the pod's namespace
Type:: object
Required:: 
* key



## .spec.config.envFrom

Description:: 
EnvFrom is a list of sources to populate environment variables in the container.
The keys defined within a source must be a C_IDENTIFIER. All invalid keys
will be reported as an event when the container is starting. When a key exists in multiple
sources, the value associated with the last source will take precedence.
Values defined by an Env with a duplicate key will take precedence.
Immutable.
Type:: array

## .spec.config.envFrom[]

Description:: 
EnvFromSource represents the source of a set of ConfigMaps or Secrets
Type:: object



## .spec.config.envFrom[].configMapRef

Description:: 
The ConfigMap to select from
Type:: object



## .spec.config.envFrom[].secretRef

Description:: 
The Secret to select from
Type:: object



## .spec.config.resources

Description:: 
Resources represents compute resources required by this container.
Immutable.
More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
Type:: object



## .spec.config.resources.claims

Description:: 
Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.
This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.
This field is immutable. It can only be set for containers.
Type:: array

## .spec.config.resources.claims[]

Description:: 
ResourceClaim references one entry in PodSpec.ResourceClaims.
Type:: object
Required:: 
* name



## .spec.config.selector

Description:: 
Selector is the label selector for pods to be configured.
Existing ReplicaSets whose pods are
selected by this will be the ones affected by this deployment.
It must match the pod template's labels.
Type:: object



## .spec.config.selector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.config.selector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.tolerations

Description:: 
Tolerations are the pod's tolerations.
Type:: array

## .spec.config.tolerations[]

Description:: 
The pod this Toleration is attached to tolerates any taint that matches
the triple <key,value,effect> using the matching operator <operator>.
Type:: object



## .spec.config.volumeMounts

Description:: 
List of VolumeMounts to set in the container.
Type:: array

## .spec.config.volumeMounts[]

Description:: 
VolumeMount describes a mounting of a Volume within a container.
Type:: object
Required:: 
* mountPath
* name



## .spec.config.volumes

Description:: 
List of Volumes to set in the podSpec.
Type:: array

## .spec.config.volumes[]

Description:: 
Volume represents a named volume in a pod that may be accessed by any container in the pod.
Type:: object
Required:: 
* name



## .spec.config.volumes[].awsElasticBlockStore

Description:: 
awsElasticBlockStore represents an AWS Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
Type:: object
Required:: 
* volumeID



## .spec.config.volumes[].azureDisk

Description:: 
azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
are redirected to the disk.csi.azure.com CSI driver.
Type:: object
Required:: 
* diskName
* diskURI



## .spec.config.volumes[].azureFile

Description:: 
azureFile represents an Azure File Service mount on the host and bind mount to the pod.
Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
are redirected to the file.csi.azure.com CSI driver.
Type:: object
Required:: 
* secretName
* shareName



## .spec.config.volumes[].cephfs

Description:: 
cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
Type:: object
Required:: 
* monitors



## .spec.config.volumes[].cephfs.secretRef

Description:: 
secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
Type:: object



## .spec.config.volumes[].cinder

Description:: 
cinder represents a cinder volume attached and mounted on kubelets host machine.
Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
are redirected to the cinder.csi.openstack.org CSI driver.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
Type:: object
Required:: 
* volumeID



## .spec.config.volumes[].cinder.secretRef

Description:: 
secretRef is optional: points to a secret object containing parameters used to connect
to OpenStack.
Type:: object



## .spec.config.volumes[].configMap

Description:: 
configMap represents a configMap that should populate this volume
Type:: object



## .spec.config.volumes[].configMap.items

Description:: 
items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
Type:: array

## .spec.config.volumes[].configMap.items[]

Description:: 
Maps a string key to a path within a volume.
Type:: object
Required:: 
* key
* path



## .spec.config.volumes[].csi

Description:: 
csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
Type:: object
Required:: 
* driver



## .spec.config.volumes[].csi.nodePublishSecretRef

Description:: 
nodePublishSecretRef is a reference to the secret object containing
sensitive information to pass to the CSI driver to complete the CSI
NodePublishVolume and NodeUnpublishVolume calls.
This field is optional, and  may be empty if no secret is required. If the
secret object contains more than one secret, all secret references are passed.
Type:: object



## .spec.config.volumes[].downwardAPI

Description:: 
downwardAPI represents downward API about the pod that should populate this volume
Type:: object



## .spec.config.volumes[].downwardAPI.items

Description:: 
Items is a list of downward API volume file
Type:: array

## .spec.config.volumes[].downwardAPI.items[]

Description:: 
DownwardAPIVolumeFile represents information to create the file containing the pod field
Type:: object
Required:: 
* path



## .spec.config.volumes[].downwardAPI.items[].fieldRef

Description:: 
Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
Type:: object
Required:: 
* fieldPath



## .spec.config.volumes[].downwardAPI.items[].resourceFieldRef

Description:: 
Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
Type:: object
Required:: 
* resource



## .spec.config.volumes[].emptyDir

Description:: 
emptyDir represents a temporary directory that shares a pod's lifetime.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
Type:: object



## .spec.config.volumes[].ephemeral

Description:: 
ephemeral represents a volume that is handled by a cluster storage driver.
The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
and deleted when the pod is removed.
Use this if:
a) the volume is only needed while the pod runs,
b) features of normal volumes like restoring from snapshot or capacity
   tracking are needed,
c) the storage driver is specified through a storage class, and
d) the storage driver supports dynamic volume provisioning through
   a PersistentVolumeClaim (see EphemeralVolumeSource for more
   information on the connection between this volume type
   and PersistentVolumeClaim).
Use PersistentVolumeClaim or one of the vendor-specific
APIs for volumes that persist for longer than the lifecycle
of an individual pod.
Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
be used that way - see the documentation of the driver for
more information.
A pod can use both types of ephemeral volumes and
persistent volumes at the same time.
Type:: object



## .spec.config.volumes[].ephemeral.volumeClaimTemplate

Description:: 
Will be used to create a stand-alone PVC to provision the volume.
The pod in which this EphemeralVolumeSource is embedded will be the
owner of the PVC, i.e. the PVC will be deleted together with the
pod.  The name of the PVC will be <pod name>-<volume name> where
<volume name> is the name from the PodSpec.Volumes array
entry. Pod validation will reject the pod if the concatenated name
is not valid for a PVC (for example, too long).
An existing PVC with that name that is not owned by the pod
will not be used for the pod to avoid using an unrelated
volume by mistake. Starting the pod is then blocked until
the unrelated PVC is removed. If such a pre-created PVC is
meant to be used by the pod, the PVC has to updated with an
owner reference to the pod once the pod exists. Normally
this should not be necessary, but it may be useful when
manually reconstructing a broken cluster.
This field is read-only and no changes will be made by Kubernetes
to the PVC after it has been created.
Required, must not be nil.
Type:: object
Required:: 
* spec



## .spec.config.volumes[].ephemeral.volumeClaimTemplate.metadata

Description:: 
May contain labels and annotations that will be copied into the PVC
when creating it. No other fields are allowed and will be rejected during
validation.
Type:: object

## .spec.config.volumes[].ephemeral.volumeClaimTemplate.spec

Description:: 
The specification for the PersistentVolumeClaim. The entire content is
copied unchanged into the PVC that gets created from this
template. The same fields as in a PersistentVolumeClaim
are also valid here.
Type:: object



## .spec.config.volumes[].ephemeral.volumeClaimTemplate.spec.dataSource

Description:: 
dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
Type:: object
Required:: 
* kind
* name



## .spec.config.volumes[].ephemeral.volumeClaimTemplate.spec.dataSourceRef

Description:: 
dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
Type:: object
Required:: 
* kind
* name



## .spec.config.volumes[].ephemeral.volumeClaimTemplate.spec.resources

Description:: 
resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
Type:: object



## .spec.config.volumes[].ephemeral.volumeClaimTemplate.spec.selector

Description:: 
selector is a label query over volumes to consider for binding.
Type:: object



## .spec.config.volumes[].ephemeral.volumeClaimTemplate.spec.selector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.config.volumes[].ephemeral.volumeClaimTemplate.spec.selector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.volumes[].fc

Description:: 
fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
Type:: object



## .spec.config.volumes[].flexVolume

Description:: 
flexVolume represents a generic volume resource that is
provisioned/attached using an exec based plugin.
Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
Type:: object
Required:: 
* driver



## .spec.config.volumes[].flexVolume.secretRef

Description:: 
secretRef is Optional: secretRef is reference to the secret object containing
sensitive information to pass to the plugin scripts. This may be
empty if no secret object is specified. If the secret object
contains more than one secret, all secrets are passed to the plugin
scripts.
Type:: object



## .spec.config.volumes[].flocker

Description:: 
flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
Type:: object



## .spec.config.volumes[].gcePersistentDisk

Description:: 
gcePersistentDisk represents a GCE Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
Type:: object
Required:: 
* pdName



## .spec.config.volumes[].gitRepo

Description:: 
gitRepo represents a git repository at a particular revision.
Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
into the Pod's container.
Type:: object
Required:: 
* repository



## .spec.config.volumes[].glusterfs

Description:: 
glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
More info: https://examples.k8s.io/volumes/glusterfs/README.md
Type:: object
Required:: 
* endpoints
* path



## .spec.config.volumes[].hostPath

Description:: 
hostPath represents a pre-existing file or directory on the host
machine that is directly exposed to the container. This is generally
used for system agents or other privileged things that are allowed
to see the host machine. Most containers will NOT need this.
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
Type:: object
Required:: 
* path



## .spec.config.volumes[].image

Description:: 
image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
The volume is resolved at pod startup depending on which PullPolicy value is provided:
* Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
* Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
* IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
The OCI object gets mounted in a single directory (spec.containers[].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
The volume will be mounted read-only (ro) and non-executable files (noexec).
Sub path mounts for containers are not supported (spec.containers[].volumeMounts.subpath) before 1.33.
The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
Type:: object



## .spec.config.volumes[].iscsi

Description:: 
iscsi represents an ISCSI Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://examples.k8s.io/volumes/iscsi/README.md
Type:: object
Required:: 
* iqn
* lun
* targetPortal



## .spec.config.volumes[].iscsi.secretRef

Description:: 
secretRef is the CHAP Secret for iSCSI target and initiator authentication
Type:: object



## .spec.config.volumes[].nfs

Description:: 
nfs represents an NFS mount on the host that shares a pod's lifetime
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
Type:: object
Required:: 
* path
* server



## .spec.config.volumes[].persistentVolumeClaim

Description:: 
persistentVolumeClaimVolumeSource represents a reference to a
PersistentVolumeClaim in the same namespace.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
Type:: object
Required:: 
* claimName



## .spec.config.volumes[].photonPersistentDisk

Description:: 
photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
Type:: object
Required:: 
* pdID



## .spec.config.volumes[].portworxVolume

Description:: 
portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
is on.
Type:: object
Required:: 
* volumeID



## .spec.config.volumes[].projected

Description:: 
projected items for all in one resources secrets, configmaps, and downward API
Type:: object



## .spec.config.volumes[].projected.sources

Description:: 
sources is the list of volume projections. Each entry in this list
handles one source.
Type:: array

## .spec.config.volumes[].projected.sources[]

Description:: 
Projection that may be projected along with other supported volume types.
Exactly one of these fields must be set.
Type:: object



## .spec.config.volumes[].projected.sources[].clusterTrustBundle

Description:: 
ClusterTrustBundle allows a pod to access the .spec.trustBundle field
of ClusterTrustBundle objects in an auto-updating file.
Alpha, gated by the ClusterTrustBundleProjection feature gate.
ClusterTrustBundle objects can either be selected by name, or by the
combination of signer name and a label selector.
Kubelet performs aggressive normalization of the PEM contents written
into the pod filesystem.  Esoteric PEM features such as inter-block
comments and block headers are stripped.  Certificates are deduplicated.
The ordering of certificates within the file is arbitrary, and Kubelet
may change the order over time.
Type:: object
Required:: 
* path



## .spec.config.volumes[].projected.sources[].clusterTrustBundle.labelSelector

Description:: 
Select all ClusterTrustBundles that match this label selector.  Only has
effect if signerName is set.  Mutually-exclusive with name.  If unset,
interpreted as "match nothing".  If set but empty, interpreted as "match
everything".
Type:: object



## .spec.config.volumes[].projected.sources[].clusterTrustBundle.labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.config.volumes[].projected.sources[].clusterTrustBundle.labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.config.volumes[].projected.sources[].configMap

Description:: 
configMap information about the configMap data to project
Type:: object



## .spec.config.volumes[].projected.sources[].configMap.items

Description:: 
items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
Type:: array

## .spec.config.volumes[].projected.sources[].configMap.items[]

Description:: 
Maps a string key to a path within a volume.
Type:: object
Required:: 
* key
* path



## .spec.config.volumes[].projected.sources[].downwardAPI

Description:: 
downwardAPI information about the downwardAPI data to project
Type:: object



## .spec.config.volumes[].projected.sources[].downwardAPI.items

Description:: 
Items is a list of DownwardAPIVolume file
Type:: array

## .spec.config.volumes[].projected.sources[].downwardAPI.items[]

Description:: 
DownwardAPIVolumeFile represents information to create the file containing the pod field
Type:: object
Required:: 
* path



## .spec.config.volumes[].projected.sources[].downwardAPI.items[].fieldRef

Description:: 
Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
Type:: object
Required:: 
* fieldPath



## .spec.config.volumes[].projected.sources[].downwardAPI.items[].resourceFieldRef

Description:: 
Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
Type:: object
Required:: 
* resource



## .spec.config.volumes[].projected.sources[].secret

Description:: 
secret information about the secret data to project
Type:: object



## .spec.config.volumes[].projected.sources[].secret.items

Description:: 
items if unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
Type:: array

## .spec.config.volumes[].projected.sources[].secret.items[]

Description:: 
Maps a string key to a path within a volume.
Type:: object
Required:: 
* key
* path



## .spec.config.volumes[].projected.sources[].serviceAccountToken

Description:: 
serviceAccountToken is information about the serviceAccountToken data to project
Type:: object
Required:: 
* path



## .spec.config.volumes[].quobyte

Description:: 
quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
Type:: object
Required:: 
* registry
* volume



## .spec.config.volumes[].rbd

Description:: 
rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
More info: https://examples.k8s.io/volumes/rbd/README.md
Type:: object
Required:: 
* image
* monitors



## .spec.config.volumes[].rbd.secretRef

Description:: 
secretRef is name of the authentication secret for RBDUser. If provided
overrides keyring.
Default is nil.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
Type:: object



## .spec.config.volumes[].scaleIO

Description:: 
scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
Type:: object
Required:: 
* gateway
* secretRef
* system



## .spec.config.volumes[].scaleIO.secretRef

Description:: 
secretRef references to the secret for ScaleIO user and other
sensitive information. If this is not provided, Login operation will fail.
Type:: object



## .spec.config.volumes[].secret

Description:: 
secret represents a secret that should populate this volume.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
Type:: object



## .spec.config.volumes[].secret.items

Description:: 
items If unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
Type:: array

## .spec.config.volumes[].secret.items[]

Description:: 
Maps a string key to a path within a volume.
Type:: object
Required:: 
* key
* path



## .spec.config.volumes[].storageos

Description:: 
storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
Type:: object



## .spec.config.volumes[].storageos.secretRef

Description:: 
secretRef specifies the secret to use for obtaining the StorageOS API
credentials.  If not specified, default values will be attempted.
Type:: object



## .spec.config.volumes[].vsphereVolume

Description:: 
vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
are redirected to the csi.vsphere.vmware.com CSI driver.
Type:: object
Required:: 
* volumePath



## .status

Description:: 

Type:: object
Required:: 
* lastUpdated



## .status.catalogHealth

Description:: 
CatalogHealth contains the Subscription's view of its relevant CatalogSources' status.
It is used to determine SubscriptionStatusConditions related to CatalogSources.
Type:: array

## .status.catalogHealth[]

Description:: 
SubscriptionCatalogHealth describes the health of a CatalogSource the Subscription knows about.
Type:: object
Required:: 
* catalogSourceRef
* healthy
* lastUpdated



## .status.catalogHealth[].catalogSourceRef

Description:: 
CatalogSourceRef is a reference to a CatalogSource.
Type:: object



## .status.conditions

Description:: 
Conditions is a list of the latest available observations about a Subscription's current state.
Type:: array

## .status.conditions[]

Description:: 
SubscriptionCondition represents the latest available observations of a Subscription's state.
Type:: object
Required:: 
* status
* type



## .status.installPlanRef

Description:: 
InstallPlanRef is a reference to the latest InstallPlan that contains the Subscription's current CSV.
Type:: object



## .status.installplan

Description:: 
Install is a reference to the latest InstallPlan generated for the Subscription.
DEPRECATED: InstallPlanRef
Type:: object
Required:: 
* apiVersion
* kind
* name
* uuid



# API endpoints

The following API endpoints are available:

* /apis/operators.coreos.com/v1alpha1/subscriptions
* GET: list objects of kind Subscription
* /apis/operators.coreos.com/v1alpha1/namespaces/{namespace}/subscriptions
* DELETE: delete collection of Subscription
* GET: list objects of kind Subscription
* POST: create a Subscription
* /apis/operators.coreos.com/v1alpha1/namespaces/{namespace}/subscriptions/{name}
* DELETE: delete a Subscription
* GET: read the specified Subscription
* PATCH: partially update the specified Subscription
* PUT: replace the specified Subscription
* /apis/operators.coreos.com/v1alpha1/namespaces/{namespace}/subscriptions/{name}/status
* GET: read status of the specified Subscription
* PATCH: partially update status of the specified Subscription
* PUT: replace status of the specified Subscription

## /apis/operators.coreos.com/v1alpha1/subscriptions

HTTP method:: GET
Description:: list objects of kind Subscription



## /apis/operators.coreos.com/v1alpha1/namespaces/{namespace}/subscriptions

HTTP method:: DELETE
Description:: delete collection of Subscription



HTTP method:: GET
Description:: list objects of kind Subscription



HTTP method:: POST
Description:: create a Subscription







## /apis/operators.coreos.com/v1alpha1/namespaces/{namespace}/subscriptions/{name}



HTTP method:: DELETE
Description:: delete a Subscription





HTTP method:: GET
Description:: read the specified Subscription



HTTP method:: PATCH
Description:: partially update the specified Subscription





HTTP method:: PUT
Description:: replace the specified Subscription







## /apis/operators.coreos.com/v1alpha1/namespaces/{namespace}/subscriptions/{name}/status



HTTP method:: GET
Description:: read status of the specified Subscription



HTTP method:: PATCH
Description:: partially update status of the specified Subscription





HTTP method:: PUT
Description:: replace status of the specified Subscription





