# AlertmanagerConfig [monitoring.coreos.com/v1beta1]


Description:: 
The AlertmanagerConfig custom resource definition (CRD) defines how Alertmanager objects process Prometheus alerts. It allows to specify alert grouping and routing, notification receivers and inhibition rules.
Alertmanager objects select AlertmanagerConfig objects using label and namespace selectors.
Type:: object
Required:: 
* spec

# Specification



## .spec

Description:: 
AlertmanagerConfigSpec is a specification of the desired behavior of the Alertmanager configuration.
By definition, the Alertmanager configuration only applies to alerts for which
the namespace label is equal to the namespace of the AlertmanagerConfig resource.
Type:: object



## .spec.inhibitRules

Description:: 
List of inhibition rules. The rules will only apply to alerts matching
the resource's namespace.
Type:: array

## .spec.inhibitRules[]

Description:: 
InhibitRule defines an inhibition rule that allows to mute alerts when other
alerts are already firing.
See https://prometheus.io/docs/alerting/latest/configuration/#inhibit_rule
Type:: object



## .spec.inhibitRules[].sourceMatch

Description:: 
Matchers for which one or more alerts have to exist for the inhibition
to take effect. The operator enforces that the alert matches the
resource's namespace.
Type:: array

## .spec.inhibitRules[].sourceMatch[]

Description:: 
Matcher defines how to match on alert's labels.
Type:: object
Required:: 
* name



## .spec.inhibitRules[].targetMatch

Description:: 
Matchers that have to be fulfilled in the alerts to be muted. The
operator enforces that the alert matches the resource's namespace.
Type:: array

## .spec.inhibitRules[].targetMatch[]

Description:: 
Matcher defines how to match on alert's labels.
Type:: object
Required:: 
* name



## .spec.receivers

Description:: 
List of receivers.
Type:: array

## .spec.receivers[]

Description:: 
Receiver defines one or more notification integrations.
Type:: object
Required:: 
* name



## .spec.receivers[].discordConfigs

Description:: 
List of Slack configurations.
Type:: array

## .spec.receivers[].discordConfigs[]

Description:: 
DiscordConfig configures notifications via Discord.
See https://prometheus.io/docs/alerting/latest/configuration/#discord_config
Type:: object
Required:: 
* apiURL



## .spec.receivers[].discordConfigs[].apiURL

Description:: 
The secret's key that contains the Discord webhook URL.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.receivers[].discordConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].discordConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].discordConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].discordConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].discordConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].discordConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].discordConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].discordConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].discordConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].discordConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].discordConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].discordConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].emailConfigs

Description:: 
List of Email configurations.
Type:: array

## .spec.receivers[].emailConfigs[]

Description:: 
EmailConfig configures notifications via Email.
Type:: object



## .spec.receivers[].emailConfigs[].authPassword

Description:: 
The secret's key that contains the password to use for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].emailConfigs[].authSecret

Description:: 
The secret's key that contains the CRAM-MD5 secret.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].emailConfigs[].headers

Description:: 
Further headers email header key/value pairs. Overrides any headers
previously set by the notification implementation.
Type:: array

## .spec.receivers[].emailConfigs[].headers[]

Description:: 
KeyValue defines a (key, value) tuple.
Type:: object
Required:: 
* key
* value



## .spec.receivers[].emailConfigs[].tlsConfig

Description:: 
TLS configuration
Type:: object



## .spec.receivers[].emailConfigs[].tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].emailConfigs[].tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].emailConfigs[].tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].emailConfigs[].tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].emailConfigs[].tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].emailConfigs[].tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].emailConfigs[].tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs

Description:: 
List of MSTeams configurations.
It requires Alertmanager >= 0.26.0.
Type:: array

## .spec.receivers[].msteamsConfigs[]

Description:: 
MSTeamsConfig configures notifications via Microsoft Teams.
It requires Alertmanager >= 0.26.0.
Type:: object
Required:: 
* webhookUrl



## .spec.receivers[].msteamsConfigs[].httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.receivers[].msteamsConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].msteamsConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].msteamsConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].msteamsConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].msteamsConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].msteamsConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].msteamsConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].msteamsConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsConfigs[].webhookUrl

Description:: 
MSTeams webhook URL.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs

Description:: 
List of MSTeamsV2 configurations.
It requires Alertmanager >= 0.28.0.
Type:: array

## .spec.receivers[].msteamsv2Configs[]

Description:: 
MSTeamsV2Config configures notifications via Microsoft Teams using the new message format with adaptive cards as required by flows
See https://prometheus.io/docs/alerting/latest/configuration/#msteamsv2_config
It requires Alertmanager >= 0.28.0.
Type:: object



## .spec.receivers[].msteamsv2Configs[].httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.receivers[].msteamsv2Configs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].msteamsv2Configs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].msteamsv2Configs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].msteamsv2Configs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].msteamsv2Configs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].msteamsv2Configs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].msteamsv2Configs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].msteamsv2Configs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].msteamsv2Configs[].webhookURL

Description:: 
MSTeams incoming webhook URL.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs

Description:: 
List of OpsGenie configurations.
Type:: array

## .spec.receivers[].opsgenieConfigs[]

Description:: 
OpsGenieConfig configures notifications via OpsGenie.
See https://prometheus.io/docs/alerting/latest/configuration/#opsgenie_config
Type:: object



## .spec.receivers[].opsgenieConfigs[].apiKey

Description:: 
The secret's key that contains the OpsGenie API key.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].opsgenieConfigs[].details

Description:: 
A set of arbitrary key/value pairs that provide further detail about the incident.
Type:: array

## .spec.receivers[].opsgenieConfigs[].details[]

Description:: 
KeyValue defines a (key, value) tuple.
Type:: object
Required:: 
* key
* value



## .spec.receivers[].opsgenieConfigs[].httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.receivers[].opsgenieConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].opsgenieConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].opsgenieConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].opsgenieConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].opsgenieConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].opsgenieConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].opsgenieConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].opsgenieConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].opsgenieConfigs[].responders

Description:: 
List of responders responsible for notifications.
Type:: array

## .spec.receivers[].opsgenieConfigs[].responders[]

Description:: 
OpsGenieConfigResponder defines a responder to an incident.
One of id, name or username has to be defined.
Type:: object
Required:: 
* type



## .spec.receivers[].pagerdutyConfigs

Description:: 
List of PagerDuty configurations.
Type:: array

## .spec.receivers[].pagerdutyConfigs[]

Description:: 
PagerDutyConfig configures notifications via PagerDuty.
See https://prometheus.io/docs/alerting/latest/configuration/#pagerduty_config
Type:: object



## .spec.receivers[].pagerdutyConfigs[].details

Description:: 
Arbitrary key/value pairs that provide further detail about the incident.
Type:: array

## .spec.receivers[].pagerdutyConfigs[].details[]

Description:: 
KeyValue defines a (key, value) tuple.
Type:: object
Required:: 
* key
* value



## .spec.receivers[].pagerdutyConfigs[].httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.receivers[].pagerdutyConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].pagerdutyConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].pagerdutyConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].pagerdutyConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].pagerdutyConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].pagerdutyConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].pagerdutyConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].pagerdutyConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pagerdutyConfigs[].pagerDutyImageConfigs

Description:: 
A list of image details to attach that provide further detail about an incident.
Type:: array

## .spec.receivers[].pagerdutyConfigs[].pagerDutyImageConfigs[]

Description:: 
PagerDutyImageConfig attaches images to an incident
Type:: object



## .spec.receivers[].pagerdutyConfigs[].pagerDutyLinkConfigs

Description:: 
A list of link details to attach that provide further detail about an incident.
Type:: array

## .spec.receivers[].pagerdutyConfigs[].pagerDutyLinkConfigs[]

Description:: 
PagerDutyLinkConfig attaches text links to an incident
Type:: object



## .spec.receivers[].pagerdutyConfigs[].routingKey

Description:: 
The secret's key that contains the PagerDuty integration key (when using
Events API v2). Either this field or serviceKey needs to be defined.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].pagerdutyConfigs[].serviceKey

Description:: 
The secret's key that contains the PagerDuty service key (when using
integration type "Prometheus"). Either this field or routingKey needs to
be defined.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].pushoverConfigs

Description:: 
List of Pushover configurations.
Type:: array

## .spec.receivers[].pushoverConfigs[]

Description:: 
PushoverConfig configures notifications via Pushover.
See https://prometheus.io/docs/alerting/latest/configuration/#pushover_config
Type:: object



## .spec.receivers[].pushoverConfigs[].httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.receivers[].pushoverConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].pushoverConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].pushoverConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].pushoverConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].pushoverConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].pushoverConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].pushoverConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].pushoverConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].pushoverConfigs[].token

Description:: 
The secret's key that contains the registered application's API token, see https://pushover.net/apps.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Either token or tokenFile is required.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].pushoverConfigs[].userKey

Description:: 
The secret's key that contains the recipient user's user key.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Either userKey or userKeyFile is required.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].rocketchatConfigs

Description:: 
List of RocketChat configurations.
It requires Alertmanager >= 0.28.0.
Type:: array

## .spec.receivers[].rocketchatConfigs[]

Description:: 
RocketChatConfig configures notifications via RocketChat.
It requires Alertmanager >= 0.28.0.
Type:: object
Required:: 
* token
* tokenID



## .spec.receivers[].rocketchatConfigs[].actions

Description:: 
Actions to include in the message.
Type:: array

## .spec.receivers[].rocketchatConfigs[].actions[]

Description:: 
RocketChatActionConfig defines actions for RocketChat messages.
Type:: object



## .spec.receivers[].rocketchatConfigs[].fields

Description:: 
Additional fields for the message.
Type:: array

## .spec.receivers[].rocketchatConfigs[].fields[]

Description:: 
RocketChatFieldConfig defines a field for RocketChat messages.
Type:: object



## .spec.receivers[].rocketchatConfigs[].httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.receivers[].rocketchatConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].rocketchatConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].rocketchatConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].rocketchatConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].rocketchatConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].rocketchatConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].rocketchatConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].rocketchatConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].token

Description:: 
The sender token.
Type:: object
Required:: 
* key



## .spec.receivers[].rocketchatConfigs[].tokenID

Description:: 
The sender token ID.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs

Description:: 
List of Slack configurations.
Type:: array

## .spec.receivers[].slackConfigs[]

Description:: 
SlackConfig configures notifications via Slack.
See https://prometheus.io/docs/alerting/latest/configuration/#slack_config
Type:: object



## .spec.receivers[].slackConfigs[].actions

Description:: 
A list of Slack actions that are sent with each notification.
Type:: array

## .spec.receivers[].slackConfigs[].actions[]

Description:: 
SlackAction configures a single Slack action that is sent with each
notification.
See https://api.slack.com/docs/message-attachments#action_fields and
https://api.slack.com/docs/message-buttons for more information.
Type:: object
Required:: 
* text
* type



## .spec.receivers[].slackConfigs[].actions[].confirm

Description:: 
SlackConfirmationField protect users from destructive actions or
particularly distinguished decisions by asking them to confirm their button
click one more time.
See https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields
for more information.
Type:: object
Required:: 
* text



## .spec.receivers[].slackConfigs[].apiURL

Description:: 
The secret's key that contains the Slack webhook URL.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].slackConfigs[].fields

Description:: 
A list of Slack fields that are sent with each notification.
Type:: array

## .spec.receivers[].slackConfigs[].fields[]

Description:: 
SlackField configures a single Slack field that is sent with each notification.
Each field must contain a title, value, and optionally, a boolean value to indicate if the field
is short enough to be displayed next to other fields designated as short.
See https://api.slack.com/docs/message-attachments#fields for more information.
Type:: object
Required:: 
* title
* value



## .spec.receivers[].slackConfigs[].httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.receivers[].slackConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].slackConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].slackConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].slackConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].slackConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].slackConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].slackConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].slackConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].slackConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].slackConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].slackConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].slackConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs

Description:: 
List of SNS configurations
Type:: array

## .spec.receivers[].snsConfigs[]

Description:: 
SNSConfig configures notifications via AWS SNS.
See https://prometheus.io/docs/alerting/latest/configuration/#sns_configs
Type:: object



## .spec.receivers[].snsConfigs[].httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.receivers[].snsConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].snsConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].snsConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].snsConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].snsConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].snsConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].snsConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].snsConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].snsConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].snsConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].snsConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].sigv4

Description:: 
Configures AWS's Signature Verification 4 signing process to sign requests.
Type:: object



## .spec.receivers[].snsConfigs[].sigv4.accessKey

Description:: 
AccessKey is the AWS API key. If not specified, the environment variable
AWS_ACCESS_KEY_ID is used.
Type:: object
Required:: 
* key



## .spec.receivers[].snsConfigs[].sigv4.secretKey

Description:: 
SecretKey is the AWS API secret. If not specified, the environment
variable AWS_SECRET_ACCESS_KEY is used.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs

Description:: 
List of Telegram configurations.
Type:: array

## .spec.receivers[].telegramConfigs[]

Description:: 
TelegramConfig configures notifications via Telegram.
See https://prometheus.io/docs/alerting/latest/configuration/#telegram_config
Type:: object
Required:: 
* chatID



## .spec.receivers[].telegramConfigs[].botToken

Description:: 
Telegram bot token. It is mutually exclusive with botTokenFile.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Either botToken or botTokenFile is required.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].telegramConfigs[].httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.receivers[].telegramConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].telegramConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].telegramConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].telegramConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].telegramConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].telegramConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].telegramConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].telegramConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].telegramConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs

Description:: 
List of VictorOps configurations.
Type:: array

## .spec.receivers[].victoropsConfigs[]

Description:: 
VictorOpsConfig configures notifications via VictorOps.
See https://prometheus.io/docs/alerting/latest/configuration/#victorops_config
Type:: object



## .spec.receivers[].victoropsConfigs[].apiKey

Description:: 
The secret's key that contains the API key to use when talking to the VictorOps API.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].victoropsConfigs[].customFields

Description:: 
Additional custom fields for notification.
Type:: array

## .spec.receivers[].victoropsConfigs[].customFields[]

Description:: 
KeyValue defines a (key, value) tuple.
Type:: object
Required:: 
* key
* value



## .spec.receivers[].victoropsConfigs[].httpConfig

Description:: 
The HTTP client's configuration.
Type:: object



## .spec.receivers[].victoropsConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].victoropsConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].victoropsConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].victoropsConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].victoropsConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].victoropsConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].victoropsConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].victoropsConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].victoropsConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs

Description:: 
List of Webex configurations.
Type:: array

## .spec.receivers[].webexConfigs[]

Description:: 
WebexConfig configures notification via Cisco Webex
See https://prometheus.io/docs/alerting/latest/configuration/#webex_config
Type:: object
Required:: 
* roomID



## .spec.receivers[].webexConfigs[].httpConfig

Description:: 
The HTTP client's configuration.
You must use this configuration to supply the bot token as part of the HTTP Authorization header.
Type:: object



## .spec.receivers[].webexConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].webexConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].webexConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].webexConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].webexConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].webexConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].webexConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].webexConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].webexConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].webexConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].webexConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webexConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs

Description:: 
List of webhook configurations.
Type:: array

## .spec.receivers[].webhookConfigs[]

Description:: 
WebhookConfig configures notifications via a generic receiver supporting the webhook payload.
See https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
Type:: object



## .spec.receivers[].webhookConfigs[].httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.receivers[].webhookConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].webhookConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].webhookConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].webhookConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].webhookConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].webhookConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].webhookConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].webhookConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].webhookConfigs[].urlSecret

Description:: 
The secret's key that contains the webhook URL to send HTTP requests to.
urlSecret takes precedence over url. One of urlSecret and url
should be defined.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].wechatConfigs

Description:: 
List of WeChat configurations.
Type:: array

## .spec.receivers[].wechatConfigs[]

Description:: 
WeChatConfig configures notifications via WeChat.
See https://prometheus.io/docs/alerting/latest/configuration/#wechat_config
Type:: object



## .spec.receivers[].wechatConfigs[].apiSecret

Description:: 
The secret's key that contains the WeChat API key.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].wechatConfigs[].httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.receivers[].wechatConfigs[].httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.receivers[].wechatConfigs[].httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.receivers[].wechatConfigs[].httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the AlertmanagerConfig
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key
* name



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.receivers[].wechatConfigs[].httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.receivers[].wechatConfigs[].httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.receivers[].wechatConfigs[].httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.receivers[].wechatConfigs[].httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.receivers[].wechatConfigs[].httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.receivers[].wechatConfigs[].httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.route

Description:: 
The Alertmanager route definition for alerts matching the resource's
namespace. If present, it will be added to the generated Alertmanager
configuration as a first-level route.
Type:: object



## .spec.route.matchers

Description:: 
List of matchers that the alert's labels should match. For the first
level route, the operator removes any existing equality and regexp
matcher on the namespace label and adds a namespace: <object
namespace> matcher.
Type:: array

## .spec.route.matchers[]

Description:: 
Matcher defines how to match on alert's labels.
Type:: object
Required:: 
* name



## .spec.timeIntervals

Description:: 
List of TimeInterval specifying when the routes should be muted or active.
Type:: array

## .spec.timeIntervals[]

Description:: 
TimeInterval specifies the periods in time when notifications will be muted or active.
Type:: object
Required:: 
* name



## .spec.timeIntervals[].timeIntervals

Description:: 
TimeIntervals is a list of TimePeriod.
Type:: array

## .spec.timeIntervals[].timeIntervals[]

Description:: 
TimePeriod describes periods of time.
Type:: object



## .spec.timeIntervals[].timeIntervals[].daysOfMonth

Description:: 
DaysOfMonth is a list of DayOfMonthRange
Type:: array

## .spec.timeIntervals[].timeIntervals[].daysOfMonth[]

Description:: 
DayOfMonthRange is an inclusive range of days of the month beginning at 1
Type:: object



## .spec.timeIntervals[].timeIntervals[].times

Description:: 
Times is a list of TimeRange
Type:: array

## .spec.timeIntervals[].timeIntervals[].times[]

Description:: 
TimeRange defines a start and end time in 24hr format
Type:: object



# API endpoints

The following API endpoints are available:

* /apis/monitoring.coreos.com/v1beta1/alertmanagerconfigs
* GET: list objects of kind AlertmanagerConfig
* /apis/monitoring.coreos.com/v1beta1/namespaces/{namespace}/alertmanagerconfigs
* DELETE: delete collection of AlertmanagerConfig
* GET: list objects of kind AlertmanagerConfig
* POST: create an AlertmanagerConfig
* /apis/monitoring.coreos.com/v1beta1/namespaces/{namespace}/alertmanagerconfigs/{name}
* DELETE: delete an AlertmanagerConfig
* GET: read the specified AlertmanagerConfig
* PATCH: partially update the specified AlertmanagerConfig
* PUT: replace the specified AlertmanagerConfig

## /apis/monitoring.coreos.com/v1beta1/alertmanagerconfigs

HTTP method:: GET
Description:: list objects of kind AlertmanagerConfig



## /apis/monitoring.coreos.com/v1beta1/namespaces/{namespace}/alertmanagerconfigs

HTTP method:: DELETE
Description:: delete collection of AlertmanagerConfig



HTTP method:: GET
Description:: list objects of kind AlertmanagerConfig



HTTP method:: POST
Description:: create an AlertmanagerConfig







## /apis/monitoring.coreos.com/v1beta1/namespaces/{namespace}/alertmanagerconfigs/{name}



HTTP method:: DELETE
Description:: delete an AlertmanagerConfig





HTTP method:: GET
Description:: read the specified AlertmanagerConfig



HTTP method:: PATCH
Description:: partially update the specified AlertmanagerConfig





HTTP method:: PUT
Description:: replace the specified AlertmanagerConfig





