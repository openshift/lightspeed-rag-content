# Alertmanager [monitoring.coreos.com/v1]


Description:: 
The Alertmanager custom resource definition (CRD) defines a desired [Alertmanager](https://prometheus.io/docs/alerting) setup to run in a Kubernetes cluster. It allows to specify many options such as the number of replicas, persistent storage and many more.
For each Alertmanager resource, the Operator deploys a StatefulSet in the same namespace. When there are two or more configured replicas, the Operator runs the Alertmanager instances in high-availability mode.
The resource defines via label and namespace selectors which AlertmanagerConfig objects should be associated to the deployed Alertmanager instances.
Type:: object
Required:: 
* spec

# Specification



## .spec

Description:: 
Specification of the desired behavior of the Alertmanager cluster. More info:
https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
Type:: object



## .spec.additionalArgs

Description:: 
AdditionalArgs allows setting additional arguments for the 'Alertmanager' container.
It is intended for e.g. activating hidden flags which are not supported by
the dedicated configuration options yet. The arguments are passed as-is to the
Alertmanager container which may cause issues if they are invalid or not supported
by the given Alertmanager version.
Type:: array

## .spec.additionalArgs[]

Description:: 
Argument as part of the AdditionalArgs list.
Type:: object
Required:: 
* name



## .spec.affinity

Description:: 
If specified, the pod's scheduling constraints.
Type:: object



## .spec.affinity.nodeAffinity

Description:: 
Describes node affinity scheduling rules for the pod.
Type:: object



## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution

Description:: 
The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node matches the corresponding matchExpressions; the
node(s) with the highest sum are the most preferred.
Type:: array

## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[]

Description:: 
An empty preferred scheduling term matches all objects with implicit weight 0
(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
Type:: object
Required:: 
* preference
* weight



## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference

Description:: 
A node selector term, associated with the corresponding weight.
Type:: object



## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchExpressions

Description:: 
A list of node selector requirements by node's labels.
Type:: array

## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchExpressions[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchFields

Description:: 
A list of node selector requirements by node's fields.
Type:: array

## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchFields[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution

Description:: 
If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to an update), the system
may or may not try to eventually evict the pod from its node.
Type:: object
Required:: 
* nodeSelectorTerms



## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms

Description:: 
Required. A list of node selector terms. The terms are ORed.
Type:: array

## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[]

Description:: 
A null or empty node selector term matches no objects. The requirements of
them are ANDed.
The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
Type:: object



## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchExpressions

Description:: 
A list of node selector requirements by node's labels.
Type:: array

## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchExpressions[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchFields

Description:: 
A list of node selector requirements by node's fields.
Type:: array

## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchFields[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAffinity

Description:: 
Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
Type:: object



## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution

Description:: 
The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
Type:: array

## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[]

Description:: 
The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
Type:: object
Required:: 
* podAffinityTerm
* weight



## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm

Description:: 
Required. A pod affinity term, associated with the corresponding weight.
Type:: object
Required:: 
* topologyKey



## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector

Description:: 
A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
Type:: object



## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector

Description:: 
A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
Type:: object



## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution

Description:: 
If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
Type:: array

## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[]

Description:: 
Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
Type:: object
Required:: 
* topologyKey



## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector

Description:: 
A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
Type:: object



## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector

Description:: 
A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
Type:: object



## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAntiAffinity

Description:: 
Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
Type:: object



## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution

Description:: 
The scheduler will prefer to schedule pods to nodes that satisfy
the anti-affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling anti-affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
Type:: array

## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[]

Description:: 
The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
Type:: object
Required:: 
* podAffinityTerm
* weight



## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm

Description:: 
Required. A pod affinity term, associated with the corresponding weight.
Type:: object
Required:: 
* topologyKey



## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector

Description:: 
A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
Type:: object



## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector

Description:: 
A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
Type:: object



## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution

Description:: 
If the anti-affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the anti-affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
Type:: array

## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[]

Description:: 
Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
Type:: object
Required:: 
* topologyKey



## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector

Description:: 
A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
Type:: object



## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector

Description:: 
A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
Type:: object



## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.alertmanagerConfigMatcherStrategy

Description:: 
AlertmanagerConfigMatcherStrategy defines how AlertmanagerConfig objects
process incoming alerts.
Type:: object



## .spec.alertmanagerConfigNamespaceSelector

Description:: 
Namespaces to be selected for AlertmanagerConfig discovery. If nil, only
check own namespace.
Type:: object



## .spec.alertmanagerConfigNamespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.alertmanagerConfigNamespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.alertmanagerConfigSelector

Description:: 
AlertmanagerConfigs to be selected for to merge and configure Alertmanager with.
Type:: object



## .spec.alertmanagerConfigSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.alertmanagerConfigSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.alertmanagerConfiguration

Description:: 
alertmanagerConfiguration specifies the configuration of Alertmanager.
If defined, it takes precedence over the configSecret field.
This is an experimental feature, it may change in any upcoming release
in a breaking way.
Type:: object



## .spec.alertmanagerConfiguration.global

Description:: 
Defines the global parameters of the Alertmanager configuration.
Type:: object



## .spec.alertmanagerConfiguration.global.httpConfig

Description:: 
HTTP client configuration.
Type:: object



## .spec.alertmanagerConfiguration.global.httpConfig.authorization

Description:: 
Authorization header configuration for the client.
This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
Type:: object



## .spec.alertmanagerConfiguration.global.httpConfig.authorization.credentials

Description:: 
Selects a key of a Secret in the namespace that contains the credentials for authentication.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.basicAuth

Description:: 
BasicAuth for the client.
This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
Type:: object



## .spec.alertmanagerConfiguration.global.httpConfig.basicAuth.password

Description:: 
password specifies a key of a Secret containing the password for
authentication.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.basicAuth.username

Description:: 
username specifies a key of a Secret containing the username for
authentication.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.bearerTokenSecret

Description:: 
The secret's key that contains the bearer token to be used by the client
for authentication.
The secret needs to be in the same namespace as the Alertmanager
object and accessible by the Prometheus Operator.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2

Description:: 
OAuth2 client credentials used to fetch a token for the targets.
Type:: object
Required:: 
* clientId
* clientSecret
* tokenUrl



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.clientId

Description:: 
clientId specifies a key of a Secret or ConfigMap containing the
OAuth2 client's ID.
Type:: object



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.clientId.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.clientId.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.clientSecret

Description:: 
clientSecret specifies a key of a Secret containing the OAuth2
client's secret.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.tlsConfig

Description:: 
TLS configuration to use when connecting to the OAuth2 server.
It requires Prometheus >= v2.43.0.
Type:: object



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.oauth2.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.proxyConnectHeader

Description:: 
ProxyConnectHeader optionally specifies headers to send to
proxies during CONNECT requests.
It requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.
Type:: object

## .spec.alertmanagerConfiguration.global.httpConfig.proxyConnectHeader{}

Description:: 

Type:: array

## .spec.alertmanagerConfiguration.global.httpConfig.proxyConnectHeader{}[]

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.tlsConfig

Description:: 
TLS configuration for the client.
Type:: object



## .spec.alertmanagerConfiguration.global.httpConfig.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.alertmanagerConfiguration.global.httpConfig.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.alertmanagerConfiguration.global.httpConfig.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.httpConfig.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.jira

Description:: 
The default configuration for Jira.
Type:: object



## .spec.alertmanagerConfiguration.global.opsGenieApiKey

Description:: 
The default OpsGenie API Key.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.opsGenieApiUrl

Description:: 
The default OpsGenie API URL.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.rocketChat

Description:: 
The default configuration for Rocket Chat.
Type:: object



## .spec.alertmanagerConfiguration.global.rocketChat.token

Description:: 
The default Rocket Chat token.
It requires Alertmanager >= v0.28.0.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.rocketChat.tokenID

Description:: 
The default Rocket Chat Token ID.
It requires Alertmanager >= v0.28.0.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.slackApiUrl

Description:: 
The default Slack API URL.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.smtp

Description:: 
Configures global SMTP parameters.
Type:: object



## .spec.alertmanagerConfiguration.global.smtp.authPassword

Description:: 
SMTP Auth using LOGIN and PLAIN.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.smtp.authSecret

Description:: 
SMTP Auth using CRAM-MD5.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.smtp.smartHost

Description:: 
The default SMTP smarthost used for sending emails.
Type:: object
Required:: 
* host
* port



## .spec.alertmanagerConfiguration.global.smtp.tlsConfig

Description:: 
The default TLS configuration for SMTP receivers
Type:: object



## .spec.alertmanagerConfiguration.global.smtp.tlsConfig.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.alertmanagerConfiguration.global.smtp.tlsConfig.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.smtp.tlsConfig.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.smtp.tlsConfig.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.alertmanagerConfiguration.global.smtp.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.smtp.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.smtp.tlsConfig.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.telegram

Description:: 
The default Telegram config
Type:: object



## .spec.alertmanagerConfiguration.global.victorops

Description:: 
The default configuration for VictorOps.
Type:: object



## .spec.alertmanagerConfiguration.global.victorops.apiKey

Description:: 
The default VictorOps API Key.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.global.webex

Description:: 
The default configuration for Jira.
Type:: object



## .spec.alertmanagerConfiguration.global.wechat

Description:: 
The default WeChat Config
Type:: object



## .spec.alertmanagerConfiguration.global.wechat.apiSecret

Description:: 
The default WeChat API Secret.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.templates

Description:: 
Custom notification templates.
Type:: array

## .spec.alertmanagerConfiguration.templates[]

Description:: 
SecretOrConfigMap allows to specify data as a Secret or ConfigMap. Fields are mutually exclusive.
Type:: object



## .spec.alertmanagerConfiguration.templates[].configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.alertmanagerConfiguration.templates[].secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.clusterTLS

Description:: 
Configures the mutual TLS configuration for the Alertmanager cluster's gossip protocol.
It requires Alertmanager >= 0.24.0.
Type:: object
Required:: 
* client
* server



## .spec.clusterTLS.client

Description:: 
Client-side configuration for mutual TLS.
Type:: object



## .spec.clusterTLS.client.ca

Description:: 
Certificate authority used when verifying server certificates.
Type:: object



## .spec.clusterTLS.client.ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.clusterTLS.client.ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.clusterTLS.client.cert

Description:: 
Client certificate to present when doing client-authentication.
Type:: object



## .spec.clusterTLS.client.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.clusterTLS.client.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.clusterTLS.client.keySecret

Description:: 
Secret containing the client key file for the targets.
Type:: object
Required:: 
* key



## .spec.clusterTLS.server

Description:: 
Server-side configuration for mutual TLS.
Type:: object



## .spec.clusterTLS.server.cert

Description:: 
Secret or ConfigMap containing the TLS certificate for the web server.
Either keySecret or keyFile must be defined.
It is mutually exclusive with certFile.
Type:: object



## .spec.clusterTLS.server.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.clusterTLS.server.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.clusterTLS.server.client_ca

Description:: 
Secret or ConfigMap containing the CA certificate for client certificate
authentication to the server.
It is mutually exclusive with clientCAFile.
Type:: object



## .spec.clusterTLS.server.client_ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.clusterTLS.server.client_ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.clusterTLS.server.keySecret

Description:: 
Secret containing the TLS private key for the web server.
Either cert or certFile must be defined.
It is mutually exclusive with keyFile.
Type:: object
Required:: 
* key



## .spec.containers

Description:: 
Containers allows injecting additional containers. This is meant to
allow adding an authentication proxy to an Alertmanager pod.
Containers described here modify an operator generated container if they
share the same name and modifications are done via a strategic merge
patch. The current container names are: alertmanager and
config-reloader. Overriding containers is entirely outside the scope
of what the maintainers will support and by doing so, you accept that
this behaviour may break at any time without notice.
Type:: array

## .spec.containers[]

Description:: 
A single application container that you want to run within a pod.
Type:: object
Required:: 
* name



## .spec.containers[].env

Description:: 
List of environment variables to set in the container.
Cannot be updated.
Type:: array

## .spec.containers[].env[]

Description:: 
EnvVar represents an environment variable present in a Container.
Type:: object
Required:: 
* name



## .spec.containers[].env[].valueFrom

Description:: 
Source for the environment variable's value. Cannot be used if value is not empty.
Type:: object



## .spec.containers[].env[].valueFrom.configMapKeyRef

Description:: 
Selects a key of a ConfigMap.
Type:: object
Required:: 
* key



## .spec.containers[].env[].valueFrom.fieldRef

Description:: 
Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels['<KEY>'], metadata.annotations['<KEY>'],
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
Type:: object
Required:: 
* fieldPath



## .spec.containers[].env[].valueFrom.resourceFieldRef

Description:: 
Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
Type:: object
Required:: 
* resource



## .spec.containers[].env[].valueFrom.secretKeyRef

Description:: 
Selects a key of a secret in the pod's namespace
Type:: object
Required:: 
* key



## .spec.containers[].envFrom

Description:: 
List of sources to populate environment variables in the container.
The keys defined within a source must be a C_IDENTIFIER. All invalid keys
will be reported as an event when the container is starting. When a key exists in multiple
sources, the value associated with the last source will take precedence.
Values defined by an Env with a duplicate key will take precedence.
Cannot be updated.
Type:: array

## .spec.containers[].envFrom[]

Description:: 
EnvFromSource represents the source of a set of ConfigMaps or Secrets
Type:: object



## .spec.containers[].envFrom[].configMapRef

Description:: 
The ConfigMap to select from
Type:: object



## .spec.containers[].envFrom[].secretRef

Description:: 
The Secret to select from
Type:: object



## .spec.containers[].lifecycle

Description:: 
Actions that the management system should take in response to container lifecycle events.
Cannot be updated.
Type:: object



## .spec.containers[].lifecycle.postStart

Description:: 
PostStart is called immediately after a container is created. If the handler fails,
the container is terminated and restarted according to its restart policy.
Other management of the container blocks until the hook completes.
More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
Type:: object



## .spec.containers[].lifecycle.postStart.exec

Description:: 
Exec specifies a command to execute in the container.
Type:: object



## .spec.containers[].lifecycle.postStart.httpGet

Description:: 
HTTPGet specifies an HTTP GET request to perform.
Type:: object
Required:: 
* port



## .spec.containers[].lifecycle.postStart.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.containers[].lifecycle.postStart.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.containers[].lifecycle.postStart.sleep

Description:: 
Sleep represents a duration that the container should sleep.
Type:: object
Required:: 
* seconds



## .spec.containers[].lifecycle.postStart.tcpSocket

Description:: 
Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
for backward compatibility. There is no validation of this field and
lifecycle hooks will fail at runtime when it is specified.
Type:: object
Required:: 
* port



## .spec.containers[].lifecycle.preStop

Description:: 
PreStop is called immediately before a container is terminated due to an
API request or management event such as liveness/startup probe failure,
preemption, resource contention, etc. The handler is not called if the
container crashes or exits. The Pod's termination grace period countdown begins before the
PreStop hook is executed. Regardless of the outcome of the handler, the
container will eventually terminate within the Pod's termination grace
period (unless delayed by finalizers). Other management of the container blocks until the hook completes
or until the termination grace period is reached.
More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
Type:: object



## .spec.containers[].lifecycle.preStop.exec

Description:: 
Exec specifies a command to execute in the container.
Type:: object



## .spec.containers[].lifecycle.preStop.httpGet

Description:: 
HTTPGet specifies an HTTP GET request to perform.
Type:: object
Required:: 
* port



## .spec.containers[].lifecycle.preStop.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.containers[].lifecycle.preStop.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.containers[].lifecycle.preStop.sleep

Description:: 
Sleep represents a duration that the container should sleep.
Type:: object
Required:: 
* seconds



## .spec.containers[].lifecycle.preStop.tcpSocket

Description:: 
Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
for backward compatibility. There is no validation of this field and
lifecycle hooks will fail at runtime when it is specified.
Type:: object
Required:: 
* port



## .spec.containers[].livenessProbe

Description:: 
Periodic probe of container liveness.
Container will be restarted if the probe fails.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
Type:: object



## .spec.containers[].livenessProbe.exec

Description:: 
Exec specifies a command to execute in the container.
Type:: object



## .spec.containers[].livenessProbe.grpc

Description:: 
GRPC specifies a GRPC HealthCheckRequest.
Type:: object
Required:: 
* port



## .spec.containers[].livenessProbe.httpGet

Description:: 
HTTPGet specifies an HTTP GET request to perform.
Type:: object
Required:: 
* port



## .spec.containers[].livenessProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.containers[].livenessProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.containers[].livenessProbe.tcpSocket

Description:: 
TCPSocket specifies a connection to a TCP port.
Type:: object
Required:: 
* port



## .spec.containers[].ports

Description:: 
List of ports to expose from the container. Not specifying a port here
DOES NOT prevent that port from being exposed. Any port which is
listening on the default "0.0.0.0" address inside a container will be
accessible from the network.
Modifying this array with strategic merge patch may corrupt the data.
For more information See https://github.com/kubernetes/kubernetes/issues/108255.
Cannot be updated.
Type:: array

## .spec.containers[].ports[]

Description:: 
ContainerPort represents a network port in a single container.
Type:: object
Required:: 
* containerPort



## .spec.containers[].readinessProbe

Description:: 
Periodic probe of container service readiness.
Container will be removed from service endpoints if the probe fails.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
Type:: object



## .spec.containers[].readinessProbe.exec

Description:: 
Exec specifies a command to execute in the container.
Type:: object



## .spec.containers[].readinessProbe.grpc

Description:: 
GRPC specifies a GRPC HealthCheckRequest.
Type:: object
Required:: 
* port



## .spec.containers[].readinessProbe.httpGet

Description:: 
HTTPGet specifies an HTTP GET request to perform.
Type:: object
Required:: 
* port



## .spec.containers[].readinessProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.containers[].readinessProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.containers[].readinessProbe.tcpSocket

Description:: 
TCPSocket specifies a connection to a TCP port.
Type:: object
Required:: 
* port



## .spec.containers[].resizePolicy

Description:: 
Resources resize policy for the container.
Type:: array

## .spec.containers[].resizePolicy[]

Description:: 
ContainerResizePolicy represents resource resize policy for the container.
Type:: object
Required:: 
* resourceName
* restartPolicy



## .spec.containers[].resources

Description:: 
Compute Resources required by this container.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
Type:: object



## .spec.containers[].resources.claims

Description:: 
Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.
This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.
This field is immutable. It can only be set for containers.
Type:: array

## .spec.containers[].resources.claims[]

Description:: 
ResourceClaim references one entry in PodSpec.ResourceClaims.
Type:: object
Required:: 
* name



## .spec.containers[].securityContext

Description:: 
SecurityContext defines the security options the container should be run with.
If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
Type:: object



## .spec.containers[].securityContext.appArmorProfile

Description:: 
appArmorProfile is the AppArmor options to use by this container. If set, this profile
overrides the pod's appArmorProfile.
Note that this field cannot be set when spec.os.name is windows.
Type:: object
Required:: 
* type



## .spec.containers[].securityContext.capabilities

Description:: 
The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
Type:: object



## .spec.containers[].securityContext.seLinuxOptions

Description:: 
The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
Type:: object



## .spec.containers[].securityContext.seccompProfile

Description:: 
The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
Type:: object
Required:: 
* type



## .spec.containers[].securityContext.windowsOptions

Description:: 
The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
Type:: object



## .spec.containers[].startupProbe

Description:: 
StartupProbe indicates that the Pod has successfully initialized.
If specified, no other probes are executed until this completes successfully.
If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
when it might take a long time to load data or warm a cache, than during steady-state operation.
This cannot be updated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
Type:: object



## .spec.containers[].startupProbe.exec

Description:: 
Exec specifies a command to execute in the container.
Type:: object



## .spec.containers[].startupProbe.grpc

Description:: 
GRPC specifies a GRPC HealthCheckRequest.
Type:: object
Required:: 
* port



## .spec.containers[].startupProbe.httpGet

Description:: 
HTTPGet specifies an HTTP GET request to perform.
Type:: object
Required:: 
* port



## .spec.containers[].startupProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.containers[].startupProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.containers[].startupProbe.tcpSocket

Description:: 
TCPSocket specifies a connection to a TCP port.
Type:: object
Required:: 
* port



## .spec.containers[].volumeDevices

Description:: 
volumeDevices is the list of block devices to be used by the container.
Type:: array

## .spec.containers[].volumeDevices[]

Description:: 
volumeDevice describes a mapping of a raw block device within a container.
Type:: object
Required:: 
* devicePath
* name



## .spec.containers[].volumeMounts

Description:: 
Pod volumes to mount into the container's filesystem.
Cannot be updated.
Type:: array

## .spec.containers[].volumeMounts[]

Description:: 
VolumeMount describes a mounting of a Volume within a container.
Type:: object
Required:: 
* mountPath
* name



## .spec.dnsConfig

Description:: 
Defines the DNS configuration for the pods.
Type:: object



## .spec.dnsConfig.options

Description:: 
A list of DNS resolver options.
This will be merged with the base options generated from DNSPolicy.
Resolution options given in Options
will override those that appear in the base DNSPolicy.
Type:: array

## .spec.dnsConfig.options[]

Description:: 
PodDNSConfigOption defines DNS resolver options of a pod.
Type:: object
Required:: 
* name



## .spec.hostAliases

Description:: 
Pods' hostAliases configuration
Type:: array

## .spec.hostAliases[]

Description:: 
HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
pod's hosts file.
Type:: object
Required:: 
* hostnames
* ip



## .spec.imagePullSecrets

Description:: 
An optional list of references to secrets in the same namespace
to use for pulling prometheus and alertmanager images from registries
see https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
Type:: array

## .spec.imagePullSecrets[]

Description:: 
LocalObjectReference contains enough information to let you locate the
referenced object inside the same namespace.
Type:: object



## .spec.initContainers

Description:: 
InitContainers allows adding initContainers to the pod definition. Those can be used to e.g.
fetch secrets for injection into the Alertmanager configuration from external sources. Any
errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
InitContainers described here modify an operator
generated init containers if they share the same name and modifications are
done via a strategic merge patch. The current init container name is:
init-config-reloader. Overriding init containers is entirely outside the
scope of what the maintainers will support and by doing so, you accept that
this behaviour may break at any time without notice.
Type:: array

## .spec.initContainers[]

Description:: 
A single application container that you want to run within a pod.
Type:: object
Required:: 
* name



## .spec.initContainers[].env

Description:: 
List of environment variables to set in the container.
Cannot be updated.
Type:: array

## .spec.initContainers[].env[]

Description:: 
EnvVar represents an environment variable present in a Container.
Type:: object
Required:: 
* name



## .spec.initContainers[].env[].valueFrom

Description:: 
Source for the environment variable's value. Cannot be used if value is not empty.
Type:: object



## .spec.initContainers[].env[].valueFrom.configMapKeyRef

Description:: 
Selects a key of a ConfigMap.
Type:: object
Required:: 
* key



## .spec.initContainers[].env[].valueFrom.fieldRef

Description:: 
Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels['<KEY>'], metadata.annotations['<KEY>'],
spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
Type:: object
Required:: 
* fieldPath



## .spec.initContainers[].env[].valueFrom.resourceFieldRef

Description:: 
Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
Type:: object
Required:: 
* resource



## .spec.initContainers[].env[].valueFrom.secretKeyRef

Description:: 
Selects a key of a secret in the pod's namespace
Type:: object
Required:: 
* key



## .spec.initContainers[].envFrom

Description:: 
List of sources to populate environment variables in the container.
The keys defined within a source must be a C_IDENTIFIER. All invalid keys
will be reported as an event when the container is starting. When a key exists in multiple
sources, the value associated with the last source will take precedence.
Values defined by an Env with a duplicate key will take precedence.
Cannot be updated.
Type:: array

## .spec.initContainers[].envFrom[]

Description:: 
EnvFromSource represents the source of a set of ConfigMaps or Secrets
Type:: object



## .spec.initContainers[].envFrom[].configMapRef

Description:: 
The ConfigMap to select from
Type:: object



## .spec.initContainers[].envFrom[].secretRef

Description:: 
The Secret to select from
Type:: object



## .spec.initContainers[].lifecycle

Description:: 
Actions that the management system should take in response to container lifecycle events.
Cannot be updated.
Type:: object



## .spec.initContainers[].lifecycle.postStart

Description:: 
PostStart is called immediately after a container is created. If the handler fails,
the container is terminated and restarted according to its restart policy.
Other management of the container blocks until the hook completes.
More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
Type:: object



## .spec.initContainers[].lifecycle.postStart.exec

Description:: 
Exec specifies a command to execute in the container.
Type:: object



## .spec.initContainers[].lifecycle.postStart.httpGet

Description:: 
HTTPGet specifies an HTTP GET request to perform.
Type:: object
Required:: 
* port



## .spec.initContainers[].lifecycle.postStart.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.initContainers[].lifecycle.postStart.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.initContainers[].lifecycle.postStart.sleep

Description:: 
Sleep represents a duration that the container should sleep.
Type:: object
Required:: 
* seconds



## .spec.initContainers[].lifecycle.postStart.tcpSocket

Description:: 
Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
for backward compatibility. There is no validation of this field and
lifecycle hooks will fail at runtime when it is specified.
Type:: object
Required:: 
* port



## .spec.initContainers[].lifecycle.preStop

Description:: 
PreStop is called immediately before a container is terminated due to an
API request or management event such as liveness/startup probe failure,
preemption, resource contention, etc. The handler is not called if the
container crashes or exits. The Pod's termination grace period countdown begins before the
PreStop hook is executed. Regardless of the outcome of the handler, the
container will eventually terminate within the Pod's termination grace
period (unless delayed by finalizers). Other management of the container blocks until the hook completes
or until the termination grace period is reached.
More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
Type:: object



## .spec.initContainers[].lifecycle.preStop.exec

Description:: 
Exec specifies a command to execute in the container.
Type:: object



## .spec.initContainers[].lifecycle.preStop.httpGet

Description:: 
HTTPGet specifies an HTTP GET request to perform.
Type:: object
Required:: 
* port



## .spec.initContainers[].lifecycle.preStop.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.initContainers[].lifecycle.preStop.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.initContainers[].lifecycle.preStop.sleep

Description:: 
Sleep represents a duration that the container should sleep.
Type:: object
Required:: 
* seconds



## .spec.initContainers[].lifecycle.preStop.tcpSocket

Description:: 
Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept
for backward compatibility. There is no validation of this field and
lifecycle hooks will fail at runtime when it is specified.
Type:: object
Required:: 
* port



## .spec.initContainers[].livenessProbe

Description:: 
Periodic probe of container liveness.
Container will be restarted if the probe fails.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
Type:: object



## .spec.initContainers[].livenessProbe.exec

Description:: 
Exec specifies a command to execute in the container.
Type:: object



## .spec.initContainers[].livenessProbe.grpc

Description:: 
GRPC specifies a GRPC HealthCheckRequest.
Type:: object
Required:: 
* port



## .spec.initContainers[].livenessProbe.httpGet

Description:: 
HTTPGet specifies an HTTP GET request to perform.
Type:: object
Required:: 
* port



## .spec.initContainers[].livenessProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.initContainers[].livenessProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.initContainers[].livenessProbe.tcpSocket

Description:: 
TCPSocket specifies a connection to a TCP port.
Type:: object
Required:: 
* port



## .spec.initContainers[].ports

Description:: 
List of ports to expose from the container. Not specifying a port here
DOES NOT prevent that port from being exposed. Any port which is
listening on the default "0.0.0.0" address inside a container will be
accessible from the network.
Modifying this array with strategic merge patch may corrupt the data.
For more information See https://github.com/kubernetes/kubernetes/issues/108255.
Cannot be updated.
Type:: array

## .spec.initContainers[].ports[]

Description:: 
ContainerPort represents a network port in a single container.
Type:: object
Required:: 
* containerPort



## .spec.initContainers[].readinessProbe

Description:: 
Periodic probe of container service readiness.
Container will be removed from service endpoints if the probe fails.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
Type:: object



## .spec.initContainers[].readinessProbe.exec

Description:: 
Exec specifies a command to execute in the container.
Type:: object



## .spec.initContainers[].readinessProbe.grpc

Description:: 
GRPC specifies a GRPC HealthCheckRequest.
Type:: object
Required:: 
* port



## .spec.initContainers[].readinessProbe.httpGet

Description:: 
HTTPGet specifies an HTTP GET request to perform.
Type:: object
Required:: 
* port



## .spec.initContainers[].readinessProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.initContainers[].readinessProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.initContainers[].readinessProbe.tcpSocket

Description:: 
TCPSocket specifies a connection to a TCP port.
Type:: object
Required:: 
* port



## .spec.initContainers[].resizePolicy

Description:: 
Resources resize policy for the container.
Type:: array

## .spec.initContainers[].resizePolicy[]

Description:: 
ContainerResizePolicy represents resource resize policy for the container.
Type:: object
Required:: 
* resourceName
* restartPolicy



## .spec.initContainers[].resources

Description:: 
Compute Resources required by this container.
Cannot be updated.
More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
Type:: object



## .spec.initContainers[].resources.claims

Description:: 
Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.
This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.
This field is immutable. It can only be set for containers.
Type:: array

## .spec.initContainers[].resources.claims[]

Description:: 
ResourceClaim references one entry in PodSpec.ResourceClaims.
Type:: object
Required:: 
* name



## .spec.initContainers[].securityContext

Description:: 
SecurityContext defines the security options the container should be run with.
If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
Type:: object



## .spec.initContainers[].securityContext.appArmorProfile

Description:: 
appArmorProfile is the AppArmor options to use by this container. If set, this profile
overrides the pod's appArmorProfile.
Note that this field cannot be set when spec.os.name is windows.
Type:: object
Required:: 
* type



## .spec.initContainers[].securityContext.capabilities

Description:: 
The capabilities to add/drop when running containers.
Defaults to the default set of capabilities granted by the container runtime.
Note that this field cannot be set when spec.os.name is windows.
Type:: object



## .spec.initContainers[].securityContext.seLinuxOptions

Description:: 
The SELinux context to be applied to the container.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is windows.
Type:: object



## .spec.initContainers[].securityContext.seccompProfile

Description:: 
The seccomp options to use by this container. If seccomp options are
provided at both the pod & container level, the container options
override the pod options.
Note that this field cannot be set when spec.os.name is windows.
Type:: object
Required:: 
* type



## .spec.initContainers[].securityContext.windowsOptions

Description:: 
The Windows specific settings applied to all containers.
If unspecified, the options from the PodSecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
Type:: object



## .spec.initContainers[].startupProbe

Description:: 
StartupProbe indicates that the Pod has successfully initialized.
If specified, no other probes are executed until this completes successfully.
If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
when it might take a long time to load data or warm a cache, than during steady-state operation.
This cannot be updated.
More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
Type:: object



## .spec.initContainers[].startupProbe.exec

Description:: 
Exec specifies a command to execute in the container.
Type:: object



## .spec.initContainers[].startupProbe.grpc

Description:: 
GRPC specifies a GRPC HealthCheckRequest.
Type:: object
Required:: 
* port



## .spec.initContainers[].startupProbe.httpGet

Description:: 
HTTPGet specifies an HTTP GET request to perform.
Type:: object
Required:: 
* port



## .spec.initContainers[].startupProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.initContainers[].startupProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.initContainers[].startupProbe.tcpSocket

Description:: 
TCPSocket specifies a connection to a TCP port.
Type:: object
Required:: 
* port



## .spec.initContainers[].volumeDevices

Description:: 
volumeDevices is the list of block devices to be used by the container.
Type:: array

## .spec.initContainers[].volumeDevices[]

Description:: 
volumeDevice describes a mapping of a raw block device within a container.
Type:: object
Required:: 
* devicePath
* name



## .spec.initContainers[].volumeMounts

Description:: 
Pod volumes to mount into the container's filesystem.
Cannot be updated.
Type:: array

## .spec.initContainers[].volumeMounts[]

Description:: 
VolumeMount describes a mounting of a Volume within a container.
Type:: object
Required:: 
* mountPath
* name



## .spec.limits

Description:: 
Defines the limits command line flags when starting Alertmanager.
Type:: object



## .spec.persistentVolumeClaimRetentionPolicy

Description:: 
The field controls if and how PVCs are deleted during the lifecycle of a StatefulSet.
The default behavior is all PVCs are retained.
This is an alpha field from kubernetes 1.23 until 1.26 and a beta field from 1.26.
It requires enabling the StatefulSetAutoDeletePVC feature gate.
Type:: object



## .spec.podMetadata

Description:: 
PodMetadata configures labels and annotations which are propagated to the Alertmanager pods.
The following items are reserved and cannot be overridden:
* "alertmanager" label, set to the name of the Alertmanager instance.
* "app.kubernetes.io/instance" label, set to the name of the Alertmanager instance.
* "app.kubernetes.io/managed-by" label, set to "prometheus-operator".
* "app.kubernetes.io/name" label, set to "alertmanager".
* "app.kubernetes.io/version" label, set to the Alertmanager version.
* "kubectl.kubernetes.io/default-container" annotation, set to "alertmanager".
Type:: object



## .spec.resources

Description:: 
Define resources requests and limits for single Pods.
Type:: object



## .spec.resources.claims

Description:: 
Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.
This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.
This field is immutable. It can only be set for containers.
Type:: array

## .spec.resources.claims[]

Description:: 
ResourceClaim references one entry in PodSpec.ResourceClaims.
Type:: object
Required:: 
* name



## .spec.securityContext

Description:: 
SecurityContext holds pod-level security attributes and common container settings.
This defaults to the default PodSecurityContext.
Type:: object



## .spec.securityContext.appArmorProfile

Description:: 
appArmorProfile is the AppArmor options to use by the containers in this pod.
Note that this field cannot be set when spec.os.name is windows.
Type:: object
Required:: 
* type



## .spec.securityContext.seLinuxOptions

Description:: 
The SELinux context to be applied to all containers.
If unspecified, the container runtime will allocate a random SELinux context for each
container.  May also be set in SecurityContext.  If set in
both SecurityContext and PodSecurityContext, the value specified in SecurityContext
takes precedence for that container.
Note that this field cannot be set when spec.os.name is windows.
Type:: object



## .spec.securityContext.seccompProfile

Description:: 
The seccomp options to use by the containers in this pod.
Note that this field cannot be set when spec.os.name is windows.
Type:: object
Required:: 
* type



## .spec.securityContext.sysctls

Description:: 
Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
sysctls (by the container runtime) might fail to launch.
Note that this field cannot be set when spec.os.name is windows.
Type:: array

## .spec.securityContext.sysctls[]

Description:: 
Sysctl defines a kernel parameter to be set
Type:: object
Required:: 
* name
* value



## .spec.securityContext.windowsOptions

Description:: 
The Windows specific settings applied to all containers.
If unspecified, the options within a container's SecurityContext will be used.
If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
Note that this field cannot be set when spec.os.name is linux.
Type:: object



## .spec.storage

Description:: 
Storage is the definition of how storage will be used by the Alertmanager
instances.
Type:: object



## .spec.storage.emptyDir

Description:: 
EmptyDirVolumeSource to be used by the StatefulSet.
If specified, it takes precedence over ephemeral and volumeClaimTemplate.
More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
Type:: object



## .spec.storage.ephemeral

Description:: 
EphemeralVolumeSource to be used by the StatefulSet.
This is a beta field in k8s 1.21 and GA in 1.15.
For lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.
More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
Type:: object



## .spec.storage.ephemeral.volumeClaimTemplate

Description:: 
Will be used to create a stand-alone PVC to provision the volume.
The pod in which this EphemeralVolumeSource is embedded will be the
owner of the PVC, i.e. the PVC will be deleted together with the
pod.  The name of the PVC will be <pod name>-<volume name> where
<volume name> is the name from the PodSpec.Volumes array
entry. Pod validation will reject the pod if the concatenated name
is not valid for a PVC (for example, too long).
An existing PVC with that name that is not owned by the pod
will not be used for the pod to avoid using an unrelated
volume by mistake. Starting the pod is then blocked until
the unrelated PVC is removed. If such a pre-created PVC is
meant to be used by the pod, the PVC has to updated with an
owner reference to the pod once the pod exists. Normally
this should not be necessary, but it may be useful when
manually reconstructing a broken cluster.
This field is read-only and no changes will be made by Kubernetes
to the PVC after it has been created.
Required, must not be nil.
Type:: object
Required:: 
* spec



## .spec.storage.ephemeral.volumeClaimTemplate.metadata

Description:: 
May contain labels and annotations that will be copied into the PVC
when creating it. No other fields are allowed and will be rejected during
validation.
Type:: object

## .spec.storage.ephemeral.volumeClaimTemplate.spec

Description:: 
The specification for the PersistentVolumeClaim. The entire content is
copied unchanged into the PVC that gets created from this
template. The same fields as in a PersistentVolumeClaim
are also valid here.
Type:: object



## .spec.storage.ephemeral.volumeClaimTemplate.spec.dataSource

Description:: 
dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
Type:: object
Required:: 
* kind
* name



## .spec.storage.ephemeral.volumeClaimTemplate.spec.dataSourceRef

Description:: 
dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
Type:: object
Required:: 
* kind
* name



## .spec.storage.ephemeral.volumeClaimTemplate.spec.resources

Description:: 
resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
Type:: object



## .spec.storage.ephemeral.volumeClaimTemplate.spec.selector

Description:: 
selector is a label query over volumes to consider for binding.
Type:: object



## .spec.storage.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.storage.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.storage.volumeClaimTemplate

Description:: 
Defines the PVC spec to be used by the Prometheus StatefulSets.
The easiest way to use a volume that cannot be automatically provisioned
is to use a label selector alongside manually created PersistentVolumes.
Type:: object



## .spec.storage.volumeClaimTemplate.metadata

Description:: 
EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
Type:: object



## .spec.storage.volumeClaimTemplate.spec

Description:: 
Defines the desired characteristics of a volume requested by a pod author.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
Type:: object



## .spec.storage.volumeClaimTemplate.spec.dataSource

Description:: 
dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
Type:: object
Required:: 
* kind
* name



## .spec.storage.volumeClaimTemplate.spec.dataSourceRef

Description:: 
dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
Type:: object
Required:: 
* kind
* name



## .spec.storage.volumeClaimTemplate.spec.resources

Description:: 
resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
Type:: object



## .spec.storage.volumeClaimTemplate.spec.selector

Description:: 
selector is a label query over volumes to consider for binding.
Type:: object



## .spec.storage.volumeClaimTemplate.spec.selector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.storage.volumeClaimTemplate.spec.selector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.storage.volumeClaimTemplate.status

Description:: 
Deprecated: this field is never set.
Type:: object



## .spec.storage.volumeClaimTemplate.status.conditions

Description:: 
conditions is the current Condition of persistent volume claim. If underlying persistent volume is being
resized then the Condition will be set to 'Resizing'.
Type:: array

## .spec.storage.volumeClaimTemplate.status.conditions[]

Description:: 
PersistentVolumeClaimCondition contains details about state of pvc
Type:: object
Required:: 
* status
* type



## .spec.storage.volumeClaimTemplate.status.modifyVolumeStatus

Description:: 
ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.
When this is unset, there is no ModifyVolume operation being attempted.
This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
Type:: object
Required:: 
* status



## .spec.tolerations

Description:: 
If specified, the pod's tolerations.
Type:: array

## .spec.tolerations[]

Description:: 
The pod this Toleration is attached to tolerates any taint that matches
the triple <key,value,effect> using the matching operator <operator>.
Type:: object



## .spec.topologySpreadConstraints

Description:: 
If specified, the pod's topology spread constraints.
Type:: array

## .spec.topologySpreadConstraints[]

Description:: 
TopologySpreadConstraint specifies how to spread matching pods among the given topology.
Type:: object
Required:: 
* maxSkew
* topologyKey
* whenUnsatisfiable



## .spec.topologySpreadConstraints[].labelSelector

Description:: 
LabelSelector is used to find matching pods.
Pods that match this label selector are counted to determine the number of pods
in their corresponding topology domain.
Type:: object



## .spec.topologySpreadConstraints[].labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.topologySpreadConstraints[].labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.volumeMounts

Description:: 
VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition.
VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container,
that are generated as a result of StorageSpec objects.
Type:: array

## .spec.volumeMounts[]

Description:: 
VolumeMount describes a mounting of a Volume within a container.
Type:: object
Required:: 
* mountPath
* name



## .spec.volumes

Description:: 
Volumes allows configuration of additional volumes on the output StatefulSet definition.
Volumes specified will be appended to other volumes that are generated as a result of
StorageSpec objects.
Type:: array

## .spec.volumes[]

Description:: 
Volume represents a named volume in a pod that may be accessed by any container in the pod.
Type:: object
Required:: 
* name



## .spec.volumes[].awsElasticBlockStore

Description:: 
awsElasticBlockStore represents an AWS Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
Type:: object
Required:: 
* volumeID



## .spec.volumes[].azureDisk

Description:: 
azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
are redirected to the disk.csi.azure.com CSI driver.
Type:: object
Required:: 
* diskName
* diskURI



## .spec.volumes[].azureFile

Description:: 
azureFile represents an Azure File Service mount on the host and bind mount to the pod.
Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
are redirected to the file.csi.azure.com CSI driver.
Type:: object
Required:: 
* secretName
* shareName



## .spec.volumes[].cephfs

Description:: 
cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
Type:: object
Required:: 
* monitors



## .spec.volumes[].cephfs.secretRef

Description:: 
secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
Type:: object



## .spec.volumes[].cinder

Description:: 
cinder represents a cinder volume attached and mounted on kubelets host machine.
Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
are redirected to the cinder.csi.openstack.org CSI driver.
More info: https://examples.k8s.io/mysql-cinder-pd/README.md
Type:: object
Required:: 
* volumeID



## .spec.volumes[].cinder.secretRef

Description:: 
secretRef is optional: points to a secret object containing parameters used to connect
to OpenStack.
Type:: object



## .spec.volumes[].configMap

Description:: 
configMap represents a configMap that should populate this volume
Type:: object



## .spec.volumes[].configMap.items

Description:: 
items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
Type:: array

## .spec.volumes[].configMap.items[]

Description:: 
Maps a string key to a path within a volume.
Type:: object
Required:: 
* key
* path



## .spec.volumes[].csi

Description:: 
csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
Type:: object
Required:: 
* driver



## .spec.volumes[].csi.nodePublishSecretRef

Description:: 
nodePublishSecretRef is a reference to the secret object containing
sensitive information to pass to the CSI driver to complete the CSI
NodePublishVolume and NodeUnpublishVolume calls.
This field is optional, and  may be empty if no secret is required. If the
secret object contains more than one secret, all secret references are passed.
Type:: object



## .spec.volumes[].downwardAPI

Description:: 
downwardAPI represents downward API about the pod that should populate this volume
Type:: object



## .spec.volumes[].downwardAPI.items

Description:: 
Items is a list of downward API volume file
Type:: array

## .spec.volumes[].downwardAPI.items[]

Description:: 
DownwardAPIVolumeFile represents information to create the file containing the pod field
Type:: object
Required:: 
* path



## .spec.volumes[].downwardAPI.items[].fieldRef

Description:: 
Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
Type:: object
Required:: 
* fieldPath



## .spec.volumes[].downwardAPI.items[].resourceFieldRef

Description:: 
Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
Type:: object
Required:: 
* resource



## .spec.volumes[].emptyDir

Description:: 
emptyDir represents a temporary directory that shares a pod's lifetime.
More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
Type:: object



## .spec.volumes[].ephemeral

Description:: 
ephemeral represents a volume that is handled by a cluster storage driver.
The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
and deleted when the pod is removed.
Use this if:
a) the volume is only needed while the pod runs,
b) features of normal volumes like restoring from snapshot or capacity
   tracking are needed,
c) the storage driver is specified through a storage class, and
d) the storage driver supports dynamic volume provisioning through
   a PersistentVolumeClaim (see EphemeralVolumeSource for more
   information on the connection between this volume type
   and PersistentVolumeClaim).
Use PersistentVolumeClaim or one of the vendor-specific
APIs for volumes that persist for longer than the lifecycle
of an individual pod.
Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
be used that way - see the documentation of the driver for
more information.
A pod can use both types of ephemeral volumes and
persistent volumes at the same time.
Type:: object



## .spec.volumes[].ephemeral.volumeClaimTemplate

Description:: 
Will be used to create a stand-alone PVC to provision the volume.
The pod in which this EphemeralVolumeSource is embedded will be the
owner of the PVC, i.e. the PVC will be deleted together with the
pod.  The name of the PVC will be <pod name>-<volume name> where
<volume name> is the name from the PodSpec.Volumes array
entry. Pod validation will reject the pod if the concatenated name
is not valid for a PVC (for example, too long).
An existing PVC with that name that is not owned by the pod
will not be used for the pod to avoid using an unrelated
volume by mistake. Starting the pod is then blocked until
the unrelated PVC is removed. If such a pre-created PVC is
meant to be used by the pod, the PVC has to updated with an
owner reference to the pod once the pod exists. Normally
this should not be necessary, but it may be useful when
manually reconstructing a broken cluster.
This field is read-only and no changes will be made by Kubernetes
to the PVC after it has been created.
Required, must not be nil.
Type:: object
Required:: 
* spec



## .spec.volumes[].ephemeral.volumeClaimTemplate.metadata

Description:: 
May contain labels and annotations that will be copied into the PVC
when creating it. No other fields are allowed and will be rejected during
validation.
Type:: object

## .spec.volumes[].ephemeral.volumeClaimTemplate.spec

Description:: 
The specification for the PersistentVolumeClaim. The entire content is
copied unchanged into the PVC that gets created from this
template. The same fields as in a PersistentVolumeClaim
are also valid here.
Type:: object



## .spec.volumes[].ephemeral.volumeClaimTemplate.spec.dataSource

Description:: 
dataSource field can be used to specify either:
* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)
If the provisioner or an external controller can support the specified data source,
it will create a new volume based on the contents of the specified data source.
When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
If the namespace is specified, then dataSourceRef will not be copied to dataSource.
Type:: object
Required:: 
* kind
* name



## .spec.volumes[].ephemeral.volumeClaimTemplate.spec.dataSourceRef

Description:: 
dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
volume is desired. This may be any object from a non-empty API group (non
core object) or a PersistentVolumeClaim object.
When this field is specified, volume binding will only succeed if the type of
the specified object matches some installed volume populator or dynamic
provisioner.
This field will replace the functionality of the dataSource field and as such
if both fields are non-empty, they must have the same value. For backwards
compatibility, when namespace isn't specified in dataSourceRef,
both fields (dataSource and dataSourceRef) will be set to the same
value automatically if one of them is empty and the other is non-empty.
When namespace is specified in dataSourceRef,
dataSource isn't set to the same value and must be empty.
There are three important differences between dataSource and dataSourceRef:
* While dataSource only allows two specific types of objects, dataSourceRef
  allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef
  preserves all values, and generates an error if a disallowed value is
  specified.
* While dataSource only allows local objects, dataSourceRef allows objects
  in any namespaces.
(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
Type:: object
Required:: 
* kind
* name



## .spec.volumes[].ephemeral.volumeClaimTemplate.spec.resources

Description:: 
resources represents the minimum resources the volume should have.
If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
that are lower than previous value but must still be higher than capacity recorded in the
status field of the claim.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
Type:: object



## .spec.volumes[].ephemeral.volumeClaimTemplate.spec.selector

Description:: 
selector is a label query over volumes to consider for binding.
Type:: object



## .spec.volumes[].ephemeral.volumeClaimTemplate.spec.selector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.volumes[].ephemeral.volumeClaimTemplate.spec.selector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.volumes[].fc

Description:: 
fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
Type:: object



## .spec.volumes[].flexVolume

Description:: 
flexVolume represents a generic volume resource that is
provisioned/attached using an exec based plugin.
Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
Type:: object
Required:: 
* driver



## .spec.volumes[].flexVolume.secretRef

Description:: 
secretRef is Optional: secretRef is reference to the secret object containing
sensitive information to pass to the plugin scripts. This may be
empty if no secret object is specified. If the secret object
contains more than one secret, all secrets are passed to the plugin
scripts.
Type:: object



## .spec.volumes[].flocker

Description:: 
flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
Type:: object



## .spec.volumes[].gcePersistentDisk

Description:: 
gcePersistentDisk represents a GCE Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
Type:: object
Required:: 
* pdName



## .spec.volumes[].gitRepo

Description:: 
gitRepo represents a git repository at a particular revision.
Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
into the Pod's container.
Type:: object
Required:: 
* repository



## .spec.volumes[].glusterfs

Description:: 
glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
More info: https://examples.k8s.io/volumes/glusterfs/README.md
Type:: object
Required:: 
* endpoints
* path



## .spec.volumes[].hostPath

Description:: 
hostPath represents a pre-existing file or directory on the host
machine that is directly exposed to the container. This is generally
used for system agents or other privileged things that are allowed
to see the host machine. Most containers will NOT need this.
More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
Type:: object
Required:: 
* path



## .spec.volumes[].image

Description:: 
image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
The volume is resolved at pod startup depending on which PullPolicy value is provided:
* Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
* Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
* IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
The OCI object gets mounted in a single directory (spec.containers[].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
The volume will be mounted read-only (ro) and non-executable files (noexec).
Sub path mounts for containers are not supported (spec.containers[].volumeMounts.subpath) before 1.33.
The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
Type:: object



## .spec.volumes[].iscsi

Description:: 
iscsi represents an ISCSI Disk resource that is attached to a
kubelet's host machine and then exposed to the pod.
More info: https://examples.k8s.io/volumes/iscsi/README.md
Type:: object
Required:: 
* iqn
* lun
* targetPortal



## .spec.volumes[].iscsi.secretRef

Description:: 
secretRef is the CHAP Secret for iSCSI target and initiator authentication
Type:: object



## .spec.volumes[].nfs

Description:: 
nfs represents an NFS mount on the host that shares a pod's lifetime
More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
Type:: object
Required:: 
* path
* server



## .spec.volumes[].persistentVolumeClaim

Description:: 
persistentVolumeClaimVolumeSource represents a reference to a
PersistentVolumeClaim in the same namespace.
More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
Type:: object
Required:: 
* claimName



## .spec.volumes[].photonPersistentDisk

Description:: 
photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
Type:: object
Required:: 
* pdID



## .spec.volumes[].portworxVolume

Description:: 
portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
is on.
Type:: object
Required:: 
* volumeID



## .spec.volumes[].projected

Description:: 
projected items for all in one resources secrets, configmaps, and downward API
Type:: object



## .spec.volumes[].projected.sources

Description:: 
sources is the list of volume projections. Each entry in this list
handles one source.
Type:: array

## .spec.volumes[].projected.sources[]

Description:: 
Projection that may be projected along with other supported volume types.
Exactly one of these fields must be set.
Type:: object



## .spec.volumes[].projected.sources[].clusterTrustBundle

Description:: 
ClusterTrustBundle allows a pod to access the .spec.trustBundle field
of ClusterTrustBundle objects in an auto-updating file.
Alpha, gated by the ClusterTrustBundleProjection feature gate.
ClusterTrustBundle objects can either be selected by name, or by the
combination of signer name and a label selector.
Kubelet performs aggressive normalization of the PEM contents written
into the pod filesystem.  Esoteric PEM features such as inter-block
comments and block headers are stripped.  Certificates are deduplicated.
The ordering of certificates within the file is arbitrary, and Kubelet
may change the order over time.
Type:: object
Required:: 
* path



## .spec.volumes[].projected.sources[].clusterTrustBundle.labelSelector

Description:: 
Select all ClusterTrustBundles that match this label selector.  Only has
effect if signerName is set.  Mutually-exclusive with name.  If unset,
interpreted as "match nothing".  If set but empty, interpreted as "match
everything".
Type:: object



## .spec.volumes[].projected.sources[].clusterTrustBundle.labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.volumes[].projected.sources[].clusterTrustBundle.labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.volumes[].projected.sources[].configMap

Description:: 
configMap information about the configMap data to project
Type:: object



## .spec.volumes[].projected.sources[].configMap.items

Description:: 
items if unspecified, each key-value pair in the Data field of the referenced
ConfigMap will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the ConfigMap,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
Type:: array

## .spec.volumes[].projected.sources[].configMap.items[]

Description:: 
Maps a string key to a path within a volume.
Type:: object
Required:: 
* key
* path



## .spec.volumes[].projected.sources[].downwardAPI

Description:: 
downwardAPI information about the downwardAPI data to project
Type:: object



## .spec.volumes[].projected.sources[].downwardAPI.items

Description:: 
Items is a list of DownwardAPIVolume file
Type:: array

## .spec.volumes[].projected.sources[].downwardAPI.items[]

Description:: 
DownwardAPIVolumeFile represents information to create the file containing the pod field
Type:: object
Required:: 
* path



## .spec.volumes[].projected.sources[].downwardAPI.items[].fieldRef

Description:: 
Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
Type:: object
Required:: 
* fieldPath



## .spec.volumes[].projected.sources[].downwardAPI.items[].resourceFieldRef

Description:: 
Selects a resource of the container: only resources limits and requests
(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
Type:: object
Required:: 
* resource



## .spec.volumes[].projected.sources[].secret

Description:: 
secret information about the secret data to project
Type:: object



## .spec.volumes[].projected.sources[].secret.items

Description:: 
items if unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
Type:: array

## .spec.volumes[].projected.sources[].secret.items[]

Description:: 
Maps a string key to a path within a volume.
Type:: object
Required:: 
* key
* path



## .spec.volumes[].projected.sources[].serviceAccountToken

Description:: 
serviceAccountToken is information about the serviceAccountToken data to project
Type:: object
Required:: 
* path



## .spec.volumes[].quobyte

Description:: 
quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
Type:: object
Required:: 
* registry
* volume



## .spec.volumes[].rbd

Description:: 
rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
More info: https://examples.k8s.io/volumes/rbd/README.md
Type:: object
Required:: 
* image
* monitors



## .spec.volumes[].rbd.secretRef

Description:: 
secretRef is name of the authentication secret for RBDUser. If provided
overrides keyring.
Default is nil.
More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
Type:: object



## .spec.volumes[].scaleIO

Description:: 
scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
Type:: object
Required:: 
* gateway
* secretRef
* system



## .spec.volumes[].scaleIO.secretRef

Description:: 
secretRef references to the secret for ScaleIO user and other
sensitive information. If this is not provided, Login operation will fail.
Type:: object



## .spec.volumes[].secret

Description:: 
secret represents a secret that should populate this volume.
More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
Type:: object



## .spec.volumes[].secret.items

Description:: 
items If unspecified, each key-value pair in the Data field of the referenced
Secret will be projected into the volume as a file whose name is the
key and content is the value. If specified, the listed keys will be
projected into the specified paths, and unlisted keys will not be
present. If a key is specified which is not present in the Secret,
the volume setup will error unless it is marked optional. Paths must be
relative and may not contain the '..' path or start with '..'.
Type:: array

## .spec.volumes[].secret.items[]

Description:: 
Maps a string key to a path within a volume.
Type:: object
Required:: 
* key
* path



## .spec.volumes[].storageos

Description:: 
storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
Type:: object



## .spec.volumes[].storageos.secretRef

Description:: 
secretRef specifies the secret to use for obtaining the StorageOS API
credentials.  If not specified, default values will be attempted.
Type:: object



## .spec.volumes[].vsphereVolume

Description:: 
vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
are redirected to the csi.vsphere.vmware.com CSI driver.
Type:: object
Required:: 
* volumePath



## .spec.web

Description:: 
Defines the web command line flags when starting Alertmanager.
Type:: object



## .spec.web.httpConfig

Description:: 
Defines HTTP parameters for web server.
Type:: object



## .spec.web.httpConfig.headers

Description:: 
List of headers that can be added to HTTP responses.
Type:: object



## .spec.web.tlsConfig

Description:: 
Defines the TLS parameters for HTTPS.
Type:: object



## .spec.web.tlsConfig.cert

Description:: 
Secret or ConfigMap containing the TLS certificate for the web server.
Either keySecret or keyFile must be defined.
It is mutually exclusive with certFile.
Type:: object



## .spec.web.tlsConfig.cert.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.web.tlsConfig.cert.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.web.tlsConfig.client_ca

Description:: 
Secret or ConfigMap containing the CA certificate for client certificate
authentication to the server.
It is mutually exclusive with clientCAFile.
Type:: object



## .spec.web.tlsConfig.client_ca.configMap

Description:: 
ConfigMap containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.web.tlsConfig.client_ca.secret

Description:: 
Secret containing data to use for the targets.
Type:: object
Required:: 
* key



## .spec.web.tlsConfig.keySecret

Description:: 
Secret containing the TLS private key for the web server.
Either cert or certFile must be defined.
It is mutually exclusive with keyFile.
Type:: object
Required:: 
* key



## .status

Description:: 
Most recent observed status of the Alertmanager cluster. Read-only.
More info:
https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
Type:: object
Required:: 
* availableReplicas
* paused
* replicas
* unavailableReplicas
* updatedReplicas



## .status.conditions

Description:: 
The current state of the Alertmanager object.
Type:: array

## .status.conditions[]

Description:: 
Condition represents the state of the resources associated with the
Prometheus, Alertmanager or ThanosRuler resource.
Type:: object
Required:: 
* lastTransitionTime
* status
* type



# API endpoints

The following API endpoints are available:

* /apis/monitoring.coreos.com/v1/alertmanagers
* GET: list objects of kind Alertmanager
* /apis/monitoring.coreos.com/v1/namespaces/{namespace}/alertmanagers
* DELETE: delete collection of Alertmanager
* GET: list objects of kind Alertmanager
* POST: create an Alertmanager
* /apis/monitoring.coreos.com/v1/namespaces/{namespace}/alertmanagers/{name}
* DELETE: delete an Alertmanager
* GET: read the specified Alertmanager
* PATCH: partially update the specified Alertmanager
* PUT: replace the specified Alertmanager
* /apis/monitoring.coreos.com/v1/namespaces/{namespace}/alertmanagers/{name}/scale
* GET: read scale of the specified Alertmanager
* PATCH: partially update scale of the specified Alertmanager
* PUT: replace scale of the specified Alertmanager
* /apis/monitoring.coreos.com/v1/namespaces/{namespace}/alertmanagers/{name}/status
* GET: read status of the specified Alertmanager
* PATCH: partially update status of the specified Alertmanager
* PUT: replace status of the specified Alertmanager

## /apis/monitoring.coreos.com/v1/alertmanagers

HTTP method:: GET
Description:: list objects of kind Alertmanager



## /apis/monitoring.coreos.com/v1/namespaces/{namespace}/alertmanagers

HTTP method:: DELETE
Description:: delete collection of Alertmanager



HTTP method:: GET
Description:: list objects of kind Alertmanager



HTTP method:: POST
Description:: create an Alertmanager







## /apis/monitoring.coreos.com/v1/namespaces/{namespace}/alertmanagers/{name}



HTTP method:: DELETE
Description:: delete an Alertmanager





HTTP method:: GET
Description:: read the specified Alertmanager



HTTP method:: PATCH
Description:: partially update the specified Alertmanager





HTTP method:: PUT
Description:: replace the specified Alertmanager







## /apis/monitoring.coreos.com/v1/namespaces/{namespace}/alertmanagers/{name}/scale



HTTP method:: GET
Description:: read scale of the specified Alertmanager



HTTP method:: PATCH
Description:: partially update scale of the specified Alertmanager





HTTP method:: PUT
Description:: replace scale of the specified Alertmanager







## /apis/monitoring.coreos.com/v1/namespaces/{namespace}/alertmanagers/{name}/status



HTTP method:: GET
Description:: read status of the specified Alertmanager



HTTP method:: PATCH
Description:: partially update status of the specified Alertmanager





HTTP method:: PUT
Description:: replace status of the specified Alertmanager





