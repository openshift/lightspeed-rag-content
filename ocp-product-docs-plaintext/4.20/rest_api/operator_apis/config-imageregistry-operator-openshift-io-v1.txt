# Config [imageregistry.operator.openshift.io/v1]


Description:: 
Config is the configuration object for a registry instance managed by
the registry operator
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* metadata
* spec

# Specification



## .spec

Description:: 
ImageRegistrySpec defines the specs for the running registry.
Type:: object
Required:: 
* replicas



## .spec.affinity

Description:: 
affinity is a group of node affinity scheduling rules for the image registry pod(s).
Type:: object



## .spec.affinity.nodeAffinity

Description:: 
Describes node affinity scheduling rules for the pod.
Type:: object



## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution

Description:: 
The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node matches the corresponding matchExpressions; the
node(s) with the highest sum are the most preferred.
Type:: array

## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[]

Description:: 
An empty preferred scheduling term matches all objects with implicit weight 0
(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
Type:: object
Required:: 
* preference
* weight



## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference

Description:: 
A node selector term, associated with the corresponding weight.
Type:: object



## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchExpressions

Description:: 
A list of node selector requirements by node's labels.
Type:: array

## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchExpressions[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchFields

Description:: 
A list of node selector requirements by node's fields.
Type:: array

## .spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchFields[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution

Description:: 
If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to an update), the system
may or may not try to eventually evict the pod from its node.
Type:: object
Required:: 
* nodeSelectorTerms



## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms

Description:: 
Required. A list of node selector terms. The terms are ORed.
Type:: array

## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[]

Description:: 
A null or empty node selector term matches no objects. The requirements of
them are ANDed.
The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
Type:: object



## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchExpressions

Description:: 
A list of node selector requirements by node's labels.
Type:: array

## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchExpressions[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchFields

Description:: 
A list of node selector requirements by node's fields.
Type:: array

## .spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchFields[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator
that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAffinity

Description:: 
Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
Type:: object



## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution

Description:: 
The scheduler will prefer to schedule pods to nodes that satisfy
the affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
Type:: array

## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[]

Description:: 
The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
Type:: object
Required:: 
* podAffinityTerm
* weight



## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm

Description:: 
Required. A pod affinity term, associated with the corresponding weight.
Type:: object
Required:: 
* topologyKey



## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector

Description:: 
A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
Type:: object



## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector

Description:: 
A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
Type:: object



## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution

Description:: 
If the affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
Type:: array

## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[]

Description:: 
Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
Type:: object
Required:: 
* topologyKey



## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector

Description:: 
A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
Type:: object



## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector

Description:: 
A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
Type:: object



## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAntiAffinity

Description:: 
Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
Type:: object



## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution

Description:: 
The scheduler will prefer to schedule pods to nodes that satisfy
the anti-affinity expressions specified by this field, but it may choose
a node that violates one or more of the expressions. The node that is
most preferred is the one with the greatest sum of weights, i.e.
for each node that meets all of the scheduling requirements (resource
request, requiredDuringScheduling anti-affinity expressions, etc.),
compute a sum by iterating through the elements of this field and adding
"weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
node(s) with the highest sum are the most preferred.
Type:: array

## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[]

Description:: 
The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
Type:: object
Required:: 
* podAffinityTerm
* weight



## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm

Description:: 
Required. A pod affinity term, associated with the corresponding weight.
Type:: object
Required:: 
* topologyKey



## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector

Description:: 
A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
Type:: object



## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector

Description:: 
A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
Type:: object



## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm.namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution

Description:: 
If the anti-affinity requirements specified by this field are not met at
scheduling time, the pod will not be scheduled onto the node.
If the anti-affinity requirements specified by this field cease to be met
at some point during pod execution (e.g. due to a pod label update), the
system may or may not try to eventually evict the pod from its node.
When there are multiple elements, the lists of nodes corresponding to each
podAffinityTerm are intersected, i.e. all terms must be satisfied.
Type:: array

## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[]

Description:: 
Defines a set of pods (namely those matching the labelSelector
relative to the given namespace(s)) that this pod should be
co-located (affinity) or not co-located (anti-affinity) with,
where co-located is defined as running on a node whose value of
the label with key <topologyKey> matches that of any node on which
a pod of the set of pods is running
Type:: object
Required:: 
* topologyKey



## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector

Description:: 
A label query over a set of resources, in this case pods.
If it's null, this PodAffinityTerm matches with no Pods.
Type:: object



## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector

Description:: 
A label query over the set of namespaces that the term applies to.
The term is applied to the union of the namespaces selected by this field
and the ones listed in the namespaces field.
null selector and null or empty namespaces list means "this pod's namespace".
An empty selector ({}) matches all namespaces.
Type:: object



## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[].namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.proxy

Description:: 
proxy defines the proxy to be used when calling master api, upstream
registries, etc.
Type:: object



## .spec.requests

Description:: 
requests controls how many parallel requests a given registry instance
will handle before queuing additional requests.
Type:: object



## .spec.requests.read

Description:: 
read defines limits for image registry's reads.
Type:: object



## .spec.requests.write

Description:: 
write defines limits for image registry's writes.
Type:: object



## .spec.resources

Description:: 
resources defines the resource requests+limits for the registry pod.
Type:: object



## .spec.resources.claims

Description:: 
Claims lists the names of resources, defined in spec.resourceClaims,
that are used by this container.
This is an alpha field and requires enabling the
DynamicResourceAllocation feature gate.
This field is immutable. It can only be set for containers.
Type:: array

## .spec.resources.claims[]

Description:: 
ResourceClaim references one entry in PodSpec.ResourceClaims.
Type:: object
Required:: 
* name



## .spec.routes

Description:: 
routes defines additional external facing routes which should be
created for the registry.
Type:: array

## .spec.routes[]

Description:: 
ImageRegistryConfigRoute holds information on external route access to image
registry.
Type:: object
Required:: 
* name



## .spec.storage

Description:: 
storage details for configuring registry storage, e.g. S3 bucket
coordinates.
Type:: object



## .spec.storage.azure

Description:: 
azure represents configuration that uses Azure Blob Storage.
Type:: object



## .spec.storage.azure.networkAccess

Description:: 
networkAccess defines the network access properties for the storage account.
Defaults to type: External.
Type:: object



## .spec.storage.azure.networkAccess.internal

Description:: 
internal defines the vnet and subnet names to configure a private
endpoint and connect it to the storage account in order to make it
private.
when type: Internal and internal is unset, the image registry operator
will discover vnet and subnet names, and generate a private endpoint
name.
Type:: object



## .spec.storage.emptyDir

Description:: 
emptyDir represents ephemeral storage on the pod's host node.
WARNING: this storage cannot be used with more than 1 replica and
is not suitable for production use. When the pod is removed from a
node for any reason, the data in the emptyDir is deleted forever.
Type:: object

## .spec.storage.gcs

Description:: 
gcs represents configuration that uses Google Cloud Storage.
Type:: object



## .spec.storage.ibmcos

Description:: 
ibmcos represents configuration that uses IBM Cloud Object Storage.
Type:: object



## .spec.storage.oss

Description:: 
Oss represents configuration that uses Alibaba Cloud Object Storage Service.
Type:: object



## .spec.storage.oss.encryption

Description:: 
Encryption specifies whether you would like your data encrypted on the server side.
More details, you can look cat the [official documentation](https://www.alibabacloud.com/help/doc-detail/117914.htm)
Type:: object



## .spec.storage.oss.encryption.kms

Description:: 
KMS (key management service) is an encryption type that holds the struct for KMS KeyID
Type:: object
Required:: 
* keyID



## .spec.storage.pvc

Description:: 
pvc represents configuration that uses a PersistentVolumeClaim.
Type:: object



## .spec.storage.s3

Description:: 
s3 represents configuration that uses Amazon Simple Storage Service.
Type:: object



## .spec.storage.s3.cloudFront

Description:: 
cloudFront configures Amazon Cloudfront as the storage middleware in a
registry.
Type:: object
Required:: 
* baseURL
* keypairID
* privateKey



## .spec.storage.s3.cloudFront.privateKey

Description:: 
privateKey points to secret containing the private key, provided by AWS.
Type:: object
Required:: 
* key



## .spec.storage.s3.trustedCA

Description:: 
trustedCA is a reference to a config map containing a CA bundle. The
image registry and its operator use certificates from this bundle to
verify S3 server certificates.
The namespace for the config map referenced by trustedCA is
"openshift-config". The key for the bundle in the config map is
"ca-bundle.crt".
Type:: object



## .spec.storage.swift

Description:: 
swift represents configuration that uses OpenStack Object Storage.
Type:: object



## .spec.tolerations

Description:: 
tolerations defines the tolerations for the registry pod.
Type:: array

## .spec.tolerations[]

Description:: 
The pod this Toleration is attached to tolerates any taint that matches
the triple <key,value,effect> using the matching operator <operator>.
Type:: object



## .spec.topologySpreadConstraints

Description:: 
topologySpreadConstraints specify how to spread matching pods among the given topology.
Type:: array

## .spec.topologySpreadConstraints[]

Description:: 
TopologySpreadConstraint specifies how to spread matching pods among the given topology.
Type:: object
Required:: 
* maxSkew
* topologyKey
* whenUnsatisfiable



## .spec.topologySpreadConstraints[].labelSelector

Description:: 
LabelSelector is used to find matching pods.
Pods that match this label selector are counted to determine the number of pods
in their corresponding topology domain.
Type:: object



## .spec.topologySpreadConstraints[].labelSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.topologySpreadConstraints[].labelSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .status

Description:: 
ImageRegistryStatus reports image registry operational status.
Type:: object
Required:: 
* storage
* storageManaged



## .status.conditions

Description:: 
conditions is a list of conditions and their status
Type:: array

## .status.conditions[]

Description:: 
OperatorCondition is just the standard condition fields.
Type:: object
Required:: 
* lastTransitionTime
* status
* type



## .status.generations

Description:: 
generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
Type:: array

## .status.generations[]

Description:: 
GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.
Type:: object
Required:: 
* group
* name
* namespace
* resource



## .status.storage

Description:: 
storage indicates the current applied storage configuration of the
registry.
Type:: object



## .status.storage.azure

Description:: 
azure represents configuration that uses Azure Blob Storage.
Type:: object



## .status.storage.azure.networkAccess

Description:: 
networkAccess defines the network access properties for the storage account.
Defaults to type: External.
Type:: object



## .status.storage.azure.networkAccess.internal

Description:: 
internal defines the vnet and subnet names to configure a private
endpoint and connect it to the storage account in order to make it
private.
when type: Internal and internal is unset, the image registry operator
will discover vnet and subnet names, and generate a private endpoint
name.
Type:: object



## .status.storage.emptyDir

Description:: 
emptyDir represents ephemeral storage on the pod's host node.
WARNING: this storage cannot be used with more than 1 replica and
is not suitable for production use. When the pod is removed from a
node for any reason, the data in the emptyDir is deleted forever.
Type:: object

## .status.storage.gcs

Description:: 
gcs represents configuration that uses Google Cloud Storage.
Type:: object



## .status.storage.ibmcos

Description:: 
ibmcos represents configuration that uses IBM Cloud Object Storage.
Type:: object



## .status.storage.oss

Description:: 
Oss represents configuration that uses Alibaba Cloud Object Storage Service.
Type:: object



## .status.storage.oss.encryption

Description:: 
Encryption specifies whether you would like your data encrypted on the server side.
More details, you can look cat the [official documentation](https://www.alibabacloud.com/help/doc-detail/117914.htm)
Type:: object



## .status.storage.oss.encryption.kms

Description:: 
KMS (key management service) is an encryption type that holds the struct for KMS KeyID
Type:: object
Required:: 
* keyID



## .status.storage.pvc

Description:: 
pvc represents configuration that uses a PersistentVolumeClaim.
Type:: object



## .status.storage.s3

Description:: 
s3 represents configuration that uses Amazon Simple Storage Service.
Type:: object



## .status.storage.s3.cloudFront

Description:: 
cloudFront configures Amazon Cloudfront as the storage middleware in a
registry.
Type:: object
Required:: 
* baseURL
* keypairID
* privateKey



## .status.storage.s3.cloudFront.privateKey

Description:: 
privateKey points to secret containing the private key, provided by AWS.
Type:: object
Required:: 
* key



## .status.storage.s3.trustedCA

Description:: 
trustedCA is a reference to a config map containing a CA bundle. The
image registry and its operator use certificates from this bundle to
verify S3 server certificates.
The namespace for the config map referenced by trustedCA is
"openshift-config". The key for the bundle in the config map is
"ca-bundle.crt".
Type:: object



## .status.storage.swift

Description:: 
swift represents configuration that uses OpenStack Object Storage.
Type:: object



# API endpoints

The following API endpoints are available:

* /apis/imageregistry.operator.openshift.io/v1/configs
* DELETE: delete collection of Config
* GET: list objects of kind Config
* POST: create a Config
* /apis/imageregistry.operator.openshift.io/v1/configs/{name}
* DELETE: delete a Config
* GET: read the specified Config
* PATCH: partially update the specified Config
* PUT: replace the specified Config
* /apis/imageregistry.operator.openshift.io/v1/configs/{name}/status
* GET: read status of the specified Config
* PATCH: partially update status of the specified Config
* PUT: replace status of the specified Config

## /apis/imageregistry.operator.openshift.io/v1/configs

HTTP method:: DELETE
Description:: delete collection of Config



HTTP method:: GET
Description:: list objects of kind Config



HTTP method:: POST
Description:: create a Config







## /apis/imageregistry.operator.openshift.io/v1/configs/{name}



HTTP method:: DELETE
Description:: delete a Config





HTTP method:: GET
Description:: read the specified Config



HTTP method:: PATCH
Description:: partially update the specified Config





HTTP method:: PUT
Description:: replace the specified Config







## /apis/imageregistry.operator.openshift.io/v1/configs/{name}/status



HTTP method:: GET
Description:: read status of the specified Config



HTTP method:: PATCH
Description:: partially update status of the specified Config





HTTP method:: PUT
Description:: replace status of the specified Config





