# DNS [operator.openshift.io/v1]


Description:: 
DNS manages the CoreDNS component to provide a name resolution service for pods and services in the cluster.
 This supports the DNS-based service discovery specification: https://github.com/kubernetes/dns/blob/master/docs/specification.md
 More details: https://kubernetes.io/docs/tasks/administer-cluster/coredns
 Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object

# Specification



## .spec

Description:: 
spec is the specification of the desired behavior of the DNS.
Type:: object



## .spec.cache

Description:: 
cache describes the caching configuration that applies to all server blocks listed in the Corefile. This field allows a cluster admin to optionally configure: * positiveTTL which is a duration for which positive responses should be cached. * negativeTTL which is a duration for which negative responses should be cached. If this is not configured, OpenShift will configure positive and negative caching with a default value that is subject to change. At the time of writing, the default positiveTTL is 900 seconds and the default negativeTTL is 30 seconds or as noted in the respective Corefile for your version of OpenShift.
Type:: object



## .spec.nodePlacement

Description:: 
nodePlacement provides explicit control over the scheduling of DNS pods.
 Generally, it is useful to run a DNS pod on every node so that DNS queries are always handled by a local DNS pod instead of going over the network to a DNS pod on another node.  However, security policies may require restricting the placement of DNS pods to specific nodes. For example, if a security policy prohibits pods on arbitrary nodes from communicating with the API, a node selector can be specified to restrict DNS pods to nodes that are permitted to communicate with the API.  Conversely, if running DNS pods on nodes with a particular taint is desired, a toleration can be specified for that taint.
 If unset, defaults are used. See nodePlacement for more details.
Type:: object



## .spec.nodePlacement.tolerations

Description:: 
tolerations is a list of tolerations applied to DNS pods.
 If empty, the DNS operator sets a toleration for the "node-role.kubernetes.io/master" taint.  This default is subject to change.  Specifying tolerations without including a toleration for the "node-role.kubernetes.io/master" taint may be risky as it could lead to an outage if all worker nodes become unavailable.
 Note that the daemon controller adds some tolerations as well.  See https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
Type:: array

## .spec.nodePlacement.tolerations[]

Description:: 
The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
Type:: object



## .spec.servers

Description:: 
servers is a list of DNS resolvers that provide name query delegation for one or more subdomains outside the scope of the cluster domain. If servers consists of more than one Server, longest suffix match will be used to determine the Server.
 For example, if there are two Servers, one for "foo.com" and another for "a.foo.com", and the name query is for "www.a.foo.com", it will be routed to the Server with Zone "a.foo.com".
 If this field is nil, no servers are created.
Type:: array

## .spec.servers[]

Description:: 
Server defines the schema for a server that runs per instance of CoreDNS.
Type:: object



## .spec.servers[].forwardPlugin

Description:: 
forwardPlugin defines a schema for configuring CoreDNS to proxy DNS messages to upstream resolvers.
Type:: object



## .spec.servers[].forwardPlugin.transportConfig

Description:: 
transportConfig is used to configure the transport type, server name, and optional custom CA or CA bundle to use when forwarding DNS requests to an upstream resolver.
 The default value is "" (empty) which results in a standard cleartext connection being used when forwarding DNS requests to an upstream resolver.
Type:: object



## .spec.servers[].forwardPlugin.transportConfig.tls

Description:: 
tls contains the additional configuration options to use when Transport is set to "TLS".
Type:: object
Required:: 
* serverName



## .spec.servers[].forwardPlugin.transportConfig.tls.caBundle

Description:: 
caBundle references a ConfigMap that must contain either a single CA Certificate or a CA Bundle. This allows cluster administrators to provide their own CA or CA bundle for validating the certificate of upstream resolvers.
 1. The configmap must contain a ca-bundle.crt key. 2. The value must be a PEM encoded CA certificate or CA bundle. 3. The administrator must create this configmap in the openshift-config namespace. 4. The upstream server certificate must contain a Subject Alternative Name (SAN) that matches ServerName.
Type:: object
Required:: 
* name



## .spec.upstreamResolvers

Description:: 
upstreamResolvers defines a schema for configuring CoreDNS to proxy DNS messages to upstream resolvers for the case of the default (".") server
 If this field is not specified, the upstream used will default to /etc/resolv.conf, with policy "sequential"
Type:: object



## .spec.upstreamResolvers.transportConfig

Description:: 
transportConfig is used to configure the transport type, server name, and optional custom CA or CA bundle to use when forwarding DNS requests to an upstream resolver.
 The default value is "" (empty) which results in a standard cleartext connection being used when forwarding DNS requests to an upstream resolver.
Type:: object



## .spec.upstreamResolvers.transportConfig.tls

Description:: 
tls contains the additional configuration options to use when Transport is set to "TLS".
Type:: object
Required:: 
* serverName



## .spec.upstreamResolvers.transportConfig.tls.caBundle

Description:: 
caBundle references a ConfigMap that must contain either a single CA Certificate or a CA Bundle. This allows cluster administrators to provide their own CA or CA bundle for validating the certificate of upstream resolvers.
 1. The configmap must contain a ca-bundle.crt key. 2. The value must be a PEM encoded CA certificate or CA bundle. 3. The administrator must create this configmap in the openshift-config namespace. 4. The upstream server certificate must contain a Subject Alternative Name (SAN) that matches ServerName.
Type:: object
Required:: 
* name



## .spec.upstreamResolvers.upstreams

Description:: 
Upstreams is a list of resolvers to forward name queries for the "." domain. Each instance of CoreDNS performs health checking of Upstreams. When a healthy upstream returns an error during the exchange, another resolver is tried from Upstreams. The Upstreams are selected in the order specified in Policy.
 A maximum of 15 upstreams is allowed per ForwardPlugin. If no Upstreams are specified, /etc/resolv.conf is used by default
Type:: array

## .spec.upstreamResolvers.upstreams[]

Description:: 
Upstream can either be of type SystemResolvConf, or of type Network.
 - For an Upstream of type SystemResolvConf, no further fields are necessary: The upstream will be configured to use /etc/resolv.conf. - For an Upstream of type Network, a NetworkResolver field needs to be defined with an IP address or IP:port if the upstream listens on a port other than 53.
Type:: object
Required:: 
* type



## .status

Description:: 
status is the most recently observed status of the DNS.
Type:: object
Required:: 
* clusterDomain
* clusterIP



## .status.conditions

Description:: 
conditions provide information about the state of the DNS on the cluster.
 These are the supported DNS conditions:
 * Available - True if the following conditions are met: * DNS controller daemonset is available. - False if any of those conditions are unsatisfied.
Type:: array

## .status.conditions[]

Description:: 
OperatorCondition is just the standard condition fields.
Type:: object
Required:: 
* type



# API endpoints

The following API endpoints are available:

* /apis/operator.openshift.io/v1/dnses
* DELETE: delete collection of DNS
* GET: list objects of kind DNS
* POST: create a DNS
* /apis/operator.openshift.io/v1/dnses/{name}
* DELETE: delete a DNS
* GET: read the specified DNS
* PATCH: partially update the specified DNS
* PUT: replace the specified DNS
* /apis/operator.openshift.io/v1/dnses/{name}/status
* GET: read status of the specified DNS
* PATCH: partially update status of the specified DNS
* PUT: replace status of the specified DNS

## /apis/operator.openshift.io/v1/dnses

HTTP method:: DELETE
Description:: delete collection of DNS



HTTP method:: GET
Description:: list objects of kind DNS



HTTP method:: POST
Description:: create a DNS







## /apis/operator.openshift.io/v1/dnses/{name}



HTTP method:: DELETE
Description:: delete a DNS





HTTP method:: GET
Description:: read the specified DNS



HTTP method:: PATCH
Description:: partially update the specified DNS





HTTP method:: PUT
Description:: replace the specified DNS







## /apis/operator.openshift.io/v1/dnses/{name}/status



HTTP method:: GET
Description:: read status of the specified DNS



HTTP method:: PATCH
Description:: partially update status of the specified DNS





HTTP method:: PUT
Description:: replace status of the specified DNS





