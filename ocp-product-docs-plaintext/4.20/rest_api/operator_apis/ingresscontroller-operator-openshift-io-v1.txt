# IngressController [operator.openshift.io/v1]


Description:: 
IngressController describes a managed ingress controller for the cluster. The
controller can service OpenShift Route and Kubernetes Ingress resources.
When an IngressController is created, a new ingress controller deployment is
created to allow external traffic to reach the services that expose Ingress
or Route resources. Updating this resource may lead to disruption for public
facing network connections as a new ingress controller revision may be rolled
out.
https://kubernetes.io/docs/concepts/services-networking/ingress-controllers
Whenever possible, sensible defaults for the platform are used. See each
field for more details.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object

# Specification



## .spec

Description:: 
spec is the specification of the desired behavior of the IngressController.
Type:: object



## .spec.clientTLS

Description:: 
clientTLS specifies settings for requesting and verifying client
certificates, which can be used to enable mutual TLS for
edge-terminated and reencrypt routes.
Type:: object
Required:: 
* clientCA
* clientCertificatePolicy



## .spec.clientTLS.clientCA

Description:: 
clientCA specifies a configmap containing the PEM-encoded CA
certificate bundle that should be used to verify a client's
certificate.  The administrator must create this configmap in the
openshift-config namespace.
Type:: object
Required:: 
* name



## .spec.defaultCertificate

Description:: 
defaultCertificate is a reference to a secret containing the default
certificate served by the ingress controller. When Routes don't specify
their own certificate, defaultCertificate is used.
The secret must contain the following keys and data:
tls.crt: certificate file contents
tls.key: key file contents
If unset, a wildcard certificate is automatically generated and used. The
certificate is valid for the ingress controller domain (and subdomains) and
the generated certificate's CA will be automatically integrated with the
cluster's trust store.
If a wildcard certificate is used and shared by multiple
HTTP/2 enabled routes (which implies ALPN) then clients
(i.e., notably browsers) are at liberty to reuse open
connections. This means a client can reuse a connection to
another route and that is likely to fail. This behaviour is
generally known as connection coalescing.
The in-use certificate (whether generated or user-specified) will be
automatically integrated with OpenShift's built-in OAuth server.
Type:: object



## .spec.endpointPublishingStrategy

Description:: 
endpointPublishingStrategy is used to publish the ingress controller
endpoints to other networks, enable load balancer integrations, etc.
If unset, the default is based on
infrastructure.config.openshift.io/cluster .status.platform:
AWS:          LoadBalancerService (with External scope)
Azure:        LoadBalancerService (with External scope)
GCP:          LoadBalancerService (with External scope)
IBMCloud:     LoadBalancerService (with External scope)
AlibabaCloud: LoadBalancerService (with External scope)
Libvirt:      HostNetwork
Any other platform types (including None) default to HostNetwork.
endpointPublishingStrategy cannot be updated.
Type:: object
Required:: 
* type



## .spec.endpointPublishingStrategy.hostNetwork

Description:: 
hostNetwork holds parameters for the HostNetwork endpoint publishing
strategy. Present only if type is HostNetwork.
Type:: object



## .spec.endpointPublishingStrategy.loadBalancer

Description:: 
loadBalancer holds parameters for the load balancer. Present only if
type is LoadBalancerService.
Type:: object
Required:: 
* dnsManagementPolicy
* scope



## .spec.endpointPublishingStrategy.loadBalancer.providerParameters

Description:: 
providerParameters holds desired load balancer information specific to
the underlying infrastructure provider.
If empty, defaults will be applied. See specific providerParameters
fields for details about their defaults.
Type:: object
Required:: 
* type



## .spec.endpointPublishingStrategy.loadBalancer.providerParameters.aws

Description:: 
aws provides configuration settings that are specific to AWS
load balancers.
If empty, defaults will be applied. See specific aws fields for
details about their defaults.
Type:: object
Required:: 
* type



## .spec.endpointPublishingStrategy.loadBalancer.providerParameters.aws.classicLoadBalancer

Description:: 
classicLoadBalancerParameters holds configuration parameters for an AWS
classic load balancer. Present only if type is Classic.
Type:: object



## .spec.endpointPublishingStrategy.loadBalancer.providerParameters.aws.classicLoadBalancer.subnets

Description:: 
subnets specifies the subnets to which the load balancer will
attach. The subnets may be specified by either their
ID or name. The total number of subnets is limited to 10.
In order for the load balancer to be provisioned with subnets,
each subnet must exist, each subnet must be from a different
availability zone, and the load balancer service must be
recreated to pick up new values.
When omitted from the spec, the subnets will be auto-discovered
for each availability zone. Auto-discovered subnets are not reported
in the status of the IngressController object.
Type:: object



## .spec.endpointPublishingStrategy.loadBalancer.providerParameters.aws.networkLoadBalancer

Description:: 
networkLoadBalancerParameters holds configuration parameters for an AWS
network load balancer. Present only if type is NLB.
Type:: object



## .spec.endpointPublishingStrategy.loadBalancer.providerParameters.aws.networkLoadBalancer.subnets

Description:: 
subnets specifies the subnets to which the load balancer will
attach. The subnets may be specified by either their
ID or name. The total number of subnets is limited to 10.
In order for the load balancer to be provisioned with subnets,
each subnet must exist, each subnet must be from a different
availability zone, and the load balancer service must be
recreated to pick up new values.
When omitted from the spec, the subnets will be auto-discovered
for each availability zone. Auto-discovered subnets are not reported
in the status of the IngressController object.
Type:: object



## .spec.endpointPublishingStrategy.loadBalancer.providerParameters.gcp

Description:: 
gcp provides configuration settings that are specific to GCP
load balancers.
If empty, defaults will be applied. See specific gcp fields for
details about their defaults.
Type:: object



## .spec.endpointPublishingStrategy.loadBalancer.providerParameters.ibm

Description:: 
ibm provides configuration settings that are specific to IBM Cloud
load balancers.
If empty, defaults will be applied. See specific ibm fields for
details about their defaults.
Type:: object



## .spec.endpointPublishingStrategy.loadBalancer.providerParameters.openstack

Description:: 
openstack provides configuration settings that are specific to OpenStack
load balancers.
If empty, defaults will be applied. See specific openstack fields for
details about their defaults.
Type:: object



## .spec.endpointPublishingStrategy.nodePort

Description:: 
nodePort holds parameters for the NodePortService endpoint publishing strategy.
Present only if type is NodePortService.
Type:: object



## .spec.endpointPublishingStrategy.private

Description:: 
private holds parameters for the Private endpoint publishing
strategy. Present only if type is Private.
Type:: object



## .spec.httpCompression

Description:: 
httpCompression defines a policy for HTTP traffic compression.
By default, there is no HTTP compression.
Type:: object



## .spec.httpErrorCodePages

Description:: 
httpErrorCodePages specifies a configmap with custom error pages.
The administrator must create this configmap in the openshift-config namespace.
This configmap should have keys in the format "error-page-<error code>.http",
where <error code> is an HTTP error code.
For example, "error-page-503.http" defines an error page for HTTP 503 responses.
Currently only error pages for 503 and 404 responses can be customized.
Each value in the configmap should be the full response, including HTTP headers.
Eg- https://raw.githubusercontent.com/openshift/router/fadab45747a9b30cc3f0a4b41ad2871f95827a93/images/router/haproxy/conf/error-page-503.http
If this field is empty, the ingress controller uses the default error pages.
Type:: object
Required:: 
* name



## .spec.httpHeaders

Description:: 
httpHeaders defines policy for HTTP headers.
If this field is empty, the default values are used.
Type:: object



## .spec.httpHeaders.actions

Description:: 
actions specifies options for modifying headers and their values.
Note that this option only applies to cleartext HTTP connections
and to secure HTTP connections for which the ingress controller
terminates encryption (that is, edge-terminated or reencrypt
connections).  Headers cannot be modified for TLS passthrough
connections.
Setting the HSTS (Strict-Transport-Security) header is not supported via actions. Strict-Transport-Security
may only be configured using the "haproxy.router.openshift.io/hsts_header" route annotation, and only in
accordance with the policy specified in Ingress.Spec.RequiredHSTSPolicies.
Any actions defined here are applied after any actions related to the following other fields:
cache-control, spec.clientTLS,
spec.httpHeaders.forwardedHeaderPolicy, spec.httpHeaders.uniqueId,
and spec.httpHeaders.headerNameCaseAdjustments.
In case of HTTP request headers, the actions specified in spec.httpHeaders.actions on the Route will be executed after
the actions specified in the IngressController's spec.httpHeaders.actions field.
In case of HTTP response headers, the actions specified in spec.httpHeaders.actions on the IngressController will be
executed after the actions specified in the Route's spec.httpHeaders.actions field.
Headers set using this API cannot be captured for use in access logs.
The following header names are reserved and may not be modified via this API:
Strict-Transport-Security, Proxy, Host, Cookie, Set-Cookie.
Note that the total size of all net added headers after interpolating dynamic values
must not exceed the value of spec.tuningOptions.headerBufferMaxRewriteBytes on the
IngressController. Please refer to the documentation
for that API field for more details.
Type:: object



## .spec.httpHeaders.actions.request

Description:: 
request is a list of HTTP request headers to modify.
Actions defined here will modify the request headers of all requests passing through an ingress controller.
These actions are applied to all Routes i.e. for all connections handled by the ingress controller defined within a cluster.
IngressController actions for request headers will be executed before Route actions.
Currently, actions may define to either Set or Delete headers values.
Actions are applied in sequence as defined in this list.
A maximum of 20 request header actions may be configured.
Sample fetchers allowed are "req.hdr" and "ssl_c_der".
Converters allowed are "lower" and "base64".
Example header values: "%[req.hdr(X-target),lower]", "%{+Q}[ssl_c_der,base64]".
Type:: array

## .spec.httpHeaders.actions.request[]

Description:: 
IngressControllerHTTPHeader specifies configuration for setting or deleting an HTTP header.
Type:: object
Required:: 
* action
* name



## .spec.httpHeaders.actions.request[].action

Description:: 
action specifies actions to perform on headers, such as setting or deleting headers.
Type:: object
Required:: 
* type



## .spec.httpHeaders.actions.request[].action.set

Description:: 
set specifies how the HTTP header should be set.
This field is required when type is Set and forbidden otherwise.
Type:: object
Required:: 
* value



## .spec.httpHeaders.actions.response

Description:: 
response is a list of HTTP response headers to modify.
Actions defined here will modify the response headers of all requests passing through an ingress controller.
These actions are applied to all Routes i.e. for all connections handled by the ingress controller defined within a cluster.
IngressController actions for response headers will be executed after Route actions.
Currently, actions may define to either Set or Delete headers values.
Actions are applied in sequence as defined in this list.
A maximum of 20 response header actions may be configured.
Sample fetchers allowed are "res.hdr" and "ssl_c_der".
Converters allowed are "lower" and "base64".
Example header values: "%[res.hdr(X-target),lower]", "%{+Q}[ssl_c_der,base64]".
Type:: array

## .spec.httpHeaders.actions.response[]

Description:: 
IngressControllerHTTPHeader specifies configuration for setting or deleting an HTTP header.
Type:: object
Required:: 
* action
* name



## .spec.httpHeaders.actions.response[].action

Description:: 
action specifies actions to perform on headers, such as setting or deleting headers.
Type:: object
Required:: 
* type



## .spec.httpHeaders.actions.response[].action.set

Description:: 
set specifies how the HTTP header should be set.
This field is required when type is Set and forbidden otherwise.
Type:: object
Required:: 
* value



## .spec.httpHeaders.uniqueId

Description:: 
uniqueId describes configuration for a custom HTTP header that the
ingress controller should inject into incoming HTTP requests.
Typically, this header is configured to have a value that is unique
to the HTTP request.  The header can be used by applications or
included in access logs to facilitate tracing individual HTTP
requests.
If this field is empty, no such header is injected into requests.
Type:: object



## .spec.logging

Description:: 
logging defines parameters for what should be logged where.  If this
field is empty, operational logs are enabled but access logs are
disabled.
Type:: object



## .spec.logging.access

Description:: 
access describes how the client requests should be logged.
If this field is empty, access logging is disabled.
Type:: object
Required:: 
* destination



## .spec.logging.access.destination

Description:: 
destination is where access logs go.
Type:: object
Required:: 
* type



## .spec.logging.access.destination.container

Description:: 
container holds parameters for the Container logging destination.
Present only if type is Container.
Type:: object



## .spec.logging.access.destination.syslog

Description:: 
syslog holds parameters for a syslog endpoint.  Present only if
type is Syslog.
Type:: object
Required:: 
* address
* port



## .spec.logging.access.httpCaptureHeaders

Description:: 
httpCaptureHeaders defines HTTP headers that should be captured in
access logs.  If this field is empty, no headers are captured.
Note that this option only applies to cleartext HTTP connections
and to secure HTTP connections for which the ingress controller
terminates encryption (that is, edge-terminated or reencrypt
connections).  Headers cannot be captured for TLS passthrough
connections.
Type:: object



## .spec.namespaceSelector

Description:: 
namespaceSelector is used to filter the set of namespaces serviced by the
ingress controller. This is useful for implementing shards.
If unset, the default is no filtering.
Type:: object



## .spec.namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.nodePlacement

Description:: 
nodePlacement enables explicit control over the scheduling of the ingress
controller.
If unset, defaults are used. See NodePlacement for more details.
Type:: object



## .spec.nodePlacement.nodeSelector

Description:: 
nodeSelector is the node selector applied to ingress controller
deployments.
If set, the specified selector is used and replaces the default.
If unset, the default depends on the value of the defaultPlacement
field in the cluster config.openshift.io/v1/ingresses status.
When defaultPlacement is Workers, the default is:
kubernetes.io/os: linux
node-role.kubernetes.io/worker: ''
When defaultPlacement is ControlPlane, the default is:
kubernetes.io/os: linux
node-role.kubernetes.io/master: ''
These defaults are subject to change.
Note that using nodeSelector.matchExpressions is not supported.  Only
nodeSelector.matchLabels may be used.  This is a limitation of the
Kubernetes API: the pod spec does not allow complex expressions for
node selectors.
Type:: object



## .spec.nodePlacement.nodeSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.nodePlacement.nodeSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.nodePlacement.tolerations

Description:: 
tolerations is a list of tolerations applied to ingress controller
deployments.
The default is an empty list.
See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
Type:: array

## .spec.nodePlacement.tolerations[]

Description:: 
The pod this Toleration is attached to tolerates any taint that matches
the triple <key,value,effect> using the matching operator <operator>.
Type:: object



## .spec.routeAdmission

Description:: 
routeAdmission defines a policy for handling new route claims (for example,
to allow or deny claims across namespaces).
If empty, defaults will be applied. See specific routeAdmission fields
for details about their defaults.
Type:: object



## .spec.routeSelector

Description:: 
routeSelector is used to filter the set of Routes serviced by the ingress
controller. This is useful for implementing shards.
If unset, the default is no filtering.
Type:: object



## .spec.routeSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.routeSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.tlsSecurityProfile

Description:: 
tlsSecurityProfile specifies settings for TLS connections for ingresscontrollers.
If unset, the default is based on the apiservers.config.openshift.io/cluster resource.
Note that when using the Old, Intermediate, and Modern profile types, the effective
profile configuration is subject to change between releases. For example, given
a specification to use the Intermediate profile deployed on release X.Y.Z, an upgrade
to release X.Y.Z+1 may cause a new profile configuration to be applied to the ingress
controller, resulting in a rollout.
Type:: object



## .spec.tuningOptions

Description:: 
tuningOptions defines parameters for adjusting the performance of
ingress controller pods. All fields are optional and will use their
respective defaults if not set. See specific tuningOptions fields for
more details.
Setting fields within tuningOptions is generally not recommended. The
default values are suitable for most configurations.
Type:: object



## .status

Description:: 
status is the most recently observed status of the IngressController.
Type:: object



## .status.conditions

Description:: 
conditions is a list of conditions and their status.
Available means the ingress controller deployment is available and
servicing route and ingress resources (i.e, .status.availableReplicas
equals .spec.replicas)
There are additional conditions which indicate the status of other
ingress controller features and capabilities.
* LoadBalancerManaged
* True if the following conditions are met:
* The endpoint publishing strategy requires a service load balancer.
* False if any of those conditions are unsatisfied.
* LoadBalancerReady
* True if the following conditions are met:
* A load balancer is managed.
* The load balancer is ready.
* False if any of those conditions are unsatisfied.
* DNSManaged
* True if the following conditions are met:
* The endpoint publishing strategy and platform support DNS.
* The ingress controller domain is set.
* dns.config.openshift.io/cluster configures DNS zones.
* False if any of those conditions are unsatisfied.
* DNSReady
* True if the following conditions are met:
* DNS is managed.
* DNS records have been successfully created.
* False if any of those conditions are unsatisfied.
Type:: array

## .status.conditions[]

Description:: 
OperatorCondition is just the standard condition fields.
Type:: object
Required:: 
* lastTransitionTime
* status
* type



## .status.endpointPublishingStrategy

Description:: 
endpointPublishingStrategy is the actual strategy in use.
Type:: object
Required:: 
* type



## .status.endpointPublishingStrategy.hostNetwork

Description:: 
hostNetwork holds parameters for the HostNetwork endpoint publishing
strategy. Present only if type is HostNetwork.
Type:: object



## .status.endpointPublishingStrategy.loadBalancer

Description:: 
loadBalancer holds parameters for the load balancer. Present only if
type is LoadBalancerService.
Type:: object
Required:: 
* dnsManagementPolicy
* scope



## .status.endpointPublishingStrategy.loadBalancer.providerParameters

Description:: 
providerParameters holds desired load balancer information specific to
the underlying infrastructure provider.
If empty, defaults will be applied. See specific providerParameters
fields for details about their defaults.
Type:: object
Required:: 
* type



## .status.endpointPublishingStrategy.loadBalancer.providerParameters.aws

Description:: 
aws provides configuration settings that are specific to AWS
load balancers.
If empty, defaults will be applied. See specific aws fields for
details about their defaults.
Type:: object
Required:: 
* type



## .status.endpointPublishingStrategy.loadBalancer.providerParameters.aws.classicLoadBalancer

Description:: 
classicLoadBalancerParameters holds configuration parameters for an AWS
classic load balancer. Present only if type is Classic.
Type:: object



## .status.endpointPublishingStrategy.loadBalancer.providerParameters.aws.classicLoadBalancer.subnets

Description:: 
subnets specifies the subnets to which the load balancer will
attach. The subnets may be specified by either their
ID or name. The total number of subnets is limited to 10.
In order for the load balancer to be provisioned with subnets,
each subnet must exist, each subnet must be from a different
availability zone, and the load balancer service must be
recreated to pick up new values.
When omitted from the spec, the subnets will be auto-discovered
for each availability zone. Auto-discovered subnets are not reported
in the status of the IngressController object.
Type:: object



## .status.endpointPublishingStrategy.loadBalancer.providerParameters.aws.networkLoadBalancer

Description:: 
networkLoadBalancerParameters holds configuration parameters for an AWS
network load balancer. Present only if type is NLB.
Type:: object



## .status.endpointPublishingStrategy.loadBalancer.providerParameters.aws.networkLoadBalancer.subnets

Description:: 
subnets specifies the subnets to which the load balancer will
attach. The subnets may be specified by either their
ID or name. The total number of subnets is limited to 10.
In order for the load balancer to be provisioned with subnets,
each subnet must exist, each subnet must be from a different
availability zone, and the load balancer service must be
recreated to pick up new values.
When omitted from the spec, the subnets will be auto-discovered
for each availability zone. Auto-discovered subnets are not reported
in the status of the IngressController object.
Type:: object



## .status.endpointPublishingStrategy.loadBalancer.providerParameters.gcp

Description:: 
gcp provides configuration settings that are specific to GCP
load balancers.
If empty, defaults will be applied. See specific gcp fields for
details about their defaults.
Type:: object



## .status.endpointPublishingStrategy.loadBalancer.providerParameters.ibm

Description:: 
ibm provides configuration settings that are specific to IBM Cloud
load balancers.
If empty, defaults will be applied. See specific ibm fields for
details about their defaults.
Type:: object



## .status.endpointPublishingStrategy.loadBalancer.providerParameters.openstack

Description:: 
openstack provides configuration settings that are specific to OpenStack
load balancers.
If empty, defaults will be applied. See specific openstack fields for
details about their defaults.
Type:: object



## .status.endpointPublishingStrategy.nodePort

Description:: 
nodePort holds parameters for the NodePortService endpoint publishing strategy.
Present only if type is NodePortService.
Type:: object



## .status.endpointPublishingStrategy.private

Description:: 
private holds parameters for the Private endpoint publishing
strategy. Present only if type is Private.
Type:: object



## .status.namespaceSelector

Description:: 
namespaceSelector is the actual namespaceSelector in use.
Type:: object



## .status.namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .status.namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .status.routeSelector

Description:: 
routeSelector is the actual routeSelector in use.
Type:: object



## .status.routeSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .status.routeSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .status.tlsProfile

Description:: 
tlsProfile is the TLS connection configuration that is in effect.
Type:: object



# API endpoints

The following API endpoints are available:

* /apis/operator.openshift.io/v1/ingresscontrollers
* GET: list objects of kind IngressController
* /apis/operator.openshift.io/v1/namespaces/{namespace}/ingresscontrollers
* DELETE: delete collection of IngressController
* GET: list objects of kind IngressController
* POST: create an IngressController
* /apis/operator.openshift.io/v1/namespaces/{namespace}/ingresscontrollers/{name}
* DELETE: delete an IngressController
* GET: read the specified IngressController
* PATCH: partially update the specified IngressController
* PUT: replace the specified IngressController
* /apis/operator.openshift.io/v1/namespaces/{namespace}/ingresscontrollers/{name}/scale
* GET: read scale of the specified IngressController
* PATCH: partially update scale of the specified IngressController
* PUT: replace scale of the specified IngressController
* /apis/operator.openshift.io/v1/namespaces/{namespace}/ingresscontrollers/{name}/status
* GET: read status of the specified IngressController
* PATCH: partially update status of the specified IngressController
* PUT: replace status of the specified IngressController

## /apis/operator.openshift.io/v1/ingresscontrollers

HTTP method:: GET
Description:: list objects of kind IngressController



## /apis/operator.openshift.io/v1/namespaces/{namespace}/ingresscontrollers

HTTP method:: DELETE
Description:: delete collection of IngressController



HTTP method:: GET
Description:: list objects of kind IngressController



HTTP method:: POST
Description:: create an IngressController







## /apis/operator.openshift.io/v1/namespaces/{namespace}/ingresscontrollers/{name}



HTTP method:: DELETE
Description:: delete an IngressController





HTTP method:: GET
Description:: read the specified IngressController



HTTP method:: PATCH
Description:: partially update the specified IngressController





HTTP method:: PUT
Description:: replace the specified IngressController







## /apis/operator.openshift.io/v1/namespaces/{namespace}/ingresscontrollers/{name}/scale



HTTP method:: GET
Description:: read scale of the specified IngressController



HTTP method:: PATCH
Description:: partially update scale of the specified IngressController





HTTP method:: PUT
Description:: replace scale of the specified IngressController







## /apis/operator.openshift.io/v1/namespaces/{namespace}/ingresscontrollers/{name}/status



HTTP method:: GET
Description:: read status of the specified IngressController



HTTP method:: PATCH
Description:: partially update status of the specified IngressController





HTTP method:: PUT
Description:: replace status of the specified IngressController





