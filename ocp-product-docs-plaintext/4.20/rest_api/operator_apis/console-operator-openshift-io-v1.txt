# Console [operator.openshift.io/v1]


Description:: 
Console provides a means to configure an operator to manage the console.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* spec

# Specification



## .spec

Description:: 
ConsoleSpec is the specification of the desired behavior of the Console.
Type:: object



## .spec.customization

Description:: 
customization is used to optionally provide a small set of
customization options to the web console.
Type:: object



## .spec.customization.addPage

Description:: 
addPage allows customizing actions on the Add page in developer perspective.
Type:: object



## .spec.customization.capabilities

Description:: 
capabilities defines an array of capabilities that can be interacted with in the console UI.
Each capability defines a visual state that can be interacted with the console to render in the UI.
Available capabilities are LightspeedButton and GettingStartedBanner.
Each of the available capabilities may appear only once in the list.
Type:: array

## .spec.customization.capabilities[]

Description:: 
Capabilities contains set of UI capabilities and their state in the console UI.
Type:: object
Required:: 
* name
* visibility



## .spec.customization.capabilities[].visibility

Description:: 
visibility defines the visibility state of the capability.
Type:: object
Required:: 
* state



## .spec.customization.customLogoFile

Description:: 
customLogoFile replaces the default OpenShift logo in the masthead and about dialog. It is a reference to a
Only one of customLogoFile or logos can be set at a time.
ConfigMap in the openshift-config namespace. This can be created with a command like
'oc create configmap custom-logo --from-file=/path/to/file -n openshift-config'.
Image size must be less than 1 MB due to constraints on the ConfigMap size.
The ConfigMap key should include a file extension so that the console serves the file
with the correct MIME type.
The recommended file format for the logo is SVG, but other file formats are allowed if supported by the browser.
Deprecated: Use logos instead.
Type:: object



## .spec.customization.developerCatalog

Description:: 
developerCatalog allows to configure the shown developer catalog categories (filters) and types (sub-catalogs).
Type:: object



## .spec.customization.developerCatalog.categories

Description:: 
categories which are shown in the developer catalog.
Type:: array

## .spec.customization.developerCatalog.categories[]

Description:: 
DeveloperConsoleCatalogCategory for the developer console catalog.
Type:: object
Required:: 
* id
* label



## .spec.customization.developerCatalog.categories[].subcategories

Description:: 
subcategories defines a list of child categories.
Type:: array

## .spec.customization.developerCatalog.categories[].subcategories[]

Description:: 
DeveloperConsoleCatalogCategoryMeta are the key identifiers of a developer catalog category.
Type:: object
Required:: 
* id
* label



## .spec.customization.developerCatalog.types

Description:: 
types allows enabling or disabling of sub-catalog types that user can see in the Developer catalog.
When omitted, all the sub-catalog types will be shown.
Type:: object
Required:: 
* state



## .spec.customization.logos

Description:: 
logos is used to replace the OpenShift Masthead and Favicon logos in the console UI with custom logos.
logos is an optional field that allows a list of logos.
Only one of logos or customLogoFile can be set at a time.
If logos is set, customLogoFile must be unset.
When specified, there must be at least one entry and no more than 2 entries.
Each type must appear only once in the list.
Type:: array

## .spec.customization.logos[]

Description:: 
Logo defines a configuration based on theme modes for the console UI logo.
Type:: object
Required:: 
* themes
* type



## .spec.customization.logos[].themes

Description:: 
themes specifies the themes for the console UI logo.
themes is a required field that allows a list of themes. Each item in the themes list must have a unique mode and a source field.
Each mode determines whether the logo is for the dark or light mode of the console UI.
If a theme is not specified, the default OpenShift logo will be displayed for that theme.
There must be at least one entry and no more than 2 entries.
Type:: array

## .spec.customization.logos[].themes[]

Description:: 
Theme defines a theme mode for the console UI.
Type:: object
Required:: 
* mode
* source



## .spec.customization.logos[].themes[].source

Description:: 
source is used by the console to locate the specified file containing a custom logo.
source is a required field that references a ConfigMap name and key that contains the custom logo file in the openshift-config namespace.
You can create it with a command like:
- 'oc create configmap custom-logos-config --namespace=openshift-config --from-file=/path/to/file'
The ConfigMap key must include the file extension so that the console serves the file with the correct MIME type.
The recommended file format for the Masthead and Favicon logos is SVG, but other file formats are allowed if supported by the browser.
The logo image size must be less than 1 MB due to constraints on the ConfigMap size.
For more information, see the documentation: https://docs.redhat.com/en/documentation/openshift_container_platform/4.19/html/web_console/customizing-web-console#customizing-web-console
Type:: object
Required:: 
* from



## .spec.customization.logos[].themes[].source.configMap

Description:: 
configMap specifies the ConfigMap sourcing details such as the name of the ConfigMap and the key for the file.
The ConfigMap must exist in the openshift-config namespace.
Required when from is "ConfigMap", and forbidden otherwise.
Type:: object
Required:: 
* key
* name



## .spec.customization.perspectives

Description:: 
perspectives allows enabling/disabling of perspective(s) that user can see in the Perspective switcher dropdown.
Type:: array

## .spec.customization.perspectives[]

Description:: 
Perspective defines a perspective that cluster admins want to show/hide in the perspective switcher dropdown
Type:: object
Required:: 
* id
* visibility



## .spec.customization.perspectives[].pinnedResources

Description:: 
pinnedResources defines the list of default pinned resources that users will see on the perspective navigation if they have not customized these pinned resources themselves.
The list of available Kubernetes resources could be read via kubectl api-resources.
The console will also provide a configuration UI and a YAML snippet that will list the available resources that can be pinned to the navigation.
Incorrect or unknown resources will be ignored.
Type:: array

## .spec.customization.perspectives[].pinnedResources[]

Description:: 
PinnedResourceReference includes the group, version and type of resource
Type:: object
Required:: 
* group
* resource
* version



## .spec.customization.perspectives[].visibility

Description:: 
visibility defines the state of perspective along with access review checks if needed for that perspective.
Type:: object
Required:: 
* state



## .spec.customization.perspectives[].visibility.accessReview

Description:: 
accessReview defines required and missing access review checks.
Type:: object



## .spec.customization.perspectives[].visibility.accessReview.missing

Description:: 
missing defines a list of permission checks. The perspective will only be shown when at least one check fails. When omitted, the access review is skipped and the perspective will not be shown unless it is required to do so based on the configuration of the required access review list.
Type:: array

## .spec.customization.perspectives[].visibility.accessReview.missing[]

Description:: 
ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
Type:: object



## .spec.customization.perspectives[].visibility.accessReview.missing[].fieldSelector

Description:: 
fieldSelector describes the limitation on access based on field.  It can only limit access, not broaden it.
This field  is alpha-level. To use this field, you must enable the
AuthorizeWithSelectors feature gate (disabled by default).
Type:: object



## .spec.customization.perspectives[].visibility.accessReview.missing[].fieldSelector.requirements

Description:: 
requirements is the parsed interpretation of a field selector.
All requirements must be met for a resource instance to match the selector.
Webhook implementations should handle requirements, but how to handle them is up to the webhook.
Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements
are not understood.
Type:: array

## .spec.customization.perspectives[].visibility.accessReview.missing[].fieldSelector.requirements[]

Description:: 
FieldSelectorRequirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.customization.perspectives[].visibility.accessReview.missing[].labelSelector

Description:: 
labelSelector describes the limitation on access based on labels.  It can only limit access, not broaden it.
This field  is alpha-level. To use this field, you must enable the
AuthorizeWithSelectors feature gate (disabled by default).
Type:: object



## .spec.customization.perspectives[].visibility.accessReview.missing[].labelSelector.requirements

Description:: 
requirements is the parsed interpretation of a label selector.
All requirements must be met for a resource instance to match the selector.
Webhook implementations should handle requirements, but how to handle them is up to the webhook.
Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements
are not understood.
Type:: array

## .spec.customization.perspectives[].visibility.accessReview.missing[].labelSelector.requirements[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.customization.perspectives[].visibility.accessReview.required

Description:: 
required defines a list of permission checks. The perspective will only be shown when all checks are successful. When omitted, the access review is skipped and the perspective will not be shown unless it is required to do so based on the configuration of the missing access review list.
Type:: array

## .spec.customization.perspectives[].visibility.accessReview.required[]

Description:: 
ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
Type:: object



## .spec.customization.perspectives[].visibility.accessReview.required[].fieldSelector

Description:: 
fieldSelector describes the limitation on access based on field.  It can only limit access, not broaden it.
This field  is alpha-level. To use this field, you must enable the
AuthorizeWithSelectors feature gate (disabled by default).
Type:: object



## .spec.customization.perspectives[].visibility.accessReview.required[].fieldSelector.requirements

Description:: 
requirements is the parsed interpretation of a field selector.
All requirements must be met for a resource instance to match the selector.
Webhook implementations should handle requirements, but how to handle them is up to the webhook.
Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements
are not understood.
Type:: array

## .spec.customization.perspectives[].visibility.accessReview.required[].fieldSelector.requirements[]

Description:: 
FieldSelectorRequirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.customization.perspectives[].visibility.accessReview.required[].labelSelector

Description:: 
labelSelector describes the limitation on access based on labels.  It can only limit access, not broaden it.
This field  is alpha-level. To use this field, you must enable the
AuthorizeWithSelectors feature gate (disabled by default).
Type:: object



## .spec.customization.perspectives[].visibility.accessReview.required[].labelSelector.requirements

Description:: 
requirements is the parsed interpretation of a label selector.
All requirements must be met for a resource instance to match the selector.
Webhook implementations should handle requirements, but how to handle them is up to the webhook.
Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements
are not understood.
Type:: array

## .spec.customization.perspectives[].visibility.accessReview.required[].labelSelector.requirements[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.customization.projectAccess

Description:: 
projectAccess allows customizing the available list of ClusterRoles in the Developer perspective
Project access page which can be used by a project admin to specify roles to other users and
restrict access within the project. If set, the list will replace the default ClusterRole options.
Type:: object



## .spec.customization.quickStarts

Description:: 
quickStarts allows customization of available ConsoleQuickStart resources in console.
Type:: object



## .spec.ingress

Description:: 
ingress allows to configure the alternative ingress for the console.
This field is intended for clusters without ingress capability,
where access to routes is not possible.
Type:: object



## .spec.providers

Description:: 
providers contains configuration for using specific service providers.
Type:: object



## .spec.providers.statuspage

Description:: 
statuspage contains ID for statuspage.io page that provides status info about.
Type:: object



## .spec.route

Description:: 
route contains hostname and secret reference that contains the serving certificate.
If a custom route is specified, a new route will be created with the
provided hostname, under which console will be available.
In case of custom hostname uses the default routing suffix of the cluster,
the Secret specification for a serving certificate will not be needed.
In case of custom hostname points to an arbitrary domain, manual DNS configurations steps are necessary.
The default console route will be maintained to reserve the default hostname
for console if the custom route is removed.
If not specified, default route will be used.
DEPRECATED
Type:: object



## .spec.route.secret

Description:: 
secret points to secret in the openshift-config namespace that contains custom
certificate and key and needs to be created manually by the cluster admin.
Referenced Secret is required to contain following key value pairs:
- "tls.crt" - to specifies custom certificate
- "tls.key" - to specifies private key of the custom certificate
If the custom hostname uses the default routing suffix of the cluster,
the Secret specification for a serving certificate will not be needed.
Type:: object
Required:: 
* name



## .status

Description:: 
ConsoleStatus defines the observed status of the Console.
Type:: object



## .status.conditions

Description:: 
conditions is a list of conditions and their status
Type:: array

## .status.conditions[]

Description:: 
OperatorCondition is just the standard condition fields.
Type:: object
Required:: 
* lastTransitionTime
* status
* type



## .status.generations

Description:: 
generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
Type:: array

## .status.generations[]

Description:: 
GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.
Type:: object
Required:: 
* group
* name
* namespace
* resource



# API endpoints

The following API endpoints are available:

* /apis/operator.openshift.io/v1/consoles
* DELETE: delete collection of Console
* GET: list objects of kind Console
* POST: create a Console
* /apis/operator.openshift.io/v1/consoles/{name}
* DELETE: delete a Console
* GET: read the specified Console
* PATCH: partially update the specified Console
* PUT: replace the specified Console
* /apis/operator.openshift.io/v1/consoles/{name}/status
* GET: read status of the specified Console
* PATCH: partially update status of the specified Console
* PUT: replace status of the specified Console

## /apis/operator.openshift.io/v1/consoles

HTTP method:: DELETE
Description:: delete collection of Console



HTTP method:: GET
Description:: list objects of kind Console



HTTP method:: POST
Description:: create a Console







## /apis/operator.openshift.io/v1/consoles/{name}



HTTP method:: DELETE
Description:: delete a Console





HTTP method:: GET
Description:: read the specified Console



HTTP method:: PATCH
Description:: partially update the specified Console





HTTP method:: PUT
Description:: replace the specified Console







## /apis/operator.openshift.io/v1/consoles/{name}/status



HTTP method:: GET
Description:: read status of the specified Console



HTTP method:: PATCH
Description:: partially update status of the specified Console





HTTP method:: PUT
Description:: replace status of the specified Console





