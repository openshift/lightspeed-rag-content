# ImagePolicy [config.openshift.io/v1]


Description:: 
ImagePolicy holds namespace-wide configuration for image signature verification
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* spec

# Specification



## .spec

Description:: 
spec holds user settable values for configuration
Type:: object
Required:: 
* policy
* scopes



## .spec.policy

Description:: 
policy is a required field that contains configuration to allow scopes to be verified, and defines how
images not matching the verification policy will be treated.
Type:: object
Required:: 
* rootOfTrust



## .spec.policy.rootOfTrust

Description:: 
rootOfTrust is a required field that defines the root of trust for verifying image signatures during retrieval.
This allows image consumers to specify policyType and corresponding configuration of the policy, matching how the policy was generated.
Type:: object
Required:: 
* policyType



## .spec.policy.rootOfTrust.fulcioCAWithRekor

Description:: 
fulcioCAWithRekor defines the root of trust configuration based on the Fulcio certificate and the Rekor public key.
fulcioCAWithRekor is required when policyType is FulcioCAWithRekor, and forbidden otherwise
For more information about Fulcio and Rekor, please refer to the document at:
https://github.com/sigstore/fulcio and https://github.com/sigstore/rekor
Type:: object
Required:: 
* fulcioCAData
* fulcioSubject
* rekorKeyData



## .spec.policy.rootOfTrust.fulcioCAWithRekor.fulcioSubject

Description:: 
fulcioSubject is a required field specifies OIDC issuer and the email of the Fulcio authentication configuration.
Type:: object
Required:: 
* oidcIssuer
* signedEmail



## .spec.policy.rootOfTrust.publicKey

Description:: 
publicKey defines the root of trust configuration based on a sigstore public key. Optionally include a Rekor public key for Rekor verification.
publicKey is required when policyType is PublicKey, and forbidden otherwise.
Type:: object
Required:: 
* keyData



## .spec.policy.signedIdentity

Description:: 
signedIdentity is an optional field specifies what image identity the signature claims about the image. This is useful when the image identity in the signature differs from the original image spec, such as when mirror registry is configured for the image scope, the signature from the mirror registry contains the image identity of the mirror instead of the original scope.
The required matchPolicy field specifies the approach used in the verification process to verify the identity in the signature and the actual image identity, the default matchPolicy is "MatchRepoDigestOrExact".
Type:: object
Required:: 
* matchPolicy



## .spec.policy.signedIdentity.exactRepository

Description:: 
exactRepository specifies the repository that must be exactly matched by the identity in the signature.
exactRepository is required if matchPolicy is set to "ExactRepository". It is used to verify that the signature claims an identity matching this exact repository, rather than the original image identity.
Type:: object
Required:: 
* repository



## .spec.policy.signedIdentity.remapIdentity

Description:: 
remapIdentity specifies the prefix remapping rule for verifying image identity.
remapIdentity is required if matchPolicy is set to "RemapIdentity". It is used to verify that the signature claims a different registry/repository prefix than the original image.
Type:: object
Required:: 
* prefix
* signedPrefix



## .status

Description:: 
status contains the observed state of the resource.
Type:: object



## .status.conditions

Description:: 
conditions provide details on the status of this API Resource.
condition type 'Pending' indicates that the customer resource contains a policy that cannot take effect. It is either overwritten by a global policy or the image scope is not valid.
Type:: array

## .status.conditions[]

Description:: 
Condition contains details for one aspect of the current state of this API Resource.
Type:: object
Required:: 
* lastTransitionTime
* message
* reason
* status
* type



# API endpoints

The following API endpoints are available:

* /apis/config.openshift.io/v1/imagepolicies
* GET: list objects of kind ImagePolicy
* /apis/config.openshift.io/v1/namespaces/{namespace}/imagepolicies
* DELETE: delete collection of ImagePolicy
* GET: list objects of kind ImagePolicy
* POST: create an ImagePolicy
* /apis/config.openshift.io/v1/namespaces/{namespace}/imagepolicies/{name}
* DELETE: delete an ImagePolicy
* GET: read the specified ImagePolicy
* PATCH: partially update the specified ImagePolicy
* PUT: replace the specified ImagePolicy
* /apis/config.openshift.io/v1/namespaces/{namespace}/imagepolicies/{name}/status
* GET: read status of the specified ImagePolicy
* PATCH: partially update status of the specified ImagePolicy
* PUT: replace status of the specified ImagePolicy

## /apis/config.openshift.io/v1/imagepolicies

HTTP method:: GET
Description:: list objects of kind ImagePolicy



## /apis/config.openshift.io/v1/namespaces/{namespace}/imagepolicies

HTTP method:: DELETE
Description:: delete collection of ImagePolicy



HTTP method:: GET
Description:: list objects of kind ImagePolicy



HTTP method:: POST
Description:: create an ImagePolicy







## /apis/config.openshift.io/v1/namespaces/{namespace}/imagepolicies/{name}



HTTP method:: DELETE
Description:: delete an ImagePolicy





HTTP method:: GET
Description:: read the specified ImagePolicy



HTTP method:: PATCH
Description:: partially update the specified ImagePolicy





HTTP method:: PUT
Description:: replace the specified ImagePolicy







## /apis/config.openshift.io/v1/namespaces/{namespace}/imagepolicies/{name}/status



HTTP method:: GET
Description:: read status of the specified ImagePolicy



HTTP method:: PATCH
Description:: partially update status of the specified ImagePolicy





HTTP method:: PUT
Description:: replace status of the specified ImagePolicy





