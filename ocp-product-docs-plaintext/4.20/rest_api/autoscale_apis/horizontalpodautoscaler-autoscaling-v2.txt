# HorizontalPodAutoscaler [autoscaling/v2]


Description:: 
HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
Type:: object

# Specification



## .spec

Description:: 
HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
Type:: object
Required:: 
* scaleTargetRef
* maxReplicas



## .spec.behavior

Description:: 
HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
Type:: object



## .spec.behavior.scaleDown

Description:: 
HPAScalingRules configures the scaling behavior for one direction via scaling Policy Rules and a configurable metric tolerance.
Scaling Policy Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
The tolerance is applied to the metric values and prevents scaling too eagerly for small metric variations. (Note that setting a tolerance requires enabling the alpha HPAConfigurableTolerance feature gate.)
Type:: object



## .spec.behavior.scaleDown.policies

Description:: 
policies is a list of potential scaling polices which can be used during scaling. If not set, use the default values: - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window. - For scale down: allow all pods to be removed in a 15s window.
Type:: array

## .spec.behavior.scaleDown.policies[]

Description:: 
HPAScalingPolicy is a single policy which must hold true for a specified past interval.
Type:: object
Required:: 
* type
* value
* periodSeconds



## .spec.behavior.scaleUp

Description:: 
HPAScalingRules configures the scaling behavior for one direction via scaling Policy Rules and a configurable metric tolerance.
Scaling Policy Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
The tolerance is applied to the metric values and prevents scaling too eagerly for small metric variations. (Note that setting a tolerance requires enabling the alpha HPAConfigurableTolerance feature gate.)
Type:: object



## .spec.behavior.scaleUp.policies

Description:: 
policies is a list of potential scaling polices which can be used during scaling. If not set, use the default values: - For scale up: allow doubling the number of pods, or an absolute change of 4 pods in a 15s window. - For scale down: allow all pods to be removed in a 15s window.
Type:: array

## .spec.behavior.scaleUp.policies[]

Description:: 
HPAScalingPolicy is a single policy which must hold true for a specified past interval.
Type:: object
Required:: 
* type
* value
* periodSeconds



## .spec.metrics

Description:: 
metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
Type:: array

## .spec.metrics[]

Description:: 
MetricSpec specifies how to scale based on a single metric (only type and one other matching field should be set at once).
Type:: object
Required:: 
* type



## .spec.metrics[].containerResource

Description:: 
ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
Type:: object
Required:: 
* name
* target
* container



## .spec.metrics[].containerResource.target

Description:: 
MetricTarget defines the target value, average value, or average utilization of a specific metric
Type:: object
Required:: 
* type



## .spec.metrics[].external

Description:: 
ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
Type:: object
Required:: 
* metric
* target



## .spec.metrics[].external.metric

Description:: 
MetricIdentifier defines the name and optionally selector for a metric
Type:: object
Required:: 
* name



## .spec.metrics[].external.target

Description:: 
MetricTarget defines the target value, average value, or average utilization of a specific metric
Type:: object
Required:: 
* type



## .spec.metrics[].object

Description:: 
ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
Type:: object
Required:: 
* describedObject
* target
* metric



## .spec.metrics[].object.describedObject

Description:: 
CrossVersionObjectReference contains enough information to let you identify the referred resource.
Type:: object
Required:: 
* kind
* name



## .spec.metrics[].object.metric

Description:: 
MetricIdentifier defines the name and optionally selector for a metric
Type:: object
Required:: 
* name



## .spec.metrics[].object.target

Description:: 
MetricTarget defines the target value, average value, or average utilization of a specific metric
Type:: object
Required:: 
* type



## .spec.metrics[].pods

Description:: 
PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
Type:: object
Required:: 
* metric
* target



## .spec.metrics[].pods.metric

Description:: 
MetricIdentifier defines the name and optionally selector for a metric
Type:: object
Required:: 
* name



## .spec.metrics[].pods.target

Description:: 
MetricTarget defines the target value, average value, or average utilization of a specific metric
Type:: object
Required:: 
* type



## .spec.metrics[].resource

Description:: 
ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
Type:: object
Required:: 
* name
* target



## .spec.metrics[].resource.target

Description:: 
MetricTarget defines the target value, average value, or average utilization of a specific metric
Type:: object
Required:: 
* type



## .spec.scaleTargetRef

Description:: 
CrossVersionObjectReference contains enough information to let you identify the referred resource.
Type:: object
Required:: 
* kind
* name



## .status

Description:: 
HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
Type:: object
Required:: 
* desiredReplicas



## .status.conditions

Description:: 
conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
Type:: array

## .status.conditions[]

Description:: 
HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
Type:: object
Required:: 
* type
* status



## .status.currentMetrics

Description:: 
currentMetrics is the last read state of the metrics used by this autoscaler.
Type:: array

## .status.currentMetrics[]

Description:: 
MetricStatus describes the last-read state of a single metric.
Type:: object
Required:: 
* type



## .status.currentMetrics[].containerResource

Description:: 
ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
Type:: object
Required:: 
* name
* current
* container



## .status.currentMetrics[].containerResource.current

Description:: 
MetricValueStatus holds the current value for a metric
Type:: object



## .status.currentMetrics[].external

Description:: 
ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
Type:: object
Required:: 
* metric
* current



## .status.currentMetrics[].external.current

Description:: 
MetricValueStatus holds the current value for a metric
Type:: object



## .status.currentMetrics[].external.metric

Description:: 
MetricIdentifier defines the name and optionally selector for a metric
Type:: object
Required:: 
* name



## .status.currentMetrics[].object

Description:: 
ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
Type:: object
Required:: 
* metric
* current
* describedObject



## .status.currentMetrics[].object.current

Description:: 
MetricValueStatus holds the current value for a metric
Type:: object



## .status.currentMetrics[].object.describedObject

Description:: 
CrossVersionObjectReference contains enough information to let you identify the referred resource.
Type:: object
Required:: 
* kind
* name



## .status.currentMetrics[].object.metric

Description:: 
MetricIdentifier defines the name and optionally selector for a metric
Type:: object
Required:: 
* name



## .status.currentMetrics[].pods

Description:: 
PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
Type:: object
Required:: 
* metric
* current



## .status.currentMetrics[].pods.current

Description:: 
MetricValueStatus holds the current value for a metric
Type:: object



## .status.currentMetrics[].pods.metric

Description:: 
MetricIdentifier defines the name and optionally selector for a metric
Type:: object
Required:: 
* name



## .status.currentMetrics[].resource

Description:: 
ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
Type:: object
Required:: 
* name
* current



## .status.currentMetrics[].resource.current

Description:: 
MetricValueStatus holds the current value for a metric
Type:: object



# API endpoints

The following API endpoints are available:

* /apis/autoscaling/v2/horizontalpodautoscalers
* GET: list or watch objects of kind HorizontalPodAutoscaler
* /apis/autoscaling/v2/watch/horizontalpodautoscalers
* GET: watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers
* DELETE: delete collection of HorizontalPodAutoscaler
* GET: list or watch objects of kind HorizontalPodAutoscaler
* POST: create a HorizontalPodAutoscaler
* /apis/autoscaling/v2/watch/namespaces/{namespace}/horizontalpodautoscalers
* GET: watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
* DELETE: delete a HorizontalPodAutoscaler
* GET: read the specified HorizontalPodAutoscaler
* PATCH: partially update the specified HorizontalPodAutoscaler
* PUT: replace the specified HorizontalPodAutoscaler
* /apis/autoscaling/v2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}
* GET: watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.
* /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
* GET: read status of the specified HorizontalPodAutoscaler
* PATCH: partially update status of the specified HorizontalPodAutoscaler
* PUT: replace status of the specified HorizontalPodAutoscaler

## /apis/autoscaling/v2/horizontalpodautoscalers

HTTP method:: GET
Description:: list or watch objects of kind HorizontalPodAutoscaler



## /apis/autoscaling/v2/watch/horizontalpodautoscalers

HTTP method:: GET
Description:: watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers

HTTP method:: DELETE
Description:: delete collection of HorizontalPodAutoscaler





HTTP method:: GET
Description:: list or watch objects of kind HorizontalPodAutoscaler



HTTP method:: POST
Description:: create a HorizontalPodAutoscaler







## /apis/autoscaling/v2/watch/namespaces/{namespace}/horizontalpodautoscalers

HTTP method:: GET
Description:: watch individual changes to a list of HorizontalPodAutoscaler. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}



HTTP method:: DELETE
Description:: delete a HorizontalPodAutoscaler





HTTP method:: GET
Description:: read the specified HorizontalPodAutoscaler



HTTP method:: PATCH
Description:: partially update the specified HorizontalPodAutoscaler





HTTP method:: PUT
Description:: replace the specified HorizontalPodAutoscaler







## /apis/autoscaling/v2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}



HTTP method:: GET
Description:: watch changes to an object of kind HorizontalPodAutoscaler. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.



## /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status



HTTP method:: GET
Description:: read status of the specified HorizontalPodAutoscaler



HTTP method:: PATCH
Description:: partially update status of the specified HorizontalPodAutoscaler





HTTP method:: PUT
Description:: replace status of the specified HorizontalPodAutoscaler





