# MultiNetworkPolicy [k8s.cni.cncf.io/v1beta1]


Description:: 
MultiNetworkPolicy is a CRD schema to provide NetworkPolicy mechanism for net-attach-def which is specified by the Network Plumbing Working Group. MultiNetworkPolicy is identical to Kubernetes NetworkPolicy, See: https://kubernetes.io/docs/concepts/services-networking/network-policies/ .
Type:: object

# Specification



## .spec

Description:: 
Specification of the desired behavior for this MultiNetworkPolicy.
Type:: object
Required:: 
* podSelector



## .spec.egress

Description:: 
List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
Type:: array

## .spec.egress[]

Description:: 
NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
Type:: object



## .spec.egress[].ports

Description:: 
List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
Type:: array

## .spec.egress[].ports[]

Description:: 
NetworkPolicyPort describes a port to allow traffic on
Type:: object



## .spec.egress[].to

Description:: 
List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
Type:: array

## .spec.egress[].to[]

Description:: 
NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are allowed
Type:: object



## .spec.egress[].to[].ipBlock

Description:: 
IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
Type:: object
Required:: 
* cidr



## .spec.egress[].to[].namespaceSelector

Description:: 
Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
 If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
Type:: object



## .spec.egress[].to[].namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.egress[].to[].namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.egress[].to[].podSelector

Description:: 
This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
 If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
Type:: object



## .spec.egress[].to[].podSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.egress[].to[].podSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.ingress

Description:: 
List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
Type:: array

## .spec.ingress[]

Description:: 
NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
Type:: object



## .spec.ingress[].from

Description:: 
List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
Type:: array

## .spec.ingress[].from[]

Description:: 
NetworkPolicyPeer describes a peer to allow traffic from. Only certain combinations of fields are allowed
Type:: object



## .spec.ingress[].from[].ipBlock

Description:: 
IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
Type:: object
Required:: 
* cidr



## .spec.ingress[].from[].namespaceSelector

Description:: 
Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
 If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
Type:: object



## .spec.ingress[].from[].namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.ingress[].from[].namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.ingress[].from[].podSelector

Description:: 
This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
 If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
Type:: object



## .spec.ingress[].from[].podSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.ingress[].from[].podSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.ingress[].ports

Description:: 
List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
Type:: array

## .spec.ingress[].ports[]

Description:: 
NetworkPolicyPort describes a port to allow traffic on
Type:: object



## .spec.podSelector

Description:: 
This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
 If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
Type:: object



## .spec.podSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.podSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
Type:: object
Required:: 
* key
* operator



# API endpoints

The following API endpoints are available:

* /apis/k8s.cni.cncf.io/v1beta1/multi-networkpolicies
* GET: list objects of kind MultiNetworkPolicy
* /apis/k8s.cni.cncf.io/v1beta1/namespaces/{namespace}/multi-networkpolicies
* DELETE: delete collection of MultiNetworkPolicy
* GET: list objects of kind MultiNetworkPolicy
* POST: create a MultiNetworkPolicy
* /apis/k8s.cni.cncf.io/v1beta1/namespaces/{namespace}/multi-networkpolicies/{name}
* DELETE: delete a MultiNetworkPolicy
* GET: read the specified MultiNetworkPolicy
* PATCH: partially update the specified MultiNetworkPolicy
* PUT: replace the specified MultiNetworkPolicy

## /apis/k8s.cni.cncf.io/v1beta1/multi-networkpolicies

HTTP method:: GET
Description:: list objects of kind MultiNetworkPolicy



## /apis/k8s.cni.cncf.io/v1beta1/namespaces/{namespace}/multi-networkpolicies

HTTP method:: DELETE
Description:: delete collection of MultiNetworkPolicy



HTTP method:: GET
Description:: list objects of kind MultiNetworkPolicy



HTTP method:: POST
Description:: create a MultiNetworkPolicy







## /apis/k8s.cni.cncf.io/v1beta1/namespaces/{namespace}/multi-networkpolicies/{name}



HTTP method:: DELETE
Description:: delete a MultiNetworkPolicy





HTTP method:: GET
Description:: read the specified MultiNetworkPolicy



HTTP method:: PATCH
Description:: partially update the specified MultiNetworkPolicy





HTTP method:: PUT
Description:: replace the specified MultiNetworkPolicy





