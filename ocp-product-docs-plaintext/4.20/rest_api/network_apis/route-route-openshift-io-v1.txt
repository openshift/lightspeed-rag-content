# Route [route.openshift.io/v1]


Description:: 
A route allows developers to expose services through an HTTP(S) aware load balancing and proxy layer via a public DNS entry. The route may further specify TLS options and a certificate, or specify a public CNAME that the router should also accept for HTTP and HTTPS traffic. An administrator typically configures their router to be visible outside the cluster firewall, and may also add additional security, caching, or traffic controls on the service content. Routers usually talk directly to the service endpoints.
Once a route is created, the host field may not be changed. Generally, routers use the oldest route with a given host when resolving conflicts.
Routers are subject to additional customization and may support additional controls via the annotations field.
Because administrators may configure multiple routers, the route status field is used to return information to clients about the names and states of the route under each router. If a client chooses a duplicate name, for instance, the route status conditions are used to indicate the route cannot be chosen.
To enable HTTP/2 ALPN on a route it requires a custom (non-wildcard) certificate. This prevents connection coalescing by clients, notably web browsers. We do not support HTTP/2 ALPN on routes that use the default certificate because of the risk of connection re-use/coalescing. Routes that do not have their own custom certificate will not be HTTP/2 ALPN-enabled on either the frontend or the backend.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* spec

# Specification



## .spec

Description:: 
RouteSpec describes the hostname or path the route exposes, any security information, and one to four backends (services) the route points to. Requests are distributed among the backends depending on the weights assigned to each backend. When using roundrobin scheduling the portion of requests that go to each backend is the backend weight divided by the sum of all of the backend weights. When the backend has more than one endpoint the requests that end up on the backend are roundrobin distributed among the endpoints. Weights are between 0 and 256 with default 100. Weight 0 causes no requests to the backend. If all weights are zero the route will be considered to have no backends and return a standard 503 response.
The tls field is optional and allows specific certificates or behavior for the route. Routers typically configure a default certificate on a wildcard domain to terminate routes without explicit certificates, but custom hostnames usually must choose passthrough (send traffic directly to the backend via the TLS Server-Name- Indication field) or provide a certificate.
Type:: object
Required:: 
* to



## .spec.alternateBackends

Description:: 
alternateBackends allows up to 3 additional backends to be assigned to the route. Only the Service kind is allowed, and it will be defaulted to Service. Use the weight field in RouteTargetReference object to specify relative preference.
Type:: array

## .spec.alternateBackends[]

Description:: 
RouteTargetReference specifies the target that resolve into endpoints. Only the 'Service' kind is allowed. Use 'weight' field to emphasize one over others.
Type:: object
Required:: 
* kind
* name



## .spec.httpHeaders

Description:: 
RouteHTTPHeaders defines policy for HTTP headers.
Type:: object



## .spec.httpHeaders.actions

Description:: 
RouteHTTPHeaderActions defines configuration for actions on HTTP request and response headers.
Type:: object



## .spec.httpHeaders.actions.request

Description:: 
request is a list of HTTP request headers to modify. Currently, actions may define to either Set or Delete headers values. Actions defined here will modify the request headers of all requests made through a route. These actions are applied to a specific Route defined within a cluster i.e. connections made through a route. Currently, actions may define to either Set or Delete headers values. Route actions will be executed after IngressController actions for request headers. Actions are applied in sequence as defined in this list. A maximum of 20 request header actions may be configured. You can use this field to specify HTTP request headers that should be set or deleted when forwarding connections from the client to your application. Sample fetchers allowed are "req.hdr" and "ssl_c_der". Converters allowed are "lower" and "base64". Example header values: "%[req.hdr(X-target),lower]", "%{+Q}[ssl_c_der,base64]". Any request header configuration applied directly via a Route resource using this API will override header configuration for a header of the same name applied via spec.httpHeaders.actions on the IngressController or route annotation. Note: This field cannot be used if your route uses TLS passthrough.
Type:: array

## .spec.httpHeaders.actions.request[]

Description:: 
RouteHTTPHeader specifies configuration for setting or deleting an HTTP header.
Type:: object
Required:: 
* name
* action



## .spec.httpHeaders.actions.request[].action

Description:: 
RouteHTTPHeaderActionUnion specifies an action to take on an HTTP header.
Type:: object
Required:: 
* type



## .spec.httpHeaders.actions.request[].action.set

Description:: 
RouteSetHTTPHeader specifies what value needs to be set on an HTTP header.
Type:: object
Required:: 
* value



## .spec.httpHeaders.actions.response

Description:: 
response is a list of HTTP response headers to modify. Currently, actions may define to either Set or Delete headers values. Actions defined here will modify the response headers of all requests made through a route. These actions are applied to a specific Route defined within a cluster i.e. connections made through a route. Route actions will be executed before IngressController actions for response headers. Actions are applied in sequence as defined in this list. A maximum of 20 response header actions may be configured. You can use this field to specify HTTP response headers that should be set or deleted when forwarding responses from your application to the client. Sample fetchers allowed are "res.hdr" and "ssl_c_der". Converters allowed are "lower" and "base64". Example header values: "%[res.hdr(X-target),lower]", "%{+Q}[ssl_c_der,base64]". Note: This field cannot be used if your route uses TLS passthrough.
Type:: array

## .spec.httpHeaders.actions.response[]

Description:: 
RouteHTTPHeader specifies configuration for setting or deleting an HTTP header.
Type:: object
Required:: 
* name
* action



## .spec.httpHeaders.actions.response[].action

Description:: 
RouteHTTPHeaderActionUnion specifies an action to take on an HTTP header.
Type:: object
Required:: 
* type



## .spec.httpHeaders.actions.response[].action.set

Description:: 
RouteSetHTTPHeader specifies what value needs to be set on an HTTP header.
Type:: object
Required:: 
* value



## .spec.port

Description:: 
RoutePort defines a port mapping from a router to an endpoint in the service endpoints.
Type:: object
Required:: 
* targetPort



## .spec.tls

Description:: 
TLSConfig defines config used to secure a route and provide termination
Type:: object
Required:: 
* termination



## .spec.tls.externalCertificate

Description:: 
LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
Type:: object



## .spec.to

Description:: 
RouteTargetReference specifies the target that resolve into endpoints. Only the 'Service' kind is allowed. Use 'weight' field to emphasize one over others.
Type:: object
Required:: 
* kind
* name



## .status

Description:: 
RouteStatus provides relevant info about the status of a route, including which routers acknowledge it.
Type:: object



## .status.ingress

Description:: 
ingress describes the places where the route may be exposed. The list of ingress points may contain duplicate Host or RouterName values. Routes are considered live once they are Ready
Type:: array

## .status.ingress[]

Description:: 
RouteIngress holds information about the places where a route is exposed.
Type:: object



## .status.ingress[].conditions

Description:: 
Conditions is the state of the route, may be empty.
Type:: array

## .status.ingress[].conditions[]

Description:: 
RouteIngressCondition contains details for the current condition of this route on a particular router.
Type:: object
Required:: 
* type
* status



# API endpoints

The following API endpoints are available:

* /apis/route.openshift.io/v1/routes
* GET: list or watch objects of kind Route
* /apis/route.openshift.io/v1/watch/routes
* GET: watch individual changes to a list of Route. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /apis/route.openshift.io/v1/namespaces/{namespace}/routes
* DELETE: delete collection of Route
* GET: list or watch objects of kind Route
* POST: create a Route
* /apis/route.openshift.io/v1/watch/namespaces/{namespace}/routes
* GET: watch individual changes to a list of Route. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}
* DELETE: delete a Route
* GET: read the specified Route
* PATCH: partially update the specified Route
* PUT: replace the specified Route
* /apis/route.openshift.io/v1/watch/namespaces/{namespace}/routes/{name}
* GET: watch changes to an object of kind Route. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.
* /apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}/status
* GET: read status of the specified Route
* PATCH: partially update status of the specified Route
* PUT: replace status of the specified Route

## /apis/route.openshift.io/v1/routes

HTTP method:: GET
Description:: list or watch objects of kind Route



## /apis/route.openshift.io/v1/watch/routes

HTTP method:: GET
Description:: watch individual changes to a list of Route. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /apis/route.openshift.io/v1/namespaces/{namespace}/routes

HTTP method:: DELETE
Description:: delete collection of Route





HTTP method:: GET
Description:: list or watch objects of kind Route



HTTP method:: POST
Description:: create a Route







## /apis/route.openshift.io/v1/watch/namespaces/{namespace}/routes

HTTP method:: GET
Description:: watch individual changes to a list of Route. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}



HTTP method:: DELETE
Description:: delete a Route





HTTP method:: GET
Description:: read the specified Route



HTTP method:: PATCH
Description:: partially update the specified Route





HTTP method:: PUT
Description:: replace the specified Route







## /apis/route.openshift.io/v1/watch/namespaces/{namespace}/routes/{name}



HTTP method:: GET
Description:: watch changes to an object of kind Route. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.



## /apis/route.openshift.io/v1/namespaces/{namespace}/routes/{name}/status



HTTP method:: GET
Description:: read status of the specified Route



HTTP method:: PATCH
Description:: partially update status of the specified Route





HTTP method:: PUT
Description:: replace status of the specified Route





