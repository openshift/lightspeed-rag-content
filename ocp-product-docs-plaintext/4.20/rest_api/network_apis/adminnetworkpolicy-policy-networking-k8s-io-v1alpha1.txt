# AdminNetworkPolicy [policy.networking.k8s.io/v1alpha1]


Description:: 
AdminNetworkPolicy is  a cluster level resource that is part of the
AdminNetworkPolicy API.
Type:: object
Required:: 
* metadata
* spec

# Specification



## .spec

Description:: 
Specification of the desired behavior of AdminNetworkPolicy.
Type:: object
Required:: 
* priority
* subject



## .spec.egress

Description:: 
Egress is the list of Egress rules to be applied to the selected pods.
A total of 100 rules will be allowed in each ANP instance.
The relative precedence of egress rules within a single ANP object (all of
which share the priority) will be determined by the order in which the rule
is written. Thus, a rule that appears at the top of the egress rules
would take the highest precedence.
ANPs with no egress rules do not affect egress traffic.
Support: Core
Type:: array

## .spec.egress[]

Description:: 
AdminNetworkPolicyEgressRule describes an action to take on a particular
set of traffic originating from pods selected by a AdminNetworkPolicy's
Subject field.
<network-policy-api:experimental:validation>
Type:: object
Required:: 
* action
* to



## .spec.egress[].ports

Description:: 
Ports allows for matching traffic based on port and protocols.
This field is a list of destination ports for the outgoing egress traffic.
If Ports is not set then the rule does not filter traffic via port.
Support: Core
Type:: array

## .spec.egress[].ports[]

Description:: 
AdminNetworkPolicyPort describes how to select network ports on pod(s).
Exactly one field must be set.
Type:: object



## .spec.egress[].ports[].portNumber

Description:: 
Port selects a port on a pod(s) based on number.
Support: Core
Type:: object
Required:: 
* port
* protocol



## .spec.egress[].ports[].portRange

Description:: 
PortRange selects a port range on a pod(s) based on provided start and end
values.
Support: Core
Type:: object
Required:: 
* end
* start



## .spec.egress[].to

Description:: 
To is the List of destinations whose traffic this rule applies to.
If any AdminNetworkPolicyEgressPeer matches the destination of outgoing
traffic then the specified action is applied.
This field must be defined and contain at least one item.
Support: Core
Type:: array

## .spec.egress[].to[]

Description:: 
AdminNetworkPolicyEgressPeer defines a peer to allow traffic to.
Exactly one of the selector pointers must be set for a given peer. If a
consumer observes none of its fields are set, they must assume an unknown
option has been specified and fail closed.
Type:: object



## .spec.egress[].to[].namespaces

Description:: 
Namespaces defines a way to select all pods within a set of Namespaces.
Note that host-networked pods are not included in this type of peer.
Support: Core
Type:: object



## .spec.egress[].to[].namespaces.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.egress[].to[].namespaces.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.egress[].to[].nodes

Description:: 
Nodes defines a way to select a set of nodes in
the cluster. This field follows standard label selector
semantics; if present but empty, it selects all Nodes.
Support: Extended
<network-policy-api:experimental>
Type:: object



## .spec.egress[].to[].nodes.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.egress[].to[].nodes.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.egress[].to[].pods

Description:: 
Pods defines a way to select a set of pods in
a set of namespaces. Note that host-networked pods
are not included in this type of peer.
Support: Core
Type:: object
Required:: 
* namespaceSelector
* podSelector



## .spec.egress[].to[].pods.namespaceSelector

Description:: 
NamespaceSelector follows standard label selector semantics; if empty,
it selects all Namespaces.
Type:: object



## .spec.egress[].to[].pods.namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.egress[].to[].pods.namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.egress[].to[].pods.podSelector

Description:: 
PodSelector is used to explicitly select pods within a namespace; if empty,
it selects all Pods.
Type:: object



## .spec.egress[].to[].pods.podSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.egress[].to[].pods.podSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.ingress

Description:: 
Ingress is the list of Ingress rules to be applied to the selected pods.
A total of 100 rules will be allowed in each ANP instance.
The relative precedence of ingress rules within a single ANP object (all of
which share the priority) will be determined by the order in which the rule
is written. Thus, a rule that appears at the top of the ingress rules
would take the highest precedence.
ANPs with no ingress rules do not affect ingress traffic.
Support: Core
Type:: array

## .spec.ingress[]

Description:: 
AdminNetworkPolicyIngressRule describes an action to take on a particular
set of traffic destined for pods selected by an AdminNetworkPolicy's
Subject field.
Type:: object
Required:: 
* action
* from



## .spec.ingress[].from

Description:: 
From is the list of sources whose traffic this rule applies to.
If any AdminNetworkPolicyIngressPeer matches the source of incoming
traffic then the specified action is applied.
This field must be defined and contain at least one item.
Support: Core
Type:: array

## .spec.ingress[].from[]

Description:: 
AdminNetworkPolicyIngressPeer defines an in-cluster peer to allow traffic from.
Exactly one of the selector pointers must be set for a given peer. If a
consumer observes none of its fields are set, they must assume an unknown
option has been specified and fail closed.
Type:: object



## .spec.ingress[].from[].namespaces

Description:: 
Namespaces defines a way to select all pods within a set of Namespaces.
Note that host-networked pods are not included in this type of peer.
Support: Core
Type:: object



## .spec.ingress[].from[].namespaces.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.ingress[].from[].namespaces.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.ingress[].from[].pods

Description:: 
Pods defines a way to select a set of pods in
a set of namespaces. Note that host-networked pods
are not included in this type of peer.
Support: Core
Type:: object
Required:: 
* namespaceSelector
* podSelector



## .spec.ingress[].from[].pods.namespaceSelector

Description:: 
NamespaceSelector follows standard label selector semantics; if empty,
it selects all Namespaces.
Type:: object



## .spec.ingress[].from[].pods.namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.ingress[].from[].pods.namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.ingress[].from[].pods.podSelector

Description:: 
PodSelector is used to explicitly select pods within a namespace; if empty,
it selects all Pods.
Type:: object



## .spec.ingress[].from[].pods.podSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.ingress[].from[].pods.podSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.ingress[].ports

Description:: 
Ports allows for matching traffic based on port and protocols.
This field is a list of ports which should be matched on
the pods selected for this policy i.e the subject of the policy.
So it matches on the destination port for the ingress traffic.
If Ports is not set then the rule does not filter traffic via port.
Support: Core
Type:: array

## .spec.ingress[].ports[]

Description:: 
AdminNetworkPolicyPort describes how to select network ports on pod(s).
Exactly one field must be set.
Type:: object



## .spec.ingress[].ports[].portNumber

Description:: 
Port selects a port on a pod(s) based on number.
Support: Core
Type:: object
Required:: 
* port
* protocol



## .spec.ingress[].ports[].portRange

Description:: 
PortRange selects a port range on a pod(s) based on provided start and end
values.
Support: Core
Type:: object
Required:: 
* end
* start



## .spec.subject

Description:: 
Subject defines the pods to which this AdminNetworkPolicy applies.
Note that host-networked pods are not included in subject selection.
Support: Core
Type:: object



## .spec.subject.namespaces

Description:: 
Namespaces is used to select pods via namespace selectors.
Type:: object



## .spec.subject.namespaces.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.subject.namespaces.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.subject.pods

Description:: 
Pods is used to select pods via namespace AND pod selectors.
Type:: object
Required:: 
* namespaceSelector
* podSelector



## .spec.subject.pods.namespaceSelector

Description:: 
NamespaceSelector follows standard label selector semantics; if empty,
it selects all Namespaces.
Type:: object



## .spec.subject.pods.namespaceSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.subject.pods.namespaceSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.subject.pods.podSelector

Description:: 
PodSelector is used to explicitly select pods within a namespace; if empty,
it selects all Pods.
Type:: object



## .spec.subject.pods.podSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.subject.pods.podSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .status

Description:: 
Status is the status to be reported by the implementation.
Type:: object
Required:: 
* conditions



## .status.conditions

Description:: 

Type:: array

## .status.conditions[]

Description:: 
Condition contains details for one aspect of the current state of this API Resource.
---
This struct is intended for direct use as an array at the field path .status.conditions.  For example,
type FooStatus struct{
    // Represents the observations of a foo's current state.
    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
    // +patchMergeKey=type
    // +patchStrategy=merge
    // +listType=map
    // +listMapKey=type
    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
    // other fields
}
Type:: object
Required:: 
* lastTransitionTime
* message
* reason
* status
* type



# API endpoints

The following API endpoints are available:

* /apis/policy.networking.k8s.io/v1alpha1/adminnetworkpolicies
* DELETE: delete collection of AdminNetworkPolicy
* GET: list objects of kind AdminNetworkPolicy
* POST: create an AdminNetworkPolicy
* /apis/policy.networking.k8s.io/v1alpha1/adminnetworkpolicies/{name}
* DELETE: delete an AdminNetworkPolicy
* GET: read the specified AdminNetworkPolicy
* PATCH: partially update the specified AdminNetworkPolicy
* PUT: replace the specified AdminNetworkPolicy
* /apis/policy.networking.k8s.io/v1alpha1/adminnetworkpolicies/{name}/status
* GET: read status of the specified AdminNetworkPolicy
* PATCH: partially update status of the specified AdminNetworkPolicy
* PUT: replace status of the specified AdminNetworkPolicy

## /apis/policy.networking.k8s.io/v1alpha1/adminnetworkpolicies

HTTP method:: DELETE
Description:: delete collection of AdminNetworkPolicy



HTTP method:: GET
Description:: list objects of kind AdminNetworkPolicy



HTTP method:: POST
Description:: create an AdminNetworkPolicy







## /apis/policy.networking.k8s.io/v1alpha1/adminnetworkpolicies/{name}



HTTP method:: DELETE
Description:: delete an AdminNetworkPolicy





HTTP method:: GET
Description:: read the specified AdminNetworkPolicy



HTTP method:: PATCH
Description:: partially update the specified AdminNetworkPolicy





HTTP method:: PUT
Description:: replace the specified AdminNetworkPolicy







## /apis/policy.networking.k8s.io/v1alpha1/adminnetworkpolicies/{name}/status



HTTP method:: GET
Description:: read status of the specified AdminNetworkPolicy



HTTP method:: PATCH
Description:: partially update status of the specified AdminNetworkPolicy





HTTP method:: PUT
Description:: replace status of the specified AdminNetworkPolicy





