# GRPCRoute [gateway.networking.k8s.io/v1]


Description:: 
GRPCRoute provides a way to route gRPC requests. This includes the capability
to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
Filters can be used to specify additional processing steps. Backends specify
where matching requests will be routed.
GRPCRoute falls under extended support within the Gateway API. Within the
following specification, the word "MUST" indicates that an implementation
supporting GRPCRoute must conform to the indicated requirement, but an
implementation not supporting this route type need not follow the requirement
unless explicitly indicated.
Implementations supporting GRPCRoute with the HTTPS ProtocolType MUST
accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
ALPN. If the implementation does not support this, then it MUST set the
"Accepted" condition to "False" for the affected listener with a reason of
"UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
with an upgrade from HTTP/1.
Implementations supporting GRPCRoute with the HTTP ProtocolType MUST
support HTTP/2 over cleartext TCP (h2c,
https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
upgrade from HTTP/1.1, i.e. with prior knowledge
(https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
does not support this, then it MUST set the "Accepted" condition to "False"
for the affected listener with a reason of "UnsupportedProtocol".
Implementations MAY also accept HTTP/2 connections with an upgrade from
HTTP/1, i.e. without prior knowledge.
Type:: object

# Specification



## .spec

Description:: 
Spec defines the desired state of GRPCRoute.
Type:: object



## .spec.parentRefs

Description:: 
ParentRefs references the resources (usually Gateways) that a Route wants
to be attached to. Note that the referenced parent resource needs to
allow this for the attachment to be complete. For Gateways, that means
the Gateway needs to allow attachment from Routes of this kind and
namespace. For Services, that means the Service must either be in the same
namespace for a "producer" route, or the mesh implementation must support
and allow "consumer" routes for the referenced Service. ReferenceGrant is
not applicable for governing ParentRefs to Services - it is not possible to
create a "producer" route for a Service in a different namespace from the
Route.
There are two kinds of parent resources with "Core" support:
* Gateway (Gateway conformance profile)
* Service (Mesh conformance profile, ClusterIP Services only)
This API may be extended in the future to support additional kinds of parent
resources.
ParentRefs must be distinct. This means either that:
* They select different objects.  If this is the case, then parentRef
entries are distinct. In terms of fields, this means that the
multi-part key defined by group, kind, namespace, and name must
be unique across all parentRef entries in the Route.
* They do not select different objects, but for each optional field used,
each ParentRef that selects the same object must set the same set of
optional fields to different values. If one ParentRef sets a
combination of optional fields, all must set the same combination.
Some examples:
* If one ParentRef sets sectionName, all ParentRefs referencing the
same object must also set sectionName.
* If one ParentRef sets port, all ParentRefs referencing the same
object must also set port.
* If one ParentRef sets sectionName and port, all ParentRefs
referencing the same object must also set sectionName and port.
It is possible to separately reference multiple distinct objects that may
be collapsed by an implementation. For example, some implementations may
choose to merge compatible Gateway Listeners together. If that is the
case, the list of routes attached to those resources should also be
merged.
Note that for ParentRefs that cross namespace boundaries, there are specific
rules. Cross-namespace references are only valid if they are explicitly
allowed by something in the namespace they are referring to. For example,
Gateway has the AllowedRoutes field, and ReferenceGrant provides a
generic way to enable other kinds of cross-namespace reference.
Type:: array

## .spec.parentRefs[]

Description:: 
ParentReference identifies an API object (usually a Gateway) that can be considered
a parent of this resource (usually a route). There are two kinds of parent resources
with "Core" support:
* Gateway (Gateway conformance profile)
* Service (Mesh conformance profile, ClusterIP Services only)
This API may be extended in the future to support additional kinds of parent
resources.
The API object must be valid in the cluster; the Group and Kind must
be registered in the cluster for this reference to be valid.
Type:: object
Required:: 
* name



## .spec.rules

Description:: 
Rules are a list of GRPC matchers, filters and actions.
Type:: array

## .spec.rules[]

Description:: 
GRPCRouteRule defines the semantics for matching a gRPC request based on
conditions (matches), processing it (filters), and forwarding the request to
an API object (backendRefs).
Type:: object



## .spec.rules[].backendRefs

Description:: 
BackendRefs defines the backend(s) where matching requests should be
sent.
Failure behavior here depends on how many BackendRefs are specified and
how many are invalid.
If all entries in BackendRefs are invalid, and there are also no filters
specified in this route rule, all traffic which matches this rule MUST
receive an UNAVAILABLE status.
See the GRPCBackendRef definition for the rules about what makes a single
GRPCBackendRef invalid.
When a GRPCBackendRef is invalid, UNAVAILABLE statuses MUST be returned for
requests that would have otherwise been routed to an invalid backend. If
multiple backends are specified, and some are invalid, the proportion of
requests that would otherwise have been routed to an invalid backend
MUST receive an UNAVAILABLE status.
For example, if two backends are specified with equal weights, and one is
invalid, 50 percent of traffic MUST receive an UNAVAILABLE status.
Implementations may choose how that 50 percent is determined.
Support: Core for Kubernetes Service
Support: Implementation-specific for any other resource
Support for weight: Core
Type:: array

## .spec.rules[].backendRefs[]

Description:: 
GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
Note that when a namespace different than the local namespace is specified, a
ReferenceGrant object is required in the referent namespace to allow that
namespace's owner to accept the reference. See the ReferenceGrant
documentation for details.
Type:: object
Required:: 
* name



## .spec.rules[].backendRefs[].filters

Description:: 
Filters defined at this level MUST be executed if and only if the
request is being forwarded to the backend defined here.
Support: Implementation-specific (For broader support of filters, use the
Filters field in GRPCRouteRule.)
Type:: array

## .spec.rules[].backendRefs[].filters[]

Description:: 
GRPCRouteFilter defines processing steps that must be completed during the
request or response lifecycle. GRPCRouteFilters are meant as an extension
point to express processing that may be done in Gateway implementations. Some
examples include request or response modification, implementing
authentication strategies, rate-limiting, and traffic shaping. API
guarantee/conformance is defined based on the type of the filter.
Type:: object
Required:: 
* type



## .spec.rules[].backendRefs[].filters[].extensionRef

Description:: 
ExtensionRef is an optional, implementation-specific extension to the
"filter" behavior.  For example, resource "myroutefilter" in group
"networking.example.net"). ExtensionRef MUST NOT be used for core and
extended filters.
Support: Implementation-specific
This filter can be used multiple times within the same rule.
Type:: object
Required:: 
* group
* kind
* name



## .spec.rules[].backendRefs[].filters[].requestHeaderModifier

Description:: 
RequestHeaderModifier defines a schema for a filter that modifies request
headers.
Support: Core
Type:: object



## .spec.rules[].backendRefs[].filters[].requestHeaderModifier.add

Description:: 
Add adds the given header(s) (name, value) to the request
before the action. It appends to any existing values associated
with the header name.
Input:
  GET /foo HTTP/1.1
  my-header: foo
Config:
  add:
  - name: "my-header"
    value: "bar,baz"
Output:
  GET /foo HTTP/1.1
  my-header: foo,bar,baz
Type:: array

## .spec.rules[].backendRefs[].filters[].requestHeaderModifier.add[]

Description:: 
HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
Type:: object
Required:: 
* name
* value



## .spec.rules[].backendRefs[].filters[].requestHeaderModifier.set

Description:: 
Set overwrites the request with the given header (name, value)
before the action.
Input:
  GET /foo HTTP/1.1
  my-header: foo
Config:
  set:
  - name: "my-header"
    value: "bar"
Output:
  GET /foo HTTP/1.1
  my-header: bar
Type:: array

## .spec.rules[].backendRefs[].filters[].requestHeaderModifier.set[]

Description:: 
HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
Type:: object
Required:: 
* name
* value



## .spec.rules[].backendRefs[].filters[].requestMirror

Description:: 
RequestMirror defines a schema for a filter that mirrors requests.
Requests are sent to the specified destination, but responses from
that destination are ignored.
This filter can be used multiple times within the same rule. Note that
not all implementations will be able to support mirroring to multiple
backends.
Support: Extended
Type:: object
Required:: 
* backendRef



## .spec.rules[].backendRefs[].filters[].requestMirror.backendRef

Description:: 
BackendRef references a resource where mirrored requests are sent.
Mirrored requests must be sent only to a single destination endpoint
within this BackendRef, irrespective of how many endpoints are present
within this BackendRef.
If the referent cannot be found, this BackendRef is invalid and must be
dropped from the Gateway. The controller must ensure the "ResolvedRefs"
condition on the Route status is set to status: False and not configure
this backend in the underlying implementation.
If there is a cross-namespace reference to an existing object
that is not allowed by a ReferenceGrant, the controller must ensure the
"ResolvedRefs"  condition on the Route is set to status: False,
with the "RefNotPermitted" reason and not configure this backend in the
underlying implementation.
In either error case, the Message of the ResolvedRefs Condition
should be used to provide more detail about the problem.
Support: Extended for Kubernetes Service
Support: Implementation-specific for any other resource
Type:: object
Required:: 
* name



## .spec.rules[].backendRefs[].filters[].requestMirror.fraction

Description:: 
Fraction represents the fraction of requests that should be
mirrored to BackendRef.
Only one of Fraction or Percent may be specified. If neither field
is specified, 100% of requests will be mirrored.
Type:: object
Required:: 
* numerator



## .spec.rules[].backendRefs[].filters[].responseHeaderModifier

Description:: 
ResponseHeaderModifier defines a schema for a filter that modifies response
headers.
Support: Extended
Type:: object



## .spec.rules[].backendRefs[].filters[].responseHeaderModifier.add

Description:: 
Add adds the given header(s) (name, value) to the request
before the action. It appends to any existing values associated
with the header name.
Input:
  GET /foo HTTP/1.1
  my-header: foo
Config:
  add:
  - name: "my-header"
    value: "bar,baz"
Output:
  GET /foo HTTP/1.1
  my-header: foo,bar,baz
Type:: array

## .spec.rules[].backendRefs[].filters[].responseHeaderModifier.add[]

Description:: 
HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
Type:: object
Required:: 
* name
* value



## .spec.rules[].backendRefs[].filters[].responseHeaderModifier.set

Description:: 
Set overwrites the request with the given header (name, value)
before the action.
Input:
  GET /foo HTTP/1.1
  my-header: foo
Config:
  set:
  - name: "my-header"
    value: "bar"
Output:
  GET /foo HTTP/1.1
  my-header: bar
Type:: array

## .spec.rules[].backendRefs[].filters[].responseHeaderModifier.set[]

Description:: 
HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
Type:: object
Required:: 
* name
* value



## .spec.rules[].filters

Description:: 
Filters define the filters that are applied to requests that match
this rule.
The effects of ordering of multiple behaviors are currently unspecified.
This can change in the future based on feedback during the alpha stage.
Conformance-levels at this level are defined based on the type of filter:
* ALL core filters MUST be supported by all implementations that support
GRPCRoute.
* Implementers are encouraged to support extended filters.
* Implementation-specific custom filters have no API guarantees across
implementations.
Specifying the same filter multiple times is not supported unless explicitly
indicated in the filter.
If an implementation cannot support a combination of filters, it must clearly
document that limitation. In cases where incompatible or unsupported
filters are specified and cause the Accepted condition to be set to status
False, implementations may use the IncompatibleFilters reason to specify
this configuration error.
Support: Core
Type:: array

## .spec.rules[].filters[]

Description:: 
GRPCRouteFilter defines processing steps that must be completed during the
request or response lifecycle. GRPCRouteFilters are meant as an extension
point to express processing that may be done in Gateway implementations. Some
examples include request or response modification, implementing
authentication strategies, rate-limiting, and traffic shaping. API
guarantee/conformance is defined based on the type of the filter.
Type:: object
Required:: 
* type



## .spec.rules[].filters[].extensionRef

Description:: 
ExtensionRef is an optional, implementation-specific extension to the
"filter" behavior.  For example, resource "myroutefilter" in group
"networking.example.net"). ExtensionRef MUST NOT be used for core and
extended filters.
Support: Implementation-specific
This filter can be used multiple times within the same rule.
Type:: object
Required:: 
* group
* kind
* name



## .spec.rules[].filters[].requestHeaderModifier

Description:: 
RequestHeaderModifier defines a schema for a filter that modifies request
headers.
Support: Core
Type:: object



## .spec.rules[].filters[].requestHeaderModifier.add

Description:: 
Add adds the given header(s) (name, value) to the request
before the action. It appends to any existing values associated
with the header name.
Input:
  GET /foo HTTP/1.1
  my-header: foo
Config:
  add:
  - name: "my-header"
    value: "bar,baz"
Output:
  GET /foo HTTP/1.1
  my-header: foo,bar,baz
Type:: array

## .spec.rules[].filters[].requestHeaderModifier.add[]

Description:: 
HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
Type:: object
Required:: 
* name
* value



## .spec.rules[].filters[].requestHeaderModifier.set

Description:: 
Set overwrites the request with the given header (name, value)
before the action.
Input:
  GET /foo HTTP/1.1
  my-header: foo
Config:
  set:
  - name: "my-header"
    value: "bar"
Output:
  GET /foo HTTP/1.1
  my-header: bar
Type:: array

## .spec.rules[].filters[].requestHeaderModifier.set[]

Description:: 
HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
Type:: object
Required:: 
* name
* value



## .spec.rules[].filters[].requestMirror

Description:: 
RequestMirror defines a schema for a filter that mirrors requests.
Requests are sent to the specified destination, but responses from
that destination are ignored.
This filter can be used multiple times within the same rule. Note that
not all implementations will be able to support mirroring to multiple
backends.
Support: Extended
Type:: object
Required:: 
* backendRef



## .spec.rules[].filters[].requestMirror.backendRef

Description:: 
BackendRef references a resource where mirrored requests are sent.
Mirrored requests must be sent only to a single destination endpoint
within this BackendRef, irrespective of how many endpoints are present
within this BackendRef.
If the referent cannot be found, this BackendRef is invalid and must be
dropped from the Gateway. The controller must ensure the "ResolvedRefs"
condition on the Route status is set to status: False and not configure
this backend in the underlying implementation.
If there is a cross-namespace reference to an existing object
that is not allowed by a ReferenceGrant, the controller must ensure the
"ResolvedRefs"  condition on the Route is set to status: False,
with the "RefNotPermitted" reason and not configure this backend in the
underlying implementation.
In either error case, the Message of the ResolvedRefs Condition
should be used to provide more detail about the problem.
Support: Extended for Kubernetes Service
Support: Implementation-specific for any other resource
Type:: object
Required:: 
* name



## .spec.rules[].filters[].requestMirror.fraction

Description:: 
Fraction represents the fraction of requests that should be
mirrored to BackendRef.
Only one of Fraction or Percent may be specified. If neither field
is specified, 100% of requests will be mirrored.
Type:: object
Required:: 
* numerator



## .spec.rules[].filters[].responseHeaderModifier

Description:: 
ResponseHeaderModifier defines a schema for a filter that modifies response
headers.
Support: Extended
Type:: object



## .spec.rules[].filters[].responseHeaderModifier.add

Description:: 
Add adds the given header(s) (name, value) to the request
before the action. It appends to any existing values associated
with the header name.
Input:
  GET /foo HTTP/1.1
  my-header: foo
Config:
  add:
  - name: "my-header"
    value: "bar,baz"
Output:
  GET /foo HTTP/1.1
  my-header: foo,bar,baz
Type:: array

## .spec.rules[].filters[].responseHeaderModifier.add[]

Description:: 
HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
Type:: object
Required:: 
* name
* value



## .spec.rules[].filters[].responseHeaderModifier.set

Description:: 
Set overwrites the request with the given header (name, value)
before the action.
Input:
  GET /foo HTTP/1.1
  my-header: foo
Config:
  set:
  - name: "my-header"
    value: "bar"
Output:
  GET /foo HTTP/1.1
  my-header: bar
Type:: array

## .spec.rules[].filters[].responseHeaderModifier.set[]

Description:: 
HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
Type:: object
Required:: 
* name
* value



## .spec.rules[].matches

Description:: 
Matches define conditions used for matching the rule against incoming
gRPC requests. Each match is independent, i.e. this rule will be matched
if any one of the matches is satisfied.
For example, take the following matches configuration:
matches:
- method:
    service: foo.bar
  headers:
    values:
      version: 2
- method:
    service: foo.bar.v2
For a request to match against this rule, it MUST satisfy
EITHER of the two conditions:
* service of foo.bar AND contains the header version: 2
* service of foo.bar.v2
See the documentation for GRPCRouteMatch on how to specify multiple
match conditions to be ANDed together.
If no matches are specified, the implementation MUST match every gRPC request.
Proxy or Load Balancer routing configuration generated from GRPCRoutes
MUST prioritize rules based on the following criteria, continuing on
ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
Precedence MUST be given to the rule with the largest number of:
* Characters in a matching non-wildcard hostname.
* Characters in a matching hostname.
* Characters in a matching service.
* Characters in a matching method.
* Header matches.
If ties still exist across multiple Routes, matching precedence MUST be
determined in order of the following criteria, continuing on ties:
* The oldest Route based on creation timestamp.
* The Route appearing first in alphabetical order by
"{namespace}/{name}".
If ties still exist within the Route that has been given precedence,
matching precedence MUST be granted to the first matching rule meeting
the above criteria.
Type:: array

## .spec.rules[].matches[]

Description:: 
GRPCRouteMatch defines the predicate used to match requests to a given
action. Multiple match types are ANDed together, i.e. the match will
evaluate to true only if all conditions are satisfied.
For example, the match below will match a gRPC request only if its service
is foo AND it contains the version: v1 header:
matches:
  - method:
    type: Exact
    service: "foo"
    headers:
  - name: "version"
    value "v1"
Type:: object



## .spec.rules[].matches[].headers

Description:: 
Headers specifies gRPC request header matchers. Multiple match values are
ANDed together, meaning, a request MUST match all the specified headers
to select the route.
Type:: array

## .spec.rules[].matches[].headers[]

Description:: 
GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
headers.
Type:: object
Required:: 
* name
* value



## .spec.rules[].matches[].method

Description:: 
Method specifies a gRPC request service/method matcher. If this field is
not specified, all services and methods will match.
Type:: object



## .status

Description:: 
Status defines the current state of GRPCRoute.
Type:: object
Required:: 
* parents



## .status.parents

Description:: 
Parents is a list of parent resources (usually Gateways) that are
associated with the route, and the status of the route with respect to
each parent. When this route attaches to a parent, the controller that
manages the parent must add an entry to this list when the controller
first sees the route and should update the entry as appropriate when the
route or gateway is modified.
Note that parent references that cannot be resolved by an implementation
of this API will not be added to this list. Implementations of this API
can only populate Route status for the Gateways/parent resources they are
responsible for.
A maximum of 32 Gateways will be represented in this list. An empty list
means the route has not been attached to any Gateway.
Type:: array

## .status.parents[]

Description:: 
RouteParentStatus describes the status of a route with respect to an
associated Parent.
Type:: object
Required:: 
* controllerName
* parentRef



## .status.parents[].conditions

Description:: 
Conditions describes the status of the route with respect to the Gateway.
Note that the route's availability is also subject to the Gateway's own
status conditions and listener status.
If the Route's ParentRef specifies an existing Gateway that supports
Routes of this kind AND that Gateway's controller has sufficient access,
then that Gateway's controller MUST set the "Accepted" condition on the
Route, to indicate whether the route has been accepted or rejected by the
Gateway, and why.
A Route MUST be considered "Accepted" if at least one of the Route's
rules is implemented by the Gateway.
There are a number of cases where the "Accepted" condition may not be set
due to lack of controller visibility, that includes when:
* The Route refers to a nonexistent parent.
* The Route is of a type that the controller does not support.
* The Route is in a namespace the controller does not have access to.
Type:: array

## .status.parents[].conditions[]

Description:: 
Condition contains details for one aspect of the current state of this API Resource.
Type:: object
Required:: 
* lastTransitionTime
* message
* reason
* status
* type



## .status.parents[].parentRef

Description:: 
ParentRef corresponds with a ParentRef in the spec that this
RouteParentStatus struct describes the status of.
Type:: object
Required:: 
* name



# API endpoints

The following API endpoints are available:

* /apis/gateway.networking.k8s.io/v1/grpcroutes
* GET: list objects of kind GRPCRoute
* /apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/grpcroutes
* DELETE: delete collection of GRPCRoute
* GET: list objects of kind GRPCRoute
* POST: create a GRPCRoute
* /apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/grpcroutes/{name}
* DELETE: delete a GRPCRoute
* GET: read the specified GRPCRoute
* PATCH: partially update the specified GRPCRoute
* PUT: replace the specified GRPCRoute
* /apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/grpcroutes/{name}/status
* GET: read status of the specified GRPCRoute
* PATCH: partially update status of the specified GRPCRoute
* PUT: replace status of the specified GRPCRoute

## /apis/gateway.networking.k8s.io/v1/grpcroutes

HTTP method:: GET
Description:: list objects of kind GRPCRoute



## /apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/grpcroutes

HTTP method:: DELETE
Description:: delete collection of GRPCRoute



HTTP method:: GET
Description:: list objects of kind GRPCRoute



HTTP method:: POST
Description:: create a GRPCRoute







## /apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/grpcroutes/{name}



HTTP method:: DELETE
Description:: delete a GRPCRoute





HTTP method:: GET
Description:: read the specified GRPCRoute



HTTP method:: PATCH
Description:: partially update the specified GRPCRoute





HTTP method:: PUT
Description:: replace the specified GRPCRoute







## /apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/grpcroutes/{name}/status



HTTP method:: GET
Description:: read status of the specified GRPCRoute



HTTP method:: PATCH
Description:: partially update status of the specified GRPCRoute





HTTP method:: PUT
Description:: replace status of the specified GRPCRoute





