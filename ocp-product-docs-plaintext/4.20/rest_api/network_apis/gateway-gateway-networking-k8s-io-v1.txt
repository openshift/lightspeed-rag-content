# Gateway [gateway.networking.k8s.io/v1]


Description:: 
Gateway represents an instance of a service-traffic handling infrastructure
by binding Listeners to a set of IP addresses.
Type:: object
Required:: 
* spec

# Specification



## .spec

Description:: 
Spec defines the desired state of Gateway.
Type:: object
Required:: 
* gatewayClassName
* listeners



## .spec.addresses

Description:: 
Addresses requested for this Gateway. This is optional and behavior can
depend on the implementation. If a value is set in the spec and the
requested address is invalid or unavailable, the implementation MUST
indicate this in the associated entry in GatewayStatus.Addresses.
The Addresses field represents a request for the address(es) on the
"outside of the Gateway", that traffic bound for this Gateway will use.
This could be the IP address or hostname of an external load balancer or
other networking infrastructure, or some other address that traffic will
be sent to.
If no Addresses are specified, the implementation MAY schedule the
Gateway in an implementation-specific manner, assigning an appropriate
set of Addresses.
The implementation MUST bind all Listeners to every GatewayAddress that
it assigns to the Gateway and add a corresponding entry in
GatewayStatus.Addresses.
Support: Extended
Type:: array

## .spec.addresses[]

Description:: 
GatewayAddress describes an address that can be bound to a Gateway.
Type:: object
Required:: 
* value



## .spec.infrastructure

Description:: 
Infrastructure defines infrastructure level attributes about this Gateway instance.
Support: Extended
Type:: object



## .spec.infrastructure.parametersRef

Description:: 
ParametersRef is a reference to a resource that contains the configuration
parameters corresponding to the Gateway. This is optional if the
controller does not require any additional configuration.
This follows the same semantics as GatewayClass's parametersRef, but on a per-Gateway basis
The Gateway's GatewayClass may provide its own parametersRef. When both are specified,
the merging behavior is implementation specific.
It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
If the referent cannot be found, refers to an unsupported kind, or when
the data within that resource is malformed, the Gateway SHOULD be
rejected with the "Accepted" status condition set to "False" and an
"InvalidParameters" reason.
Support: Implementation-specific
Type:: object
Required:: 
* group
* kind
* name



## .spec.listeners

Description:: 
Listeners associated with this Gateway. Listeners define
logical endpoints that are bound on this Gateway's addresses.
At least one Listener MUST be specified.
## Distinct Listeners
Each Listener in a set of Listeners (for example, in a single Gateway)
MUST be distinct, in that a traffic flow MUST be able to be assigned to
exactly one listener. (This section uses "set of Listeners" rather than
"Listeners in a single Gateway" because implementations MAY merge configuration
from multiple Gateways onto a single data plane, and these rules also
apply in that case).
Practically, this means that each listener in a set MUST have a unique
combination of Port, Protocol, and, if supported by the protocol, Hostname.
Some combinations of port, protocol, and TLS settings are considered
Core support and MUST be supported by implementations based on the objects
they support:
HTTPRoute
1. HTTPRoute, Port: 80, Protocol: HTTP
2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided
TLSRoute
1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough
"Distinct" Listeners have the following property:
The implementation can match inbound requests to a single distinct
Listener.
When multiple Listeners share values for fields (for
example, two Listeners with the same Port value), the implementation
can match requests to only one of the Listeners using other
Listener fields.
When multiple listeners have the same value for the Protocol field, then
each of the Listeners with matching Protocol values MUST have different
values for other fields.
The set of fields that MUST be different for a Listener differs per protocol.
The following rules define the rules for what fields MUST be considered for
Listeners to be distinct with each protocol currently defined in the
Gateway API spec.
The set of listeners that all share a protocol value MUST have different
values for at least one of these fields to be distinct:
* HTTP, HTTPS, TLS: Port, Hostname
* TCP, UDP: Port
One very important rule to call out involves what happens when an
implementation:
* Supports TCP protocol Listeners, as well as HTTP, HTTPS, or TLS protocol
Listeners, and
* sees HTTP, HTTPS, or TLS protocols with the same port as one with TCP
Protocol.
In this case all the Listeners that share a port with the
TCP Listener are not distinct and so MUST NOT be accepted.
If an implementation does not support TCP Protocol Listeners, then the
previous rule does not apply, and the TCP Listeners SHOULD NOT be
accepted.
Note that the tls field is not used for determining if a listener is distinct, because
Listeners that only differ on TLS config will still conflict in all cases.
# Listeners that are distinct only by Hostname
When the Listeners are distinct based only on Hostname, inbound request
hostnames MUST match from the most specific to least specific Hostname
values to choose the correct Listener and its associated set of Routes.
Exact matches MUST be processed before wildcard matches, and wildcard
matches MUST be processed before fallback (empty Hostname value)
matches. For example, "foo.example.com" takes precedence over
".example.com", and ".example.com" takes precedence over "".
Additionally, if there are multiple wildcard entries, more specific
wildcard entries must be processed before less specific wildcard entries.
For example, ".foo.example.com" takes precedence over ".example.com".
The precise definition here is that the higher the number of dots in the
hostname to the right of the wildcard character, the higher the precedence.
The wildcard character will match any number of characters and dots to
the left, however, so "*.example.com" will match both
"foo.bar.example.com" and "bar.example.com".
## Handling indistinct Listeners
If a set of Listeners contains Listeners that are not distinct, then those
Listeners are Conflicted, and the implementation MUST set the "Conflicted"
condition in the Listener Status to "True".
The words "indistinct" and "conflicted" are considered equivalent for the
purpose of this documentation.
Implementations MAY choose to accept a Gateway with some Conflicted
Listeners only if they only accept the partial Listener set that contains
no Conflicted Listeners.
Specifically, an implementation MAY accept a partial Listener set subject to
the following rules:
* The implementation MUST NOT pick one conflicting Listener as the winner.
ALL indistinct Listeners must not be accepted for processing.
* At least one distinct Listener MUST be present, or else the Gateway effectively
contains no Listeners, and must be rejected from processing as a whole.
The implementation MUST set a "ListenersNotValid" condition on the
Gateway Status when the Gateway contains Conflicted Listeners whether or
not they accept the Gateway. That Condition SHOULD clearly
indicate in the Message which Listeners are conflicted, and which are
Accepted. Additionally, the Listener status for those listeners SHOULD
indicate which Listeners are conflicted and not Accepted.
## General Listener behavior
Note that, for all distinct Listeners, requests SHOULD match at most one Listener.
For example, if Listeners are defined for "foo.example.com" and ".example.com", a
request to "foo.example.com" SHOULD only be routed using routes attached
to the "foo.example.com" Listener (and not the ".example.com" Listener).
This concept is known as "Listener Isolation", and it is an Extended feature
of Gateway API. Implementations that do not support Listener Isolation MUST
clearly document this, and MUST NOT claim support for the
GatewayHTTPListenerIsolation feature.
Implementations that do support Listener Isolation SHOULD claim support
for the Extended GatewayHTTPListenerIsolation feature and pass the associated
conformance tests.
## Compatible Listeners
A Gateway's Listeners are considered compatible if:
1. They are distinct.
2. The implementation can serve them in compliance with the Addresses
requirement that all Listeners are available on all assigned
addresses.
Compatible combinations in Extended support are expected to vary across
implementations. A combination that is compatible for one implementation
may not be compatible for another.
For example, an implementation that cannot serve both TCP and UDP listeners
on the same address, or cannot mix HTTPS and generic TLS listens on the same port
would not consider those cases compatible, even though they are distinct.
Implementations MAY merge separate Gateways onto a single set of
Addresses if all Listeners across all Gateways are compatible.
In a future release the MinItems=1 requirement MAY be dropped.
Support: Core
Type:: array

## .spec.listeners[]

Description:: 
Listener embodies the concept of a logical endpoint where a Gateway accepts
network connections.
Type:: object
Required:: 
* name
* port
* protocol



## .spec.listeners[].allowedRoutes

Description:: 
AllowedRoutes defines the types of routes that MAY be attached to a
Listener and the trusted namespaces where those Route resources MAY be
present.
Although a client request may match multiple route rules, only one rule
may ultimately receive the request. Matching precedence MUST be
determined in order of the following criteria:
* The most specific match as defined by the Route type.
* The oldest Route based on creation timestamp. For example, a Route with
a creation timestamp of "2020-09-08 01:02:03" is given precedence over
a Route with a creation timestamp of "2020-09-08 01:02:04".
* If everything else is equivalent, the Route appearing first in
alphabetical order (namespace/name) should be given precedence. For
example, foo/bar is given precedence over foo/baz.
All valid rules within a Route attached to this Listener should be
implemented. Invalid Route rules can be ignored (sometimes that will mean
the full Route). If a Route rule transitions from valid to invalid,
support for that Route rule should be dropped to ensure consistency. For
example, even if a filter specified by a Route rule is invalid, the rest
of the rules within that Route should still be supported.
Support: Core
Type:: object



## .spec.listeners[].allowedRoutes.kinds

Description:: 
Kinds specifies the groups and kinds of Routes that are allowed to bind
to this Gateway Listener. When unspecified or empty, the kinds of Routes
selected are determined using the Listener protocol.
A RouteGroupKind MUST correspond to kinds of Routes that are compatible
with the application protocol specified in the Listener's Protocol field.
If an implementation does not support or recognize this resource type, it
MUST set the "ResolvedRefs" condition to False for this Listener with the
"InvalidRouteKinds" reason.
Support: Core
Type:: array

## .spec.listeners[].allowedRoutes.kinds[]

Description:: 
RouteGroupKind indicates the group and kind of a Route resource.
Type:: object
Required:: 
* kind



## .spec.listeners[].allowedRoutes.namespaces

Description:: 
Namespaces indicates namespaces from which Routes may be attached to this
Listener. This is restricted to the namespace of this Gateway by default.
Support: Core
Type:: object



## .spec.listeners[].allowedRoutes.namespaces.selector

Description:: 
Selector must be specified when From is set to "Selector". In that case,
only Routes in Namespaces matching this Selector will be selected by this
Gateway. This field is ignored for other values of "From".
Support: Core
Type:: object



## .spec.listeners[].allowedRoutes.namespaces.selector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.listeners[].allowedRoutes.namespaces.selector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.listeners[].tls

Description:: 
TLS is the TLS configuration for the Listener. This field is required if
the Protocol field is "HTTPS" or "TLS". It is invalid to set this field
if the Protocol field is "HTTP", "TCP", or "UDP".
The association of SNIs to Certificate defined in GatewayTLSConfig is
defined based on the Hostname field for this listener.
The GatewayClass MUST use the longest matching SNI out of all
available certificates for any TLS handshake.
Support: Core
Type:: object



## .spec.listeners[].tls.certificateRefs

Description:: 
CertificateRefs contains a series of references to Kubernetes objects that
contains TLS certificates and private keys. These certificates are used to
establish a TLS handshake for requests that match the hostname of the
associated listener.
A single CertificateRef to a Kubernetes Secret has "Core" support.
Implementations MAY choose to support attaching multiple certificates to
a Listener, but this behavior is implementation-specific.
References to a resource in different namespace are invalid UNLESS there
is a ReferenceGrant in the target namespace that allows the certificate
to be attached. If a ReferenceGrant does not allow this reference, the
"ResolvedRefs" condition MUST be set to False for this listener with the
"RefNotPermitted" reason.
This field is required to have at least one element when the mode is set
to "Terminate" (default) and is optional otherwise.
CertificateRefs can reference to standard Kubernetes resources, i.e.
Secret, or implementation-specific custom resources.
Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
Support: Implementation-specific (More than one reference or other resource types)
Type:: array

## .spec.listeners[].tls.certificateRefs[]

Description:: 
SecretObjectReference identifies an API object including its namespace,
defaulting to Secret.
The API object must be valid in the cluster; the Group and Kind must
be registered in the cluster for this reference to be valid.
References to objects with invalid Group and Kind are not valid, and must
be rejected by the implementation, with appropriate Conditions set
on the containing object.
Type:: object
Required:: 
* name



## .status

Description:: 
Status defines the current state of Gateway.
Type:: object



## .status.addresses

Description:: 
Addresses lists the network addresses that have been bound to the
Gateway.
This list may differ from the addresses provided in the spec under some
conditions:
* no addresses are specified, all addresses are dynamically assigned
* a combination of specified and dynamic addresses are assigned
* a specified address was unusable (e.g. already in use)
Type:: array

## .status.addresses[]

Description:: 
GatewayStatusAddress describes a network address that is bound to a Gateway.
Type:: object
Required:: 
* value



## .status.conditions

Description:: 
Conditions describe the current conditions of the Gateway.
Implementations should prefer to express Gateway conditions
using the GatewayConditionType and GatewayConditionReason
constants so that operators and tools can converge on a common
vocabulary to describe Gateway state.
Known condition types are:
* "Accepted"
* "Programmed"
* "Ready"
Type:: array

## .status.conditions[]

Description:: 
Condition contains details for one aspect of the current state of this API Resource.
Type:: object
Required:: 
* lastTransitionTime
* message
* reason
* status
* type



## .status.listeners

Description:: 
Listeners provide status for each unique listener port defined in the Spec.
Type:: array

## .status.listeners[]

Description:: 
ListenerStatus is the status associated with a Listener.
Type:: object
Required:: 
* attachedRoutes
* conditions
* name
* supportedKinds



## .status.listeners[].conditions

Description:: 
Conditions describe the current condition of this listener.
Type:: array

## .status.listeners[].conditions[]

Description:: 
Condition contains details for one aspect of the current state of this API Resource.
Type:: object
Required:: 
* lastTransitionTime
* message
* reason
* status
* type



## .status.listeners[].supportedKinds

Description:: 
SupportedKinds is the list indicating the Kinds supported by this
listener. This MUST represent the kinds an implementation supports for
that Listener configuration.
If kinds are specified in Spec that are not supported, they MUST NOT
appear in this list and an implementation MUST set the "ResolvedRefs"
condition to "False" with the "InvalidRouteKinds" reason. If both valid
and invalid Route kinds are specified, the implementation MUST
reference the valid Route kinds that have been specified.
Type:: array

## .status.listeners[].supportedKinds[]

Description:: 
RouteGroupKind indicates the group and kind of a Route resource.
Type:: object
Required:: 
* kind



# API endpoints

The following API endpoints are available:

* /apis/gateway.networking.k8s.io/v1/gateways
* GET: list objects of kind Gateway
* /apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways
* DELETE: delete collection of Gateway
* GET: list objects of kind Gateway
* POST: create a Gateway
* /apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways/{name}
* DELETE: delete a Gateway
* GET: read the specified Gateway
* PATCH: partially update the specified Gateway
* PUT: replace the specified Gateway
* /apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways/{name}/status
* GET: read status of the specified Gateway
* PATCH: partially update status of the specified Gateway
* PUT: replace status of the specified Gateway

## /apis/gateway.networking.k8s.io/v1/gateways

HTTP method:: GET
Description:: list objects of kind Gateway



## /apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways

HTTP method:: DELETE
Description:: delete collection of Gateway



HTTP method:: GET
Description:: list objects of kind Gateway



HTTP method:: POST
Description:: create a Gateway







## /apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways/{name}



HTTP method:: DELETE
Description:: delete a Gateway





HTTP method:: GET
Description:: read the specified Gateway



HTTP method:: PATCH
Description:: partially update the specified Gateway





HTTP method:: PUT
Description:: replace the specified Gateway







## /apis/gateway.networking.k8s.io/v1/namespaces/{namespace}/gateways/{name}/status



HTTP method:: GET
Description:: read status of the specified Gateway



HTTP method:: PATCH
Description:: partially update status of the specified Gateway





HTTP method:: PUT
Description:: replace status of the specified Gateway





