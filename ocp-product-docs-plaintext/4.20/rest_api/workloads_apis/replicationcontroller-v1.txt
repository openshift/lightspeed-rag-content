# ReplicationController [v1]


Description:: 
ReplicationController represents the configuration of a replication controller.
Type:: object

# Specification



## .spec

Description:: 
ReplicationControllerSpec is the specification of a replication controller.
Type:: object



## .spec.template

Description:: 
PodTemplateSpec describes the data a pod should have when created from a template
Type:: object



## .spec.template.spec

Description:: 
PodSpec is a description of a pod.
Type:: object
Required:: 
* containers



## .spec.template.spec.affinity

Description:: 
Affinity is a group of affinity scheduling rules.
Type:: object



## .spec.template.spec.affinity.nodeAffinity

Description:: 
Node affinity is a group of node affinity scheduling rules.
Type:: object



## .spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution

Description:: 
The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
Type:: array

## .spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[]

Description:: 
An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
Type:: object
Required:: 
* weight
* preference



## .spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference

Description:: 
A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
Type:: object



## .spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchExpressions

Description:: 
A list of node selector requirements by node's labels.
Type:: array

## .spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchExpressions[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchFields

Description:: 
A list of node selector requirements by node's fields.
Type:: array

## .spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution[].preference.matchFields[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution

Description:: 
A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
Type:: object
Required:: 
* nodeSelectorTerms



## .spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms

Description:: 
Required. A list of node selector terms. The terms are ORed.
Type:: array

## .spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[]

Description:: 
A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
Type:: object



## .spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchExpressions

Description:: 
A list of node selector requirements by node's labels.
Type:: array

## .spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchExpressions[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchFields

Description:: 
A list of node selector requirements by node's fields.
Type:: array

## .spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[].matchFields[]

Description:: 
A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.template.spec.affinity.podAffinity

Description:: 
Pod affinity is a group of inter pod affinity scheduling rules.
Type:: object



## .spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution

Description:: 
The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
Type:: array

## .spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[]

Description:: 
The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
Type:: object
Required:: 
* weight
* podAffinityTerm



## .spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm

Description:: 
Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
Type:: object
Required:: 
* topologyKey



## .spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution

Description:: 
If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
Type:: array

## .spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution[]

Description:: 
Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
Type:: object
Required:: 
* topologyKey



## .spec.template.spec.affinity.podAntiAffinity

Description:: 
Pod anti affinity is a group of inter pod anti affinity scheduling rules.
Type:: object



## .spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution

Description:: 
The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
Type:: array

## .spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[]

Description:: 
The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
Type:: object
Required:: 
* weight
* podAffinityTerm



## .spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution[].podAffinityTerm

Description:: 
Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
Type:: object
Required:: 
* topologyKey



## .spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution

Description:: 
If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
Type:: array

## .spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution[]

Description:: 
Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
Type:: object
Required:: 
* topologyKey



## .spec.template.spec.containers

Description:: 
List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
Type:: array

## .spec.template.spec.containers[]

Description:: 
A single application container that you want to run within a pod.
Type:: object
Required:: 
* name



## .spec.template.spec.containers[].env

Description:: 
List of environment variables to set in the container. Cannot be updated.
Type:: array

## .spec.template.spec.containers[].env[]

Description:: 
EnvVar represents an environment variable present in a Container.
Type:: object
Required:: 
* name



## .spec.template.spec.containers[].env[].valueFrom

Description:: 
EnvVarSource represents a source for the value of an EnvVar.
Type:: object



## .spec.template.spec.containers[].env[].valueFrom.configMapKeyRef

Description:: 
Selects a key from a ConfigMap.
Type:: object
Required:: 
* key



## .spec.template.spec.containers[].env[].valueFrom.fieldRef

Description:: 
ObjectFieldSelector selects an APIVersioned field of an object.
Type:: object
Required:: 
* fieldPath



## .spec.template.spec.containers[].env[].valueFrom.resourceFieldRef

Description:: 
ResourceFieldSelector represents container resources (cpu, memory) and their output format
Type:: object
Required:: 
* resource



## .spec.template.spec.containers[].env[].valueFrom.secretKeyRef

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.template.spec.containers[].envFrom

Description:: 
List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
Type:: array

## .spec.template.spec.containers[].envFrom[]

Description:: 
EnvFromSource represents the source of a set of ConfigMaps or Secrets
Type:: object



## .spec.template.spec.containers[].envFrom[].configMapRef

Description:: 
ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
Type:: object



## .spec.template.spec.containers[].envFrom[].secretRef

Description:: 
SecretEnvSource selects a Secret to populate the environment variables with.
The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
Type:: object



## .spec.template.spec.containers[].lifecycle

Description:: 
Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
Type:: object



## .spec.template.spec.containers[].lifecycle.postStart

Description:: 
LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
Type:: object



## .spec.template.spec.containers[].lifecycle.postStart.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.containers[].lifecycle.postStart.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].lifecycle.postStart.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.containers[].lifecycle.postStart.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.containers[].lifecycle.postStart.sleep

Description:: 
SleepAction describes a "sleep" action.
Type:: object
Required:: 
* seconds



## .spec.template.spec.containers[].lifecycle.postStart.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].lifecycle.preStop

Description:: 
LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
Type:: object



## .spec.template.spec.containers[].lifecycle.preStop.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.containers[].lifecycle.preStop.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].lifecycle.preStop.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.containers[].lifecycle.preStop.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.containers[].lifecycle.preStop.sleep

Description:: 
SleepAction describes a "sleep" action.
Type:: object
Required:: 
* seconds



## .spec.template.spec.containers[].lifecycle.preStop.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].livenessProbe

Description:: 
Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
Type:: object



## .spec.template.spec.containers[].livenessProbe.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.containers[].livenessProbe.grpc

Description:: 
GRPCAction specifies an action involving a GRPC service.
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].livenessProbe.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].livenessProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.containers[].livenessProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.containers[].livenessProbe.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].ports

Description:: 
List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
Type:: array

## .spec.template.spec.containers[].ports[]

Description:: 
ContainerPort represents a network port in a single container.
Type:: object
Required:: 
* containerPort



## .spec.template.spec.containers[].readinessProbe

Description:: 
Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
Type:: object



## .spec.template.spec.containers[].readinessProbe.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.containers[].readinessProbe.grpc

Description:: 
GRPCAction specifies an action involving a GRPC service.
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].readinessProbe.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].readinessProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.containers[].readinessProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.containers[].readinessProbe.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].resizePolicy

Description:: 
Resources resize policy for the container.
Type:: array

## .spec.template.spec.containers[].resizePolicy[]

Description:: 
ContainerResizePolicy represents resource resize policy for the container.
Type:: object
Required:: 
* resourceName
* restartPolicy



## .spec.template.spec.containers[].resources

Description:: 
ResourceRequirements describes the compute resource requirements.
Type:: object



## .spec.template.spec.containers[].resources.claims

Description:: 
Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
This field is immutable. It can only be set for containers.
Type:: array

## .spec.template.spec.containers[].resources.claims[]

Description:: 
ResourceClaim references one entry in PodSpec.ResourceClaims.
Type:: object
Required:: 
* name



## .spec.template.spec.containers[].securityContext

Description:: 
SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
Type:: object



## .spec.template.spec.containers[].securityContext.appArmorProfile

Description:: 
AppArmorProfile defines a pod or container's AppArmor settings.
Type:: object
Required:: 
* type



## .spec.template.spec.containers[].securityContext.capabilities

Description:: 
Adds and removes POSIX capabilities from running containers.
Type:: object



## .spec.template.spec.containers[].securityContext.seLinuxOptions

Description:: 
SELinuxOptions are the labels to be applied to the container
Type:: object



## .spec.template.spec.containers[].securityContext.seccompProfile

Description:: 
SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
Type:: object
Required:: 
* type



## .spec.template.spec.containers[].securityContext.windowsOptions

Description:: 
WindowsSecurityContextOptions contain Windows-specific options and credentials.
Type:: object



## .spec.template.spec.containers[].startupProbe

Description:: 
Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
Type:: object



## .spec.template.spec.containers[].startupProbe.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.containers[].startupProbe.grpc

Description:: 
GRPCAction specifies an action involving a GRPC service.
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].startupProbe.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].startupProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.containers[].startupProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.containers[].startupProbe.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.containers[].volumeDevices

Description:: 
volumeDevices is the list of block devices to be used by the container.
Type:: array

## .spec.template.spec.containers[].volumeDevices[]

Description:: 
volumeDevice describes a mapping of a raw block device within a container.
Type:: object
Required:: 
* name
* devicePath



## .spec.template.spec.containers[].volumeMounts

Description:: 
Pod volumes to mount into the container's filesystem. Cannot be updated.
Type:: array

## .spec.template.spec.containers[].volumeMounts[]

Description:: 
VolumeMount describes a mounting of a Volume within a container.
Type:: object
Required:: 
* name
* mountPath



## .spec.template.spec.dnsConfig

Description:: 
PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
Type:: object



## .spec.template.spec.dnsConfig.options

Description:: 
A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
Type:: array

## .spec.template.spec.dnsConfig.options[]

Description:: 
PodDNSConfigOption defines DNS resolver options of a pod.
Type:: object



## .spec.template.spec.ephemeralContainers

Description:: 
List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
Type:: array

## .spec.template.spec.ephemeralContainers[]

Description:: 
An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.
To add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.
Type:: object
Required:: 
* name



## .spec.template.spec.ephemeralContainers[].env

Description:: 
List of environment variables to set in the container. Cannot be updated.
Type:: array

## .spec.template.spec.ephemeralContainers[].env[]

Description:: 
EnvVar represents an environment variable present in a Container.
Type:: object
Required:: 
* name



## .spec.template.spec.ephemeralContainers[].env[].valueFrom

Description:: 
EnvVarSource represents a source for the value of an EnvVar.
Type:: object



## .spec.template.spec.ephemeralContainers[].env[].valueFrom.configMapKeyRef

Description:: 
Selects a key from a ConfigMap.
Type:: object
Required:: 
* key



## .spec.template.spec.ephemeralContainers[].env[].valueFrom.fieldRef

Description:: 
ObjectFieldSelector selects an APIVersioned field of an object.
Type:: object
Required:: 
* fieldPath



## .spec.template.spec.ephemeralContainers[].env[].valueFrom.resourceFieldRef

Description:: 
ResourceFieldSelector represents container resources (cpu, memory) and their output format
Type:: object
Required:: 
* resource



## .spec.template.spec.ephemeralContainers[].env[].valueFrom.secretKeyRef

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.template.spec.ephemeralContainers[].envFrom

Description:: 
List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
Type:: array

## .spec.template.spec.ephemeralContainers[].envFrom[]

Description:: 
EnvFromSource represents the source of a set of ConfigMaps or Secrets
Type:: object



## .spec.template.spec.ephemeralContainers[].envFrom[].configMapRef

Description:: 
ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
Type:: object



## .spec.template.spec.ephemeralContainers[].envFrom[].secretRef

Description:: 
SecretEnvSource selects a Secret to populate the environment variables with.
The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
Type:: object



## .spec.template.spec.ephemeralContainers[].lifecycle

Description:: 
Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
Type:: object



## .spec.template.spec.ephemeralContainers[].lifecycle.postStart

Description:: 
LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
Type:: object



## .spec.template.spec.ephemeralContainers[].lifecycle.postStart.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.ephemeralContainers[].lifecycle.postStart.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].lifecycle.postStart.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.ephemeralContainers[].lifecycle.postStart.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.ephemeralContainers[].lifecycle.postStart.sleep

Description:: 
SleepAction describes a "sleep" action.
Type:: object
Required:: 
* seconds



## .spec.template.spec.ephemeralContainers[].lifecycle.postStart.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].lifecycle.preStop

Description:: 
LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
Type:: object



## .spec.template.spec.ephemeralContainers[].lifecycle.preStop.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.ephemeralContainers[].lifecycle.preStop.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].lifecycle.preStop.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.ephemeralContainers[].lifecycle.preStop.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.ephemeralContainers[].lifecycle.preStop.sleep

Description:: 
SleepAction describes a "sleep" action.
Type:: object
Required:: 
* seconds



## .spec.template.spec.ephemeralContainers[].lifecycle.preStop.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].livenessProbe

Description:: 
Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
Type:: object



## .spec.template.spec.ephemeralContainers[].livenessProbe.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.ephemeralContainers[].livenessProbe.grpc

Description:: 
GRPCAction specifies an action involving a GRPC service.
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].livenessProbe.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].livenessProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.ephemeralContainers[].livenessProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.ephemeralContainers[].livenessProbe.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].ports

Description:: 
Ports are not allowed for ephemeral containers.
Type:: array

## .spec.template.spec.ephemeralContainers[].ports[]

Description:: 
ContainerPort represents a network port in a single container.
Type:: object
Required:: 
* containerPort



## .spec.template.spec.ephemeralContainers[].readinessProbe

Description:: 
Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
Type:: object



## .spec.template.spec.ephemeralContainers[].readinessProbe.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.ephemeralContainers[].readinessProbe.grpc

Description:: 
GRPCAction specifies an action involving a GRPC service.
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].readinessProbe.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].readinessProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.ephemeralContainers[].readinessProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.ephemeralContainers[].readinessProbe.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].resizePolicy

Description:: 
Resources resize policy for the container.
Type:: array

## .spec.template.spec.ephemeralContainers[].resizePolicy[]

Description:: 
ContainerResizePolicy represents resource resize policy for the container.
Type:: object
Required:: 
* resourceName
* restartPolicy



## .spec.template.spec.ephemeralContainers[].resources

Description:: 
ResourceRequirements describes the compute resource requirements.
Type:: object



## .spec.template.spec.ephemeralContainers[].resources.claims

Description:: 
Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
This field is immutable. It can only be set for containers.
Type:: array

## .spec.template.spec.ephemeralContainers[].resources.claims[]

Description:: 
ResourceClaim references one entry in PodSpec.ResourceClaims.
Type:: object
Required:: 
* name



## .spec.template.spec.ephemeralContainers[].securityContext

Description:: 
SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
Type:: object



## .spec.template.spec.ephemeralContainers[].securityContext.appArmorProfile

Description:: 
AppArmorProfile defines a pod or container's AppArmor settings.
Type:: object
Required:: 
* type



## .spec.template.spec.ephemeralContainers[].securityContext.capabilities

Description:: 
Adds and removes POSIX capabilities from running containers.
Type:: object



## .spec.template.spec.ephemeralContainers[].securityContext.seLinuxOptions

Description:: 
SELinuxOptions are the labels to be applied to the container
Type:: object



## .spec.template.spec.ephemeralContainers[].securityContext.seccompProfile

Description:: 
SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
Type:: object
Required:: 
* type



## .spec.template.spec.ephemeralContainers[].securityContext.windowsOptions

Description:: 
WindowsSecurityContextOptions contain Windows-specific options and credentials.
Type:: object



## .spec.template.spec.ephemeralContainers[].startupProbe

Description:: 
Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
Type:: object



## .spec.template.spec.ephemeralContainers[].startupProbe.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.ephemeralContainers[].startupProbe.grpc

Description:: 
GRPCAction specifies an action involving a GRPC service.
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].startupProbe.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].startupProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.ephemeralContainers[].startupProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.ephemeralContainers[].startupProbe.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.ephemeralContainers[].volumeDevices

Description:: 
volumeDevices is the list of block devices to be used by the container.
Type:: array

## .spec.template.spec.ephemeralContainers[].volumeDevices[]

Description:: 
volumeDevice describes a mapping of a raw block device within a container.
Type:: object
Required:: 
* name
* devicePath



## .spec.template.spec.ephemeralContainers[].volumeMounts

Description:: 
Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.
Type:: array

## .spec.template.spec.ephemeralContainers[].volumeMounts[]

Description:: 
VolumeMount describes a mounting of a Volume within a container.
Type:: object
Required:: 
* name
* mountPath



## .spec.template.spec.hostAliases

Description:: 
HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.
Type:: array

## .spec.template.spec.hostAliases[]

Description:: 
HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
Type:: object
Required:: 
* ip



## .spec.template.spec.imagePullSecrets

Description:: 
ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
Type:: array

## .spec.template.spec.imagePullSecrets[]

Description:: 
LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
Type:: object



## .spec.template.spec.initContainers

Description:: 
List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
Type:: array

## .spec.template.spec.initContainers[]

Description:: 
A single application container that you want to run within a pod.
Type:: object
Required:: 
* name



## .spec.template.spec.initContainers[].env

Description:: 
List of environment variables to set in the container. Cannot be updated.
Type:: array

## .spec.template.spec.initContainers[].env[]

Description:: 
EnvVar represents an environment variable present in a Container.
Type:: object
Required:: 
* name



## .spec.template.spec.initContainers[].env[].valueFrom

Description:: 
EnvVarSource represents a source for the value of an EnvVar.
Type:: object



## .spec.template.spec.initContainers[].env[].valueFrom.configMapKeyRef

Description:: 
Selects a key from a ConfigMap.
Type:: object
Required:: 
* key



## .spec.template.spec.initContainers[].env[].valueFrom.fieldRef

Description:: 
ObjectFieldSelector selects an APIVersioned field of an object.
Type:: object
Required:: 
* fieldPath



## .spec.template.spec.initContainers[].env[].valueFrom.resourceFieldRef

Description:: 
ResourceFieldSelector represents container resources (cpu, memory) and their output format
Type:: object
Required:: 
* resource



## .spec.template.spec.initContainers[].env[].valueFrom.secretKeyRef

Description:: 
SecretKeySelector selects a key of a Secret.
Type:: object
Required:: 
* key



## .spec.template.spec.initContainers[].envFrom

Description:: 
List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
Type:: array

## .spec.template.spec.initContainers[].envFrom[]

Description:: 
EnvFromSource represents the source of a set of ConfigMaps or Secrets
Type:: object



## .spec.template.spec.initContainers[].envFrom[].configMapRef

Description:: 
ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
Type:: object



## .spec.template.spec.initContainers[].envFrom[].secretRef

Description:: 
SecretEnvSource selects a Secret to populate the environment variables with.
The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
Type:: object



## .spec.template.spec.initContainers[].lifecycle

Description:: 
Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
Type:: object



## .spec.template.spec.initContainers[].lifecycle.postStart

Description:: 
LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
Type:: object



## .spec.template.spec.initContainers[].lifecycle.postStart.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.initContainers[].lifecycle.postStart.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].lifecycle.postStart.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.initContainers[].lifecycle.postStart.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.initContainers[].lifecycle.postStart.sleep

Description:: 
SleepAction describes a "sleep" action.
Type:: object
Required:: 
* seconds



## .spec.template.spec.initContainers[].lifecycle.postStart.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].lifecycle.preStop

Description:: 
LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
Type:: object



## .spec.template.spec.initContainers[].lifecycle.preStop.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.initContainers[].lifecycle.preStop.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].lifecycle.preStop.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.initContainers[].lifecycle.preStop.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.initContainers[].lifecycle.preStop.sleep

Description:: 
SleepAction describes a "sleep" action.
Type:: object
Required:: 
* seconds



## .spec.template.spec.initContainers[].lifecycle.preStop.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].livenessProbe

Description:: 
Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
Type:: object



## .spec.template.spec.initContainers[].livenessProbe.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.initContainers[].livenessProbe.grpc

Description:: 
GRPCAction specifies an action involving a GRPC service.
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].livenessProbe.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].livenessProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.initContainers[].livenessProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.initContainers[].livenessProbe.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].ports

Description:: 
List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
Type:: array

## .spec.template.spec.initContainers[].ports[]

Description:: 
ContainerPort represents a network port in a single container.
Type:: object
Required:: 
* containerPort



## .spec.template.spec.initContainers[].readinessProbe

Description:: 
Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
Type:: object



## .spec.template.spec.initContainers[].readinessProbe.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.initContainers[].readinessProbe.grpc

Description:: 
GRPCAction specifies an action involving a GRPC service.
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].readinessProbe.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].readinessProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.initContainers[].readinessProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.initContainers[].readinessProbe.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].resizePolicy

Description:: 
Resources resize policy for the container.
Type:: array

## .spec.template.spec.initContainers[].resizePolicy[]

Description:: 
ContainerResizePolicy represents resource resize policy for the container.
Type:: object
Required:: 
* resourceName
* restartPolicy



## .spec.template.spec.initContainers[].resources

Description:: 
ResourceRequirements describes the compute resource requirements.
Type:: object



## .spec.template.spec.initContainers[].resources.claims

Description:: 
Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
This field is immutable. It can only be set for containers.
Type:: array

## .spec.template.spec.initContainers[].resources.claims[]

Description:: 
ResourceClaim references one entry in PodSpec.ResourceClaims.
Type:: object
Required:: 
* name



## .spec.template.spec.initContainers[].securityContext

Description:: 
SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
Type:: object



## .spec.template.spec.initContainers[].securityContext.appArmorProfile

Description:: 
AppArmorProfile defines a pod or container's AppArmor settings.
Type:: object
Required:: 
* type



## .spec.template.spec.initContainers[].securityContext.capabilities

Description:: 
Adds and removes POSIX capabilities from running containers.
Type:: object



## .spec.template.spec.initContainers[].securityContext.seLinuxOptions

Description:: 
SELinuxOptions are the labels to be applied to the container
Type:: object



## .spec.template.spec.initContainers[].securityContext.seccompProfile

Description:: 
SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
Type:: object
Required:: 
* type



## .spec.template.spec.initContainers[].securityContext.windowsOptions

Description:: 
WindowsSecurityContextOptions contain Windows-specific options and credentials.
Type:: object



## .spec.template.spec.initContainers[].startupProbe

Description:: 
Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
Type:: object



## .spec.template.spec.initContainers[].startupProbe.exec

Description:: 
ExecAction describes a "run in container" action.
Type:: object



## .spec.template.spec.initContainers[].startupProbe.grpc

Description:: 
GRPCAction specifies an action involving a GRPC service.
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].startupProbe.httpGet

Description:: 
HTTPGetAction describes an action based on HTTP Get requests.
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].startupProbe.httpGet.httpHeaders

Description:: 
Custom headers to set in the request. HTTP allows repeated headers.
Type:: array

## .spec.template.spec.initContainers[].startupProbe.httpGet.httpHeaders[]

Description:: 
HTTPHeader describes a custom header to be used in HTTP probes
Type:: object
Required:: 
* name
* value



## .spec.template.spec.initContainers[].startupProbe.tcpSocket

Description:: 
TCPSocketAction describes an action based on opening a socket
Type:: object
Required:: 
* port



## .spec.template.spec.initContainers[].volumeDevices

Description:: 
volumeDevices is the list of block devices to be used by the container.
Type:: array

## .spec.template.spec.initContainers[].volumeDevices[]

Description:: 
volumeDevice describes a mapping of a raw block device within a container.
Type:: object
Required:: 
* name
* devicePath



## .spec.template.spec.initContainers[].volumeMounts

Description:: 
Pod volumes to mount into the container's filesystem. Cannot be updated.
Type:: array

## .spec.template.spec.initContainers[].volumeMounts[]

Description:: 
VolumeMount describes a mounting of a Volume within a container.
Type:: object
Required:: 
* name
* mountPath



## .spec.template.spec.os

Description:: 
PodOS defines the OS parameters of a pod.
Type:: object
Required:: 
* name



## .spec.template.spec.readinessGates

Description:: 
If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
Type:: array

## .spec.template.spec.readinessGates[]

Description:: 
PodReadinessGate contains the reference to a pod condition
Type:: object
Required:: 
* conditionType



## .spec.template.spec.resourceClaims

Description:: 
ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
This field is immutable.
Type:: array

## .spec.template.spec.resourceClaims[]

Description:: 
PodResourceClaim references exactly one ResourceClaim, either directly or by naming a ResourceClaimTemplate which is then turned into a ResourceClaim for the pod.
It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
Type:: object
Required:: 
* name



## .spec.template.spec.resources

Description:: 
ResourceRequirements describes the compute resource requirements.
Type:: object



## .spec.template.spec.resources.claims

Description:: 
Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
This field is immutable. It can only be set for containers.
Type:: array

## .spec.template.spec.resources.claims[]

Description:: 
ResourceClaim references one entry in PodSpec.ResourceClaims.
Type:: object
Required:: 
* name



## .spec.template.spec.schedulingGates

Description:: 
SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.
SchedulingGates can only be set at pod creation time, and be removed only afterwards.
Type:: array

## .spec.template.spec.schedulingGates[]

Description:: 
PodSchedulingGate is associated to a Pod to guard its scheduling.
Type:: object
Required:: 
* name



## .spec.template.spec.securityContext

Description:: 
PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
Type:: object



## .spec.template.spec.securityContext.appArmorProfile

Description:: 
AppArmorProfile defines a pod or container's AppArmor settings.
Type:: object
Required:: 
* type



## .spec.template.spec.securityContext.seLinuxOptions

Description:: 
SELinuxOptions are the labels to be applied to the container
Type:: object



## .spec.template.spec.securityContext.seccompProfile

Description:: 
SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
Type:: object
Required:: 
* type



## .spec.template.spec.securityContext.sysctls

Description:: 
Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
Type:: array

## .spec.template.spec.securityContext.sysctls[]

Description:: 
Sysctl defines a kernel parameter to be set
Type:: object
Required:: 
* name
* value



## .spec.template.spec.securityContext.windowsOptions

Description:: 
WindowsSecurityContextOptions contain Windows-specific options and credentials.
Type:: object



## .spec.template.spec.tolerations

Description:: 
If specified, the pod's tolerations.
Type:: array

## .spec.template.spec.tolerations[]

Description:: 
The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
Type:: object



## .spec.template.spec.topologySpreadConstraints

Description:: 
TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
Type:: array

## .spec.template.spec.topologySpreadConstraints[]

Description:: 
TopologySpreadConstraint specifies how to spread matching pods among the given topology.
Type:: object
Required:: 
* maxSkew
* topologyKey
* whenUnsatisfiable



## .spec.template.spec.volumes

Description:: 
List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
Type:: array

## .spec.template.spec.volumes[]

Description:: 
Volume represents a named volume in a pod that may be accessed by any container in the pod.
Type:: object
Required:: 
* name



## .spec.template.spec.volumes[].awsElasticBlockStore

Description:: 
Represents a Persistent Disk resource in AWS.
An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
Type:: object
Required:: 
* volumeID



## .spec.template.spec.volumes[].azureDisk

Description:: 
AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
Type:: object
Required:: 
* diskName
* diskURI



## .spec.template.spec.volumes[].azureFile

Description:: 
AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
Type:: object
Required:: 
* secretName
* shareName



## .spec.template.spec.volumes[].cephfs

Description:: 
Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
Type:: object
Required:: 
* monitors



## .spec.template.spec.volumes[].cephfs.secretRef

Description:: 
LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
Type:: object



## .spec.template.spec.volumes[].cinder

Description:: 
Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
Type:: object
Required:: 
* volumeID



## .spec.template.spec.volumes[].cinder.secretRef

Description:: 
LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
Type:: object



## .spec.template.spec.volumes[].configMap

Description:: 
Adapts a ConfigMap into a volume.
The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
Type:: object



## .spec.template.spec.volumes[].configMap.items

Description:: 
items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
Type:: array

## .spec.template.spec.volumes[].configMap.items[]

Description:: 
Maps a string key to a path within a volume.
Type:: object
Required:: 
* key
* path



## .spec.template.spec.volumes[].csi

Description:: 
Represents a source location of a volume to mount, managed by an external CSI driver
Type:: object
Required:: 
* driver



## .spec.template.spec.volumes[].csi.nodePublishSecretRef

Description:: 
LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
Type:: object



## .spec.template.spec.volumes[].downwardAPI

Description:: 
DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
Type:: object



## .spec.template.spec.volumes[].downwardAPI.items

Description:: 
Items is a list of downward API volume file
Type:: array

## .spec.template.spec.volumes[].downwardAPI.items[]

Description:: 
DownwardAPIVolumeFile represents information to create the file containing the pod field
Type:: object
Required:: 
* path



## .spec.template.spec.volumes[].downwardAPI.items[].fieldRef

Description:: 
ObjectFieldSelector selects an APIVersioned field of an object.
Type:: object
Required:: 
* fieldPath



## .spec.template.spec.volumes[].downwardAPI.items[].resourceFieldRef

Description:: 
ResourceFieldSelector represents container resources (cpu, memory) and their output format
Type:: object
Required:: 
* resource



## .spec.template.spec.volumes[].emptyDir

Description:: 
Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
Type:: object



## .spec.template.spec.volumes[].ephemeral

Description:: 
Represents an ephemeral volume that is handled by a normal storage driver.
Type:: object



## .spec.template.spec.volumes[].ephemeral.volumeClaimTemplate

Description:: 
PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
Type:: object
Required:: 
* spec



## .spec.template.spec.volumes[].ephemeral.volumeClaimTemplate.spec

Description:: 
PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
Type:: object



## .spec.template.spec.volumes[].ephemeral.volumeClaimTemplate.spec.dataSource

Description:: 
TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
Type:: object
Required:: 
* kind
* name



## .spec.template.spec.volumes[].ephemeral.volumeClaimTemplate.spec.dataSourceRef

Description:: 
TypedObjectReference contains enough information to let you locate the typed referenced object
Type:: object
Required:: 
* kind
* name



## .spec.template.spec.volumes[].ephemeral.volumeClaimTemplate.spec.resources

Description:: 
VolumeResourceRequirements describes the storage resource requirements for a volume.
Type:: object



## .spec.template.spec.volumes[].fc

Description:: 
Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
Type:: object



## .spec.template.spec.volumes[].flexVolume

Description:: 
FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
Type:: object
Required:: 
* driver



## .spec.template.spec.volumes[].flexVolume.secretRef

Description:: 
LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
Type:: object



## .spec.template.spec.volumes[].flocker

Description:: 
Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
Type:: object



## .spec.template.spec.volumes[].gcePersistentDisk

Description:: 
Represents a Persistent Disk resource in Google Compute Engine.
A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
Type:: object
Required:: 
* pdName



## .spec.template.spec.volumes[].gitRepo

Description:: 
Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
Type:: object
Required:: 
* repository



## .spec.template.spec.volumes[].glusterfs

Description:: 
Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
Type:: object
Required:: 
* endpoints
* path



## .spec.template.spec.volumes[].hostPath

Description:: 
Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
Type:: object
Required:: 
* path



## .spec.template.spec.volumes[].image

Description:: 
ImageVolumeSource represents a image volume resource.
Type:: object



## .spec.template.spec.volumes[].iscsi

Description:: 
Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
Type:: object
Required:: 
* targetPortal
* iqn
* lun



## .spec.template.spec.volumes[].iscsi.secretRef

Description:: 
LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
Type:: object



## .spec.template.spec.volumes[].nfs

Description:: 
Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
Type:: object
Required:: 
* server
* path



## .spec.template.spec.volumes[].persistentVolumeClaim

Description:: 
PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
Type:: object
Required:: 
* claimName



## .spec.template.spec.volumes[].photonPersistentDisk

Description:: 
Represents a Photon Controller persistent disk resource.
Type:: object
Required:: 
* pdID



## .spec.template.spec.volumes[].portworxVolume

Description:: 
PortworxVolumeSource represents a Portworx volume resource.
Type:: object
Required:: 
* volumeID



## .spec.template.spec.volumes[].projected

Description:: 
Represents a projected volume source
Type:: object



## .spec.template.spec.volumes[].projected.sources

Description:: 
sources is the list of volume projections. Each entry in this list handles one source.
Type:: array

## .spec.template.spec.volumes[].projected.sources[]

Description:: 
Projection that may be projected along with other supported volume types. Exactly one of these fields must be set.
Type:: object



## .spec.template.spec.volumes[].projected.sources[].clusterTrustBundle

Description:: 
ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
Type:: object
Required:: 
* path



## .spec.template.spec.volumes[].projected.sources[].configMap

Description:: 
Adapts a ConfigMap into a projected volume.
The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
Type:: object



## .spec.template.spec.volumes[].projected.sources[].configMap.items

Description:: 
items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
Type:: array

## .spec.template.spec.volumes[].projected.sources[].configMap.items[]

Description:: 
Maps a string key to a path within a volume.
Type:: object
Required:: 
* key
* path



## .spec.template.spec.volumes[].projected.sources[].downwardAPI

Description:: 
Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
Type:: object



## .spec.template.spec.volumes[].projected.sources[].downwardAPI.items

Description:: 
Items is a list of DownwardAPIVolume file
Type:: array

## .spec.template.spec.volumes[].projected.sources[].downwardAPI.items[]

Description:: 
DownwardAPIVolumeFile represents information to create the file containing the pod field
Type:: object
Required:: 
* path



## .spec.template.spec.volumes[].projected.sources[].downwardAPI.items[].fieldRef

Description:: 
ObjectFieldSelector selects an APIVersioned field of an object.
Type:: object
Required:: 
* fieldPath



## .spec.template.spec.volumes[].projected.sources[].downwardAPI.items[].resourceFieldRef

Description:: 
ResourceFieldSelector represents container resources (cpu, memory) and their output format
Type:: object
Required:: 
* resource



## .spec.template.spec.volumes[].projected.sources[].secret

Description:: 
Adapts a secret into a projected volume.
The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
Type:: object



## .spec.template.spec.volumes[].projected.sources[].secret.items

Description:: 
items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
Type:: array

## .spec.template.spec.volumes[].projected.sources[].secret.items[]

Description:: 
Maps a string key to a path within a volume.
Type:: object
Required:: 
* key
* path



## .spec.template.spec.volumes[].projected.sources[].serviceAccountToken

Description:: 
ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
Type:: object
Required:: 
* path



## .spec.template.spec.volumes[].quobyte

Description:: 
Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
Type:: object
Required:: 
* registry
* volume



## .spec.template.spec.volumes[].rbd

Description:: 
Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
Type:: object
Required:: 
* monitors
* image



## .spec.template.spec.volumes[].rbd.secretRef

Description:: 
LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
Type:: object



## .spec.template.spec.volumes[].scaleIO

Description:: 
ScaleIOVolumeSource represents a persistent ScaleIO volume
Type:: object
Required:: 
* gateway
* system
* secretRef



## .spec.template.spec.volumes[].scaleIO.secretRef

Description:: 
LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
Type:: object



## .spec.template.spec.volumes[].secret

Description:: 
Adapts a Secret into a volume.
The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
Type:: object



## .spec.template.spec.volumes[].secret.items

Description:: 
items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
Type:: array

## .spec.template.spec.volumes[].secret.items[]

Description:: 
Maps a string key to a path within a volume.
Type:: object
Required:: 
* key
* path



## .spec.template.spec.volumes[].storageos

Description:: 
Represents a StorageOS persistent volume resource.
Type:: object



## .spec.template.spec.volumes[].storageos.secretRef

Description:: 
LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
Type:: object



## .spec.template.spec.volumes[].vsphereVolume

Description:: 
Represents a vSphere volume resource.
Type:: object
Required:: 
* volumePath



## .status

Description:: 
ReplicationControllerStatus represents the current status of a replication controller.
Type:: object
Required:: 
* replicas



## .status.conditions

Description:: 
Represents the latest available observations of a replication controller's current state.
Type:: array

## .status.conditions[]

Description:: 
ReplicationControllerCondition describes the state of a replication controller at a certain point.
Type:: object
Required:: 
* type
* status



# API endpoints

The following API endpoints are available:

* /api/v1/replicationcontrollers
* GET: list or watch objects of kind ReplicationController
* /api/v1/watch/replicationcontrollers
* GET: watch individual changes to a list of ReplicationController. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /api/v1/namespaces/{namespace}/replicationcontrollers
* DELETE: delete collection of ReplicationController
* GET: list or watch objects of kind ReplicationController
* POST: create a ReplicationController
* /api/v1/watch/namespaces/{namespace}/replicationcontrollers
* GET: watch individual changes to a list of ReplicationController. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /api/v1/namespaces/{namespace}/replicationcontrollers/{name}
* DELETE: delete a ReplicationController
* GET: read the specified ReplicationController
* PATCH: partially update the specified ReplicationController
* PUT: replace the specified ReplicationController
* /api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}
* GET: watch changes to an object of kind ReplicationController. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.
* /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
* GET: read status of the specified ReplicationController
* PATCH: partially update status of the specified ReplicationController
* PUT: replace status of the specified ReplicationController

## /api/v1/replicationcontrollers

HTTP method:: GET
Description:: list or watch objects of kind ReplicationController



## /api/v1/watch/replicationcontrollers

HTTP method:: GET
Description:: watch individual changes to a list of ReplicationController. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /api/v1/namespaces/{namespace}/replicationcontrollers

HTTP method:: DELETE
Description:: delete collection of ReplicationController





HTTP method:: GET
Description:: list or watch objects of kind ReplicationController



HTTP method:: POST
Description:: create a ReplicationController







## /api/v1/watch/namespaces/{namespace}/replicationcontrollers

HTTP method:: GET
Description:: watch individual changes to a list of ReplicationController. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /api/v1/namespaces/{namespace}/replicationcontrollers/{name}



HTTP method:: DELETE
Description:: delete a ReplicationController





HTTP method:: GET
Description:: read the specified ReplicationController



HTTP method:: PATCH
Description:: partially update the specified ReplicationController





HTTP method:: PUT
Description:: replace the specified ReplicationController







## /api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}



HTTP method:: GET
Description:: watch changes to an object of kind ReplicationController. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.



## /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status



HTTP method:: GET
Description:: read status of the specified ReplicationController



HTTP method:: PATCH
Description:: partially update status of the specified ReplicationController





HTTP method:: PUT
Description:: replace status of the specified ReplicationController





