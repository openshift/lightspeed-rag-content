# Job [batch/v1]


Description:: 
Job represents the configuration of a single job.
Type:: object

# Specification



## .spec

Description:: 
JobSpec describes how the job execution will look like.
Type:: object
Required:: 
* template



## .spec.podFailurePolicy

Description:: 
PodFailurePolicy describes how failed pods influence the backoffLimit.
Type:: object
Required:: 
* rules



## .spec.podFailurePolicy.rules

Description:: 
A list of pod failure policy rules. The rules are evaluated in order. Once a rule matches a Pod failure, the remaining of the rules are ignored. When no rule matches the Pod failure, the default handling applies - the counter of pod failures is incremented and it is checked against the backoffLimit. At most 20 elements are allowed.
Type:: array

## .spec.podFailurePolicy.rules[]

Description:: 
PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of onExitCodes and onPodConditions, but not both, can be used in each rule.
Type:: object
Required:: 
* action



## .spec.podFailurePolicy.rules[].onExitCodes

Description:: 
PodFailurePolicyOnExitCodesRequirement describes the requirement for handling a failed pod based on its container exit codes. In particular, it lookups the .state.terminated.exitCode for each app container and init container status, represented by the .status.containerStatuses and .status.initContainerStatuses fields in the Pod status, respectively. Containers completed with success (exit code 0) are excluded from the requirement check.
Type:: object
Required:: 
* operator
* values



## .spec.podFailurePolicy.rules[].onPodConditions

Description:: 
Represents the requirement on the pod conditions. The requirement is represented as a list of pod condition patterns. The requirement is satisfied if at least one pattern matches an actual pod condition. At most 20 elements are allowed.
Type:: array

## .spec.podFailurePolicy.rules[].onPodConditions[]

Description:: 
PodFailurePolicyOnPodConditionsPattern describes a pattern for matching an actual pod condition type.
Type:: object
Required:: 
* type
* status



## .spec.successPolicy

Description:: 
SuccessPolicy describes when a Job can be declared as succeeded based on the success of some indexes.
Type:: object
Required:: 
* rules



## .spec.successPolicy.rules

Description:: 
rules represents the list of alternative rules for the declaring the Jobs as successful before .status.succeeded >= .spec.completions. Once any of the rules are met, the "SucceededCriteriaMet" condition is added, and the lingering pods are removed. The terminal state for such a Job has the "Complete" condition. Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored. At most 20 elements are allowed.
Type:: array

## .spec.successPolicy.rules[]

Description:: 
SuccessPolicyRule describes rule for declaring a Job as succeeded. Each rule must have at least one of the "succeededIndexes" or "succeededCount" specified.
Type:: object



## .status

Description:: 
JobStatus represents the current state of a Job.
Type:: object



## .status.conditions

Description:: 
The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true.
A job is considered finished when it is in a terminal condition, either "Complete" or "Failed". A Job cannot have both the "Complete" and "Failed" conditions. Additionally, it cannot be in the "Complete" and "FailureTarget" conditions. The "Complete", "Failed" and "FailureTarget" conditions cannot be disabled.
More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
Type:: array

## .status.conditions[]

Description:: 
JobCondition describes current state of a job.
Type:: object
Required:: 
* type
* status



## .status.uncountedTerminatedPods

Description:: 
UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job status counters.
Type:: object



# API endpoints

The following API endpoints are available:

* /apis/batch/v1/jobs
* GET: list or watch objects of kind Job
* /apis/batch/v1/watch/jobs
* GET: watch individual changes to a list of Job. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /apis/batch/v1/namespaces/{namespace}/jobs
* DELETE: delete collection of Job
* GET: list or watch objects of kind Job
* POST: create a Job
* /apis/batch/v1/watch/namespaces/{namespace}/jobs
* GET: watch individual changes to a list of Job. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /apis/batch/v1/namespaces/{namespace}/jobs/{name}
* DELETE: delete a Job
* GET: read the specified Job
* PATCH: partially update the specified Job
* PUT: replace the specified Job
* /apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}
* GET: watch changes to an object of kind Job. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.
* /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status
* GET: read status of the specified Job
* PATCH: partially update status of the specified Job
* PUT: replace status of the specified Job

## /apis/batch/v1/jobs

HTTP method:: GET
Description:: list or watch objects of kind Job



## /apis/batch/v1/watch/jobs

HTTP method:: GET
Description:: watch individual changes to a list of Job. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /apis/batch/v1/namespaces/{namespace}/jobs

HTTP method:: DELETE
Description:: delete collection of Job





HTTP method:: GET
Description:: list or watch objects of kind Job



HTTP method:: POST
Description:: create a Job







## /apis/batch/v1/watch/namespaces/{namespace}/jobs

HTTP method:: GET
Description:: watch individual changes to a list of Job. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /apis/batch/v1/namespaces/{namespace}/jobs/{name}



HTTP method:: DELETE
Description:: delete a Job





HTTP method:: GET
Description:: read the specified Job



HTTP method:: PATCH
Description:: partially update the specified Job





HTTP method:: PUT
Description:: replace the specified Job







## /apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}



HTTP method:: GET
Description:: watch changes to an object of kind Job. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.



## /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status



HTTP method:: GET
Description:: read status of the specified Job



HTTP method:: PATCH
Description:: partially update status of the specified Job





HTTP method:: PUT
Description:: replace status of the specified Job





