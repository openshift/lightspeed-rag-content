# DeploymentConfig [apps.openshift.io/v1]


Description:: 
Deployment Configs define the template for a pod and manages deploying new images or configuration changes. A single deployment configuration is usually analogous to a single micro-service. Can support many different deployment patterns, including full restart, customizable rolling updates, and  fully custom behaviors, as well as pre- and post- deployment hooks. Each individual deployment is represented as a replication controller.
A deployment is "triggered" when its configuration is changed or a tag in an Image Stream is changed. Triggers can be disabled to allow manual control over a deployment. The "strategy" determines how the deployment is carried out and may be changed at any time. The latestVersion field is updated when a new deployment is triggered by any means.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer). Deprecated: Use deployments or other means for declarative updates for pods instead.
Type:: object
Required:: 
* spec

# Specification



## .spec

Description:: 
DeploymentConfigSpec represents the desired state of the deployment.
Type:: object



## .spec.strategy

Description:: 
DeploymentStrategy describes how to perform a deployment.
Type:: object



## .spec.strategy.customParams

Description:: 
CustomDeploymentStrategyParams are the input to the Custom deployment strategy.
Type:: object



## .spec.strategy.recreateParams

Description:: 
RecreateDeploymentStrategyParams are the input to the Recreate deployment strategy.
Type:: object



## .spec.strategy.recreateParams.mid

Description:: 
LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.
Type:: object
Required:: 
* failurePolicy



## .spec.strategy.recreateParams.mid.execNewPod

Description:: 
ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.
Type:: object
Required:: 
* command
* containerName



## .spec.strategy.recreateParams.mid.tagImages

Description:: 
TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.
Type:: array

## .spec.strategy.recreateParams.mid.tagImages[]

Description:: 
TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.
Type:: object
Required:: 
* containerName
* to



## .spec.strategy.recreateParams.post

Description:: 
LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.
Type:: object
Required:: 
* failurePolicy



## .spec.strategy.recreateParams.post.execNewPod

Description:: 
ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.
Type:: object
Required:: 
* command
* containerName



## .spec.strategy.recreateParams.post.tagImages

Description:: 
TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.
Type:: array

## .spec.strategy.recreateParams.post.tagImages[]

Description:: 
TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.
Type:: object
Required:: 
* containerName
* to



## .spec.strategy.recreateParams.pre

Description:: 
LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.
Type:: object
Required:: 
* failurePolicy



## .spec.strategy.recreateParams.pre.execNewPod

Description:: 
ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.
Type:: object
Required:: 
* command
* containerName



## .spec.strategy.recreateParams.pre.tagImages

Description:: 
TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.
Type:: array

## .spec.strategy.recreateParams.pre.tagImages[]

Description:: 
TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.
Type:: object
Required:: 
* containerName
* to



## .spec.strategy.rollingParams

Description:: 
RollingDeploymentStrategyParams are the input to the Rolling deployment strategy.
Type:: object



## .spec.strategy.rollingParams.post

Description:: 
LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.
Type:: object
Required:: 
* failurePolicy



## .spec.strategy.rollingParams.post.execNewPod

Description:: 
ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.
Type:: object
Required:: 
* command
* containerName



## .spec.strategy.rollingParams.post.tagImages

Description:: 
TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.
Type:: array

## .spec.strategy.rollingParams.post.tagImages[]

Description:: 
TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.
Type:: object
Required:: 
* containerName
* to



## .spec.strategy.rollingParams.pre

Description:: 
LifecycleHook defines a specific deployment lifecycle action. Only one type of action may be specified at any time.
Type:: object
Required:: 
* failurePolicy



## .spec.strategy.rollingParams.pre.execNewPod

Description:: 
ExecNewPodHook is a hook implementation which runs a command in a new pod based on the specified container which is assumed to be part of the deployment template.
Type:: object
Required:: 
* command
* containerName



## .spec.strategy.rollingParams.pre.tagImages

Description:: 
TagImages instructs the deployer to tag the current image referenced under a container onto an image stream tag.
Type:: array

## .spec.strategy.rollingParams.pre.tagImages[]

Description:: 
TagImageHook is a request to tag the image in a particular container onto an ImageStreamTag.
Type:: object
Required:: 
* containerName
* to



## .spec.triggers

Description:: 
Triggers determine how updates to a DeploymentConfig result in new deployments. If no triggers are defined, a new deployment can only occur as a result of an explicit client update to the DeploymentConfig with a new LatestVersion. If null, defaults to having a config change trigger.
Type:: array

## .spec.triggers[]

Description:: 
DeploymentTriggerPolicy describes a policy for a single trigger that results in a new deployment.
Type:: object



## .spec.triggers[].imageChangeParams

Description:: 
DeploymentTriggerImageChangeParams represents the parameters to the ImageChange trigger.
Type:: object
Required:: 
* from



## .status

Description:: 
DeploymentConfigStatus represents the current deployment state.
Type:: object
Required:: 
* latestVersion
* observedGeneration
* replicas
* updatedReplicas
* availableReplicas
* unavailableReplicas



## .status.conditions

Description:: 
Conditions represents the latest available observations of a deployment config's current state.
Type:: array

## .status.conditions[]

Description:: 
DeploymentCondition describes the state of a deployment config at a certain point.
Type:: object
Required:: 
* type
* status



## .status.details

Description:: 
DeploymentDetails captures information about the causes of a deployment.
Type:: object
Required:: 
* causes



## .status.details.causes

Description:: 
Causes are extended data associated with all the causes for creating a new deployment
Type:: array

## .status.details.causes[]

Description:: 
DeploymentCause captures information about a particular cause of a deployment.
Type:: object
Required:: 
* type



## .status.details.causes[].imageTrigger

Description:: 
DeploymentCauseImageTrigger represents details about the cause of a deployment originating from an image change trigger
Type:: object
Required:: 
* from



# API endpoints

The following API endpoints are available:

* /apis/apps.openshift.io/v1/deploymentconfigs
* GET: list or watch objects of kind DeploymentConfig
* /apis/apps.openshift.io/v1/watch/deploymentconfigs
* GET: watch individual changes to a list of DeploymentConfig. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs
* DELETE: delete collection of DeploymentConfig
* GET: list or watch objects of kind DeploymentConfig
* POST: create a DeploymentConfig
* /apis/apps.openshift.io/v1/watch/namespaces/{namespace}/deploymentconfigs
* GET: watch individual changes to a list of DeploymentConfig. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}
* DELETE: delete a DeploymentConfig
* GET: read the specified DeploymentConfig
* PATCH: partially update the specified DeploymentConfig
* PUT: replace the specified DeploymentConfig
* /apis/apps.openshift.io/v1/watch/namespaces/{namespace}/deploymentconfigs/{name}
* GET: watch changes to an object of kind DeploymentConfig. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.
* /apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}/status
* GET: read status of the specified DeploymentConfig
* PATCH: partially update status of the specified DeploymentConfig
* PUT: replace status of the specified DeploymentConfig

## /apis/apps.openshift.io/v1/deploymentconfigs

HTTP method:: GET
Description:: list or watch objects of kind DeploymentConfig



## /apis/apps.openshift.io/v1/watch/deploymentconfigs

HTTP method:: GET
Description:: watch individual changes to a list of DeploymentConfig. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs

HTTP method:: DELETE
Description:: delete collection of DeploymentConfig





HTTP method:: GET
Description:: list or watch objects of kind DeploymentConfig



HTTP method:: POST
Description:: create a DeploymentConfig







## /apis/apps.openshift.io/v1/watch/namespaces/{namespace}/deploymentconfigs

HTTP method:: GET
Description:: watch individual changes to a list of DeploymentConfig. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}



HTTP method:: DELETE
Description:: delete a DeploymentConfig





HTTP method:: GET
Description:: read the specified DeploymentConfig



HTTP method:: PATCH
Description:: partially update the specified DeploymentConfig





HTTP method:: PUT
Description:: replace the specified DeploymentConfig







## /apis/apps.openshift.io/v1/watch/namespaces/{namespace}/deploymentconfigs/{name}



HTTP method:: GET
Description:: watch changes to an object of kind DeploymentConfig. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.



## /apis/apps.openshift.io/v1/namespaces/{namespace}/deploymentconfigs/{name}/status



HTTP method:: GET
Description:: read status of the specified DeploymentConfig



HTTP method:: PATCH
Description:: partially update status of the specified DeploymentConfig





HTTP method:: PUT
Description:: replace status of the specified DeploymentConfig





