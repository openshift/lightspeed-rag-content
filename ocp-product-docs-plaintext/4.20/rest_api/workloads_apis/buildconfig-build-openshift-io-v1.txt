# BuildConfig [build.openshift.io/v1]


Description:: 
Build configurations define a build process for new container images. There are three types of builds possible - a container image build using a Dockerfile, a Source-to-Image build that uses a specially prepared base image that accepts source code that it can make runnable, and a custom build that can run // arbitrary container images as a base and accept the build parameters. Builds run on the cluster and on completion are pushed to the container image registry specified in the "output" section. A build can be triggered via a webhook, when the base image changes, or when a user manually requests a new build be // created.
Each build created by a build configuration is numbered and refers back to its parent configuration. Multiple builds can be triggered at once. Builds that do not have "output" set can be used to test code or run a verification build.
Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* spec

# Specification



## .spec

Description:: 
BuildConfigSpec describes when and how builds are created
Type:: object
Required:: 
* strategy



## .spec.output

Description:: 
BuildOutput is input to a build strategy and describes the container image that the strategy should produce.
Type:: object



## .spec.output.imageLabels

Description:: 
imageLabels define a list of labels that are applied to the resulting image. If there are multiple labels with the same name then the last one in the list is used.
Type:: array

## .spec.output.imageLabels[]

Description:: 
ImageLabel represents a label applied to the resulting image.
Type:: object
Required:: 
* name



## .spec.postCommit

Description:: 
A BuildPostCommitSpec holds a build post commit hook specification. The hook executes a command in a temporary container running the build output image, immediately after the last layer of the image is committed and before the image is pushed to a registry. The command is executed with the current working directory ($PWD) set to the image's WORKDIR.
The build will be marked as failed if the hook execution fails. It will fail if the script or command return a non-zero exit code, or if there is any other error related to starting the temporary container.
There are five different ways to configure the hook. As an example, all forms below are equivalent and will execute rake test --verbose.
1. Shell script:

"postCommit": {
  "script": "rake test --verbose",
}

The above is a convenient form which is equivalent to:

"postCommit": {
  "command": ["/bin/sh", "-ic"],
  "args":    ["rake test --verbose"]
}
2. A command as the image entrypoint:

"postCommit": {
  "commit": ["rake", "test", "--verbose"]
}

Command overrides the image entrypoint in the exec form, as documented in
Docker: https://docs.docker.com/engine/reference/builder/#entrypoint.
3. Pass arguments to the default entrypoint:

"postCommit": {
 "args": ["rake", "test", "--verbose"]
}

This form is only useful if the image entrypoint can handle arguments.
4. Shell script with arguments:

"postCommit": {
  "script": "rake test $1",
  "args":   ["--verbose"]
}

This form is useful if you need to pass arguments that would otherwise be
hard to quote properly in the shell script. In the script, $0 will be
"/bin/sh" and $1, $2, etc, are the positional arguments from Args.
5. Command with arguments:

"postCommit": {
  "command": ["rake", "test"],
  "args":    ["--verbose"]
}

This form is equivalent to appending the arguments to the Command slice.
It is invalid to provide both Script and Command simultaneously. If none of the fields are specified, the hook is not executed.
Type:: object



## .spec.revision

Description:: 
SourceRevision is the revision or commit information from the source for the build
Type:: object
Required:: 
* type



## .spec.revision.git

Description:: 
GitSourceRevision is the commit information from a git source for a build
Type:: object



## .spec.revision.git.author

Description:: 
SourceControlUser defines the identity of a user of source control
Type:: object



## .spec.revision.git.committer

Description:: 
SourceControlUser defines the identity of a user of source control
Type:: object



## .spec.source

Description:: 
BuildSource is the SCM used for the build.
Type:: object



## .spec.source.binary

Description:: 
BinaryBuildSource describes a binary file to be used for the Docker and Source build strategies, where the file will be extracted and used as the build source.
Type:: object



## .spec.source.configMaps

Description:: 
configMaps represents a list of configMaps and their destinations that will be used for the build.
Type:: array

## .spec.source.configMaps[]

Description:: 
ConfigMapBuildSource describes a configmap and its destination directory that will be used only at the build time. The content of the configmap referenced here will be copied into the destination directory instead of mounting.
Type:: object
Required:: 
* configMap



## .spec.source.git

Description:: 
GitBuildSource defines the parameters of a Git SCM
Type:: object
Required:: 
* uri



## .spec.source.images

Description:: 
images describes a set of images to be used to provide source for the build
Type:: array

## .spec.source.images[]

Description:: 
ImageSource is used to describe build source that will be extracted from an image or used during a multi stage build. A reference of type ImageStreamTag, ImageStreamImage or DockerImage may be used. A pull secret can be specified to pull the image from an external registry or override the default service account secret if pulling from the internal registry. Image sources can either be used to extract content from an image and place it into the build context along with the repository source, or used directly during a multi-stage container image build to allow content to be copied without overwriting the contents of the repository source (see the 'paths' and 'as' fields).
Type:: object
Required:: 
* from



## .spec.source.images[].paths

Description:: 
paths is a list of source and destination paths to copy from the image. This content will be copied into the build context prior to starting the build. If no paths are set, the build context will not be altered.
Type:: array

## .spec.source.images[].paths[]

Description:: 
ImageSourcePath describes a path to be copied from a source image and its destination within the build directory.
Type:: object
Required:: 
* sourcePath
* destinationDir



## .spec.source.secrets

Description:: 
secrets represents a list of secrets and their destinations that will be used only for the build.
Type:: array

## .spec.source.secrets[]

Description:: 
SecretBuildSource describes a secret and its destination directory that will be used only at the build time. The content of the secret referenced here will be copied into the destination directory instead of mounting.
Type:: object
Required:: 
* secret



## .spec.strategy

Description:: 
BuildStrategy contains the details of how to perform a build.
Type:: object



## .spec.strategy.customStrategy

Description:: 
CustomBuildStrategy defines input parameters specific to Custom build.
Type:: object
Required:: 
* from



## .spec.strategy.customStrategy.secrets

Description:: 
secrets is a list of additional secrets that will be included in the build pod
Type:: array

## .spec.strategy.customStrategy.secrets[]

Description:: 
SecretSpec specifies a secret to be included in a build pod and its corresponding mount point
Type:: object
Required:: 
* secretSource
* mountPath



## .spec.strategy.dockerStrategy

Description:: 
DockerBuildStrategy defines input parameters specific to container image build.
Type:: object



## .spec.strategy.dockerStrategy.volumes

Description:: 
volumes is a list of input volumes that can be mounted into the builds runtime environment. Only a subset of Kubernetes Volume sources are supported by builds. More info: https://kubernetes.io/docs/concepts/storage/volumes
Type:: array

## .spec.strategy.dockerStrategy.volumes[]

Description:: 
BuildVolume describes a volume that is made available to build pods, such that it can be mounted into buildah's runtime environment. Only a subset of Kubernetes Volume sources are supported.
Type:: object
Required:: 
* name
* source
* mounts



## .spec.strategy.dockerStrategy.volumes[].mounts

Description:: 
mounts represents the location of the volume in the image build container
Type:: array

## .spec.strategy.dockerStrategy.volumes[].mounts[]

Description:: 
BuildVolumeMount describes the mounting of a Volume within buildah's runtime environment.
Type:: object
Required:: 
* destinationPath



## .spec.strategy.dockerStrategy.volumes[].source

Description:: 
BuildVolumeSource represents the source of a volume to mount Only one of its supported types may be specified at any given time.
Type:: object
Required:: 
* type



## .spec.strategy.jenkinsPipelineStrategy

Description:: 
JenkinsPipelineBuildStrategy holds parameters specific to a Jenkins Pipeline build. Deprecated: use OpenShift Pipelines
Type:: object



## .spec.strategy.sourceStrategy

Description:: 
SourceBuildStrategy defines input parameters specific to an Source build.
Type:: object
Required:: 
* from



## .spec.strategy.sourceStrategy.volumes

Description:: 
volumes is a list of input volumes that can be mounted into the builds runtime environment. Only a subset of Kubernetes Volume sources are supported by builds. More info: https://kubernetes.io/docs/concepts/storage/volumes
Type:: array

## .spec.strategy.sourceStrategy.volumes[]

Description:: 
BuildVolume describes a volume that is made available to build pods, such that it can be mounted into buildah's runtime environment. Only a subset of Kubernetes Volume sources are supported.
Type:: object
Required:: 
* name
* source
* mounts



## .spec.strategy.sourceStrategy.volumes[].mounts

Description:: 
mounts represents the location of the volume in the image build container
Type:: array

## .spec.strategy.sourceStrategy.volumes[].mounts[]

Description:: 
BuildVolumeMount describes the mounting of a Volume within buildah's runtime environment.
Type:: object
Required:: 
* destinationPath



## .spec.strategy.sourceStrategy.volumes[].source

Description:: 
BuildVolumeSource represents the source of a volume to mount Only one of its supported types may be specified at any given time.
Type:: object
Required:: 
* type



## .spec.triggers

Description:: 
triggers determine how new Builds can be launched from a BuildConfig. If no triggers are defined, a new build can only occur as a result of an explicit client build creation.
Type:: array

## .spec.triggers[]

Description:: 
BuildTriggerPolicy describes a policy for a single trigger that results in a new Build.
Type:: object
Required:: 
* type



## .spec.triggers[].bitbucket

Description:: 
WebHookTrigger is a trigger that gets invoked using a webhook type of post
Type:: object



## .spec.triggers[].bitbucket.secretReference

Description:: 
SecretLocalReference contains information that points to the local secret being used
Type:: object
Required:: 
* name



## .spec.triggers[].generic

Description:: 
WebHookTrigger is a trigger that gets invoked using a webhook type of post
Type:: object



## .spec.triggers[].generic.secretReference

Description:: 
SecretLocalReference contains information that points to the local secret being used
Type:: object
Required:: 
* name



## .spec.triggers[].github

Description:: 
WebHookTrigger is a trigger that gets invoked using a webhook type of post
Type:: object



## .spec.triggers[].github.secretReference

Description:: 
SecretLocalReference contains information that points to the local secret being used
Type:: object
Required:: 
* name



## .spec.triggers[].gitlab

Description:: 
WebHookTrigger is a trigger that gets invoked using a webhook type of post
Type:: object



## .spec.triggers[].gitlab.secretReference

Description:: 
SecretLocalReference contains information that points to the local secret being used
Type:: object
Required:: 
* name



## .spec.triggers[].imageChange

Description:: 
ImageChangeTrigger allows builds to be triggered when an ImageStream changes
Type:: object



## .status

Description:: 
BuildConfigStatus contains current state of the build config object.
Type:: object
Required:: 
* lastVersion



## .status.imageChangeTriggers

Description:: 
ImageChangeTriggers captures the runtime state of any ImageChangeTrigger specified in the BuildConfigSpec, including the value reconciled by the OpenShift APIServer for the lastTriggeredImageID. There is a single entry in this array for each image change trigger in spec. Each trigger status references the ImageStreamTag that acts as the source of the trigger.
Type:: array

## .status.imageChangeTriggers[]

Description:: 
ImageChangeTriggerStatus tracks the latest resolved status of the associated ImageChangeTrigger policy specified in the BuildConfigSpec.Triggers struct.
Type:: object



## .status.imageChangeTriggers[].from

Description:: 
ImageStreamTagReference references the ImageStreamTag in an image change trigger by namespace and name.
Type:: object



# API endpoints

The following API endpoints are available:

* /apis/build.openshift.io/v1/buildconfigs
* GET: list or watch objects of kind BuildConfig
* /apis/build.openshift.io/v1/watch/buildconfigs
* GET: watch individual changes to a list of BuildConfig. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs
* DELETE: delete collection of BuildConfig
* GET: list or watch objects of kind BuildConfig
* POST: create a BuildConfig
* /apis/build.openshift.io/v1/watch/namespaces/{namespace}/buildconfigs
* GET: watch individual changes to a list of BuildConfig. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}
* DELETE: delete a BuildConfig
* GET: read the specified BuildConfig
* PATCH: partially update the specified BuildConfig
* PUT: replace the specified BuildConfig
* /apis/build.openshift.io/v1/watch/namespaces/{namespace}/buildconfigs/{name}
* GET: watch changes to an object of kind BuildConfig. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.

## /apis/build.openshift.io/v1/buildconfigs

HTTP method:: GET
Description:: list or watch objects of kind BuildConfig



## /apis/build.openshift.io/v1/watch/buildconfigs

HTTP method:: GET
Description:: watch individual changes to a list of BuildConfig. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs

HTTP method:: DELETE
Description:: delete collection of BuildConfig





HTTP method:: GET
Description:: list or watch objects of kind BuildConfig



HTTP method:: POST
Description:: create a BuildConfig







## /apis/build.openshift.io/v1/watch/namespaces/{namespace}/buildconfigs

HTTP method:: GET
Description:: watch individual changes to a list of BuildConfig. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /apis/build.openshift.io/v1/namespaces/{namespace}/buildconfigs/{name}



HTTP method:: DELETE
Description:: delete a BuildConfig





HTTP method:: GET
Description:: read the specified BuildConfig



HTTP method:: PATCH
Description:: partially update the specified BuildConfig





HTTP method:: PUT
Description:: replace the specified BuildConfig







## /apis/build.openshift.io/v1/watch/namespaces/{namespace}/buildconfigs/{name}



HTTP method:: GET
Description:: watch changes to an object of kind BuildConfig. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.

