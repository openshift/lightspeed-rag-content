# Node [v1]


Description:: 
Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
Type:: object

# Specification



## .spec

Description:: 
NodeSpec describes the attributes that a node is created with.
Type:: object



## .spec.configSource

Description:: 
NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
Type:: object



## .spec.configSource.configMap

Description:: 
ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
Type:: object
Required:: 
* namespace
* name
* kubeletConfigKey



## .spec.taints

Description:: 
If specified, the node's taints.
Type:: array

## .spec.taints[]

Description:: 
The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
Type:: object
Required:: 
* key
* effect



## .status

Description:: 
NodeStatus is information about the current status of a node.
Type:: object



## .status.addresses

Description:: 
List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/reference/node/node-status/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
Type:: array

## .status.addresses[]

Description:: 
NodeAddress contains information for the node's address.
Type:: object
Required:: 
* type
* address



## .status.conditions

Description:: 
Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/reference/node/node-status/#condition
Type:: array

## .status.conditions[]

Description:: 
NodeCondition contains condition information for a node.
Type:: object
Required:: 
* type
* status



## .status.config

Description:: 
NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
Type:: object



## .status.config.active

Description:: 
NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
Type:: object



## .status.config.active.configMap

Description:: 
ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
Type:: object
Required:: 
* namespace
* name
* kubeletConfigKey



## .status.config.assigned

Description:: 
NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
Type:: object



## .status.config.assigned.configMap

Description:: 
ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
Type:: object
Required:: 
* namespace
* name
* kubeletConfigKey



## .status.config.lastKnownGood

Description:: 
NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22
Type:: object



## .status.config.lastKnownGood.configMap

Description:: 
ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
Type:: object
Required:: 
* namespace
* name
* kubeletConfigKey



## .status.daemonEndpoints

Description:: 
NodeDaemonEndpoints lists ports opened by daemons running on the Node.
Type:: object



## .status.daemonEndpoints.kubeletEndpoint

Description:: 
DaemonEndpoint contains information about a single Daemon endpoint.
Type:: object
Required:: 
* Port



## .status.features

Description:: 
NodeFeatures describes the set of features implemented by the CRI implementation. The features contained in the NodeFeatures should depend only on the cri implementation independent of runtime handlers.
Type:: object



## .status.images

Description:: 
List of container images on this node
Type:: array

## .status.images[]

Description:: 
Describe a container image
Type:: object



## .status.nodeInfo

Description:: 
NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
Type:: object
Required:: 
* machineID
* systemUUID
* bootID
* kernelVersion
* osImage
* containerRuntimeVersion
* kubeletVersion
* kubeProxyVersion
* operatingSystem
* architecture



## .status.nodeInfo.swap

Description:: 
NodeSwapStatus represents swap memory information.
Type:: object



## .status.runtimeHandlers

Description:: 
The available runtime handlers.
Type:: array

## .status.runtimeHandlers[]

Description:: 
NodeRuntimeHandler is a set of runtime handler information.
Type:: object



## .status.runtimeHandlers[].features

Description:: 
NodeRuntimeHandlerFeatures is a set of features implemented by the runtime handler.
Type:: object



## .status.volumesAttached

Description:: 
List of volumes that are attached to the node.
Type:: array

## .status.volumesAttached[]

Description:: 
AttachedVolume describes a volume attached to a node
Type:: object
Required:: 
* name
* devicePath



# API endpoints

The following API endpoints are available:

* /api/v1/nodes
* DELETE: delete collection of Node
* GET: list or watch objects of kind Node
* POST: create a Node
* /api/v1/watch/nodes
* GET: watch individual changes to a list of Node. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.
* /api/v1/nodes/{name}
* DELETE: delete a Node
* GET: read the specified Node
* PATCH: partially update the specified Node
* PUT: replace the specified Node
* /api/v1/watch/nodes/{name}
* GET: watch changes to an object of kind Node. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.
* /api/v1/nodes/{name}/status
* GET: read status of the specified Node
* PATCH: partially update status of the specified Node
* PUT: replace status of the specified Node

## /api/v1/nodes

HTTP method:: DELETE
Description:: delete collection of Node





HTTP method:: GET
Description:: list or watch objects of kind Node



HTTP method:: POST
Description:: create a Node







## /api/v1/watch/nodes

HTTP method:: GET
Description:: watch individual changes to a list of Node. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead.



## /api/v1/nodes/{name}



HTTP method:: DELETE
Description:: delete a Node





HTTP method:: GET
Description:: read the specified Node



HTTP method:: PATCH
Description:: partially update the specified Node





HTTP method:: PUT
Description:: replace the specified Node







## /api/v1/watch/nodes/{name}



HTTP method:: GET
Description:: watch changes to an object of kind Node. deprecated: use the &#x27;watch&#x27; parameter with a list operation instead, filtered to a single item with the &#x27;fieldSelector&#x27; parameter.



## /api/v1/nodes/{name}/status



HTTP method:: GET
Description:: read status of the specified Node



HTTP method:: PATCH
Description:: partially update status of the specified Node





HTTP method:: PUT
Description:: replace status of the specified Node





