# MachineSet [machine.openshift.io/v1beta1]


Description:: 
MachineSet ensures that a specified number of machines replicas are running at any given time.
Compatibility level 2: Stable within a major release for a minimum of 9 months or 3 minor releases (whichever is longer).
Type:: object

# Specification



## .spec

Description:: 
MachineSetSpec defines the desired state of MachineSet
Type:: object



## .spec.selector

Description:: 
selector is a label query over machines that should match the replica count.
Label keys and values that must match in order to be controlled by this MachineSet.
It must match the machine template's labels.
More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
Type:: object



## .spec.selector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.selector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that
relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.template

Description:: 
template is the object that describes the machine that will be created if
insufficient replicas are detected.
Type:: object



## .spec.template.metadata

Description:: 
Standard object's metadata.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
Type:: object



## .spec.template.metadata.ownerReferences

Description:: 
List of objects depended by this object. If ALL objects in the list have
been deleted, this object will be garbage collected. If this object is managed by a controller,
then an entry in this list will point to this controller, with the controller field set to true.
There cannot be more than one managing controller.
Type:: array

## .spec.template.metadata.ownerReferences[]

Description:: 
OwnerReference contains enough information to let you identify an owning
object. An owning object must be in the same namespace as the dependent, or
be cluster-scoped, so there is no namespace field.
Type:: object
Required:: 
* apiVersion
* kind
* name
* uid



## .spec.template.spec

Description:: 
Specification of the desired behavior of the machine.
More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
Type:: object



## .spec.template.spec.lifecycleHooks

Description:: 
lifecycleHooks allow users to pause operations on the machine at
certain predefined points within the machine lifecycle.
Type:: object



## .spec.template.spec.lifecycleHooks.preDrain

Description:: 
preDrain hooks prevent the machine from being drained.
This also blocks further lifecycle events, such as termination.
Type:: array

## .spec.template.spec.lifecycleHooks.preDrain[]

Description:: 
LifecycleHook represents a single instance of a lifecycle hook
Type:: object
Required:: 
* name
* owner



## .spec.template.spec.lifecycleHooks.preTerminate

Description:: 
preTerminate hooks prevent the machine from being terminated.
PreTerminate hooks be actioned after the Machine has been drained.
Type:: array

## .spec.template.spec.lifecycleHooks.preTerminate[]

Description:: 
LifecycleHook represents a single instance of a lifecycle hook
Type:: object
Required:: 
* name
* owner



## .spec.template.spec.metadata

Description:: 
ObjectMeta will autopopulate the Node created. Use this to
indicate what labels, annotations, name prefix, etc., should be used
when creating the Node.
Type:: object



## .spec.template.spec.metadata.ownerReferences

Description:: 
List of objects depended by this object. If ALL objects in the list have
been deleted, this object will be garbage collected. If this object is managed by a controller,
then an entry in this list will point to this controller, with the controller field set to true.
There cannot be more than one managing controller.
Type:: array

## .spec.template.spec.metadata.ownerReferences[]

Description:: 
OwnerReference contains enough information to let you identify an owning
object. An owning object must be in the same namespace as the dependent, or
be cluster-scoped, so there is no namespace field.
Type:: object
Required:: 
* apiVersion
* kind
* name
* uid



## .spec.template.spec.providerSpec

Description:: 
providerSpec details Provider-specific configuration to use during node creation.
Type:: object



## .spec.template.spec.taints

Description:: 
The list of the taints to be applied to the corresponding Node in additive
manner. This list will not overwrite any other taints added to the Node on
an ongoing basis by other entities. These taints should be actively reconciled
e.g. if you ask the machine controller to apply a taint and then manually remove
the taint the machine controller will put it back) but not have the machine controller
remove any taints
Type:: array

## .spec.template.spec.taints[]

Description:: 
The node this Taint is attached to has the "effect" on
any pod that does not tolerate the Taint.
Type:: object
Required:: 
* effect
* key



## .status

Description:: 
MachineSetStatus defines the observed state of MachineSet
Type:: object



## .status.conditions

Description:: 
conditions defines the current state of the MachineSet
Type:: array

## .status.conditions[]

Description:: 
Condition defines an observation of a Machine API resource operational state.
Type:: object
Required:: 
* lastTransitionTime
* status
* type



# API endpoints

The following API endpoints are available:

* /apis/machine.openshift.io/v1beta1/machinesets
* GET: list objects of kind MachineSet
* /apis/machine.openshift.io/v1beta1/namespaces/{namespace}/machinesets
* DELETE: delete collection of MachineSet
* GET: list objects of kind MachineSet
* POST: create a MachineSet
* /apis/machine.openshift.io/v1beta1/namespaces/{namespace}/machinesets/{name}
* DELETE: delete a MachineSet
* GET: read the specified MachineSet
* PATCH: partially update the specified MachineSet
* PUT: replace the specified MachineSet
* /apis/machine.openshift.io/v1beta1/namespaces/{namespace}/machinesets/{name}/scale
* GET: read scale of the specified MachineSet
* PATCH: partially update scale of the specified MachineSet
* PUT: replace scale of the specified MachineSet
* /apis/machine.openshift.io/v1beta1/namespaces/{namespace}/machinesets/{name}/status
* GET: read status of the specified MachineSet
* PATCH: partially update status of the specified MachineSet
* PUT: replace status of the specified MachineSet

## /apis/machine.openshift.io/v1beta1/machinesets

HTTP method:: GET
Description:: list objects of kind MachineSet



## /apis/machine.openshift.io/v1beta1/namespaces/{namespace}/machinesets

HTTP method:: DELETE
Description:: delete collection of MachineSet



HTTP method:: GET
Description:: list objects of kind MachineSet



HTTP method:: POST
Description:: create a MachineSet







## /apis/machine.openshift.io/v1beta1/namespaces/{namespace}/machinesets/{name}



HTTP method:: DELETE
Description:: delete a MachineSet





HTTP method:: GET
Description:: read the specified MachineSet



HTTP method:: PATCH
Description:: partially update the specified MachineSet





HTTP method:: PUT
Description:: replace the specified MachineSet







## /apis/machine.openshift.io/v1beta1/namespaces/{namespace}/machinesets/{name}/scale



HTTP method:: GET
Description:: read scale of the specified MachineSet



HTTP method:: PATCH
Description:: partially update scale of the specified MachineSet





HTTP method:: PUT
Description:: replace scale of the specified MachineSet







## /apis/machine.openshift.io/v1beta1/namespaces/{namespace}/machinesets/{name}/status



HTTP method:: GET
Description:: read status of the specified MachineSet



HTTP method:: PATCH
Description:: partially update status of the specified MachineSet





HTTP method:: PUT
Description:: replace status of the specified MachineSet





