# Persistent storage using AWS Elastic Block Store


{product-title} supports Amazon Elastic Block Store (EBS) volumes.
You can provision your {product-title} cluster with persistent storage by using Amazon EC2.
The Kubernetes persistent volume framework allows administrators to provision a cluster with persistent storage and gives users a way to request those resources without having any knowledge of the underlying infrastructure.
You can dynamically provision Amazon EBS volumes.
Persistent volumes are not bound to a single project or namespace; they can be shared across the {product-title} cluster.
Persistent volume claims are specific to a project or namespace and can be requested by users.
You can define a KMS key to encrypt container-persistent volumes on AWS.
By default, newly created clusters using {product-title} version 4.10 and later use gp3 storage and the AWS EBS CSI driver.

[IMPORTANT]
----
High-availability of storage in the infrastructure is left to the underlying
storage provider.
----

[IMPORTANT]
----
{product-title} 4.12 and later provides automatic migration for the AWS Block in-tree volume plugin to its equivalent CSI driver.
CSI automatic migration should be seamless. Migration does not change how you use all existing API objects, such as persistent volumes, persistent volume claims, and storage classes. For more information about migration, see CSI automatic migration.
----

# Creating the EBS storage class

Storage classes are used to differentiate and delineate storage levels and
usages. By defining a storage class, users can obtain dynamically provisioned
persistent volumes.

# Creating the persistent volume claim

Storage must exist in the underlying infrastructure before it can be mounted as
a volume in {product-title}.

1. In the {product-title} web console, click Storage -> Persistent Volume Claims.
2. In the persistent volume claims overview, click Create Persistent Volume Claim.
3. Define the desired options on the page that appears.
1. Select the previously-created storage class from the drop-down menu.
2. Enter a unique name for the storage claim.
3. Select the access mode. This selection determines the read and write access for the storage claim.
4. Define the size of the storage claim.
4. Click Create to create the persistent volume claim and generate a persistent
volume.

# Volume format

Before {product-title} mounts the volume and passes it to a container, it
checks that the volume contains a file system as specified by the fsType
parameter in the persistent volume definition. If the device is not
formatted with the file system, all data from the device is erased and the
device is automatically formatted with the given file system.

This verification enables you to use unformatted {provider} volumes as persistent volumes,
because {product-title} formats them before the first use.

# Maximum number of EBS volumes on a node

By default, {product-title} supports a maximum of 39 EBS volumes attached to one
node. This limit is consistent with the
AWS volume limits. The volume limit depends on the instance type.


[IMPORTANT]
----
As a cluster administrator, you must use either in-tree or Container Storage Interface (CSI) volumes and their respective storage classes, but never both volume types at the same time. The maximum attached EBS volume number is counted separately for in-tree and CSI volumes, which means you could have up to 39 EBS volumes of each type.
----

For information about accessing additional storage options, such as volume snapshots, that are not possible with in-tree volume plug-ins, see AWS Elastic Block Store CSI Driver Operator.

# Encrypting container persistent volumes on AWS with a KMS key

Defining a KMS key to encrypt container-persistent volumes on AWS is useful when you have explicit compliance and security guidelines when deploying to AWS.

* Underlying infrastructure must contain storage.
* You must create a customer KMS key on AWS.

1. Create a storage class:

```yaml
$ cat << EOF | oc create -f -
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: <storage-class-name> 1
parameters:
  fsType: ext4 2
  encrypted: "true"
  kmsKeyId: keyvalue 3
provisioner: ebs.csi.aws.com
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
EOF
```

Specifies the name of the storage class.
File system that is created on provisioned volumes.
Specifies the full Amazon Resource Name (ARN) of the key to use when encrypting the container-persistent volume. If you do not provide any key, but the encrypted field is set to true, then the default KMS key is used. See Finding the key ID and key ARN on AWS in the AWS documentation.
2. Create a persistent volume claim (PVC) with the storage class specifying the KMS key:

```yaml
$ cat << EOF | oc create -f -
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mypvc
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: <storage-class-name>
  resources:
    requests:
      storage: 1Gi
EOF
```

3. Create workload containers to consume the PVC:

```yaml
$ cat << EOF | oc create -f -
kind: Pod
metadata:
  name: mypod
spec:
  containers:
    - name: httpd
      image: quay.io/centos7/httpd-24-centos7
      ports:
        - containerPort: 80
      volumeMounts:
        - mountPath: /mnt/storage
          name: data
  volumes:
    - name: data
      persistentVolumeClaim:
        claimName: mypvc
EOF
```


# Additional resources

* See AWS Elastic Block Store CSI Driver Operator for information about accessing additional storage options, such as volume snapshots, that are not possible with in-tree volume plugins.