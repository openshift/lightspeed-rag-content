# Persistent storage using GCE Persistent Disk


{product-title} supports GCE Persistent Disk volumes (gcePD).
You can provision your {product-title} cluster with persistent storage
using GCE.
Some familiarity with Kubernetes and GCE is assumed.
The Kubernetes persistent volume framework allows administrators to
provision a cluster with persistent storage and gives users a way to
request those resources without having any knowledge of the underlying
infrastructure.
GCE Persistent Disk volumes can be provisioned dynamically.
Persistent volumes are not bound to a single project or namespace;
they can be shared across the {product-title} cluster.
Persistent volume claims are specific to a project or namespace and can be
requested by users.

[IMPORTANT]
----
{product-title} 4.12 and later provides automatic migration for the GCE Persist Disk in-tree volume plugin to its equivalent CSI driver.
CSI automatic migration should be seamless. Migration does not change how you use all existing API objects, such as persistent volumes, persistent volume claims, and storage classes.
For more information about migration, see CSI automatic migration.
----

[IMPORTANT]
----
High availability of storage in the infrastructure is left to the underlying
storage provider.
----
* GCE Persistent Disk

# Creating the GCE storage class

Storage classes are used to differentiate and delineate storage levels and
usages. By defining a storage class, users can obtain dynamically provisioned
persistent volumes.

# Creating the persistent volume claim

Storage must exist in the underlying infrastructure before it can be mounted as
a volume in {product-title}.

1. In the {product-title} web console, click Storage -> Persistent Volume Claims.
2. In the persistent volume claims overview, click Create Persistent Volume Claim.
3. Define the desired options on the page that appears.
1. Select the previously-created storage class from the drop-down menu.
2. Enter a unique name for the storage claim.
3. Select the access mode. This selection determines the read and write access for the storage claim.
4. Define the size of the storage claim.
4. Click Create to create the persistent volume claim and generate a persistent
volume.

# Volume format

Before {product-title} mounts the volume and passes it to a container, it
checks that the volume contains a file system as specified by the fsType
parameter in the persistent volume definition. If the device is not
formatted with the file system, all data from the device is erased and the
device is automatically formatted with the given file system.

This verification enables you to use unformatted {provider} volumes as persistent volumes,
because {product-title} formats them before the first use.