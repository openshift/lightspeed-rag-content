# Persistent storage using Cinder


{product-title} supports OpenStack Cinder.  Some familiarity with Kubernetes and OpenStack is assumed.
Cinder volumes can be provisioned dynamically.
Persistent volumes are not bound to a single project or namespace; they can be
shared across the {product-title} cluster.
Persistent volume claims are specific to a project or namespace and can be
requested by users.

[IMPORTANT]
----
{product-title} 4.11 and later provides automatic migration for the Cinder in-tree volume plugin to its equivalent CSI driver.
CSI automatic migration should be seamless. Migration does not change how you use all existing API objects, such as persistent volumes, persistent volume claims, and storage classes. For more information about migration, see CSI automatic migration.
----
* For more information about how OpenStack Block Storage provides persistent block storage management for virtual hard drives, see OpenStack Cinder.

# Manual provisioning with Cinder

Storage must exist in the underlying infrastructure before it can be mounted as a volume in {product-title}.

* {product-title} configured for Red Hat OpenStack Platform (RHOSP)
* Cinder volume ID

## Creating the persistent volume

You must define your persistent volume (PV) in an object definition before creating
it in {product-title}:

1. Save your object definition to a file.
cinder-persistentvolume.yaml

```yaml
apiVersion: "v1"
kind: "PersistentVolume"
metadata:
  name: "pv0001" 1
spec:
  capacity:
    storage: "5Gi" 2
  accessModes:
    - "ReadWriteOnce"
  cinder: 3
    fsType: "ext3" 4
    volumeID: "f37a03aa-6212-4c62-a805-9ce139fab180" 5
```

The name of the volume that is used by persistent volume claims or pods.
The amount of storage allocated to this volume.
Indicates cinder for Red Hat OpenStack Platform (RHOSP) Cinder volumes.
The file system that is created when the volume is mounted for the first time.
The Cinder volume to use.

[IMPORTANT]
----
Do not change the fstype parameter value after the volume is formatted and
provisioned. Changing this value can result in data loss and pod failure.
----
2. Create the object definition file you saved in the previous step.

```terminal
$ oc create -f cinder-persistentvolume.yaml
```


## Persistent volume formatting

You can use unformatted Cinder volumes as PVs because
{product-title} formats them before the first use.

Before {product-title} mounts the volume and passes it to a container, the system checks that it contains a file system as specified by the fsType parameter in the
PV definition. If the device is not formatted with the file system, all data from the device is erased and the device is automatically formatted with the given file system.

## Cinder volume security

If you use Cinder PVs in your application, configure security for their
deployment configurations.

* An SCC must be created that uses the appropriate fsGroup strategy.

1. Create a service account and add it to the SCC:

```terminal
$ oc create serviceaccount <service_account>
```


```terminal
$ oc adm policy add-scc-to-user <new_scc> -z <service_account> -n <project>
```

2. In your application's deployment configuration, provide the service account
name and securityContext:

```yaml
apiVersion: v1
kind: ReplicationController
metadata:
  name: frontend-1
spec:
  replicas: 1  1
  selector:    2
    name: frontend
  template:    3
    metadata:
      labels:  4
        name: frontend 5
    spec:
      containers:
      - image: openshift/hello-openshift
        name: helloworld
        ports:
        - containerPort: 8080
          protocol: TCP
      restartPolicy: Always
      serviceAccountName: <service_account> 6
      securityContext:
        fsGroup: 7777 7
```

The number of copies of the pod to run.
The label selector of the pod to run.
A template for the pod that the controller creates.
The labels on the pod. They must include labels from the label selector.
The maximum name length after expanding any parameters is 63 characters.
Specifies the service account you created.
Specifies an fsGroup for the pods.