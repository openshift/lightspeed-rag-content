# Dynamic provisioning



# About dynamic provisioning

The StorageClass resource object describes and classifies storage that can
be requested, as well as provides a means for passing parameters for
dynamically provisioned storage on demand. StorageClass objects can also
serve as a management mechanism for controlling different levels of
storage and access to the storage. Cluster Administrators (cluster-admin)
 or Storage Administrators (storage-admin) define and create the
StorageClass objects that users can request without needing any detailed
knowledge about the underlying storage volume sources.

The {product-title} persistent volume framework enables this functionality
and allows administrators to provision a cluster with persistent storage.
The framework also gives users a way to request those resources without
having any knowledge of the underlying infrastructure.

Many storage types are available for use as persistent volumes in
{product-title}. While all of them can be statically provisioned by an
administrator, some types of storage are created dynamically using the
built-in provider and plugin APIs.

# Available dynamic provisioning plugins

{product-title} provides the following provisioner plugins, which have
generic implementations for dynamic provisioning that use the cluster&#8217;s
configured provider&#8217;s API to create new storage resources:




[IMPORTANT]
----
Any chosen provisioner plugin also requires configuration for the relevant
cloud, host, or third-party provider as per the relevant documentation.
----

# Defining a storage class

StorageClass objects are currently a globally scoped object and must be
created by cluster-admin or storage-admin users.


[IMPORTANT]
----
The Cluster Storage Operator might install a default storage class depending
on the platform in use. This storage class is owned and controlled by the
Operator. It cannot be deleted or modified beyond defining annotations
and labels. If different behavior is desired, you must define a custom
storage class.
----

The following sections describe the basic definition for a
StorageClass object and specific examples for each of the supported plugin types.

## Basic StorageClass object definition

The following resource shows the parameters and default values that you
use to configure a storage class. This example uses the AWS
ElasticBlockStore (EBS) object definition.


```yaml
kind: StorageClass 1
apiVersion: storage.k8s.io/v1 2
metadata:
  name: <storage-class-name> 3
  annotations: 4
    storageclass.kubernetes.io/is-default-class: 'true'
    ...
provisioner: kubernetes.io/aws-ebs 5
parameters: 6
  type: gp3
...
```


(required) The API object type.
(required) The current apiVersion.
(required) The name of the storage class.
(optional) Annotations for the storage class.
(required) The type of provisioner associated with this storage class.
(optional) The parameters required for the specific provisioner, this will change from plug-in to plug-in.

## Storage class annotations

To set a storage class as the cluster-wide default, add
the following annotation to your storage class metadata:


```yaml
storageclass.kubernetes.io/is-default-class: "true"
```


For example:


```yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
...
```


This enables any persistent volume claim (PVC) that does not specify a
specific storage class to automatically be provisioned through the
default storage class. However, your cluster can have more than one storage class, but only one of them can be the default storage class.


[NOTE]
----
The beta annotation storageclass.beta.kubernetes.io/is-default-class is
still working; however, it will be removed in a future release.
----

To set a storage class description, add the following annotation
to your storage class metadata:


```yaml
kubernetes.io/description: My Storage Class Description
```


For example:


```yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    kubernetes.io/description: My Storage Class Description
...
```


## RHOSP Cinder object definition


```yaml
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: <storage-class-name> 1
provisioner: kubernetes.io/cinder
parameters:
  type: fast  2
  availability: nova 3
  fsType: ext4 4
```


Name of the storage class. The persistent volume claim uses this storage class for provisioning the associated persistent volumes.
Volume type created in Cinder. Default is empty.
Availability Zone. If not specified, volumes are generally
round-robined across all active zones where the {product-title} cluster
has a node.
File system that is created on dynamically provisioned volumes. This
value is copied to the fsType field of dynamically provisioned
persistent volumes and the file system is created when the volume is
mounted for the first time. The default value is ext4.

## RHOSP Manila Container Storage Interface (CSI) object definition

Once installed, the OpenStack Manila CSI Driver Operator and ManilaDriver automatically create the required storage classes for all available Manila share types needed for dynamic provisioning.

## AWS Elastic Block Store (EBS) object definition


```yaml
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: <storage-class-name> 1
provisioner: ebs.csi.aws.com
parameters:
  type: io1 2
  iopsPerGB: "10" 3
  encrypted: "true" 4
  kmsKeyId: keyvalue 5
  fsType: ext4 6
```


(required) Name of the storage class. The persistent volume claim uses this storage class for provisioning the associated persistent volumes.
(required) Select from io1, gp3, sc1, st1. The default is gp3.
See the
AWS documentation
for valid Amazon Resource Name (ARN) values.
Optional: Only for io1 volumes. I/O operations per second per GiB.
The AWS volume plugin multiplies this with the size of the requested
volume to compute IOPS of the volume. The value cap is 20,000 IOPS, which
is the maximum supported by AWS. See the
AWS documentation
for further details.
Optional: Denotes whether to encrypt the EBS volume. Valid values
are true or false.
Optional: The full ARN of the key to use when encrypting the volume.
If none is supplied, but encypted is set to true, then AWS generates a
key. See the
AWS documentation
for a valid ARN value.
Optional: File system that is created on dynamically provisioned
volumes. This value is copied to the fsType field of dynamically
provisioned persistent volumes and the file system is created when the
volume is mounted for the first time. The default value is ext4.

## Azure Disk object definition


```yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: <storage-class-name> 1
provisioner: kubernetes.io/azure-disk
volumeBindingMode: WaitForFirstConsumer 2
allowVolumeExpansion: true
parameters:
  kind: Managed 3
  storageaccounttype: Premium_LRS 4
reclaimPolicy: Delete
```


Name of the storage class. The persistent volume claim uses this storage class for provisioning the associated persistent volumes.
Using WaitForFirstConsumer is strongly recommended. This provisions the volume while allowing enough storage to schedule the pod on a free worker node from an available zone.
Possible values are Shared (default), Managed, and Dedicated.

[IMPORTANT]
----
Red Hat only supports the use of kind: Managed in the storage class.
With Shared and Dedicated, Azure creates unmanaged disks, while {product-title} creates a managed disk for machine OS (root) disks. But because Azure Disk does not allow the use of both managed and unmanaged disks on a node, unmanaged disks created with Shared or Dedicated cannot be attached to {product-title} nodes.
----
Azure storage account SKU tier. Default is empty. Note that Premium VMs can attach both Standard_LRS and Premium_LRS disks, Standard VMs can only attach Standard_LRS disks, Managed VMs can only attach managed disks, and unmanaged VMs can only attach unmanaged disks.
1. If kind is set to Shared, Azure creates all unmanaged disks in a few shared storage accounts in the same resource group as the cluster.
2. If kind is set to Managed, Azure creates new managed disks.
3. If kind is set to Dedicated and a storageAccount is specified, Azure uses the specified storage account for the new unmanaged disk in the same resource group as the cluster. For this to work:
* The specified storage account must be in the same region.
* Azure Cloud Provider must have write access to the storage account.
4. If kind is set to Dedicated and a storageAccount is not specified, Azure creates a new dedicated storage account for the new unmanaged disk in the same resource group as the cluster.

## Azure File object definition

The Azure File storage class uses secrets to store the Azure storage account name
and the storage account key that are required to create an Azure Files share. These
permissions are created as part of the following procedure.

1. Define a ClusterRole object that allows access to create and view secrets:

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
#  name: system:azure-cloud-provider
  name: <persistent-volume-binder-role> 1
rules:
- apiGroups: ['']
  resources: ['secrets']
  verbs:     ['get','create']
```

The name of the cluster role to view and create secrets.
2. Add the cluster role to the service account:

```terminal
$ oc adm policy add-cluster-role-to-user <persistent-volume-binder-role> system:serviceaccount:kube-system:persistent-volume-binder
```

3. Create the Azure File StorageClass object:

```yaml
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: <azure-file> 1
provisioner: kubernetes.io/azure-file
parameters:
  location: eastus 2
  skuName: Standard_LRS 3
  storageAccount: <storage-account> 4
reclaimPolicy: Delete
volumeBindingMode: Immediate
```

Name of the storage class. The persistent volume claim uses this storage class for provisioning the associated persistent volumes.
Location of the Azure storage account, such as eastus. Default is empty, meaning that a new Azure storage account will be created in the {product-title} cluster's location.
SKU tier of the Azure storage account, such as Standard_LRS. Default is empty, meaning that a new Azure storage account will be created with the Standard_LRS SKU.
Name of the Azure storage account. If a storage account is provided, then
skuName and location are ignored. If no storage account is provided, then
the storage class searches for any storage account that is associated with the
resource group for any accounts that match the defined skuName and location.

### Considerations when using Azure File

The following file system features are not supported by the default Azure File storage class:

* Symlinks
* Hard links
* Extended attributes
* Sparse files
* Named pipes

Additionally, the owner user identifier (UID) of the Azure File mounted directory is different from the process UID of the container. The uid mount option can be specified in the StorageClass object to define
a specific user identifier to use for the mounted directory.

The following StorageClass object demonstrates modifying the user and group identifier, along with enabling symlinks for the mounted directory.


```yaml
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: azure-file
mountOptions:
  - uid=1500 1
  - gid=1500 2
  - mfsymlinks 3
provisioner: kubernetes.io/azure-file
parameters:
  location: eastus
  skuName: Standard_LRS
reclaimPolicy: Delete
volumeBindingMode: Immediate
```


Specifies the user identifier to use for the mounted directory.
Specifies the group identifier to use for the mounted directory.
Enables symlinks.

## GCE PersistentDisk (gcePD) object definition


```yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: <storage-class-name> 1
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd 2
  replication-type: none
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
reclaimPolicy: Delete
```


Name of the storage class. The persistent volume claim uses this storage class for provisioning the associated persistent volumes.
Select pd-ssd, pd-standard, or hyperdisk-balanced. The default is pd-ssd.

## VMware vSphere object definition


```yaml
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: <storage-class-name> 1
provisioner: csi.vsphere.vmware.com 2
```


Name of the storage class. The persistent volume claim uses this storage class for provisioning the associated persistent volumes.
For more information about using VMware vSphere CSI with {product-title},
see the
Kubernetes documentation.

# Changing the default storage class

Use the following procedure to change the default storage class.

For example, if you have two defined storage classes, gp3 and standard, and you want to change the default storage class from gp3 to standard.

* Access to the cluster with cluster-admin privileges.

To change the default storage class:

1. List the storage classes:

```terminal
$ oc get storageclass
```

Example output

```terminal
NAME                 TYPE
gp3 (default)        ebs.csi.aws.com 1
standard             ebs.csi.aws.com
```

(default) indicates the default storage class.
2. Make the desired storage class the default.

For the desired storage class, set the storageclass.kubernetes.io/is-default-class annotation to true by running the following command:

```terminal
$ oc patch storageclass standard -p '{"metadata": {"annotations": {"storageclass.kubernetes.io/is-default-class": "true"}}}'
```


[NOTE]
----
You can have multiple default storage classes for a short time. However, you should ensure that only one default storage class exists eventually.
With multiple default storage classes present, any persistent volume claim (PVC) requesting the default storage class (pvc.spec.storageClassName=nil) gets the most recently created default storage class, regardless of the default status of that storage class, and the administrator receives an alert in the alerts dashboard that there are multiple default storage classes, MultipleDefaultStorageClasses.
----
3. Remove the default storage class setting from the old default storage class.

For the old default storage class, change the value of the storageclass.kubernetes.io/is-default-class annotation to false by running the following command:

```terminal
$ oc patch storageclass gp3 -p '{"metadata": {"annotations": {"storageclass.kubernetes.io/is-default-class": "false"}}}'
```

4. Verify the changes:

```terminal
$ oc get storageclass
```

Example output

```terminal
NAME                 TYPE
gp3                  ebs.csi.aws.com
standard (default)   ebs.csi.aws.com
```
