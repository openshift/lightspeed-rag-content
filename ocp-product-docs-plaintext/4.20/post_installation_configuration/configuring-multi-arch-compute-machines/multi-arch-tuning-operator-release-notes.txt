# Multiarch Tuning Operator release notes


The Multiarch Tuning Operator optimizes workload management within multi-architecture clusters and in single-architecture clusters transitioning to multi-architecture environments.
These release notes track the development of the Multiarch Tuning Operator.
For more information, see Managing workloads on multi-architecture clusters by using the Multiarch Tuning Operator.

# Release notes for the Multiarch Tuning Operator 1.2.0

Issued: 22 October 2025

## New features and enhancements

* With this release, you can enable the exec format error monitor plugin for the Multiarch Tuning Operator. This plugin detects ENOEXEC errors, which occur when a pod attempts to execute a binary incompatible with the node's architecture. You enable this plugin by setting the plugins.execFormatErrorMonitor.enabled parameter to true in the ClusterPodPlacementConfig object. For more information, see Creating the ClusterPodPlacementConfig object.

## Bug fixes

* Previously, the Multiarch Tuning Operator incorrectly handled the Operator bundle image inspector, restricting it to a single architecture, which could cause OLM to fail when installing Operators. With this update, MTO now sets the bundle image to support all architectures, allowing Operators to be successfully installed on single-architecture clusters when the Multiarch Tuning Operator is deployed. (MULTIARCH-5546)
* Previously, when a cluster global pull secret was changed, stale authentication information could remain in the Multiarch Tuning Operator cache. With this update, the cache is cleared whenever a cluster global pull secret is changed. (MULTIARCH-5538)
* Previously, the Multiarch Tuning Operator failed to process pods if an image reference contained both a tag and a digest. With this update, the image inspector prioritizes the digest if both are present. (MULTIARCH-5584)
* Previously, the Multiarch Tuning Operator did not respect the .spec.registrySources.containerRuntimeSearchRegistries field in the config.openshift.io/Image custom resource when a workload image did not specify a registry URL. With this update, the Operator can now handle this case, allowing workload images without an explicit registry URL to be pulled successfully. (MULTIARCH-5611)
* Previously, if the ClusterPodPlacementConfig object was deleted less than 1 second after its creation, some finalizers were not removed in time, causing certain resources to remain. With this update, all finalizers are properly deleted when the ClusterPodPlacementConfig object is deleted. (MULTIARCH-5372)

# Release notes for the Multiarch Tuning Operator 1.1.1

Issued: 27 May 2025

## Bug fixes

* Previously, the pod placement operand did not support authenticating registries using wildcard entries in the hostname of their pull secret. This caused inconsistent behavior with Kubelet when pulling images, because Kubelet supported wildcard entries while the operand required exact hostname matches. As a result, image pulls could fail unexpectedly when registries used wildcard hostnames.

With this release, the pod placement operand supports pull secrets that include wildcard hostnames, ensuring consistent and reliable image authentication and pulling.
* Previously, when image inspection failed after all retries and the nodeAffinityScoring plugin was enabled, the pod placement operand applied incorrect nodeAffinityScoring labels.

With this release, the operand sets nodeAffinityScoring labels correctly, even when image inspection fails. It now applies these labels independently of the required affinity process to ensure accurate and consistent scheduling.

# Release notes for the Multiarch Tuning Operator 1.1.0

Issued: 18 March 2024

## New features and enhancements

* The Multiarch Tuning Operator is now supported on managed offerings, including ROSA with Hosted Control Planes (HCP) and other HCP environments.
* With this release, you can configure architecture-aware workload scheduling by using the new plugins field in the ClusterPodPlacementConfig object. You can use the plugins.nodeAffinityScoring field to set architecture preferences for pod placement. If you enable the nodeAffinityScoring plugin, the scheduler first filters out nodes that do not meet the pod requirements. Then, the scheduler prioritizes the remaining nodes based on the architecture scores defined in the nodeAffinityScoring.platforms field.

### Bug fixes

* With this release, the Multiarch Tuning Operator does not update the nodeAffinity field for pods that are managed by a daemon set. (OCPBUGS-45885)

# Release notes for the Multiarch Tuning Operator 1.0.0

Issued: 31 October 2024

## New features and enhancements

* With this release, the Multiarch Tuning Operator supports custom network scenarios and cluster-wide custom registries configurations.
* With this release, you can identify pods based on their architecture compatibility by using the pod labels that the Multiarch Tuning Operator adds to newly created pods.
* With this release, you can monitor the behavior of the Multiarch Tuning Operator by using the metrics and alerts that are registered in the Cluster Monitoring Operator.