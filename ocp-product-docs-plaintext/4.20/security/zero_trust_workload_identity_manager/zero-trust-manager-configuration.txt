# Deploying Zero Trust Workload Identity Manager operands



[IMPORTANT]
----
Zero Trust Workload Identity Manager is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----
You can deploy the following operands by creating the respective custom resources (CRs). You must deploy the operands in the following sequence to ensure successful installation.
1. SPIRE Server
2. SPIRE Agent
3. SPIFFE CSI driver
4. SPIRE OIDC discovery provider

# Deploying the SPIRE Server

You can configure the SpireServer custom resource (CR) to deploy and configure a SPIRE Server.

* You have access to the cluster as a user with the cluster-admin role.
* You have installed Zero Trust Workload Identity Manager in the cluster.

1. Create the SpireServer CR:
1. Create a YAML file that defines the SpireServer CR, for example, SpireServer.yaml:
Example SpireServer.yaml

```yaml
apiVersion: operator.openshift.io/v1alpha1
kind: SpireServer
metadata:
  name: cluster
spec:
  trustDomain: <trust_domain> 1
  clusterName: <cluster_name> 2
  caSubject:
    commonName: example.org 3
    country: "US" 4
    organization: "RH" 5
  persistence:
    type: pvc 6
    size: "5Gi" 7
    accessMode: ReadWriteOnce 8
  datastore:
    databaseType: sqlite3
    connectionString: "/run/spire/data/datastore.sqlite3"
    maxOpenConns: 100 9
    maxIdleConns: 2 10
    connMaxLifetime: 3600 11
  jwtIssuer: <jwt_issuer_domain> 12
```

The trust domain to be used for the SPIFFE identifiers.
The name of your cluster.
The common name for SPIRE Server CA.
The country for SPIRE Server CA.
The organization for SPIRE Server CA.
The volume type to be used for persistence. The valid options are pvc and hostPath.
The volume size to be used for persistence
The access mode to be used for persistence. The valid options are ReadWriteOnce, ReadWriteOncePod, and ReadWriteMany.
The maximum number of open database connections.
The maximum number of idle connections in the pool.
The maximum amount of time a connection can be reused. To specify an unlimited time, you can set the value to 0.
The JSON Web Token (JWT) issuer domain. The value must be a valid URL.
2. Apply the configuration by running the following command:

```terminal
$ oc apply -f SpireServer.yaml
```


* Verify that the stateful set of SPIRE Server is ready and available by running the following command:

```terminal
$ oc get statefulset -l app.kubernetes.io/name=server -n zero-trust-workload-identity-manager
```

Example output

```terminal
NAME            READY   AGE
spire-server    1/1     65s
```

* Verify that the status of the SPIRE Server pod is Running by running the following command:

```terminal
$ oc get po -l app.kubernetes.io/name=server -n zero-trust-workload-identity-manager
```

Example output

```terminal
NAME               READY   STATUS    RESTARTS        AGE
spire-server-0     2/2     Running   1 (108s ago)    111s
```

* Verify that the persistent volume claim (PVC) is bound, by running the following command:

```terminal
$ oc get pvc -l app.kubernetes.io/name=server -n zero-trust-workload-identity-manager
```

Example output

```terminal
NAME                        STATUS    VOLUME                                     CAPACITY   ACCESS MODES  STORAGECLASS  VOLUMEATTRIBUTECLASS  AGE
spire-data-spire-server-0   Bound     pvc-27a36535-18a1-4fde-ab6d-e7ee7d3c2744   5Gi        RW0           gp3-csi       <unset>               22m
```


# Deploying the SPIRE Agent

You can configure the SpireAgent custom resource (CR) to deploy and configure a SPIRE Agent.

* You have access to the cluster as a user with the cluster-admin role.
* You have installed Zero Trust Workload Identity Manager in the cluster.

1. Create the SpireAgent CR:
1. Create a YAML file that defines the SpireAgent CR, for example, SpireAgent.yaml:
Example SpireAgent.yaml

```yaml
apiVersion: operator.openshift.io/v1alpha1
kind: SpireAgent
metadata:
  name: cluster
spec:
  trustDomain: <trust_domain> 1
  clusterName: <cluster_name> 2
  nodeAttestor:
    k8sPSATEnabled: "true" 3
  workloadAttestors:
    k8sEnabled: "true" 4
    workloadAttestorsVerification:
      type: "auto" 5
```

The trust domain to be used for the SPIFFE identifiers.
The name of your cluster.
Enable or disable the projected service account token (PSAT) Kubernetes node attestor. The valid options are true and false.
Enable or disable the Kubernetes workload attestor. The valid options are true and false.
The type of verification to be done against the kubelet. Valid options are auto, hostCert, apiServerCA, skip. The auto option initially attempts to use hostCert, and then falls back to apiServerCA.
2. Apply the configuration by running the following command:

```terminal
$ oc apply -f SpireAgent.yaml
```


* Verify that the daemon set of the SPIRE Agent is ready and available by running the following command:

```terminal
$ oc get daemonset -l app.kubernetes.io/name=agent -n zero-trust-workload-identity-manager
```

Example output

```terminal
NAME          DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE
spire-agent   3         3         3       3            3           <none>          10m
```

* Verify that the status of SPIRE Agent pods is Running by running the following command:

```terminal
$ oc get po -l app.kubernetes.io/name=agent -n zero-trust-workload-identity-manager
```

Example output

```terminal
NAME                READY   STATUS    RESTARTS   AGE
spire-agent-dp4jb   1/1     Running   0          12m
spire-agent-nvwjm   1/1     Running   0          12m
spire-agent-vtvlk   1/1     Running   0          12m
```


# Deploying the SPIFFE Container Storage Interface driver

You can configure the SpiffeCSIDriver custom resource (CR) to deploy and configure a SPIFFE Container Storage Interface (CSI) driver.

* You have access to the cluster as a user with the cluster-admin role.
* You have installed Zero Trust Workload Identity Manager in the cluster.

1. Create the SpiffeCSIDriver CR:
1. Create a YAML file that defines the SpiffeCSIDriver CR object, for example, SpiffeCSIDriver.yaml:
Example SpiffeCSIDriver.yaml

```yaml
apiVersion: operator.openshift.io/v1alpha1
kind: SpiffeCSIDriver
metadata:
  name: cluster
spec:
  agentSocketPath: '/run/spire/agent-sockets/spire-agent.sock' 1
```

The UNIX socket path to the SPIRE Agent.
2. Apply the configuration by running the following command:

```terminal
$ oc apply -f SpiffeCSIDriver.yaml
```


* Verify that the daemon set of the SPIFFE CSI driver is ready and available by running the following command:

```terminal
$ oc get daemonset -l app.kubernetes.io/name=spiffe-csi-driver -n zero-trust-workload-identity-manager
```

Example output

```terminal
NAME                      DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE
spire-spiffe-csi-driver   3         3         3       3            3           <none>          114s
```

* Verify that the status of SPIFFE Container Storage Interface (CSI) Driver pods is Running by running the following command:

```terminal
$ oc get po -l app.kubernetes.io/name=spiffe-csi-driver -n zero-trust-workload-identity-manager
```

Example output

```terminal
NAME                            READY   STATUS    RESTARTS   AGE
spire-spiffe-csi-driver-gpwcp   2/2     Running   0          2m37s
spire-spiffe-csi-driver-rrbrd   2/2     Running   0          2m37s
spire-spiffe-csi-driver-w6s6q   2/2     Running   0          2m37s
```


# Deploying the SPIRE OpenID Connect Discovery Provider

You can configure the SpireOIDCDiscoveryProvider custom resource (CR) to deploy and configure the SPIRE OpenID Connect (OIDC) Discovery Provider.

* You have access to the cluster as a user with the cluster-admin role.
* You have installed Zero Trust Workload Identity Manager in the cluster.

1. Create the SpireOIDCDiscoveryProvider CR:
1. Create a YAML file that defines the SpireOIDCDiscoveryProvider CR, for example, SpireOIDCDiscoveryProvider.yaml:
Example SpireOIDCDiscoveryProvider.yaml

```yaml
apiVersion: operator.openshift.io/v1alpha1
kind: SpireOIDCDiscoveryProvider
metadata:
  name: cluster
spec:
  trustDomain: <trust_domain> 1
  agentSocketName: 'spire-agent.sock' 2
  jwtIssuer: <jwt_issuer_domain> 3
```

The trust domain to be used for the SPIFFE identifiers.
The name of the SPIRE Agent UNIX socket.
The JSON Web Token (JWT) issuer domain. The value must be a valid URL.
2. Apply the configuration by running the following command:

```terminal
$ oc apply -f SpireOIDCDiscoveryProvider.yaml
```


1. Verify that the deployment of OIDC Discovery Provider is ready and available by running the following command:

```terminal
$ oc get deployment -l app.kubernetes.io/name=spiffe-oidc-discovery-provider -n zero-trust-workload-identity-manager
```

Example output

```terminal
NAME                                    READY  UP-TO-DATE  AVAILABLE  AGE
spire-spiffe-oidc-discovery-provider    1/1    1           1          2m58s
```

2. Verify that the status of OIDC Discovery Provider pods is Running by running the following command:

```terminal
$ oc get po -l app.kubernetes.io/name=spiffe-oidc-discovery-provider -n zero-trust-workload-identity-manager
```

Example output

```terminal
NAME                                                    READY   STATUS    RESTARTS   AGE
spire-spiffe-oidc-discovery-provider-64586d599f-lcc94   2/2     Running   0          7m15s
```
