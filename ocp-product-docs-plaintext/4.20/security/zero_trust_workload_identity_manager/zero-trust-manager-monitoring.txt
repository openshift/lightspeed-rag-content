# Monitoring Zero Trust Workload Identity Manager


By default, the SPIRE Server and SPIRE Agent components of the Zero Trust Workload Identity Manager emit metrics. You can configure OpenShift Monitoring to collect these metrics by using the Prometheus Operator format.

# Enabling user workload monitoring

You can enable monitoring for user-defined projects by configuring user workload monitoring in the cluster.

* You have access to the cluster as a user with the cluster-admin cluster role.

1. Create the cluster-monitoring-config.yaml file to define and configure the ConfigMap:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-monitoring-config
  namespace: openshift-monitoring
data:
  config.yaml: |
    enableUserWorkload: true
```

2. Apply the ConfigMap by running the following command:

```terminal
$ oc apply -f cluster-monitoring-config.yaml
```


* Verify that the monitoring components for user workloads are running in the openshift-user-workload-monitoring namespace:

```terminal
$ oc -n openshift-user-workload-monitoring get pod
```

Example output

```text
NAME                                   READY   STATUS    RESTARTS   AGE
prometheus-operator-6cb6bd9588-dtzxq   2/2     Running   0          50s
prometheus-user-workload-0             6/6     Running   0          48s
prometheus-user-workload-1             6/6     Running   0          48s
thanos-ruler-user-workload-0           4/4     Running   0          42s
thanos-ruler-user-workload-1           4/4     Running   0          42s
```


The status of the pods such as prometheus-operator, prometheus-user-workload, and thanos-ruler-user-workload must be Running.

* Setting up metrics collection for user-defined projects

# Configuring metrics collection for SPIRE Server by using a Service Monitor

The SPIRE Server operand exposes metrics by default on port 9402 at the /metrics endpoint. You can configure metrics collection for the SPIRE Server by creating a ServiceMonitor custom resource (CR) that enables the Prometheus Operator to collect custom metrics.

* You have access to the cluster as a user with the cluster-admin cluster role.
* You have installed the Zero Trust Workload Identity Manager.
* You have deployed the SPIRE Server operand in the cluster.
* You have enabled the user workload monitoring.

1. Create the ServiceMonitor CR:
1. Create the YAML file that defines the ServiceMonitor CR:
Example servicemonitor-spire-server file

```yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app.kubernetes.io/name: server
    app.kubernetes.io/instance: spire
  name: spire-server-metrics
  namespace: zero-trust-workload-identity-manager
spec:
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
  selector:
    matchLabels:
      app.kubernetes.io/name: server
      app.kubernetes.io/instance: spire
  namespaceSelector:
    matchNames:
    - zero-trust-workload-identity-manager
```

2. Create the ServiceMonitor CR by running the following command:

```terminal
$ oc create -f servicemonitor-spire-server.yaml
```


After the ServiceMonitor CR is created, the user workload Prometheus instance begins metrics collection from the SPIRE Server. The collected metrics are labeled with job="spire-server".

1. In the {product-title} web console, navigate to Observe → Targets.
2. In the Label filter field, enter the following label to filter the metrics targets:

```terminal
$ service=spire-server
```

3. Confirm that the Status column shows Up for the spire-server-metrics entry.

* Configuring user workload monitoring

# Configuring metrics collection for SPIRE Agent by using a Service Monitor

The SPIRE Agent operand exposes metrics by default on port 9402 at the /metrics endpoint. You can configure metrics collection for the SPIRE Agent by creating a ServiceMonitor custom resource (CR), which enables the Prometheus Operator to collect custom metrics.

* You have access to the cluster as a user with the cluster-admin cluster role.
* You have installed the Zero Trust Workload Identity Manager.
* You have deployed the SPIRE Agent operand in the cluster.
* You have enabled the user workload monitoring.

1. Create the ServiceMonitor CR:
1. Create the YAML file that defines the ServiceMonitor CR:
Example servicemonitor-spire-agent.yaml file

```yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app.kubernetes.io/name: agent
    app.kubernetes.io/instance: spire
  name: spire-agent-metrics
  namespace: zero-trust-workload-identity-manager
spec:
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
  selector:
    matchLabels:
      app.kubernetes.io/name: agent
      app.kubernetes.io/instance: spire
  namespaceSelector:
    matchNames:
    - zero-trust-workload-identity-manager
```

2. Create the ServiceMonitor CR by running the following command:

```terminal
$ oc create -f servicemonitor-spire-agent.yaml
```


After the ServiceMonitor CR is created, the user workload Prometheus instance begins metrics collection from the SPIRE Agent. The collected metrics are labeled with job="spire-agent".

1. In the {product-title} web console, navigate to Observe → Targets.
2. In the Label filter field, enter the following label to filter the metrics targets:

```terminal
$ service=spire-agent
```

3. Confirm that the Status column shows Up for the spire-agent-metrics entry.

* Configuring user workload monitoring

# Querying metrics for the Zero Trust Workload Identity Manager

As a cluster administrator, or as a user with view access to all namespaces, you can query SPIRE Agent and SPIRE Server metrics by using the {product-title} web console or the command line. The query retrieves all the metrics collected from the SPIRE components that match the specified job labels.

* You have access to the cluster as a user with the cluster-admin role.
* You have installed the Zero Trust Workload Identity Manager.
* You have deployed the SPIRE Server and SPIRE Agent operands in the cluster.
* You have enabled monitoring and metrics collection by creating ServiceMonitor objects.

1. In the {product-title} web console, navigate to Observe -> Metrics.
2. In the query field, enter the following PromQL expression to query SPIRE Server metrics:

```promql
{job="spire-server"}
```

3. In the query field, enter the following PromQL expression to query SPIRE Agent metrics.

```promql
{job="spire-agent"}
```


* Accessing metrics