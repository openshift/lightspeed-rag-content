# Prometheus queries for virtual resources


OpenShift Virtualization provides metrics that you can use to monitor the consumption of cluster infrastructure resources, including vCPU, network, storage, and guest memory swapping. You can also use metrics to query live migration status.

# Prerequisites

* To use the vCPU metric, the schedstats=enable kernel argument must be applied to the MachineConfig object. This kernel argument enables scheduler statistics used for debugging and performance tuning and adds a minor additional load to the scheduler. For more information, see Adding kernel arguments to nodes.
* For guest memory swapping queries to return data, memory swapping must be enabled on the virtual guests.

# Querying metrics for all projects with the {product-title} web console

You can use the {product-title} metrics query browser to run Prometheus Query Language (PromQL) queries to examine metrics visualized on a plot. This functionality provides information about the state of a cluster and any user-defined workloads that you are monitoring.

As a
cluster administrator
or as a user with view permissions for all projects, you can access metrics for all default {product-title} and user-defined projects in the Metrics UI.

The Metrics UI includes predefined queries, for example, CPU, memory, bandwidth, or network packet for all projects. You can also run custom Prometheus Query Language (PromQL) queries.

* You have access to the cluster as a user with the cluster-admin cluster role or with view permissions for all projects.
* You have installed the OpenShift CLI (`oc`).

1. In the {product-title} web console, click Observe -> Metrics.
2. To add one or more queries, perform any of the following actions:

3. To run queries that you created, click Run queries. The metrics from the queries are visualized on the plot. If a query is invalid, the UI shows an error message.

[NOTE]
----
* When drawing time series graphs, queries that operate on large amounts of data might time out or overload the browser. To avoid this, click Hide graph and calibrate your query by using only the metrics table. Then, after finding a feasible query, enable the plot to draw the graphs.
* By default, the query table shows an expanded view that lists every metric and its current value. Click the ˅ down arrowhead to minimize the expanded view for a query.
----
4. Optional: Save the page URL to use this set of queries again in the future.
5. Explore the visualized metrics. Initially, all metrics from all enabled queries are shown on the plot. Select which metrics are shown by performing any of the following actions:


# Querying metrics for user-defined projects with the {product-title} web console

You can use the {product-title} metrics query browser to run Prometheus Query Language (PromQL) queries to examine metrics visualized on a plot. This functionality provides information about any user-defined workloads that you are monitoring.

As a developer, you must specify a project name when querying metrics. You must have the required privileges to view metrics for the selected project.

The Metrics UI includes predefined queries, for example, CPU, memory, bandwidth, or network packet. These queries are restricted to the selected project. You can also run custom Prometheus Query Language (PromQL) queries for the project.

* You have access to the cluster as a developer or as a user with view permissions for the project that you are viewing metrics for.
* You have enabled monitoring for user-defined projects.
* You have deployed a service in a user-defined project.
* You have created a ServiceMonitor custom resource definition (CRD) for the service to define how the service is monitored.

1. In the {product-title} web console, click Observe -> Metrics.
2. To add one or more queries, perform any of the following actions:

3. To run queries that you created, click Run queries. The metrics from the queries are visualized on the plot. If a query is invalid, the UI shows an error message.

[NOTE]
----
* When drawing time series graphs, queries that operate on large amounts of data might time out or overload the browser. To avoid this, click Hide graph and calibrate your query by using only the metrics table. Then, after finding a feasible query, enable the plot to draw the graphs.
* By default, the query table shows an expanded view that lists every metric and its current value. Click the ˅ down arrowhead to minimize the expanded view for a query.
----
4. Optional: Save the page URL to use this set of queries again in the future.
5. Explore the visualized metrics. Initially, all metrics from all enabled queries are shown on the plot. Select which metrics are shown by performing any of the following actions:


 //
// * virt/support/virt-prometheus-queries.adoc

# Virtualization metrics

The following metric descriptions include example Prometheus Query Language (PromQL) queries. These metrics are not an API and might change between versions.
For a complete list of virtualization metrics, see KubeVirt components metrics.


[NOTE]
----
The following examples use topk queries that specify a time period. If virtual machines (VMs) are deleted during that time period, they can still appear in the query output.
----

## vCPU metrics

The following query can identify virtual machines that are waiting for Input/Output (I/O):

kubevirt_vmi_vcpu_wait_seconds_total:: Returns the wait time (in seconds) on I/O for vCPUs of a virtual machine. Type: Counter.

A value above '0' means that the vCPU wants to run, but the host scheduler cannot run it yet. This inability to run indicates that there is an issue with I/O.


[NOTE]
----
To query the vCPU metric, the schedstats=enable kernel argument must first be applied to the MachineConfig object. This kernel argument enables scheduler statistics used for debugging and performance tuning and adds a minor additional load to the scheduler.
----

kubevirt_vmi_vcpu_delay_seconds_total:: Returns the cumulative time, in seconds, that a vCPU was enqueued by the host scheduler but could not run immediately.
This delay appears to the virtual machine as steal time, which is CPU time lost when the host runs other workloads. Steal time can impact performance and often indicates CPU overcommitment or contention on the host.
Type: Counter.

Example vCPU delay query


```promql
irate(kubevirt_vmi_vcpu_delay_seconds_total[5m]) > 0.05 1
```


This query returns the average per-second delay over a 5-minute period. A high value may indicate CPU overcommitment or contention on the node.

Example vCPU wait time query


```promql
topk(3, sum by (name, namespace) (rate(kubevirt_vmi_vcpu_wait_seconds_total[6m]))) > 0 1
```


This query returns the top 3 VMs waiting for I/O at every given moment over a six-minute time period.

## Network metrics

The following queries can identify virtual machines that are saturating the network:

kubevirt_vmi_network_receive_bytes_total:: Returns the total amount of traffic received (in bytes) on the virtual machine's network. Type: Counter.
kubevirt_vmi_network_transmit_bytes_total:: Returns the total amount of traffic transmitted (in bytes) on the virtual machine's network. Type: Counter.

Example network traffic query


```promql
topk(3, sum by (name, namespace) (rate(kubevirt_vmi_network_receive_bytes_total[6m])) + sum by (name, namespace) (rate(kubevirt_vmi_network_transmit_bytes_total[6m]))) > 0 1
```


This query returns the top 3 VMs transmitting the most network traffic at every given moment over a six-minute time period.

## Storage metrics

### Storage-related traffic

The following queries can identify VMs that are writing large amounts of data:

kubevirt_vmi_storage_read_traffic_bytes_total:: Returns the total amount (in bytes) of the virtual machine's storage-related traffic. Type: Counter.
kubevirt_vmi_storage_write_traffic_bytes_total:: Returns the total amount of storage writes (in bytes) of the virtual machine's storage-related traffic. Type: Counter.

Example storage-related traffic query


```promql
topk(3, sum by (name, namespace) (rate(kubevirt_vmi_storage_read_traffic_bytes_total[6m])) + sum by (name, namespace) (rate(kubevirt_vmi_storage_write_traffic_bytes_total[6m]))) > 0 1
```


This query returns the top 3 VMs performing the most storage traffic at every given moment over a six-minute time period.

### Storage snapshot data

kubevirt_vmsnapshot_disks_restored_from_source:: Returns the total number of virtual machine disks restored from the source virtual machine. Type: Gauge.
kubevirt_vmsnapshot_disks_restored_from_source_bytes:: Returns the amount of space in bytes restored from the source virtual machine. Type: Gauge.

Examples of storage snapshot data queries


```promql
kubevirt_vmsnapshot_disks_restored_from_source{vm_name="simple-vm", vm_namespace="default"} 1
```


This query returns the total number of virtual machine disks restored from the source virtual machine.


```promql
kubevirt_vmsnapshot_disks_restored_from_source_bytes{vm_name="simple-vm", vm_namespace="default"} 1
```


This query returns the amount of space in bytes restored from the source virtual machine.

### I/O performance

The following queries can determine the I/O performance of storage devices:

kubevirt_vmi_storage_iops_read_total:: Returns the amount of write I/O operations the virtual machine is performing per second. Type: Counter.
kubevirt_vmi_storage_iops_write_total:: Returns the amount of read I/O operations the virtual machine is performing per second. Type: Counter.

Example I/O performance query


```promql
topk(3, sum by (name, namespace) (rate(kubevirt_vmi_storage_iops_read_total[6m])) + sum by (name, namespace) (rate(kubevirt_vmi_storage_iops_write_total[6m]))) > 0 1
```


This query returns the top 3 VMs performing the most I/O operations per second at every given moment over a six-minute time period.

## Guest memory swapping metrics

The following queries can identify which swap-enabled guests are performing the most memory swapping:

kubevirt_vmi_memory_swap_in_traffic_bytes:: Returns the total amount (in bytes) of memory the virtual guest is swapping in. Type: Gauge.
kubevirt_vmi_memory_swap_out_traffic_bytes:: Returns the total amount (in bytes) of memory the virtual guest is swapping out. Type: Gauge.

Example memory swapping query


```promql
topk(3, sum by (name, namespace) (rate(kubevirt_vmi_memory_swap_in_traffic_bytes[6m])) + sum by (name, namespace) (rate(kubevirt_vmi_memory_swap_out_traffic_bytes[6m]))) > 0 1
+
```


This query returns the top 3 VMs where the guest is performing the most memory swapping at every given moment over a six-minute time period.


[NOTE]
----
Memory swapping indicates that the virtual machine is under memory pressure. Increasing the memory allocation of the virtual machine can mitigate this issue.
----

## Monitoring AAQ operator metrics

The following metrics are exposed by the Application Aware Quota (AAQ) controller for monitoring resource quotas:

kube_application_aware_resourcequota:: Returns the current quota usage and the CPU and memory limits enforced by the AAQ Operator resources. Type: Gauge.
kube_application_aware_resourcequota_creation_timestamp:: Returns the time, in UNIX timestamp format, when the AAQ Operator resource is created. Type: Gauge.

## Live migration metrics

The following metrics can be queried to show live migration status:

kubevirt_vmi_migration_data_processed_bytes:: The amount of guest operating system data that has migrated to the new virtual machine (VM). Type: Gauge.
kubevirt_vmi_migration_data_remaining_bytes:: The amount of guest operating system data that remains to be migrated. Type: Gauge.
kubevirt_vmi_migration_memory_transfer_rate_bytes:: The rate at which memory is becoming dirty in the guest operating system. Dirty memory is data that has been changed but not yet written to disk. Type: Gauge.
kubevirt_vmi_migrations_in_pending_phase:: The number of pending migrations. Type: Gauge.
kubevirt_vmi_migrations_in_scheduling_phase:: The number of scheduling migrations. Type: Gauge.
kubevirt_vmi_migrations_in_running_phase:: The number of running migrations. Type: Gauge.
kubevirt_vmi_migration_succeeded:: The number of successfully completed migrations. Type: Gauge.
kubevirt_vmi_migration_failed:: The number of failed migrations. Type: Gauge.

# Additional resources

* About {product-title} monitoring
* Querying Prometheus
* Prometheus query examples