# Backup and restore by using VM snapshots


You can back up and restore virtual machines (VMs) by using snapshots. Snapshots are supported by the following storage providers:
* Red Hat OpenShift Data Foundation
* Any other cloud storage provider with the Container Storage Interface (CSI) driver that supports the Kubernetes Volume Snapshot API
To create snapshots of a VM in the Running state with the highest integrity, install the QEMU guest agent if it is not included with your operating system. The QEMU guest agent is included with the default Red Hat templates.

[IMPORTANT]
----
Online snapshots are supported for virtual machines that have hot plugged virtual disks. However, hot plugged disks that are not in the virtual machine specification are not included in the snapshot.
----
The QEMU guest agent takes a consistent snapshot by attempting to quiesce the VM file system. This ensures that in-flight I/O is written to the disk before the snapshot is taken. If the guest agent is not present, quiescing is not possible and a best-effort snapshot is taken.
The conditions under which a snapshot is taken are reflected in the snapshot indications that are displayed in the web console or CLI. If these conditions do not meet your requirements, try creating the snapshot again or use an offline snapshot

# About snapshots

A snapshot represents the state and data of a virtual machine (VM) at a specific point in time. You can use a snapshot to restore an existing VM to a previous state (represented by
the snapshot) for backup and disaster recovery or to rapidly roll back to a previous development version.

A VM snapshot is created from a VM that is powered off (Stopped state) or powered on (Running state).

When taking a snapshot of a running VM, the controller checks that the QEMU guest agent is installed and running. If so, it freezes the VM file system before taking the snapshot, and thaws the file system after the snapshot is taken.

The snapshot stores a copy of each Container Storage Interface (CSI) volume attached to the VM and a copy of the VM specification and metadata. Snapshots cannot be changed after creation.

You can perform the following snapshot actions:

* Create a new snapshot
* Create a clone of a virtual machine from a snapshot

[IMPORTANT]
----
Cloning a VM with a vTPM device attached to it or creating a new VM from its snapshot is not supported.
----
* List all snapshots attached to a specific VM
* Restore a VM from a snapshot
* Delete an existing VM snapshot

The VM snapshot feature introduces three new API objects defined as custom resource definitions (CRDs) for managing snapshots:

* VirtualMachineSnapshot: Represents a user request to create a snapshot. It contains information about the current state of the VM.
* VirtualMachineSnapshotContent: Represents a provisioned resource on the cluster (a snapshot). It is created by the VM snapshot controller and contains references to all resources required to restore the VM.
* VirtualMachineRestore: Represents a user request to restore a VM from a snapshot.

The VM snapshot controller binds a VirtualMachineSnapshotContent object with the VirtualMachineSnapshot object for which it was created, with a one-to-one mapping.

# About application-consistent snapshots and backups

You can configure application-consistent snapshots and backups for Linux or Windows virtual machines (VMs) through a cycle of freezing and thawing. For any application, you can either configure a script on a Linux VM or register on a Windows VM to be notified when a snapshot or backup is due to begin.

On a Linux VM, freeze and thaw processes trigger automatically when a snapshot is taken or a backup is started by using, for example, a plugin from Velero or another backup vendor. The freeze process, performed by QEMU Guest Agent (QEMU GA) freeze hooks, ensures that before the snapshot or backup of a VM occurs, all of the VM&#8217;s filesystems are frozen and each appropriately configured application is informed that a snapshot or backup is about to start. This notification affords each application the opportunity to quiesce its state. Depending on the application, quiescing might involve temporarily refusing new requests, finishing in-progress operations, and flushing data to disk. The operating system is then directed to quiesce the filesystems by flushing outstanding writes to disk and freezing new write activity. All new connection requests are refused. When all applications have become inactive, the QEMU GA freezes the filesystems, and a snapshot is taken or a backup initiated. After the taking of the snapshot or start of the backup, the thawing process begins. Filesystems writing is reactivated and applications receive notification to resume normal operations.

The same cycle of freezing and thawing is available on a Windows VM. Applications register with the Volume Shadow Copy Service (VSS) to receive notifications that they should flush out their data because a backup or snapshot is imminent. Thawing of the applications after the backup or snapshot is complete returns them to an active state. For more details, see the Windows Server documentation about the Volume Shadow Copy Service.

# Creating snapshots

You can create snapshots of virtual machines (VMs) by using the {product-title} web console or the command line.

## Creating a snapshot by using the web console

You can create a snapshot of a virtual machine (VM) by using the {product-title} web console.

* The snapshot feature gate is enabled in the YAML configuration of the kubevirt CR.
* The VM snapshot includes disks that meet the following requirements:
* The disks are data volumes or persistent volume claims.
* The disks belong to a storage class that supports Container Storage Interface (CSI) volume snapshots.
* The disks are bound to a persistent volume (PV) and populated with a datasource.

1. Navigate to Virtualization -> VirtualMachines in the web console.
2. Select a VM to open the VirtualMachine details page.
3. Click the Snapshots tab and then click Take Snapshot.

Alternatively, right-click the VM and select Create snapshot from the pop-up menu.
4. Enter the snapshot name.
5. Expand Disks included in this Snapshot to see the storage volumes to be included in the snapshot.
6. If your VM has disks that cannot be included in the snapshot and you wish to proceed, select I am aware of this warning and wish to proceed.
7. Click Save.

## Creating a snapshot by using the CLI

You can create a virtual machine (VM) snapshot for an offline or online VM by creating a VirtualMachineSnapshot object.

* Ensure the Snapshot feature gate is enabled for the kubevirt CR by using the following command:

```terminal
$ oc get kubevirt kubevirt-hyperconverged -n openshift-cnv -o yaml
```

Truncated output

```yaml
spec:
  developerConfiguration:
    featureGates:
      - Snapshot
```

* Ensure that the VM snapshot includes disks that meet the following requirements:
* The disks are data volumes or persistent volume claims.
* The disks belong to a storage class that supports Container Storage Interface (CSI) volume snapshots.
* The disks are bound to a persistent volume (PV) and populated with a datasource.
* Install the OpenShift CLI (oc).
* Optional: Power down the VM for which you want to create a snapshot.

1. Create a YAML file to define a VirtualMachineSnapshot object that specifies the name of the new VirtualMachineSnapshot and the name of the source VM as in the following example:

```yaml
apiVersion: snapshot.kubevirt.io/v1beta1
kind: VirtualMachineSnapshot
metadata:
  name: <snapshot_name>
spec:
  source:
    apiGroup: kubevirt.io
    kind: VirtualMachine
    name: <vm_name>
```

2. Create the VirtualMachineSnapshot object:

```terminal
$ oc create -f <snapshot_name>.yaml
```


The snapshot controller creates a VirtualMachineSnapshotContent object, binds it to the VirtualMachineSnapshot, and updates the status and readyToUse fields of the VirtualMachineSnapshot object.

1. Optional: During the snapshot creation process, you can use the wait command to monitor the status of the snapshot and wait until it is ready for use:
1. Enter the following command:

```terminal
$ oc wait <vm_name> <snapshot_name> --for condition=Ready
```

2. Verify the status of the snapshot:
* InProgress - The snapshot operation is still in progress.
* Succeeded - The snapshot operation completed successfully.
* Failed - The snapshot operaton failed.

[NOTE]
----
Online snapshots have a default time deadline of five minutes (5m). If the snapshot does not complete successfully in five minutes, the status is set to failed. Afterwards, the file system will be thawed and the VM unfrozen but the status remains failed until you delete the failed snapshot image.
To change the default time deadline, add the FailureDeadline attribute to the VM snapshot spec with the time designated in minutes (m) or in seconds (s) that you want to specify before the snapshot operation times out.
To set no deadline, you can specify 0, though this is generally not recommended, as it can result in an unresponsive VM.
If you do not specify a unit of time such as m or s, the default is seconds (s).
----
2. Verify that the VirtualMachineSnapshot object is created and bound with VirtualMachineSnapshotContent and that the readyToUse flag is set to true:

```terminal
$ oc describe vmsnapshot <snapshot_name>
```

Example output

```yaml
apiVersion: snapshot.kubevirt.io/v1beta1
kind: VirtualMachineSnapshot
metadata:
  creationTimestamp: "2020-09-30T14:41:51Z"
  finalizers:
  - snapshot.kubevirt.io/vmsnapshot-protection
  generation: 5
  name: mysnap
  namespace: default
  resourceVersion: "3897"
  selfLink: /apis/snapshot.kubevirt.io/v1beta1/namespaces/default/virtualmachinesnapshots/my-vmsnapshot
  uid: 28eedf08-5d6a-42c1-969c-2eda58e2a78d
spec:
  source:
    apiGroup: kubevirt.io
    kind: VirtualMachine
    name: my-vm
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2020-09-30T14:42:03Z"
    reason: Operation complete
    status: "False" 1
    type: Progressing
  - lastProbeTime: null
    lastTransitionTime: "2020-09-30T14:42:03Z"
    reason: Operation complete
    status: "True" 2
    type: Ready
  creationTime: "2020-09-30T14:42:03Z"
  readyToUse: true 3
  sourceUID: 355897f3-73a0-4ec4-83d3-3c2df9486f4f
  virtualMachineSnapshotContentName: vmsnapshot-content-28eedf08-5d6a-42c1-969c-2eda58e2a78d 4
  indications: 5
    - Online
  includedVolumes: 6
    - name: rootdisk
      kind: PersistentVolumeClaim
      namespace: default
    - name: datadisk1
      kind: DataVolume
      namespace: default
```

The status field of the Progressing condition specifies if the snapshot is still being created.
The status field of the Ready condition specifies if the snapshot creation process is complete.
Specifies if the snapshot is ready to be used.
Specifies that the snapshot is bound to a VirtualMachineSnapshotContent object created by the snapshot controller.
Specifies additional information about the snapshot, such as whether it is an online snapshot, or whether it was created with QEMU guest agent running.
Lists the storage volumes that are part of the snapshot, as well as their parameters.
3. Check the includedVolumes section in the snapshot description to verify that the expected PVCs are included in the snapshot.

# Verifying online snapshots by using snapshot indications

Snapshot indications are contextual information about online virtual machine (VM) snapshot operations. Indications are not available for offline virtual machine (VM) snapshot operations. Indications are helpful in describing details about the online snapshot creation.

* You must have attempted to create an online VM snapshot.

1. Display the output from the snapshot indications by performing one of the following actions:
* Use the command line to view indicator output in the status stanza of the VirtualMachineSnapshot object YAML.
* In the web console, click VirtualMachineSnapshot -> Status in the Snapshot details screen.
2. Verify the status of your online VM snapshot by viewing the values of the status.indications parameter:
* Online indicates that the VM was running during online snapshot creation.
* GuestAgent indicates that the QEMU guest agent was running during online snapshot creation.
* NoGuestAgent indicates that the QEMU guest agent was not running during online snapshot creation. The QEMU guest agent could not be used to freeze and thaw the file system, either because the QEMU guest agent was not installed or running or due to another error.

# Restoring virtual machines from snapshots

You can restore virtual machines (VMs) from snapshots by using the {product-title} web console or the command line.

## Restoring a VM from a snapshot by using the web console

You can restore a virtual machine (VM) to a previous configuration represented by a snapshot in the {product-title} web console.

1. Navigate to Virtualization -> VirtualMachines in the web console.
2. Select a VM to open the VirtualMachine details page.
3. If the VM is running, click the Options menu  and select Stop to power it down.
4. Click the Snapshots tab to view a list of snapshots associated with the VM.
5. Select a snapshot to open the Snapshot Details screen.
6. Click the Options menu  and select Restore VirtualMachine from snapshot.
7. Click Restore.
8. Optional: You can also create a new VM based on the snapshot. To do so:
1. In the Options menu  of the snapshot, select Create VirtualMachine from Snapshot.
2. Provide a name for the new VM.
3. Click Create

## Restoring a VM from a snapshot by using the CLI

You can restore an existing virtual machine (VM) to a previous configuration by using the command line. You can only restore from an offline VM snapshot.

* Install the OpenShift CLI (`oc`).
* Power down the VM you want to restore.
* Optional: Adjust what happens if the target VM is not fully stopped (ready). To do so, set the targetReadinessPolicy parameter in the vmrestore YAML configuration to one of the following values:
* FailImmediate - The restore process fails immediately if the VM is not ready.
* StopTarget - If the VM is not ready, it gets stopped, and the restore process starts.
* WaitGracePeriod 5 - The restore process waits for a set amount of time, in minutes, for the VM to be ready. This is the default setting, with the default value set to 5 minutes.
* WaitEventually - The restore process waits indefinitely for the VM to be ready.

1. Create a YAML file to define a VirtualMachineRestore object that specifies the name of the VM you want to restore and the name of the snapshot to be used as the source as in the following example:

```yaml
apiVersion: snapshot.kubevirt.io/v1beta1
kind: VirtualMachineRestore
metadata:
  name: <vm_restore>
spec:
  target:
    apiGroup: kubevirt.io
    kind: VirtualMachine
    name: <vm_name>
  virtualMachineSnapshotName: <snapshot_name>
```

2. Create the VirtualMachineRestore object:

```terminal
$ oc create -f <vm_restore>.yaml
```


The snapshot controller updates the status fields of the VirtualMachineRestore object and replaces the existing VM configuration with the snapshot content.

* Verify that the VM is restored to the previous state represented by the snapshot and that the complete flag is set to true:

```terminal
$ oc get vmrestore <vm_restore>
```

Example output

```yaml
apiVersion: snapshot.kubevirt.io/v1beta1
kind: VirtualMachineRestore
metadata:
creationTimestamp: "2020-09-30T14:46:27Z"
generation: 5
name: my-vmrestore
namespace: default
ownerReferences:
- apiVersion: kubevirt.io/v1
  blockOwnerDeletion: true
  controller: true
  kind: VirtualMachine
  name: my-vm
  uid: 355897f3-73a0-4ec4-83d3-3c2df9486f4f
  resourceVersion: "5512"
  selfLink: /apis/snapshot.kubevirt.io/v1beta1/namespaces/default/virtualmachinerestores/my-vmrestore
  uid: 71c679a8-136e-46b0-b9b5-f57175a6a041
  spec:
    target:
      apiGroup: kubevirt.io
      kind: VirtualMachine
      name: my-vm
  virtualMachineSnapshotName: my-vmsnapshot
  status:
  complete: true 1
  conditions:
  - lastProbeTime: null
  lastTransitionTime: "2020-09-30T14:46:28Z"
  reason: Operation complete
  status: "False" 2
  type: Progressing
  - lastProbeTime: null
  lastTransitionTime: "2020-09-30T14:46:28Z"
  reason: Operation complete
  status: "True" 3
  type: Ready
  deletedDataVolumes:
  - test-dv1
  restoreTime: "2020-09-30T14:46:28Z"
  restores:
  - dataVolumeName: restore-71c679a8-136e-46b0-b9b5-f57175a6a041-datavolumedisk1
  persistentVolumeClaim: restore-71c679a8-136e-46b0-b9b5-f57175a6a041-datavolumedisk1
  volumeName: datavolumedisk1
  volumeSnapshotName: vmsnapshot-28eedf08-5d6a-42c1-969c-2eda58e2a78d-volume-datavolumedisk1
```

Specifies if the process of restoring the VM to the state represented by the snapshot is complete.
The status field of the Progressing condition specifies if the VM is still being restored.
The status field of the Ready condition specifies if the VM restoration process is complete.

# Deleting snapshots

You can delete snapshots of virtual machines (VMs) by using the {product-title} web console or the command line.

## Deleting a snapshot by using the web console

You can delete an existing virtual machine (VM) snapshot by using the web console.

1. Navigate to Virtualization -> VirtualMachines in the web console.
2. Select a VM to open the VirtualMachine details page.
3. Click the Snapshots tab to view a list of snapshots associated with the VM.
4. Click the Options menu  beside a snapshot and select Delete snapshot.
5. Click Delete.

## Deleting a virtual machine snapshot in the CLI

You can delete an existing virtual machine (VM) snapshot by deleting the appropriate VirtualMachineSnapshot object.

* Install the OpenShift CLI (oc).

* Delete the VirtualMachineSnapshot object:

```terminal
$ oc delete vmsnapshot <snapshot_name>
```


The snapshot controller deletes the VirtualMachineSnapshot along with the associated VirtualMachineSnapshotContent object.

* Verify that the snapshot is deleted and no longer attached to this VM:

```terminal
$ oc get vmsnapshot
```


# Additional resources

* CSI Volume Snapshots