# Preparing CDI scratch space



# About scratch space

The Containerized Data Importer (CDI) requires scratch space (temporary storage) to complete some operations, such as importing and uploading virtual machine images.
During this process, CDI provisions a scratch space PVC equal to the size of the PVC backing the destination data volume (DV).
The scratch space PVC is deleted after the operation completes or aborts.

You can define the storage class that is used to bind the scratch space PVC in the spec.scratchSpaceStorageClass field of the HyperConverged custom resource.

If the defined storage class does not match a storage class in the cluster, then the default storage class defined for the cluster is used.
If there is no default storage class defined in the cluster, the storage class used to provision the original DV or PVC is used.


[NOTE]
----
CDI requires requesting scratch space with a file volume mode, regardless of the PVC backing the origin data volume.
If the origin PVC is backed by block volume mode, you must define a storage class capable of provisioning file volume mode PVCs.
----

## Manual provisioning

If there are no storage classes, CDI uses any PVCs in the project that match the size requirements for the image.
If there are no PVCs that match these requirements, the CDI import pod remains in a Pending state until an appropriate PVC is made available or until a timeout function kills the pod.

# CDI operations that require scratch space



# Defining a storage class

You can define the storage class that the Containerized Data Importer (CDI) uses when allocating scratch space by adding the spec.scratchSpaceStorageClass field to the HyperConverged custom resource (CR).

* Install the OpenShift CLI (oc).

1. Edit the HyperConverged CR by running the following command:

```terminal
$ oc edit hyperconverged kubevirt-hyperconverged -n openshift-cnv
```

2. Add the spec.scratchSpaceStorageClass field to the CR, setting the value to the name of a storage class that exists in the cluster:

```yaml
apiVersion: hco.kubevirt.io/v1beta1
kind: HyperConverged
metadata:
  name: kubevirt-hyperconverged
spec:
  scratchSpaceStorageClass: "<storage_class>" 1
```

If you do not specify a storage class, CDI uses the storage class of the persistent volume claim that is being populated.
3. Save and exit your default editor to update the HyperConverged CR.

# CDI supported operations matrix

This matrix shows the supported CDI operations for content types against endpoints, and which of these operations requires scratch space.



&#10003; Supported operation

&#9633; Unsupported operation

* Requires scratch space

** Requires scratch space if a custom certificate authority is required

# Additional resources

* Dynamic provisioning