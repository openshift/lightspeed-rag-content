# Troubleshooting

OpenShift Virtualization provides tools and logs for troubleshooting virtual machines (VMs) and virtualization components.

You can troubleshoot OpenShift Virtualization components by using the tools provided in the web console or by using the oc CLI tool.

# Events

{product-title} events are records of important life-cycle information and are useful for monitoring and troubleshooting virtual machine, namespace, and resource issues.

* VM events: Navigate to the Events tab of the VirtualMachine details page in the web console.
Namespace events:: You can view namespace events by running the following command:

```terminal
$ oc get events -n <namespace>
```


See the list of events for details about specific events.
Resource events:: You can view resource events by running the following command:

```terminal
$ oc describe <resource> <resource_name>
```


# Pod logs

You can view logs for OpenShift Virtualization pods by using the web console or the CLI. You can also view aggregated logs by using the LokiStack in the web console.

## Configuring OpenShift Virtualization pod log verbosity

You can configure the verbosity level of OpenShift Virtualization pod logs by editing the HyperConverged custom resource (CR).

* You have installed the OpenShift CLI (`oc`).

1. To set log verbosity for specific components, open the HyperConverged CR in your default text editor by running the following command:

```terminal
$ oc edit hyperconverged kubevirt-hyperconverged -n openshift-cnv
```

2. Set the log level for one or more components by editing the spec.logVerbosityConfig stanza. For example:

```yaml
apiVersion: hco.kubevirt.io/v1beta1
kind: HyperConverged
metadata:
  name: kubevirt-hyperconverged
spec:
  logVerbosityConfig:
    kubevirt:
      virtAPI: 5 1
      virtController: 4
      virtHandler: 3
      virtLauncher: 2
      virtOperator: 6
```

The log verbosity value must be an integer in the range 1â€“9, where a higher number indicates a more detailed log. In this example, the virtAPI component logs are exposed if their priority level is 5 or higher.
3. Apply your changes by saving and exiting the editor.

## Viewing virt-launcher pod logs with the web console

You can view the virt-launcher pod logs for a virtual machine by using the {product-title} web console.

1. Navigate to Virtualization -> VirtualMachines.
2. Select a virtual machine to open the VirtualMachine details page.
3. On the General tile, click the pod name to open the Pod details page.
4. Click the Logs tab to view the logs.

## Viewing OpenShift Virtualization pod logs with the CLI

You can view logs for the OpenShift Virtualization pods by using the oc CLI tool.

* You have installed the OpenShift CLI (`oc`).

1. View a list of pods in the OpenShift Virtualization namespace by running the following command:

```terminal
$ oc get pods -n openshift-cnv
```

Example output

```terminal
NAME                               READY   STATUS    RESTARTS   AGE
disks-images-provider-7gqbc        1/1     Running   0          32m
disks-images-provider-vg4kx        1/1     Running   0          32m
virt-api-57fcc4497b-7qfmc          1/1     Running   0          31m
virt-api-57fcc4497b-tx9nc          1/1     Running   0          31m
virt-controller-76c784655f-7fp6m   1/1     Running   0          30m
virt-controller-76c784655f-f4pbd   1/1     Running   0          30m
virt-handler-2m86x                 1/1     Running   0          30m
virt-handler-9qs6z                 1/1     Running   0          30m
virt-operator-7ccfdbf65f-q5snk     1/1     Running   0          32m
virt-operator-7ccfdbf65f-vllz8     1/1     Running   0          32m
```
2. View the pod log by running the following command:

```terminal
$ oc logs -n openshift-cnv <pod_name>
```


[NOTE]
----
If a pod fails to start, you can use the --previous option to view logs from the last attempt.
To monitor log output in real time, use the -f option.
----
Example output

```terminal
{"component":"virt-handler","level":"info","msg":"set verbosity to 2","pos":"virt-handler.go:453","timestamp":"2022-04-17T08:58:37.373695Z"}
{"component":"virt-handler","level":"info","msg":"set verbosity to 2","pos":"virt-handler.go:453","timestamp":"2022-04-17T08:58:37.373726Z"}
{"component":"virt-handler","level":"info","msg":"setting rate limiter to 5 QPS and 10 Burst","pos":"virt-handler.go:462","timestamp":"2022-04-17T08:58:37.373782Z"}
{"component":"virt-handler","level":"info","msg":"CPU features of a minimum baseline CPU model: map[apic:true clflush:true cmov:true cx16:true cx8:true de:true fpu:true fxsr:true lahf_lm:true lm:true mca:true mce:true mmx:true msr:true mtrr:true nx:true pae:true pat:true pge:true pni:true pse:true pse36:true sep:true sse:true sse2:true sse4.1:true ssse3:true syscall:true tsc:true]","pos":"cpu_plugin.go:96","timestamp":"2022-04-17T08:58:37.390221Z"}
{"component":"virt-handler","level":"warning","msg":"host model mode is expected to contain only one model","pos":"cpu_plugin.go:103","timestamp":"2022-04-17T08:58:37.390263Z"}
{"component":"virt-handler","level":"info","msg":"node-labeller is running","pos":"node_labeller.go:94","timestamp":"2022-04-17T08:58:37.391011Z"}
```

# Guest system logs

Viewing the boot logs of VM guests can help diagnose issues. You can configure access to guests' logs and view them by using either the {product-title} web console or the oc CLI.

This feature is disabled by default. If a VM does not explicitly have this setting enabled or disabled, it inherits the cluster-wide default setting.


[IMPORTANT]
----
If sensitive information such as credentials or other personally identifiable information (PII) is written to the serial console, it is logged with all other visible text. Red Hat recommends using SSH to send sensitive data instead of the serial console.
----

## Enabling default access to VM guest system logs with the web console

You can enable default access to VM guest system logs by using the web console.

1. From the side menu, click Virtualization -> Overview.
2. Click the Settings tab.
3. Click Cluster -> Guest management.
4. Set Enable guest system log access to on.

## Enabling default access to VM guest system logs with the CLI

You can enable default access to VM guest system logs by editing the HyperConverged custom resource (CR).

* You have installed the OpenShift CLI (`oc`).

1. Open the HyperConverged CR in your default editor by running the following command:

```terminal
$ oc edit hyperconverged kubevirt-hyperconverged -n openshift-cnv
```

2. Update the disableSerialConsoleLog value. For example:

```yaml
kind: HyperConverged
metadata:
  name: kubevirt-hyperconverged
spec:
  virtualMachineOptions:
    disableSerialConsoleLog: true 1
#...
```

Set the value of disableSerialConsoleLog to false if you want serial console access to be enabled on VMs by default.

## Setting guest system log access for a single VM with the web console

You can configure access to VM guest system logs for a single VM by using the web console. This setting takes precedence over the cluster-wide default configuration.

1. Click Virtualization -> VirtualMachines from the side menu.
2. Select a virtual machine to open the VirtualMachine details page.
3. Click the Configuration tab.
4. Set Guest system log access to on or off.

## Setting guest system log access for a single VM with the CLI

You can configure access to VM guest system logs for a single VM by editing the VirtualMachine CR. This setting takes precedence over the cluster-wide default configuration.

* You have installed the OpenShift CLI (`oc`).

1. Edit the virtual machine manifest by running the following command:

```terminal
$ oc edit vm <vm_name>
```

2. Update the value of the logSerialConsole field. For example:

```yaml
apiVersion: kubevirt.io/v1
kind: VirtualMachine
metadata:
  name: example-vm
spec:
  template:
    spec:
      domain:
        devices:
          logSerialConsole: true 1
#...
```

To enable access to the guest's serial console log, set the logSerialConsole value to true.
3. Apply the new configuration to the VM by running the following command:

```terminal
$ oc apply vm <vm_name>
```

4. Optional: If you edited a running VM, restart the VM to apply the new configuration. For example:

```terminal
$ virtctl restart <vm_name> -n <namespace>
```


## Viewing guest system logs with the web console

You can view the serial console logs of a virtual machine (VM) guest by using the web console.

* Guest system log access is enabled.

1. Click Virtualization -> VirtualMachines from the side menu.
2. Select a virtual machine to open the VirtualMachine details page.
3. Click the Diagnostics tab.
4. Click Guest system logs to load the serial console.

## Viewing guest system logs with the CLI

You can view the serial console logs of a VM guest by running the oc logs command.

* Guest system log access is enabled.
* You have installed the OpenShift CLI (`oc`).

* View the logs by running the following command, substituting your own values for <namespace> and <vm_name>:

```terminal
$ oc logs -n <namespace> -l kubevirt.io/domain=<vm_name> --tail=-1 -c guest-console-log
```


# Log aggregation

You can facilitate troubleshooting by aggregating and filtering logs.

## Viewing aggregated OpenShift Virtualization logs with the LokiStack

You can view aggregated logs for OpenShift Virtualization pods and containers by using the LokiStack in the web console.

* You deployed the LokiStack.

1. Navigate to Observe -> Logs in the web console.
2. Select application, for virt-launcher pod logs, or infrastructure, for OpenShift Virtualization control plane pods and containers, from the log type list.
3. Click Show Query to display the query field.
4. Enter the LogQL query in the query field and click Run Query to display the filtered logs.

## OpenShift Virtualization LogQL queries

You can view and filter aggregated logs for OpenShift Virtualization components by running Loki Query Language (LogQL) queries on the Observe &#8594; Logs page in the web console.

The default log type is infrastructure. The virt-launcher log type is application.

Optional: You can include or exclude strings or regular expressions by using line filter expressions.


[NOTE]
----
If the query matches a large number of logs, the query might time out.
----



You can filter log lines to include or exclude strings or regular expressions by using line filter expressions.




```text
{log_type=~".+"}|json
|kubernetes_labels_app_kubernetes_io_part_of="hyperconverged-cluster"
|= "error" != "timeout"
```


* LogQL log queries in the Grafana documentation

# Common error messages

The following error messages might appear in OpenShift Virtualization logs:

ErrImagePull or ImagePullBackOff:: Indicates an incorrect deployment configuration or problems with the images that are referenced.

# Troubleshooting data volumes

You can check the Conditions and Events sections of the DataVolume object to analyze and resolve issues.

## About data volume conditions and events

You can diagnose data volume issues by examining the output of the Conditions and Events sections
generated by the command:


```terminal
$ oc describe dv <DataVolume>
```


The Conditions section displays the following Types:

* Bound
* Running
* Ready

The Events section provides the following additional information:

* Type of event
* Reason for logging
* Source of the event
* Message containing additional diagnostic information.

The output from oc describe does not always contains Events.

An event is generated when the Status, Reason, or Message changes.
Both conditions and events react to changes in the state of the data volume.

For example, if you misspell the URL during an import operation, the import
generates a 404 message. That message change generates an event with a reason.
The output in the Conditions section is updated as well.

## Analyzing data volume conditions and events

By inspecting the Conditions and Events sections generated by the describe
command, you determine the state of the data volume
in relation to persistent volume claims (PVCs), and whether or
not an operation is actively running or completed. You might also receive messages
that offer specific details about the status of the data volume, and how
it came to be in its current state.

There are many different combinations of conditions. Each must be evaluated in its unique context.

Examples of various combinations follow.

* Bound - A successfully bound PVC displays in this example.

Note that the Type is Bound, so the Status is True.
If the PVC is not bound, the Status is False.

When the PVC is bound, an event is generated stating that the PVC is bound.
In this case, the Reason is Bound and Status is True.
The Message indicates which PVC owns the data volume.

Message, in the Events section, provides further details including how
long the PVC has been bound (Age) and by what resource (From),
in this case datavolume-controller:
Example output

```terminal
Status:
  Conditions:
    Last Heart Beat Time:  2020-07-15T03:58:24Z
    Last Transition Time:  2020-07-15T03:58:24Z
    Message:               PVC win10-rootdisk Bound
    Reason:                Bound
    Status:                True
    Type:                  Bound
...
  Events:
    Type     Reason     Age    From                   Message
    ----     ------     ----   ----                   -------
    Normal   Bound      24s    datavolume-controller  PVC example-dv Bound
```

* Running - In this case, note that Type is Running and Status is False,
indicating that an event has occurred that caused an attempted
operation to fail, changing the Status from True to False.

However, note that Reason is Completed and the Message field indicates
Import Complete.

In the Events section, the Reason and Message contain additional
troubleshooting information about the failed operation. In this example,
the Message displays an inability to connect due to a 404, listed in the
Events section&#8217;s first Warning.

From this information, you conclude that an import operation was running,
creating contention for other operations that are
attempting to access the data volume:
Example output

```terminal
Status:
  Conditions:
    Last Heart Beat Time:  2020-07-15T04:31:39Z
    Last Transition Time:  2020-07-15T04:31:39Z
    Message:               Import Complete
    Reason:                Completed
    Status:                False
    Type:                  Running
...
  Events:
    Type     Reason       Age                From                   Message
    ----     ------       ----               ----                   -------
    Warning  Error        12s (x2 over 14s)  datavolume-controller  Unable to connect
    to http data source: expected status code 200, got 404. Status: 404 Not Found
```

* Ready â€“ If Type is Ready and Status is True, then the data volume is ready
to be used, as in the following example. If the data volume is not ready to be
used, the Status is False:
Example output

```terminal
Status:
  Conditions:
    Last Heart Beat Time: 2020-07-15T04:31:39Z
    Last Transition Time:  2020-07-15T04:31:39Z
    Status:                True
    Type:                  Ready
```
