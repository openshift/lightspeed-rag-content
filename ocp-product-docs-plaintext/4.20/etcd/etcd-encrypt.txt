# Enabling etcd encryption



# About etcd encryption

By default, etcd data is not encrypted in {product-title}. You can enable etcd encryption for your cluster to provide an additional layer of data security. For example, it can help protect the loss of sensitive data if an etcd backup is exposed to the incorrect parties.

When you enable etcd encryption, the following OpenShift API server and Kubernetes API server resources are encrypted:

* Secrets
* Config maps
* Routes
* OAuth access tokens
* OAuth authorize tokens

When you enable etcd encryption, encryption keys are created. You must have these keys to restore from an etcd backup.


[NOTE]
----
Etcd encryption only encrypts values, not keys. Resource types, namespaces, and object names are unencrypted.
If etcd encryption is enabled during a backup, the static_kuberesources_<datetimestamp>.tar.gz file contains the encryption keys for the etcd snapshot. For security reasons, store this file separately from the etcd snapshot. However, this file is required to restore a previous state of etcd from the respective etcd snapshot.
----

# Supported encryption types

The following encryption types are supported for encrypting etcd data in {product-title}:

AES-CBC:: Uses AES-CBC with PKCS#7 padding and a 32 byte key to perform the encryption. The encryption keys are rotated weekly.
AES-GCM:: Uses AES-GCM with a random nonce and a 32 byte key to perform the encryption. The encryption keys are rotated weekly.

# Enabling etcd encryption

You can enable etcd encryption to encrypt sensitive resources in your cluster.


[WARNING]
----
Do not back up etcd resources until the initial encryption process is completed. If the encryption process is not completed, the backup might be only partially encrypted.
After you enable etcd encryption, several changes can occur:
* The etcd encryption might affect the memory consumption of a few resources.
* You might notice a transient affect on backup performance because the leader must serve the backup.
* A disk I/O can affect the node that receives the backup state.
----

You can encrypt the etcd database in either AES-GCM or AES-CBC encryption.


[NOTE]
----
To migrate your etcd database from one encryption type to the other, you can modify the API server's spec.encryption.type field. Migration of the etcd data to the new encryption type occurs automatically.
----

* Access to the cluster as a user with the cluster-admin role.

1. Modify the APIServer object:

```terminal
$ oc edit apiserver
```

2. Set the spec.encryption.type field to aesgcm or aescbc:

```yaml
spec:
  encryption:
    type: aesgcm 1
```

Set to aesgcm for AES-GCM encryption or aescbc for AES-CBC encryption.
3. Save the file to apply the changes.

The encryption process starts. It can take 20 minutes or longer for this process to complete, depending on the size of the etcd database.
4. Verify that etcd encryption was successful.
1. Review the Encrypted status condition for the OpenShift API server to verify that its resources were successfully encrypted:

```terminal
$ oc get openshiftapiserver -o=jsonpath='{range .items[0].status.conditions[?(@.type=="Encrypted")]}{.reason}{"\n"}{.message}{"\n"}'
```


The output shows EncryptionCompleted upon successful encryption:

```terminal
EncryptionCompleted
All resources encrypted: routes.route.openshift.io
```


If the output shows EncryptionInProgress, encryption is still in progress. Wait a few minutes and try again.
2. Review the Encrypted status condition for the Kubernetes API server to verify that its resources were successfully encrypted:

```terminal
$ oc get kubeapiserver -o=jsonpath='{range .items[0].status.conditions[?(@.type=="Encrypted")]}{.reason}{"\n"}{.message}{"\n"}'
```


The output shows EncryptionCompleted upon successful encryption:

```terminal
EncryptionCompleted
All resources encrypted: secrets, configmaps
```


If the output shows EncryptionInProgress, encryption is still in progress. Wait a few minutes and try again.
3. Review the Encrypted status condition for the OpenShift OAuth API server to verify that its resources were successfully encrypted:

```terminal
$ oc get authentication.operator.openshift.io -o=jsonpath='{range .items[0].status.conditions[?(@.type=="Encrypted")]}{.reason}{"\n"}{.message}{"\n"}'
```


The output shows EncryptionCompleted upon successful encryption:

```terminal
EncryptionCompleted
All resources encrypted: oauthaccesstokens.oauth.openshift.io, oauthauthorizetokens.oauth.openshift.io
```


If the output shows EncryptionInProgress, encryption is still in progress. Wait a few minutes and try again.

# Disabling etcd encryption

You can disable encryption of etcd data in your cluster.

* Access to the cluster as a user with the cluster-admin role.

1. Modify the APIServer object:

```terminal
$ oc edit apiserver
```

2. Set the encryption field type to identity:

```yaml
spec:
  encryption:
    type: identity 1
```

The identity type is the default value and means that no encryption is performed.
3. Save the file to apply the changes.

The decryption process starts. It can take 20 minutes or longer for this process to complete, depending on the size of your cluster.
4. Verify that etcd decryption was successful.
1. Review the Encrypted status condition for the OpenShift API server to verify that its resources were successfully decrypted:

```terminal
$ oc get openshiftapiserver -o=jsonpath='{range .items[0].status.conditions[?(@.type=="Encrypted")]}{.reason}{"\n"}{.message}{"\n"}'
```


The output shows DecryptionCompleted upon successful decryption:

```terminal
DecryptionCompleted
Encryption mode set to identity and everything is decrypted
```


If the output shows DecryptionInProgress, decryption is still in progress. Wait a few minutes and try again.
2. Review the Encrypted status condition for the Kubernetes API server to verify that its resources were successfully decrypted:

```terminal
$ oc get kubeapiserver -o=jsonpath='{range .items[0].status.conditions[?(@.type=="Encrypted")]}{.reason}{"\n"}{.message}{"\n"}'
```


The output shows DecryptionCompleted upon successful decryption:

```terminal
DecryptionCompleted
Encryption mode set to identity and everything is decrypted
```


If the output shows DecryptionInProgress, decryption is still in progress. Wait a few minutes and try again.
3. Review the Encrypted status condition for the OpenShift OAuth API server to verify that its resources were successfully decrypted:

```terminal
$ oc get authentication.operator.openshift.io -o=jsonpath='{range .items[0].status.conditions[?(@.type=="Encrypted")]}{.reason}{"\n"}{.message}{"\n"}'
```


The output shows DecryptionCompleted upon successful decryption:

```terminal
DecryptionCompleted
Encryption mode set to identity and everything is decrypted
```


If the output shows DecryptionInProgress, decryption is still in progress. Wait a few minutes and try again.