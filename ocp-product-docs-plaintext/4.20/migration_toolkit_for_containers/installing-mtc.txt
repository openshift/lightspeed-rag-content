# Installing the Migration Toolkit for Containers


You can install the Migration Toolkit for Containers (MTC) on {product-title} 4.

[NOTE]
----
To install MTC on {product-title} 3, see Installing the legacy Migration Toolkit for Containers Operator on {product-title} 3.
----
By default, the MTC web console and the Migration Controller pod run on the target cluster. You can configure the Migration Controller custom resource manifest to run the MTC web console and the Migration Controller pod on a remote cluster.
After you have installed MTC, you must configure an object storage to use as a replication repository.
To uninstall MTC, see Uninstalling MTC and deleting resources.

# Compatibility guidelines

You must install the Migration Toolkit for Containers (MTC) Operator that is compatible with your {product-title} version.

legacy platform:: {product-title} 4.5 and earlier.
modern platform:: {product-title} 4.6 and later.
legacy operator:: The MTC Operator designed for legacy platforms.
modern operator:: The MTC Operator designed for modern platforms.
control cluster:: The cluster that runs the MTC controller and GUI.
remote cluster:: A source or destination cluster for a migration that runs Velero. The Control Cluster communicates with Remote clusters via the Velero API to drive migrations.

You must use the compatible MTC version for migrating your {product-title} clusters. For the migration to succeed both your source cluster and the destination cluster must use the same version of MTC.

MTC 1.7 supports migrations from {product-title} 3.11 to 4.9.

MTC 1.8 only supports migrations from {product-title} 4.10 and later.



Edge cases exist in which network restrictions prevent modern clusters from connecting to other clusters involved in the migration. For example, when migrating from an {product-title} 3.11 cluster on premises to a modern {product-title} cluster in the cloud, where the modern cluster cannot connect to the {product-title} 3.11 cluster.

With MTC v.1.7.z, if one of the remote clusters is unable to communicate with the control cluster because of network restrictions, use the crane tunnel-api command.

With the stable MTC release, although you should always designate the most modern cluster as the control cluster, in this specific case it is possible to designate the legacy cluster as the control cluster and push workloads to the remote cluster.

# Installing the legacy Migration Toolkit for Containers Operator on {product-title} 4.2 to 4.5

You can install the legacy Migration Toolkit for Containers Operator manually on {product-title} versions 4.2 to 4.5.

* You must be logged in as a user with cluster-admin privileges on all clusters.
* You must have access to registry.redhat.io.
* You must have podman installed.

1. Log in to registry.redhat.io with your Red Hat Customer Portal credentials:

```terminal
$ podman login registry.redhat.io
```

2. Download the operator.yml file by entering the following command:

```terminal
podman cp $(podman create registry.redhat.io/rhmtc/openshift-migration-legacy-rhel8-operator:v1.7):/operator.yml ./
```

3. Download the controller.yml file by entering the following command:

```terminal
podman cp $(podman create registry.redhat.io/rhmtc/openshift-migration-legacy-rhel8-operator:v1.7):/controller.yml ./
```

4. Log in to your {product-title} source cluster.
5. Verify that the cluster can authenticate with registry.redhat.io:

```terminal
$ oc run test --image registry.redhat.io/ubi9 --command sleep infinity
```

6. Create the Migration Toolkit for Containers Operator object:

```terminal
$ oc create -f operator.yml
```

Example output

```terminal
namespace/openshift-migration created
rolebinding.rbac.authorization.k8s.io/system:deployers created
serviceaccount/migration-operator created
customresourcedefinition.apiextensions.k8s.io/migrationcontrollers.migration.openshift.io created
role.rbac.authorization.k8s.io/migration-operator created
rolebinding.rbac.authorization.k8s.io/migration-operator created
clusterrolebinding.rbac.authorization.k8s.io/migration-operator created
deployment.apps/migration-operator created
Error from server (AlreadyExists): error when creating "./operator.yml":
rolebindings.rbac.authorization.k8s.io "system:image-builders" already exists 1
Error from server (AlreadyExists): error when creating "./operator.yml":
rolebindings.rbac.authorization.k8s.io "system:image-pullers" already exists
```

You can ignore Error from server (AlreadyExists) messages. They are caused by the Migration Toolkit for Containers Operator creating resources for earlier versions of {product-title} 4 that are provided in later releases.
7. Create the MigrationController object:

```terminal
$ oc create -f controller.yml
```

8. Verify that the MTC pods are running:

```terminal
$ oc get pods -n openshift-migration
```


# Installing the Migration Toolkit for Containers Operator on {product-title} {product-version}

You install the Migration Toolkit for Containers Operator on {product-title} {product-version} by using the Operator Lifecycle Manager.

* You must be logged in as a user with cluster-admin privileges on all clusters.

1. In the {product-title} web console, click Operators -> OperatorHub.
2. Use the Filter by keyword field to find the Migration Toolkit for Containers Operator.
3. Select the Migration Toolkit for Containers Operator and click Install.
4. Click Install.

On the Installed Operators page, the Migration Toolkit for Containers Operator appears in the openshift-migration project with the status Succeeded.
5. Click Migration Toolkit for Containers Operator.
6. Under Provided APIs, locate the Migration Controller tile, and click Create Instance.
7. Click Create.
8. Click Workloads -> Pods to verify that the MTC pods are running.

# Proxy configuration

For {product-title} 4.1 and earlier versions, you must configure proxies in the MigrationController custom resource (CR) manifest after you install the Migration Toolkit for Containers Operator because these versions do not support a cluster-wide proxy object.

For {product-title} 4.2 to {product-version}, the MTC inherits the cluster-wide proxy settings. You can change the proxy parameters if you want to override the cluster-wide proxy settings.

## Direct volume migration

Direct Volume Migration (DVM) was introduced in MTC 1.4.2. DVM supports only one proxy. The source cluster cannot access the route of the target cluster if the target cluster is also behind a proxy.

If you want to perform a DVM from a source cluster behind a proxy, you must configure a TCP proxy that works at the transport layer and forwards the SSL connections transparently without decrypting and re-encrypting them with their own SSL certificates. A Stunnel proxy is an example of such a proxy.

### TCP proxy setup for DVM

You can set up a direct connection between the source and the target cluster through a TCP proxy and configure the stunnel_tcp_proxy variable in the MigrationController CR to use the proxy:


```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigrationController
metadata:
  name: migration-controller
  namespace: openshift-migration
spec:
  [...]
  stunnel_tcp_proxy: http://username:password@ip:port
```


Direct volume migration (DVM) supports only basic authentication for the proxy. Moreover, DVM works only from behind proxies that can tunnel a TCP connection transparently. HTTP/HTTPS proxies in man-in-the-middle mode do not work. The existing cluster-wide proxies might not support this behavior. As a result, the proxy settings for DVM are intentionally kept different from the usual proxy configuration in MTC.

### Why use a TCP proxy instead of an HTTP/HTTPS proxy?

You can enable DVM by running Rsync between the source and the target cluster over an OpenShift route.  Traffic is encrypted using Stunnel, a TCP proxy. The Stunnel running on the source cluster initiates a TLS connection with the target Stunnel and transfers data over an encrypted channel.

Cluster-wide HTTP/HTTPS proxies in OpenShift are usually configured in man-in-the-middle mode where they negotiate their own TLS session with the outside servers. However, this does not work with Stunnel. Stunnel requires that its TLS session be untouched by the proxy, essentially making the proxy a transparent tunnel which simply forwards the TCP connection as-is. Therefore, you must use a TCP proxy.

### Known issue

The migration Controller uses the SPDY protocol to execute commands within remote pods. If the remote cluster is behind a proxy or a firewall that does not support the SPDY protocol, the migration controller fails to execute remote commands. The migration fails with the error message Upgrade request required.
Workaround: Use a proxy that supports the SPDY protocol.

In addition to supporting the SPDY protocol, the proxy or firewall also must pass the Upgrade HTTP header to the API server. The client uses this header to open a websocket connection with the API server. If the Upgrade header is blocked by the proxy or firewall, the migration fails with the error message Upgrade request required.
Workaround: Ensure that the proxy forwards the Upgrade header.

## Tuning network policies for migrations

OpenShift supports restricting traffic to or from pods using NetworkPolicy or EgressFirewalls based on the network plugin used by the cluster. If any of the source namespaces involved in a migration use such mechanisms to restrict network traffic to pods, the restrictions might inadvertently stop traffic to Rsync pods during migration.

Rsync pods running on both the source and the target clusters must connect to each other over an OpenShift Route. Existing NetworkPolicy or EgressNetworkPolicy objects can be configured to automatically exempt Rsync pods from these traffic restrictions.

### NetworkPolicy configuration

#### Egress traffic from Rsync pods

You can use the unique labels of Rsync pods to allow egress traffic to pass from them if the NetworkPolicy configuration in the source or destination namespaces blocks this type of traffic. The following policy allows all egress traffic from Rsync pods in the namespace:


```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress-from-rsync-pods
spec:
  podSelector:
    matchLabels:
      owner: directvolumemigration
      app: directvolumemigration-rsync-transfer
  egress:
  - {}
  policyTypes:
  - Egress
```


#### Ingress traffic to Rsync pods


```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress-from-rsync-pods
spec:
  podSelector:
    matchLabels:
      owner: directvolumemigration
      app: directvolumemigration-rsync-transfer
  ingress:
  - {}
  policyTypes:
  - Ingress
```


### EgressNetworkPolicy configuration

The EgressNetworkPolicy object or Egress Firewalls are OpenShift constructs designed to block egress traffic leaving the cluster.

Unlike the NetworkPolicy object, the Egress Firewall works at a project level because it applies to all pods in the namespace. Therefore, the unique labels of Rsync pods do not exempt only Rsync pods from the restrictions. However, you can add the CIDR ranges of the source or target cluster to the Allow rule of the policy so that a direct connection can be setup between two clusters.

Based on which cluster the Egress Firewall is present in, you can add the CIDR range of the other cluster to allow egress traffic between the two:


```yaml
apiVersion: network.openshift.io/v1
kind: EgressNetworkPolicy
metadata:
  name: test-egress-policy
  namespace: <namespace>
spec:
  egress:
  - to:
      cidrSelector: <cidr_of_source_or_target_cluster>
    type: Deny
```


### Choosing alternate endpoints for data transfer

By default, DVM uses an {product-title} route as an endpoint to transfer PV data to destination clusters. You can choose another type of supported endpoint, if cluster topologies allow.

For each cluster, you can configure an endpoint by setting the rsync_endpoint_type variable on the appropriate destination cluster in your MigrationController CR:


```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigrationController
metadata:
  name: migration-controller
  namespace: openshift-migration
spec:
  [...]
  rsync_endpoint_type: [NodePort|ClusterIP|Route]
```


### Configuring supplemental groups for Rsync pods

When your PVCs use a shared storage, you can configure the access to that storage by adding supplemental groups to Rsync pod definitions in order for the pods to allow access:



The MigrationController CR can be updated to set values for these supplemental groups:


```yaml
spec:
  src_supplemental_groups: "1000,2000"
  target_supplemental_groups: "2000,3000"
```


## Configuring proxies

* You must be logged in as a user with cluster-admin privileges on all clusters.

1. Get the MigrationController CR manifest:

```terminal
$ oc get migrationcontroller <migration_controller> -n openshift-migration
```

2. Update the proxy parameters:

```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigrationController
metadata:
  name: <migration_controller>
  namespace: openshift-migration
...
spec:
  stunnel_tcp_proxy: http://<username>:<password>@<ip>:<port> 1
  noProxy: example.com 2
```

Stunnel proxy URL for direct volume migration.
Comma-separated list of destination domain names, domains, IP addresses, or other network CIDRs to exclude proxying.

Preface a domain with . to match subdomains only. For example, .y.com matches x.y.com, but not y.com. Use * to bypass proxy for all destinations.
If you scale up workers that are not included in the network defined by the networking.machineNetwork[].cidr field from the installation configuration, you must add them to this list to prevent connection issues.

This field is ignored if neither the httpProxy nor the httpsProxy field is set.
3. Save the manifest as migration-controller.yaml.
4. Apply the updated manifest:

```terminal
$ oc replace -f migration-controller.yaml -n openshift-migration
```


For more information, see Configuring the cluster-wide proxy.

## Running Rsync as either root or non-root

{OCP} environments have the PodSecurityAdmission controller enabled by default. This controller requires cluster administrators to enforce Pod Security Standards by means of namespace labels. All workloads in the cluster are expected to run one of the following Pod Security Standard levels: privileged, baseline or restricted. Every cluster has its own default policy set.

To guarantee successful data transfer in all environments, Migration Toolkit for Containers (MTC) 1.7.5 introduced changes in Rsync pods, including running Rsync pods as non-root user by default. This ensures that data transfer is possible even for workloads that do not necessarily require higher privileges. This change was made because it is best to run workloads with the lowest level of privileges possible.

### Manually overriding default non-root operation for data transfer

Although running Rsync pods as non-root user works in most cases, data transfer might fail when you run workloads as root user on the source side. MTC provides two ways to manually override default non-root operation for data transfer:

* Configure all migrations to run an Rsync pod as root on the destination cluster for all migrations.
* Run an Rsync pod as root on the destination cluster per migration.

In both cases, you must set the following labels on the source side of any namespaces that are running workloads with higher privileges before migration: enforce, audit, and warn.

To learn more about Pod Security Admission and setting values for labels, see Controlling pod security admission synchronization.

### Configuring the MigrationController CR as root or non-root for all migrations

By default, Rsync runs as non-root.

On the destination cluster, you can configure the MigrationController CR to run Rsync as root.

* Configure the MigrationController CR as follows:

```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigrationController
metadata:
  name: migration-controller
  namespace: openshift-migration
spec:
  [...]
  migration_rsync_privileged: true
```


This configuration will apply to all future migrations.

### Configuring the MigMigration CR as root or non-root per migration

On the destination cluster, you can configure the MigMigration CR to run Rsync as root or non-root, with the following non-root options:

* As a specific user ID (UID)
* As a specific group ID (GID)

1. To run Rsync as root, configure the MigMigration CR according to this example:

```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigMigration
metadata:
  name: migration-controller
  namespace: openshift-migration
spec:
  [...]
  runAsRoot: true
```

2. To run Rsync as a specific User ID (UID) or as a specific Group ID (GID), configure the MigMigration CR according to this example:

```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigMigration
metadata:
  name: migration-controller
  namespace: openshift-migration
spec:
  [...]
  runAsUser: 10010001
  runAsGroup: 3
```


# Configuring a replication repository

You must configure an object storage to use as a replication repository. The Migration Toolkit for Containers (MTC) copies data from the source cluster to the replication repository, and then from the replication repository to the target cluster.

MTC supports the file system and snapshot data copy methods for migrating data from the source cluster to the target cluster. Select a method that is suited for your environment and is supported by your storage provider.

MTC supports the following storage providers:

* Multicloud Object Gateway
* Amazon Web Services S3
* Google Cloud Platform
* Microsoft Azure Blob
* Generic S3 object storage, for example, Minio or Ceph S3

## Prerequisites

* All clusters must have uninterrupted network access to the replication repository.
* If you use a proxy server with an internally hosted replication repository, you must ensure that the proxy allows access to the replication repository.

## Retrieving Multicloud Object Gateway credentials

You must retrieve the Multicloud Object Gateway (MCG) credentials and S3 endpoint, which you need to configure MCG as a replication repository for the Migration Toolkit for Containers (MTC).

You must retrieve the Multicloud Object Gateway (MCG) credentials, which you need to create a Secret custom resource (CR) for MTC.


[NOTE]
----
Although the MCG Operator is deprecated, the MCG plugin is still available for OpenShift Data Foundation. To download the plugin, browse to Download Red Hat OpenShift Data Foundation and download the appropriate MCG plugin for your operating system.
----

* You must deploy OpenShift Data Foundation by using the appropriate Red Hat OpenShift Data Foundation deployment guide.

* Obtain the S3 endpoint, AWS_ACCESS_KEY_ID, and the AWS_SECRET_ACCESS_KEY value by running the oc describe command for the NooBaa CR.

You use these credentials to add MCG as a replication repository.

## Configuring Amazon Web Services

You configure Amazon Web Services (AWS) S3 object storage as a replication repository for the Migration Toolkit for Containers (MTC) .

* You must have the AWS CLI installed.
* The AWS S3 storage bucket must be accessible to the source and target clusters.
* If you are using the snapshot copy method:
* You must have access to EC2 Elastic Block Storage (EBS).
* The source and target clusters must be in the same region.
* The source and target clusters must have the same storage class.
* The storage class must be compatible with snapshots.

1. Set the BUCKET variable:

```terminal
$ BUCKET=<your_bucket>
```

2. Set the REGION variable:

```terminal
$ REGION=<your_region>
```

3. Create an AWS S3 bucket:

```terminal
$ aws s3api create-bucket \
    --bucket $BUCKET \
    --region $REGION \
    --create-bucket-configuration LocationConstraint=$REGION 1
```

us-east-1 does not support a LocationConstraint. If your region is us-east-1, omit --create-bucket-configuration LocationConstraint=$REGION.
4. Create an IAM user:

```terminal
$ aws iam create-user --user-name velero 1
```

If you want to use Velero to back up multiple clusters with multiple S3 buckets, create a unique user name for each cluster.
5. Create a velero-policy.json file:

```terminal
$ cat > velero-policy.json <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeVolumes",
                "ec2:DescribeSnapshots",
                "ec2:CreateTags",
                "ec2:CreateVolume",
                "ec2:CreateSnapshot",
                "ec2:DeleteSnapshot"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:PutObject",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts"
            ],
            "Resource": [
                "arn:aws:s3:::${BUCKET}/*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation",
                "s3:ListBucketMultipartUploads"
            ],
            "Resource": [
                "arn:aws:s3:::${BUCKET}"
            ]
        }
    ]
}
EOF
```

6. Attach the policies to give the velero user the minimum necessary permissions:

```terminal
$ aws iam put-user-policy \
  --user-name velero \
  --policy-name velero \
  --policy-document file://velero-policy.json
```

7. Create an access key for the velero user:

```terminal
$ aws iam create-access-key --user-name velero
```

Example output

```terminal
{
  "AccessKey": {
        "UserName": "velero",
        "Status": "Active",
        "CreateDate": "2017-07-31T22:24:41.576Z",
        "SecretAccessKey": <AWS_SECRET_ACCESS_KEY>,
        "AccessKeyId": <AWS_ACCESS_KEY_ID>
  }
}
```


Record the AWS_SECRET_ACCESS_KEY and the AWS_ACCESS_KEY_ID. You use the credentials to add AWS as a replication repository.

## Configuring Google Cloud Platform

You configure a Google Cloud Platform (GCP) storage bucket as a replication repository for the Migration Toolkit for Containers (MTC).

* You must have the gcloud and gsutil CLI tools installed. See the Google cloud documentation for details.
* The GCP storage bucket must be accessible to the source and target clusters.
* If you are using the snapshot copy method:
* The source and target clusters must be in the same region.
* The source and target clusters must have the same storage class.
* The storage class must be compatible with snapshots.

1. Log in to GCP:

```terminal
$ gcloud auth login
```

2. Set the BUCKET variable:

```terminal
$ BUCKET=<bucket> 1
```

Specify your bucket name.
3. Create the storage bucket:

```terminal
$ gsutil mb gs://$BUCKET/
```

4. Set the PROJECT_ID variable to your active project:

```terminal
$ PROJECT_ID=$(gcloud config get-value project)
```

5. Create a service account:

```terminal
$ gcloud iam service-accounts create velero \
    --display-name "Velero service account"
```

6. List your service accounts:

```terminal
$ gcloud iam service-accounts list
```

7. Set the SERVICE_ACCOUNT_EMAIL variable to match its email value:

```terminal
$ SERVICE_ACCOUNT_EMAIL=$(gcloud iam service-accounts list \
    --filter="displayName:Velero service account" \
    --format 'value(email)')
```

8. Attach the policies to give the velero user the minimum necessary permissions:

```terminal
$ ROLE_PERMISSIONS=(
    compute.disks.get
    compute.disks.create
    compute.disks.createSnapshot
    compute.snapshots.get
    compute.snapshots.create
    compute.snapshots.useReadOnly
    compute.snapshots.delete
    compute.zones.get
    storage.objects.create
    storage.objects.delete
    storage.objects.get
    storage.objects.list
    iam.serviceAccounts.signBlob
)
```

9. Create the velero.server custom role:

```terminal
$ gcloud iam roles create velero.server \
    --project $PROJECT_ID \
    --title "Velero Server" \
    --permissions "$(IFS=","; echo "${ROLE_PERMISSIONS[*]}")"
```

10. Add IAM policy binding to the project:

```terminal
$ gcloud projects add-iam-policy-binding $PROJECT_ID \
    --member serviceAccount:$SERVICE_ACCOUNT_EMAIL \
    --role projects/$PROJECT_ID/roles/velero.server
```

11. Update the IAM service account:

```terminal
$ gsutil iam ch serviceAccount:$SERVICE_ACCOUNT_EMAIL:objectAdmin gs://${BUCKET}
```

12. Save the IAM service account keys to the credentials-velero file in the current directory:

```terminal
$ gcloud iam service-accounts keys create credentials-velero \
    --iam-account $SERVICE_ACCOUNT_EMAIL
```


You use the credentials-velero file to add GCP as a replication repository.

## Configuring Microsoft Azure

You configure a Microsoft Azure Blob storage container as a replication repository for the Migration Toolkit for Containers (MTC).

* You must have the Azure CLI installed.
* The Azure Blob storage container must be accessible to the source and target clusters.
* If you are using the snapshot copy method:
* The source and target clusters must be in the same region.
* The source and target clusters must have the same storage class.
* The storage class must be compatible with snapshots.

1. Log in to Azure:

```terminal
$ az login
```

2. Set the AZURE_RESOURCE_GROUP variable:

```terminal
$ AZURE_RESOURCE_GROUP=Velero_Backups
```

3. Create an Azure resource group:

```terminal
$ az group create -n $AZURE_RESOURCE_GROUP --location CentralUS 1
```

Specify your location.
4. Set the AZURE_STORAGE_ACCOUNT_ID variable:

```terminal
$ AZURE_STORAGE_ACCOUNT_ID="velero$(uuidgen | cut -d '-' -f5 | tr '[A-Z]' '[a-z]')"
```

5. Create an Azure storage account:

```terminal
$ az storage account create \
    --name $AZURE_STORAGE_ACCOUNT_ID \
    --resource-group $AZURE_RESOURCE_GROUP \
    --sku Standard_GRS \
    --encryption-services blob \
    --https-only true \
    --kind BlobStorage \
    --access-tier Hot
```

6. Set the BLOB_CONTAINER variable:

```terminal
$ BLOB_CONTAINER=velero
```

7. Create an Azure Blob storage container:

```terminal
$ az storage container create \
  -n $BLOB_CONTAINER \
  --public-access off \
  --account-name $AZURE_STORAGE_ACCOUNT_ID
```

8. Create a service principal and credentials for velero:

```terminal
$ AZURE_SUBSCRIPTION_ID=`az account list --query '[?isDefault].id' -o tsv`
  AZURE_TENANT_ID=`az account list --query '[?isDefault].tenantId' -o tsv`
```

9. Create a service principal with the Contributor role, assigning a specific --role and --scopes:

```terminal
$ AZURE_CLIENT_SECRET=`az ad sp create-for-rbac --name "velero" \
                                                --role "Contributor" \
                                                --query 'password' -o tsv \
                                                --scopes /subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$AZURE_RESOURCE_GROUP`
```


The CLI generates a password for you. Ensure you capture the password.
10. After creating the service principal, obtain the client id.

```terminal
$ AZURE_CLIENT_ID=`az ad app credential list --id <your_app_id>`
```


[NOTE]
----
For this to be successful, you must know your Azure application ID.
----
11. Save the service principal credentials in the credentials-velero file:

```terminal
$ cat << EOF > ./credentials-velero
AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
AZURE_TENANT_ID=${AZURE_TENANT_ID}
AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
AZURE_RESOURCE_GROUP=${AZURE_RESOURCE_GROUP}
AZURE_CLOUD_NAME=AzurePublicCloud
EOF
```


You use the credentials-velero file to add Azure as a replication repository.

## Additional resources

* MTC workflow
* About data copy methods
* Adding a replication repository to the MTC web console

# Uninstalling MTC and deleting resources

You can uninstall the Migration Toolkit for Containers (MTC) and delete its resources to clean up the cluster.


[NOTE]
----
Deleting the velero CRDs removes Velero from the cluster.
----

* You must be logged in as a user with cluster-admin privileges.

1. Delete the MigrationController custom resource (CR) on all clusters:

```terminal
$ oc delete migrationcontroller <migration_controller>
```

2. Uninstall the Migration Toolkit for Containers Operator on {product-title} 4 by using the Operator Lifecycle Manager.
3. Delete cluster-scoped resources on all clusters by running the following commands:
* migration custom resource definitions (CRDs):

```terminal
$ oc delete $(oc get crds -o name | grep 'migration.openshift.io')
```

* velero CRDs:

```terminal
$ oc delete $(oc get crds -o name | grep 'velero')
```

* migration cluster roles:

```terminal
$ oc delete $(oc get clusterroles -o name | grep 'migration.openshift.io')
```

* migration-operator cluster role:

```terminal
$ oc delete clusterrole migration-operator
```

* velero cluster roles:

```terminal
$ oc delete $(oc get clusterroles -o name | grep 'velero')
```

* migration cluster role bindings:

```terminal
$ oc delete $(oc get clusterrolebindings -o name | grep 'migration.openshift.io')
```

* migration-operator cluster role bindings:

```terminal
$ oc delete clusterrolebindings migration-operator
```

* velero cluster role bindings:

```terminal
$ oc delete $(oc get clusterrolebindings -o name | grep 'velero')
```
