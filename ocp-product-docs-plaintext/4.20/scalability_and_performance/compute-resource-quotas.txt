# Using quotas and limit ranges


A resource quota, defined by a ResourceQuota object, provides constraints that limit aggregate resource consumption per project. It can limit the quantity of objects that can be created in a project by type, as well as the total amount of compute resources and storage that may be consumed by resources in that project.
Using quotas and limit ranges, cluster administrators can set constraints to limit the number of objects or amount of compute resources that are used in your project. This helps cluster administrators better manage and allocate resources across all projects, and ensure that no projects are using more than is appropriate for the cluster size.

[IMPORTANT]
----
Quotas are set by cluster administrators and are scoped to a given project. {product-title} project owners can change quotas for their project, but not limit ranges. {product-title} users cannot modify quotas or limit ranges.
----
The following sections help you understand how to check on your quota and limit range settings, what sorts of things they can constrain, and how you can request or limit compute resources in your own pods and containers.

# Resources managed by quota

A resource quota, defined by a ResourceQuota object, provides constraints that limit aggregate resource consumption per project. It can limit the quantity
of objects that can be created in a project by type, as well as the total amount of compute resources and storage that may be consumed by resources in that project.

The following describes the set of compute resources and object types that may be managed by a quota.


[NOTE]
----
A pod is in a terminal state if status.phase is Failed or Succeeded.
----







You can configure an object count quota for these standard namespaced resource types using the count/<resource>.<group> syntax.


```terminal
$ oc create quota <name> --hard=count/<resource>.<group>=<quota> 1
```


<resource> is the name of the resource, and <group> is the API group, if applicable.
Use the kubectl api-resources command for a list of resources and their associated API groups.

## Setting resource quota for extended resources

Overcommitment of resources is not allowed for extended resources, so you must specify requests and limits for the same extended resource in a quota. Currently, only quota items with the prefix requests. are allowed for extended resources. The following is an example scenario of how to set resource quota for the GPU resource nvidia.com/gpu.

1. To determine how many GPUs are available on a node in your cluster, use the following command:

```terminal
$ oc describe node ip-172-31-27-209.us-west-2.compute.internal | egrep 'Capacity|Allocatable|gpu'
```

Example output

```terminal
                    openshift.com/gpu-accelerator=true
Capacity:
 nvidia.com/gpu:  2
Allocatable:
 nvidia.com/gpu:  2
 nvidia.com/gpu:  0           0
```


In this example, 2 GPUs are available.
2. Use this command to set a quota in the namespace nvidia. In this example, the quota is 1:

```terminal
$ cat gpu-quota.yaml
```

Example output

```terminal
apiVersion: v1
kind: ResourceQuota
metadata:
  name: gpu-quota
  namespace: nvidia
spec:
  hard:
    requests.nvidia.com/gpu: 1
```

3. Create the quota with the following command:

```terminal
$ oc create -f gpu-quota.yaml
```

Example output

```terminal
resourcequota/gpu-quota created
```

4. Verify that the namespace has the correct quota set using the following command:

```terminal
$ oc describe quota gpu-quota -n nvidia
```

Example output

```terminal
Name:                    gpu-quota
Namespace:               nvidia
Resource                 Used  Hard
--------                 ----  ----
requests.nvidia.com/gpu  0     1
```

5. Run a pod that asks for a single GPU with the following command:

```terminal
$ oc create pod gpu-pod.yaml
```

Example output

```terminal
apiVersion: v1
kind: Pod
metadata:
  generateName: gpu-pod-s46h7
  namespace: nvidia
spec:
  restartPolicy: OnFailure
  containers:
  - name: rhel7-gpu-pod
    image: rhel7
    env:
      - name: NVIDIA_VISIBLE_DEVICES
        value: all
      - name: NVIDIA_DRIVER_CAPABILITIES
        value: "compute,utility"
      - name: NVIDIA_REQUIRE_CUDA
        value: "cuda>=5.0"

    command: ["sleep"]
    args: ["infinity"]

    resources:
      limits:
        nvidia.com/gpu: 1
```

6. Verify that the pod is running bwith the following command:

```terminal
$ oc get pods
```

Example output

```terminal
NAME              READY     STATUS      RESTARTS   AGE
gpu-pod-s46h7     1/1       Running     0          1m
```

7. Verify that the quota Used counter is correct by running the following command:

```terminal
$ oc describe quota gpu-quota -n nvidia
```

Example output

```terminal
Name:                    gpu-quota
Namespace:               nvidia
Resource                 Used  Hard
--------                 ----  ----
requests.nvidia.com/gpu  1     1
```

8. Using the following command, attempt to create a second GPU pod in the nvidia namespace. This is technically available on the node because it has 2 GPUs:

```terminal
$ oc create -f gpu-pod.yaml
```

Example output

```terminal
Error from server (Forbidden): error when creating "gpu-pod.yaml": pods "gpu-pod-f7z2w" is forbidden: exceeded quota: gpu-quota, requested: requests.nvidia.com/gpu=1, used: requests.nvidia.com/gpu=1, limited: requests.nvidia.com/gpu=1
```


This Forbidden error message occurs because you have a quota of 1 GPU and this pod tried to allocate a second GPU, which exceeds its quota.

## Quota scopes

Each quota can have an associated set of scopes. A quota only measures usage for a resource if it matches the intersection of enumerated scopes.

Adding a scope to a quota restricts the set of resources to which that quota can apply. Specifying a resource outside of the allowed set results in a validation error.



A BestEffort scope restricts a quota to limiting the following resources:

* pods

A Terminating, NotTerminating, and NotBestEffort scope restricts a quota to tracking the following resources:

* pods
* memory
* requests.memory
* limits.memory
* cpu
* requests.cpu
* limits.cpu
* ephemeral-storage
* requests.ephemeral-storage
* limits.ephemeral-storage


[NOTE]
----
Ephemeral storage requests and limits apply only if you enabled the ephemeral storage technology preview. This feature is disabled by default.
----

See Resources managed by quotas for more on compute resources.

See Quality of Service Classes for more on committing compute resources.

# Admin quota usage

## Quota enforcement

After a resource quota for a project is first created, the project restricts the ability to create any new resources that can violate a quota constraint until it has calculated updated usage statistics.

After a quota is created and usage statistics are updated, the project accepts the creation of new content. When you create or modify resources, your quota usage is incremented immediately upon the request to create or modify the resource.

When you delete a resource, your quota use is decremented during the next full recalculation of quota statistics for the project.

A configurable amount of time determines how long it takes to reduce quota usage statistics to their current observed system value.

If project modifications exceed a quota usage limit, the server denies the action, and an appropriate error message is returned to the user explaining the
quota constraint violated, and what their currently observed usage stats are in the system.

## Requests compared to limits

When allocating compute resources by quota, each container can specify a request and a limit value each for CPU, memory, and ephemeral storage. Quotas can restrict any of these values.

If the quota has a value specified for requests.cpu or requests.memory, then it requires that every incoming container make an explicit request for those resources. If the quota has a value specified for limits.cpu or limits.memory, then it requires that every incoming container specify an explicit limit for those resources.

## Sample resource quota definitions


```yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: core-object-counts
spec:
  hard:
    configmaps: "10" 1
    persistentvolumeclaims: "4" 2
    replicationcontrollers: "20" 3
    secrets: "10" 4
    services: "10" 5
```


The total number of ConfigMap objects that can exist in the project.
The total number of persistent volume claims (PVCs) that can exist in the project.
The total number of replication controllers that can exist in the project.
The total number of secrets that can exist in the project.
The total number of services that can exist in the project.


```yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: openshift-object-counts
spec:
  hard:
    openshift.io/imagestreams: "10" 1
```


The total number of image streams that can exist in the project.


```yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-resources
spec:
  hard:
    pods: "4" 1
    requests.cpu: "1" 2
    requests.memory: 1Gi 3
    requests.ephemeral-storage: 2Gi 4
    limits.cpu: "2" 5
    limits.memory: 2Gi 6
    limits.ephemeral-storage: 4Gi 7
```


The total number of pods in a non-terminal state that can exist in the project.
Across all pods in a non-terminal state, the sum of CPU requests cannot exceed 1 core.
Across all pods in a non-terminal state, the sum of memory requests cannot exceed 1Gi.
Across all pods in a non-terminal state, the sum of ephemeral storage requests cannot exceed 2Gi.
Across all pods in a non-terminal state, the sum of CPU limits cannot exceed 2 cores.
Across all pods in a non-terminal state, the sum of memory limits cannot exceed 2Gi.
Across all pods in a non-terminal state, the sum of ephemeral storage limits cannot exceed 4Gi.


```yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: besteffort
spec:
  hard:
    pods: "1" 1
  scopes:
  - BestEffort 2
```


The total number of pods in a non-terminal state with BestEffort quality of service that can exist in the project.
Restricts the quota to only matching pods that have BestEffort quality of service for either memory or CPU.


```yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-resources-long-running
spec:
  hard:
    pods: "4" 1
    limits.cpu: "4" 2
    limits.memory: "2Gi" 3
    limits.ephemeral-storage: "4Gi" 4
  scopes:
  - NotTerminating 5
```


The total number of pods in a non-terminal state.
Across all pods in a non-terminal state, the sum of CPU limits cannot exceed this value.
Across all pods in a non-terminal state, the sum of memory limits cannot exceed this value.
Across all pods in a non-terminal state, the sum of ephemeral storage limits cannot exceed this value.
Restricts the quota to only matching pods where spec.activeDeadlineSeconds is set to nil. Build pods will fall under NotTerminating unless the RestartNever policy is applied.


```yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-resources-time-bound
spec:
  hard:
    pods: "2" 1
    limits.cpu: "1" 2
    limits.memory: "1Gi" 3
    limits.ephemeral-storage: "1Gi" 4
  scopes:
  - Terminating 5
```


The total number of pods in a non-terminal state.
Across all pods in a non-terminal state, the sum of CPU limits cannot exceed this value.
Across all pods in a non-terminal state, the sum of memory limits cannot exceed this value.
Across all pods in a non-terminal state, the sum of ephemeral storage limits cannot exceed this value.
Restricts the quota to only matching pods where spec.activeDeadlineSeconds >=0.  For example, this quota would charge for build pods, but not long running pods such as a web server or database.


```yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: storage-consumption
spec:
  hard:
    persistentvolumeclaims: "10" 1
    requests.storage: "50Gi" 2
    gold.storageclass.storage.k8s.io/requests.storage: "10Gi" 3
    silver.storageclass.storage.k8s.io/requests.storage: "20Gi" 4
    silver.storageclass.storage.k8s.io/persistentvolumeclaims: "5" 5
    bronze.storageclass.storage.k8s.io/requests.storage: "0" 6
    bronze.storageclass.storage.k8s.io/persistentvolumeclaims: "0" 7
```


The total number of persistent volume claims in a project
Across all persistent volume claims in a project, the sum of storage requested cannot exceed this value.
Across all persistent volume claims in a project, the sum of storage requested in the gold storage class cannot exceed this value.
Across all persistent volume claims in a project, the sum of storage requested in the silver storage class cannot exceed this value.
Across all persistent volume claims in a project, the total number of claims in the silver storage class cannot exceed this value.
Across all persistent volume claims in a project, the sum of storage requested in the bronze storage class cannot exceed this value. When this is set to 0, it means bronze storage class cannot request storage.
Across all persistent volume claims in a project, the sum of storage requested in the bronze storage class cannot exceed this value. When this is set to 0, it means bronze storage class cannot create claims.

## Creating a quota

To create a quota, first define the quota in a file. Then use that file to apply it to a project. See the Additional resources section for a link describing this.


```terminal
$ oc create -f <resource_quota_definition> [-n <project_name>]
```


Here is an example using the core-object-counts.yaml resource quota definition and the demoproject project name:


```terminal
$ oc create -f core-object-counts.yaml -n demoproject
```


## Creating object count quotas

You can create an object count quota for all {product-title} standard namespaced resource types, such as BuildConfig, and DeploymentConfig. An object quota count places a defined quota on all standard namespaced resource types.

When using a resource quota, an object is charged against the quota if it exists in server storage. These types of quotas are useful to protect against exhaustion of storage resources.

To configure an object count quota for a resource, run the following command:


```terminal
$ oc create quota <name> --hard=count/<resource>.<group>=<quota>,count/<resource>.<group>=<quota>
```



```terminal
$ oc create quota test --hard=count/deployments.extensions=2,count/replicasets.extensions=4,count/pods=3,count/secrets=4
resourcequota "test" created

$ oc describe quota test
Name:                         test
Namespace:                    quota
Resource                      Used  Hard
--------                      ----  ----
count/deployments.extensions  0     2
count/pods                    0     3
count/replicasets.extensions  0     4
count/secrets                 0     4
```


This example limits the listed resources to the hard limit in each project in the cluster.

## Viewing a quota

You can view usage statistics related to any hard limits defined in a project&#8217;s quota by navigating in the web console to the project&#8217;s Quota page.

You can also use the CLI to view quota details:

1. First, get the list of quotas defined in the project. For example, for a project called demoproject:

```terminal
$ oc get quota -n demoproject
NAME                AGE
besteffort          11m
compute-resources   2m
core-object-counts  29m
```

2. Describe the quota you are interested in, for example the core-object-counts quota:

```terminal
$ oc describe quota core-object-counts -n demoproject
Name:			core-object-counts
Namespace:		demoproject
Resource		Used	Hard
--------		----	----
configmaps		3	10
persistentvolumeclaims	0	4
replicationcontrollers	3	20
secrets			9	10
services		2	10
```


For examples of how to create the file needed to set quotas, see
Resources managed by quotas.

A description of how to allocate compute resources managed by quota.

For information on managing limits and quota on project resources, see
Working with projects.

If a quota has been defined for your project, see Understanding deployments for considerations in cluster configurations.

# Setting limit ranges

A limit range, defined by a LimitRange object, defines compute resource constraints at the pod, container, image, image stream, and persistent volume claim level. The limit range specifies the amount of resources that a pod, container, image, image stream, or persistent volume claim can consume.

All requests to create and modify resources are evaluated against each LimitRange object in the project. If the resource violates any of the enumerated constraints, the resource is rejected. If the resource does not set an explicit value, and if the constraint supports a default value, the default value is applied to the resource.

For CPU and memory limits, if you specify a maximum value but do not specify a minimum limit, the resource can consume more CPU and memory resources than the maximum value.


```yaml
apiVersion: "v1"
kind: "LimitRange"
metadata:
  name: "core-resource-limits" 1
spec:
  limits:
    - type: "Pod"
      max:
        cpu: "2" 2
        memory: "1Gi" 3
      min:
        cpu: "200m" 4
        memory: "6Mi" 5
    - type: "Container"
      max:
        cpu: "2" 6
        memory: "1Gi" 7
      min:
        cpu: "100m" 8
        memory: "4Mi" 9
      default:
        cpu: "300m" 10
        memory: "200Mi" 11
      defaultRequest:
        cpu: "200m" 12
        memory: "100Mi" 13
      maxLimitRequestRatio:
        cpu: "10" 14
```


The name of the limit range object.
The maximum amount of CPU that a pod can request on a node across all containers.
The maximum amount of memory that a pod can request on a node across all containers.
The minimum amount of CPU that a pod can request on a node across all containers. If you do not set a min value or you set min to 0, the result is no limit and the pod can consume more than the max CPU value.
The minimum amount of memory that a pod can request on a node across all containers. If you do not set a min value or you set min to 0, the result is no limit and the pod can consume more than the max memory value.
The maximum amount of CPU that a single container in a pod can request.
The maximum amount of memory that a single container in a pod can request.
The minimum amount of CPU that a single container in a pod can request. If you do not set a min value or you set min to 0, the result is no limit and the pod can consume more than the max CPU value.
The minimum amount of memory that a single container in a pod can request. If you do not set a min value or you set min to 0, the result is no limit and the pod can consume more than the max memory value.
The default CPU limit for a container if you do not specify a limit in the pod specification.
The default memory limit for a container if you do not specify a limit in the pod specification.
The default CPU request for a container if you do not specify a request in the pod specification.
The default memory request for a container if you do not specify a request in the pod specification.
The maximum limit-to-request ratio for a container.


```yaml
apiVersion: "v1"
kind: "LimitRange"
metadata:
  name: "openshift-resource-limits"
spec:
  limits:
    - type: openshift.io/Image
      max:
        storage: 1Gi 1
    - type: openshift.io/ImageStream
      max:
        openshift.io/image-tags: 20 2
        openshift.io/images: 30 3
    - type: "Pod"
      max:
        cpu: "2" 4
        memory: "1Gi" 5
        ephemeral-storage: "1Gi" 6
      min:
        cpu: "1" 7
        memory: "1Gi" 8
```


The maximum size of an image that can be pushed to an internal registry.
The maximum number of unique image tags as defined in the specification for the image stream.
The maximum number of unique image references as defined in the specification for the image stream status.
The maximum amount of CPU that a pod can request on a node across all containers.
The maximum amount of memory that a pod can request on a node across all containers.
The maximum amount of ephemeral storage that a pod can request on a node across all containers.
The minimum amount of CPU that a pod can request on a node across all containers. See the Supported Constraints table for important information.
The minimum amount of memory that a pod can request on a node across all containers. If you do not set a min value or you set min to 0, the result` is no limit and the pod can consume more than the max memory value.

You can specify both core and {product-title} resources in one limit range object.

## Container limits

Supported Resources:

* CPU
* Memory

Per container, the following must hold true if specified:

Container



Supported Defaults:

Default[<resource>]:: Defaults container.resources.limit[<resource>] to specified value if none.
Default Requests[<resource>]:: Defaults container.resources.requests[<resource>] to specified value if none.

## Pod limits

Supported Resources:

* CPU
* Memory

Supported Constraints:

Across all containers in a pod, the following must hold true:



## Image limits

Supported Resources:

* Storage

Resource type name:

* openshift.io/Image

Per image, the following must hold true if specified:




[NOTE]
----
To prevent blobs that exceed the limit from being uploaded to the registry, the registry must be configured to enforce quota. The REGISTRY_MIDDLEWARE_REPOSITORY_OPENSHIFT_ENFORCEQUOTA environment variable must be set to true. By default, the environment variable is set to true for new deployments.
----

## Image stream limits

Supported Resources:

* openshift.io/image-tags
* openshift.io/images

Resource type name:

* openshift.io/ImageStream

Per image stream, the following must hold true if specified:



## Counting of image references

The openshift.io/image-tags resource represents unique stream limits. Possible references are an ImageStreamTag, an ImageStreamImage, or a DockerImage. Tags can be created by using the oc tag and oc import-image commands or by using image streams. No distinction is made between internal and external references. However, each unique reference that is tagged in an image stream specification is counted just once. It does not restrict pushes to an internal container image registry in any way, but is useful for tag restriction.

The openshift.io/images resource represents unique image names that are recorded in image stream status. It helps to restrict several images that can be pushed to the internal registry. Internal and external references are not distinguished.

## PersistentVolumeClaim limits

Supported Resources:

* Storage

Supported Constraints:

Across all persistent volume claims in a project, the following must hold true:




```json
{
  "apiVersion": "v1",
  "kind": "LimitRange",
  "metadata": {
    "name": "pvcs" 1
  },
  "spec": {
    "limits": [{
        "type": "PersistentVolumeClaim",
        "min": {
          "storage": "2Gi" 2
        },
        "max": {
          "storage": "50Gi" 3
        }
      }
    ]
  }
}
```


The name of the limit range object.
The minimum amount of storage that can be requested in a persistent volume claim.
The maximum amount of storage that can be requested in a persistent volume claim.

For information on stream limits, see managing images streams.

For information on stream limits.

For more information on compute resource constraints.

For more information on how CPU and memory are measured, see Recommended control plane practices.

You can specify limits and requests for ephemeral storage. For more information on this feature, see Understanding ephemeral storage.

# Limit range operations

## Creating a limit range

Shown here is an example procedure to follow for creating a limit range.

1. Create the object:

```terminal
$ oc create -f <limit_range_file> -n <project>
```


## View the limit

You can view any limit ranges that are defined in a project by navigating in the web console to the Quota page for the project. You can also use the CLI to view limit range details by performing the following steps:

1. Get the list of limit range objects that are defined in the project. For example, a project called demoproject:

```terminal
$ oc get limits -n demoproject
```

Example Output

```terminal
NAME              AGE
resource-limits   6d
```

2. Describe the limit range. For example, for a limit range called resource-limits:

```terminal
$ oc describe limits resource-limits -n demoproject
```

Example Output

```terminal
Name:                           resource-limits
Namespace:                      demoproject
Type                            Resource                Min     Max     Default Request Default Limit   Max Limit/Request Ratio
----                            --------                ---     ---     --------------- -------------   -----------------------
Pod                             cpu                     200m    2       -               -               -
Pod                             memory                  6Mi     1Gi     -               -               -
Container                       cpu                     100m    2       200m            300m            10
Container                       memory                  4Mi     1Gi     100Mi           200Mi           -
openshift.io/Image              storage                 -       1Gi     -               -               -
openshift.io/ImageStream        openshift.io/image      -       12      -               -               -
openshift.io/ImageStream        openshift.io/image-tags -       10      -               -               -
```


## Deleting a limit range

To remove a limit range, run the following command:

+


```terminal
$ oc delete limits <limit_name>
```


S

For information about enforcing different limits on the number of projects that your users can create, managing limits, and quota on project resources, see Resource quotas per projects.