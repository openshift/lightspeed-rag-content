# Monitoring API reference


The resource types are MonitoringStack and ThanosQuerier.

# MonitoringStack

MonitoringStack is the Schema for the monitoringstacks API.



# MonitoringStack.spec

MonitoringStackSpec is the specification for the desired MonitoringStack object.



# MonitoringStack.spec.alertmanagerConfig

Define Alertmanager config.



# MonitoringStack.spec.alertmanagerConfig.webTLSConfig

Configure TLS options for the Alertmanager web server.



# MonitoringStack.spec.alertmanagerConfig.webTLSConfig.certificate

Reference to the TLS public certificate for the web server.



# MonitoringStack.spec.alertmanagerConfig.webTLSConfig.certificateAuthority

Reference to the root Certificate Authority used to verify the web server&#8217;s certificate.



# MonitoringStack.spec.alertmanagerConfig.webTLSConfig.privateKey

Reference to the TLS private key for the web server.



# MonitoringStack.spec.namespaceSelector

Namespace selector for MonitoringStack resources.

* To monitor everything, set to empty map selector. For example, namespaceSelector: {}.
* To monitor resources in the namespace where the MonitoringStack instance was created, set to null. For example, namespaceSelector:.



# MonitoringStack.spec.namespaceSelector.matchExpressions[index]

A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.



# MonitoringStack.spec.prometheusConfig

Define Prometheus configuration.



# MonitoringStack.spec.prometheusConfig.persistentVolumeClaim

Define persistent volume claim for Prometheus.



# MonitoringStack.spec.prometheusConfig.persistentVolumeClaim.dataSource

dataSource field can be used to specify either:

* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
* An existing PVC (PersistentVolumeClaim)

If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.



# MonitoringStack.spec.prometheusConfig.persistentVolumeClaim.dataSourceRef

dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.

This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn&#8217;t specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn&#8217;t set to the same value and must be empty.

There are three important differences between dataSource and dataSourceRef:

* While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects.
* While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified.
* While dataSource only allows local objects, dataSourceRef allows objects in any namespaces.

Beta: Using this field requires the AnyVolumeDataSource feature gate to be enabled.

Alpha: Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.



# MonitoringStack.spec.prometheusConfig.persistentVolumeClaim.resources

resources represents the minimum resources the volume should have.

If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than the previous value but must still be higher than the capacity recorded in the status field of the claim.

For more information, see Kubernetes Docs



# MonitoringStack.spec.prometheusConfig.persistentVolumeClaim.selector

selector is a label query over volumes to consider for binding.



# MonitoringStack.spec.prometheusConfig.persistentVolumeClaim.selector.matchExpressions[index]

A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index]

RemoteWriteSpec defines the configuration to write samples from Prometheus to a remote endpoint.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].authorization

Authorization section for the URL.

* It requires Prometheus >= v2.26.0.
* Cannot be set at the same time as sigv4, basicAuth, oauth2, or azureAd.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].authorization.credentials

Selects a key of a Secret in the namespace that contains the credentials for authentication.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].azureAd

AzureAD for the URL.

* It requires Prometheus >= v2.45.0.
* Cannot be set at the same time as authorization, basicAuth, oauth2, or sigv4.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].azureAd.managedIdentity

ManagedIdentity defines the Azure User-assigned Managed identity.

* Cannot be set at the same time as oauth or sdk.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].azureAd.oauth

OAuth defines the oauth config that is being used to authenticate.

* Cannot be set at the same time as managedIdentity or sdk.
* It requires Prometheus >= v2.48.0.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].azureAd.oauth.clientSecret

clientSecret specifies a key of a Secret containing the client secret of the Azure Active Directory application that is being used to authenticate.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].azureAd.sdk

SDK defines the Azure SDK config that is being used to authenticate.

For more information, see Azure SDK Authentication.

* Cannot be set at the same time as oauth or managedIdentity.
* It requires Prometheus >= 2.52.0.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].basicAuth

BasicAuth configuration for the URL.

* Cannot be set at the same time as sigv4, authorization, oauth2, or azureAd.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].basicAuth.password

password specifies a key of a Secret containing the password for authentication.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].basicAuth.username

username specifies a key of a Secret containing the username for authentication.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].metadataConfig

MetadataConfig configures the sending of series metadata to the remote storage.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2

OAuth2 configuration for the URL.

* It requires Prometheus >= v2.27.0.
* Cannot be set at the same time as sigv4, authorization, basicAuth, or azureAd.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.clientId

clientId specifies a key of a Secret or ConfigMap containing the OAuth2 client&#8217;s ID.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.clientId.configMap

ConfigMap containing data to use for the targets.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.clientId.secret

Secret containing data to use for the targets.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.clientSecret

clientSecret specifies a key of a Secret containing the OAuth2 client&#8217;s secret.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.proxyConnectHeader[key][index]

SecretKeySelector selects a key of a Secret.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.tlsConfig

TLS configuration to use when connecting to the OAuth2 server.

* It requires Prometheus >= v2.43.0.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.tlsConfig.ca

Certificate authority used when verifying server certificates.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.tlsConfig.ca.configMap

ConfigMap containing data to use for the targets.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.tlsConfig.ca.secret

Secret containing data to use for the targets.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.tlsConfig.cert

Client certificate to present when doing client-authentication.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.tlsConfig.cert.configMap

ConfigMap containing data to use for the targets.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.tlsConfig.cert.secret

Secret containing data to use for the targets.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].oauth2.tlsConfig.keySecret

Secret containing the client key file for the targets.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].proxyConnectHeader[key][index]

SecretKeySelector selects a key of a Secret.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].queueConfig

QueueConfig allows tuning of the remote write queue parameters.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].sigv4

Sigv4 allows to configures AWS&#8217;s Signature Verification 4 for the URL.

* It requires Prometheus >= v2.26.0.
* Cannot be set at the same time as authorization, basicAuth, oauth2, or azureAd.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].sigv4.accessKey

AccessKey is the AWS API key. If not specified, the environment variable AWS_ACCESS_KEY_ID is used.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].sigv4.secretKey

SecretKey is the AWS API secret. If not specified, the environment variable AWS_SECRET_ACCESS_KEY is used.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].tlsConfig

TLS Config to use for the URL.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].tlsConfig.ca

Certificate authority used when verifying server certificates.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].tlsConfig.ca.configMap

ConfigMap containing data to use for the targets.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].tlsConfig.ca.secret

Secret containing data to use for the targets.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].tlsConfig.cert

Client certificate to present when doing client-authentication.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].tlsConfig.cert.configMap

ConfigMap containing data to use for the targets.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].tlsConfig.cert.secret

Secret containing data to use for the targets.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].tlsConfig.keySecret

Secret containing the client key file for the targets.



# MonitoringStack.spec.prometheusConfig.remoteWrite[index].writeRelabelConfigs[index]

RelabelConfig allows dynamic rewriting of the label set for targets, alerts, scraped samples and remote write samples.

For more information, see Prometheus Docs



# MonitoringStack.spec.prometheusConfig.webTLSConfig

Configure TLS options for the Prometheus web server.



# MonitoringStack.spec.prometheusConfig.webTLSConfig.certificate

Reference to the TLS public certificate for the web server.



# MonitoringStack.spec.prometheusConfig.webTLSConfig.certificateAuthority

Reference to the root Certificate Authority used to verify the web server&#8217;s certificate.



# MonitoringStack.spec.prometheusConfig.webTLSConfig.privateKey

Reference to the TLS private key for the web server.



# MonitoringStack.spec.resourceSelector

Label selector for MonitoringStack resources.

* To monitor everything, set to empty map selector. For example, resourceSelector: {}.
* To disable service discovery, set to null. For example, resourceSelector:.



# MonitoringStack.spec.resourceSelector.matchExpressions[index]

A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.



# MonitoringStack.spec.resources

Define resources requests and limits for MonitoringStack pods.



# MonitoringStack.spec.resources.claims[index]

ResourceClaim references one entry in PodSpec.ResourceClaims.



# MonitoringStack.spec.tolerations[index]

The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.



# MonitoringStack.status

MonitoringStackStatus defines the observed state of the MonitoringStack instance.
It should always be reconstructable from the state of the cluster and/or outside world.



# MonitoringStack.status.conditions[index]



# ThanosQuerier

ThanosQuerier outlines the Thanos querier components, managed by this stack



# ThanosQuerier.spec

ThanosQuerierSpec defines a single Thanos Querier instance. This means a label selector by which MonitoringStack instances to query are selected, and an optional namespace selector and a list of replica labels by which to deduplicate.



# ThanosQuerier.spec.selector

Selector to select monitoring stacks to unify.



# ThanosQuerier.spec.selector.matchExpressions[index]

A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.



# ThanosQuerier.spec.namespaceSelector

Selector to select which namespaces the MonitoringStack objects are discovered from.



# ThanosQuerier.spec.webTLSConfig

Configure TLS options for the Thanos web server.



# ThanosQuerier.spec.webTLSConfig.certificate

Reference to the TLS public certificate for the web server.



# ThanosQuerier.spec.webTLSConfig.certificateAuthority

Reference to the root Certificate Authority used to verify the web server&#8217;s certificate.



# ThanosQuerier.spec.webTLSConfig.privateKey

Reference to the TLS private key for the web server.

