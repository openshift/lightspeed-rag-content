# FlowCollector API reference


FlowCollector is the Schema for the network flows collection API, which pilots and configures the underlying deployments.

# FlowCollector API specifications

Description:: 
FlowCollector is the schema for the network flows collection API, which pilots and configures the underlying deployments.
Type:: object



## .metadata

Description:: 
Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
Type:: object

## .spec

Description:: 
Defines the desired state of the FlowCollector resource.


*: the mention of "unsupported" or "deprecated" for a feature throughout this document means that this feature
is not officially supported by Red Hat. It might have been, for example, contributed by the community
and accepted without a formal agreement for maintenance. The product maintainers might provide some support
for these features as a best effort only.
Type:: object



## .spec.agent

Description:: 
Agent configuration for flows extraction.
Type:: object



## .spec.agent.ebpf

Description:: 
ebpf describes the settings related to the eBPF-based flow reporter when spec.agent.type
is set to eBPF.
Type:: object



## .spec.agent.ebpf.advanced

Description:: 
advanced allows setting some aspects of the internal configuration of the eBPF agent.
This section is aimed mostly for debugging and fine-grained performance optimizations,
such as GOGC and GOMAXPROCS environment vars. Set these values at your own risk. You can also
override the default Linux capabilities from there.
Type:: object



## .spec.agent.ebpf.advanced.scheduling

Description:: 
scheduling controls how the pods are scheduled on nodes.
Type:: object



## .spec.agent.ebpf.advanced.scheduling.affinity

Description:: 
If specified, the pod's scheduling constraints. For documentation, refer to https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling.
Type:: object

## .spec.agent.ebpf.advanced.scheduling.tolerations

Description:: 
tolerations is a list of tolerations that allow the pod to schedule onto nodes with matching taints.
For documentation, refer to https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling.
Type:: array

## .spec.agent.ebpf.flowFilter

Description:: 
flowFilter defines the eBPF agent configuration regarding flow filtering.
Type:: object



## .spec.agent.ebpf.flowFilter.rules

Description:: 
rules defines a list of filtering rules on the eBPF Agents.
When filtering is enabled, by default, flows that don't match any rule are rejected.
To change the default, you can define a rule that accepts everything: { action: "Accept", cidr: "0.0.0.0/0" }, and then refine with rejecting rules.
Type:: array

## .spec.agent.ebpf.flowFilter.rules[]

Description:: 
EBPFFlowFilterRule defines the desired eBPF agent configuration regarding flow filtering rule.
Type:: object



## .spec.agent.ebpf.metrics

Description:: 
metrics defines the eBPF agent configuration regarding metrics.
Type:: object



## .spec.agent.ebpf.metrics.server

Description:: 
Metrics server endpoint configuration for the Prometheus scraper.
Type:: object



## .spec.agent.ebpf.metrics.server.tls

Description:: 
TLS configuration.
Type:: object
Required:: 
* type



## .spec.agent.ebpf.metrics.server.tls.provided

Description:: 
TLS configuration when type is set to Provided.
Type:: object



## .spec.agent.ebpf.metrics.server.tls.providedCaFile

Description:: 
Reference to the CA file when type is set to Provided.
Type:: object



## .spec.agent.ebpf.resources

Description:: 
resources are the compute resources required by this container.
For more information, see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
Type:: object



## .spec.consolePlugin

Description:: 
consolePlugin defines the settings related to the {product-title} Console plugin, when available.
Type:: object



## .spec.consolePlugin.advanced

Description:: 
advanced allows setting some aspects of the internal configuration of the console plugin.
This section is aimed mostly for debugging and fine-grained performance optimizations,
such as GOGC and GOMAXPROCS environment vars. Set these values at your own risk.
Type:: object



## .spec.consolePlugin.advanced.scheduling

Description:: 
scheduling controls how the pods are scheduled on nodes.
Type:: object



## .spec.consolePlugin.advanced.scheduling.affinity

Description:: 
If specified, the pod's scheduling constraints. For documentation, refer to https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling.
Type:: object

## .spec.consolePlugin.advanced.scheduling.tolerations

Description:: 
tolerations is a list of tolerations that allow the pod to schedule onto nodes with matching taints.
For documentation, refer to https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling.
Type:: array

## .spec.consolePlugin.autoscaler

Description:: 
autoscaler spec of a horizontal pod autoscaler to set up for the plugin Deployment. Refer to HorizontalPodAutoscaler documentation (autoscaling/v2).
Type:: object

## .spec.consolePlugin.portNaming

Description:: 
portNaming defines the configuration of the port-to-service name translation
Type:: object



## .spec.consolePlugin.quickFilters

Description:: 
quickFilters configures quick filter presets for the Console plugin
Type:: array

## .spec.consolePlugin.quickFilters[]

Description:: 
QuickFilter defines preset configuration for Console's quick filters
Type:: object
Required:: 
* filter
* name



## .spec.consolePlugin.resources

Description:: 
resources, in terms of compute resources, required by this container.
For more information, see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
Type:: object



## .spec.exporters

Description:: 
exporters defines additional optional exporters for custom consumption or storage.
Type:: array

## .spec.exporters[]

Description:: 
FlowCollectorExporter defines an additional exporter to send enriched flows to.
Type:: object
Required:: 
* type



## .spec.exporters[].ipfix

Description:: 
IPFIX configuration, such as the IP address and port to send enriched IPFIX flows to.
Type:: object
Required:: 
* targetHost
* targetPort



## .spec.exporters[].kafka

Description:: 
Kafka configuration, such as the address and topic, to send enriched flows to.
Type:: object
Required:: 
* address
* topic



## .spec.exporters[].kafka.sasl

Description:: 
SASL authentication configuration. [Unsupported (*)].
Type:: object



## .spec.exporters[].kafka.sasl.clientIDReference

Description:: 
Reference to the secret or config map containing the client ID
Type:: object



## .spec.exporters[].kafka.sasl.clientSecretReference

Description:: 
Reference to the secret or config map containing the client secret
Type:: object



## .spec.exporters[].kafka.tls

Description:: 
TLS client configuration. When using TLS, verify that the address matches the Kafka port used for TLS, generally 9093.
Type:: object



## .spec.exporters[].kafka.tls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority.
Type:: object



## .spec.exporters[].kafka.tls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS. When you use one-way TLS, you can ignore this property.
Type:: object



## .spec.exporters[].openTelemetry

Description:: 
OpenTelemetry configuration, such as the IP address and port to send enriched logs or metrics to.
Type:: object
Required:: 
* targetHost
* targetPort



## .spec.exporters[].openTelemetry.fieldsMapping

Description:: 
Custom fields mapping to an OpenTelemetry conformant format.
By default, Network Observability format proposal is used: https://github.com/rhobs/observability-data-model/blob/main/network-observability.md#format-proposal .
As there is currently no accepted standard for L3 or L4 enriched network logs, you can freely override it with your own.
Type:: array

## .spec.exporters[].openTelemetry.fieldsMapping[]

Description:: 

Type:: object



## .spec.exporters[].openTelemetry.logs

Description:: 
OpenTelemetry configuration for logs.
Type:: object



## .spec.exporters[].openTelemetry.metrics

Description:: 
OpenTelemetry configuration for metrics.
Type:: object



## .spec.exporters[].openTelemetry.tls

Description:: 
TLS client configuration.
Type:: object



## .spec.exporters[].openTelemetry.tls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority.
Type:: object



## .spec.exporters[].openTelemetry.tls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS. When you use one-way TLS, you can ignore this property.
Type:: object



## .spec.kafka

Description:: 
Kafka configuration, allowing to use Kafka as a broker as part of the flow collection pipeline. Available when the spec.deploymentModel is Kafka.
Type:: object
Required:: 
* address
* topic



## .spec.kafka.sasl

Description:: 
SASL authentication configuration. [Unsupported (*)].
Type:: object



## .spec.kafka.sasl.clientIDReference

Description:: 
Reference to the secret or config map containing the client ID
Type:: object



## .spec.kafka.sasl.clientSecretReference

Description:: 
Reference to the secret or config map containing the client secret
Type:: object



## .spec.kafka.tls

Description:: 
TLS client configuration. When using TLS, verify that the address matches the Kafka port used for TLS, generally 9093.
Type:: object



## .spec.kafka.tls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority.
Type:: object



## .spec.kafka.tls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS. When you use one-way TLS, you can ignore this property.
Type:: object



## .spec.loki

Description:: 
loki, the flow store, client settings.
Type:: object
Required:: 
* mode



## .spec.loki.advanced

Description:: 
advanced allows setting some aspects of the internal configuration of the Loki clients.
This section is aimed mostly for debugging and fine-grained performance optimizations.
Type:: object



## .spec.loki.lokiStack

Description:: 
Loki configuration for LokiStack mode. This is useful for an easy Loki Operator configuration.
It is ignored for other modes.
Type:: object
Required:: 
* name



## .spec.loki.manual

Description:: 
Loki configuration for Manual mode. This is the most flexible configuration.
It is ignored for other modes.
Type:: object



## .spec.loki.manual.statusTls

Description:: 
TLS client configuration for Loki status URL.
Type:: object



## .spec.loki.manual.statusTls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority.
Type:: object



## .spec.loki.manual.statusTls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS. When you use one-way TLS, you can ignore this property.
Type:: object



## .spec.loki.manual.tls

Description:: 
TLS client configuration for Loki URL.
Type:: object



## .spec.loki.manual.tls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority.
Type:: object



## .spec.loki.manual.tls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS. When you use one-way TLS, you can ignore this property.
Type:: object



## .spec.loki.microservices

Description:: 
Loki configuration for Microservices mode.
Use this option when Loki is installed using the microservices deployment mode (https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/#microservices-mode).
It is ignored for other modes.
Type:: object



## .spec.loki.microservices.tls

Description:: 
TLS client configuration for Loki URL.
Type:: object



## .spec.loki.microservices.tls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority.
Type:: object



## .spec.loki.microservices.tls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS. When you use one-way TLS, you can ignore this property.
Type:: object



## .spec.loki.monolithic

Description:: 
Loki configuration for Monolithic mode.
Use this option when Loki is installed using the monolithic deployment mode (https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/#monolithic-mode).
It is ignored for other modes.
Type:: object



## .spec.loki.monolithic.tls

Description:: 
TLS client configuration for Loki URL.
Type:: object



## .spec.loki.monolithic.tls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority.
Type:: object



## .spec.loki.monolithic.tls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS. When you use one-way TLS, you can ignore this property.
Type:: object



## .spec.networkPolicy

Description:: 
networkPolicy defines ingress network policy settings for Network Observability components isolation.
Type:: object



## .spec.processor

Description:: 
processor defines the settings of the component that receives the flows from the agent,
enriches them, generates metrics, and forwards them to the Loki persistence layer and/or any available exporter.
Type:: object



## .spec.processor.advanced

Description:: 
advanced allows setting some aspects of the internal configuration of the flow processor.
This section is aimed mostly for debugging and fine-grained performance optimizations,
such as GOGC and GOMAXPROCS environment vars. Set these values at your own risk.
Type:: object



## .spec.processor.advanced.scheduling

Description:: 
scheduling controls how the pods are scheduled on nodes.
Type:: object



## .spec.processor.advanced.scheduling.affinity

Description:: 
If specified, the pod's scheduling constraints. For documentation, refer to https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling.
Type:: object

## .spec.processor.advanced.scheduling.tolerations

Description:: 
tolerations is a list of tolerations that allow the pod to schedule onto nodes with matching taints.
For documentation, refer to https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling.
Type:: array

## .spec.processor.advanced.secondaryNetworks

Description:: 
Defines secondary networks to be checked for resources identification.
To guarantee a correct identification, indexed values must form an unique identifier across the cluster.
If the same index is used by several resources, those resources might be incorrectly labeled.
Type:: array

## .spec.processor.advanced.secondaryNetworks[]

Description:: 

Type:: object
Required:: 
* index
* name



## .spec.processor.deduper

Description:: 
deduper allows you to sample or drop flows identified as duplicates, in order to save on resource usage.
Type:: object



## .spec.processor.filters

Description:: 
filters lets you define custom filters to limit the amount of generated flows.
These filters provide more flexibility than the eBPF Agent filters (in spec.agent.ebpf.flowFilter), such as allowing to filter by Kubernetes namespace,
but with a lesser improvement in performance.
Type:: array

## .spec.processor.filters[]

Description:: 
FLPFilterSet defines the desired configuration for FLP-based filtering satisfying all conditions.
Type:: object



## .spec.processor.kafkaConsumerAutoscaler

Description:: 
kafkaConsumerAutoscaler is the spec of a horizontal pod autoscaler to set up for flowlogs-pipeline-transformer, which consumes Kafka messages.
This setting is ignored when Kafka is disabled. Refer to HorizontalPodAutoscaler documentation (autoscaling/v2).
Type:: object

## .spec.processor.metrics

Description:: 
Metrics define the processor configuration regarding metrics
Type:: object



## .spec.processor.metrics.server

Description:: 
Metrics server endpoint configuration for Prometheus scraper
Type:: object



## .spec.processor.metrics.server.tls

Description:: 
TLS configuration.
Type:: object
Required:: 
* type



## .spec.processor.metrics.server.tls.provided

Description:: 
TLS configuration when type is set to Provided.
Type:: object



## .spec.processor.metrics.server.tls.providedCaFile

Description:: 
Reference to the CA file when type is set to Provided.
Type:: object



## .spec.processor.resources

Description:: 
resources are the compute resources required by this container.
For more information, see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
Type:: object



## .spec.processor.subnetLabels

Description:: 
subnetLabels allows to define custom labels on subnets and IPs or to enable automatic labelling of recognized subnets in {product-title}, which is used to identify cluster external traffic.
When a subnet matches the source or destination IP of a flow, a corresponding field is added: SrcSubnetLabel or DstSubnetLabel.
Type:: object



## .spec.processor.subnetLabels.customLabels

Description:: 
customLabels allows to customize subnets and IPs labelling, such as to identify cluster-external workloads or web services.
If you enable openShiftAutoDetect, customLabels can override the detected subnets in case they overlap.
Type:: array

## .spec.processor.subnetLabels.customLabels[]

Description:: 
SubnetLabel allows to label subnets and IPs, such as to identify cluster-external workloads or web services.
Type:: object
Required:: 
* cidrs
* name



## .spec.prometheus

Description:: 
prometheus defines Prometheus settings, such as querier configuration used to fetch metrics from the Console plugin.
Type:: object



## .spec.prometheus.querier

Description:: 
Prometheus querying configuration, such as client settings, used in the Console plugin.
Type:: object
Required:: 
* mode



## .spec.prometheus.querier.manual

Description:: 
Prometheus configuration for Manual mode.
Type:: object



## .spec.prometheus.querier.manual.tls

Description:: 
TLS client configuration for Prometheus URL.
Type:: object



## .spec.prometheus.querier.manual.tls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority.
Type:: object



## .spec.prometheus.querier.manual.tls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS. When you use one-way TLS, you can ignore this property.
Type:: object

