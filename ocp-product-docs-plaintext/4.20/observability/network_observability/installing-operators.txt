# Installing the Network Observability Operator


Installing Loki is a recommended prerequisite for using the Network Observability Operator. You can choose to use Network observability without Loki, but there are some considerations for doing this, described in the previously linked section.
The Loki Operator integrates a gateway that implements multi-tenancy and authentication with Loki for data flow storage. The LokiStack resource manages Loki, which is a scalable, highly-available, multi-tenant log aggregation system, and a web proxy with {product-title} authentication. The LokiStack proxy uses {product-title} authentication to enforce multi-tenancy and facilitate the saving and indexing of data in Loki log stores.

# Network observability without Loki

You can use network observability without Loki by not performing the Loki installation steps and skipping directly to "Installing the Network Observability Operator". If you only want to export flows to a Kafka consumer or IPFIX collector, or you only need dashboard metrics, then you do not need to install Loki or provide storage for Loki. The following table compares available features with and without Loki.



1. Such as per pod.
2. Such as per workload or namespace.
3. Statistics on packet drops are only available with Loki.

* Export enriched network flow data

# Installing the Loki Operator

The Loki Operator versions 5.7+ are the supported Loki Operator versions for Network Observability; these versions provide the ability to create a LokiStack instance using the openshift-network tenant configuration mode and provide fully-automatic, in-cluster authentication and authorization support for Network Observability. There are several ways you can install Loki. One way is by using the {product-title} web console Operator Hub.

* Supported Log Store (AWS S3, Google Cloud Storage, Azure, Swift, Minio, OpenShift Data Foundation)
* {product-title} 4.10+
* Linux kernel 4.18+

1. In the {product-title} web console, click Operators -> OperatorHub.
2. Choose  Loki Operator from the list of available Operators, and click Install.
3. Under Installation Mode, select All namespaces on the cluster.

1. Verify that you installed the Loki Operator. Visit the Operators â†’ Installed Operators page and look for Loki Operator.
2. Verify that Loki Operator is listed with Status as Succeeded in all the projects.


[IMPORTANT]
----
To uninstall Loki, refer to the uninstallation process that corresponds with the method you used to install Loki. You might have remaining ClusterRoles and ClusterRoleBindings, data stored in object store, and persistent volume that must be removed.
----

## Creating a secret for Loki storage

The Loki Operator supports a few log storage options, such as AWS S3, Google Cloud Storage, Azure, Swift, Minio, OpenShift Data Foundation. The following example shows how to create a secret for AWS S3 storage. The secret created in this example, loki-s3, is referenced in "Creating a LokiStack custom resource". You can create this secret in the web console or CLI.

1. Using the web console, navigate to the Project -> All Projects dropdown and select Create Project.
2. Name the project netobserv and click Create.
3. Navigate to the Import icon, +, in the top right corner. Paste your YAML file into the editor.

The following shows an example secret YAML file for S3 storage:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: loki-s3
  namespace: netobserv   1
stringData:
  access_key_id: QUtJQUlPU0ZPRE5ON0VYQU1QTEUK
  access_key_secret: d0phbHJYVXRuRkVNSS9LN01ERU5HL2JQeFJmaUNZRVhBTVBMRUtFWQo=
  bucketnames: s3-bucket-name
  endpoint: https://s3.eu-central-1.amazonaws.com
  region: eu-central-1
```

The installation examples in this documentation use the same namespace, netobserv, across all components. You can optionally use a different namespace for the different components

* After you create the secret, you view the secret listed under Workloads -> Secrets in the web console.

* Creating a LokiStack custom resource
* Flow Collector API Reference
* Flow Collector sample resource

## Creating a LokiStack custom resource

You can deploy a LokiStack custom resource (CR) by using the web console or OpenShift CLI (`oc`) to create a namespace, or new project.

1. Navigate to Operators -> Installed Operators, viewing All projects from the Project dropdown.
2. Look for Loki Operator. In the details, under Provided APIs, select LokiStack.
3. Click Create LokiStack.
4. Ensure the following fields are specified in either Form View or YAML view:

```yaml
apiVersion: loki.grafana.com/v1
kind: LokiStack
metadata:
  name: loki
  namespace: netobserv 1
spec:
  size: 1x.small 2
  storage:
    schemas:
    - version: v12
      effectiveDate: '2022-06-01'
    secret:
      name: loki-s3
      type: s3
  storageClassName: gp3 3
  tenants:
    mode: openshift-network
```

The installation examples in this documentation use the same namespace, netobserv, across all components. You can optionally use a different namespace.
Specify the deployment size. In the Loki Operator 5.8 and later versions, the supported size options for production instances of Loki are 1x.extra-small, 1x.small, or 1x.medium.

[IMPORTANT]
----
It is not possible to change the number 1x for the deployment size.
----
Use a storage class name that is available on the cluster for ReadWriteOnce access mode. You can use oc get storageclasses to see what is available on your cluster.

[IMPORTANT]
----
You must not reuse the same LokiStack CR that is used for logging.
----
5. Click Create.

## Creating a new group for the cluster-admin user role


[IMPORTANT]
----
Querying application logs for multiple namespaces as a cluster-admin user, where the sum total of characters of all of the namespaces in the cluster is greater than 5120, results in the error Parse error: input size too long (XXXX > 5120). For better control over access to logs in LokiStack, make the cluster-admin user a member of the cluster-admin group. If the cluster-admin group does not exist, create it and add the desired users to it.
----

Use the following procedure to create a new group for users with cluster-admin permissions.

1. Enter the following command to create a new group:

```terminal
$ oc adm groups new cluster-admin
```

2. Enter the following command to add the desired user to the cluster-admin group:

```terminal
$ oc adm groups add-users cluster-admin <username>
```

3. Enter the following command to add cluster-admin user role to the group:

```terminal
$ oc adm policy add-cluster-role-to-group cluster-admin cluster-admin
```


## Custom admin group access

If you need to see cluster-wide logs without necessarily being an administrator, or if you already have any group defined that you want to use here, you can specify a custom group using the adminGroup field. Users who are members of any group specified in the adminGroups field of the LokiStack custom resource (CR) have the same read access to logs as administrators.

Administrator users have access to all network logs across the cluster.


```yaml
apiVersion: loki.grafana.com/v1
kind: LokiStack
metadata:
  name: loki
  namespace: netobserv
spec:
  tenants:
    mode: openshift-network 1
    openshift:
      adminGroups: 2
      - cluster-admin
      - custom-admin-group 3
```


Custom admin groups are only available in this mode.
Entering an empty list [] value for this field disables admin groups.
Overrides the default groups (system:cluster-admins, cluster-admin, dedicated-admin)

## Loki deployment sizing

Sizing for Loki follows the format of 1x.<size> where the value 1x is number of instances and <size> specifies performance capabilities.


[IMPORTANT]
----
It is not possible to change the number 1x for the deployment size.
----



## LokiStack ingestion limits and health alerts

The LokiStack instance comes with default settings according to the configured size. It is possible to override some of these settings, such as the ingestion and query limits. An automatic alert in the web console notifies you when these limits are reached.


[NOTE]
----
You might want to update the ingestion and query limits if you get Loki errors showing up in the Console plugin, or in flowlogs-pipeline logs.
----

Here is an example of configured limits:


```yaml
spec:
  limits:
    global:
      ingestion:
        ingestionBurstSize: 40
        ingestionRate: 20
        maxGlobalStreamsPerTenant: 25000
      queries:
        maxChunksPerQuery: 2000000
        maxEntriesLimitPerQuery: 10000
        maxQuerySeries: 3000
```


For more information about these settings, see the LokiStack API reference.

# Installing the Network Observability Operator

You can install the Network Observability Operator using the {product-title} web console Operator Hub. When you install the Operator,  it provides the FlowCollector custom resource definition (CRD). You can set specifications in the web console when you create the  FlowCollector.


[IMPORTANT]
----
The actual memory consumption of the Operator depends on your cluster size and the number of resources deployed. Memory consumption might need to be adjusted accordingly. For more information refer to "Network Observability controller manager pod runs out of memory" in the "Important Flow Collector configuration considerations" section.
----

* If you choose to use Loki, install the Loki Operator version 5.7+.
* You must have cluster-admin privileges.
* One of the following supported architectures is required: amd64, ppc64le, arm64, or s390x.
* Any CPU supported by Red Hat Enterprise Linux (RHEL) 9.
* Must be configured with OVN-Kubernetes as the main network plugin, and optionally using secondary interfaces with Multus and SR-IOV.


[NOTE]
----
Additionally, this installation example uses the netobserv namespace, which is used across all components. You can optionally use a different namespace.
----

1. In the {product-title} web console, click Operators -> OperatorHub.
2. Choose  Network Observability Operator from the list of available Operators in the OperatorHub, and click Install.
3. Select the checkbox Enable Operator recommended cluster monitoring on this Namespace.
4. Navigate to Operators -> Installed Operators. Under Provided APIs for Network Observability, select the Flow Collector link.
5. Navigate to the Flow Collector tab, and click Create FlowCollector. Make the following selections in the form view:
1. spec.agent.ebpf.Sampling: Specify a sampling size for flows. Lower sampling sizes will have higher impact on resource utilization. For more information, see the "FlowCollector API reference", spec.agent.ebpf.
2. If you are not using Loki, click Loki client settings and change Enable to False. The setting is True by default.
3. If you are using Loki, set the following specifications:
1. spec.loki.mode: Set this to the LokiStack mode, which automatically sets URLs, TLS, cluster roles and a cluster role binding, as well as the authToken value. Alternatively, the Manual mode allows more control over configuration of these settings.
2. spec.loki.lokistack.name: Set this to the name of your LokiStack resource. In this documentation, loki is used.
4. Optional: If you are in a large-scale environment, consider configuring the FlowCollector with Kafka for forwarding data in a more resilient, scalable way. See "Configuring the Flow Collector resource with Kafka storage" in the "Important Flow Collector configuration considerations" section.
5. Optional: Configure other optional settings before the next step of creating the FlowCollector. For example, if you choose not to use Loki, then you can configure exporting flows to Kafka or IPFIX. See "Export enriched network flow data to Kafka and IPFIX" and more in the "Important Flow Collector configuration considerations" section.
6. Click Create.

To confirm this was successful, when you navigate to Observe you should see Network Traffic listed in the options.

In the absence of Application Traffic within the {product-title} cluster, default filters might show that there are "No results", which results in no visual flow. Beside the filter selections, select Clear all filters to see the flow.

# Enabling multi-tenancy in network observability

Multi-tenancy in the Network Observability Operator allows and restricts individual user access, or group access, to the flows stored in Loki and or Prometheus. Access is enabled for project administrators. Project administrators who have limited access to some namespaces can access flows for only those namespaces.

For Developers, multi-tenancy is available for both Loki and Prometheus but requires different access rights.

* If you are using Loki, you have installed at least Loki Operator version 5.7.
* You must be logged in as a project administrator.

* For per-tenant access, you must have the netobserv-loki-reader cluster role and the netobserv-metrics-reader namespace role to use the developer perspective. Run the following commands for this level of access:

```terminal
$ oc adm policy add-cluster-role-to-user netobserv-loki-reader <user_group_or_name>
```


```terminal
$ oc adm policy add-role-to-user netobserv-metrics-reader <user_group_or_name> -n <namespace>
```

* For cluster-wide access, non-cluster-administrators must have the netobserv-loki-reader, cluster-monitoring-view, and netobserv-metrics-reader cluster roles. In this scenario, you can use either the admin perspective or the developer perspective. Run the following commands for this level of access:

```terminal
$ oc adm policy add-cluster-role-to-user netobserv-loki-reader <user_group_or_name>
```


```terminal
$ oc adm policy add-cluster-role-to-user cluster-monitoring-view <user_group_or_name>
```


```terminal
$ oc adm policy add-cluster-role-to-user netobserv-metrics-reader <user_group_or_name>
```


# Important Flow Collector configuration considerations

Once you create the FlowCollector instance, you can reconfigure it, but the pods are terminated and recreated again, which can be disruptive. Therefore, you can consider configuring the following options when creating the FlowCollector for the first time:

* Configuring the Flow Collector resource with Kafka
* Export enriched network flow data to Kafka or IPFIX
* Configuring monitoring for SR-IOV interface traffic
* Working with conversation tracking
* Working with DNS tracking
* Working with packet drops

* Flow Collector API Reference
* Flow Collector sample resource
* Resource considerations
* Troubleshooting network observability controller manager pod runs out of memory
* Network observability architecture

## Migrating removed stored versions of the FlowCollector CRD

Network Observability Operator version 1.6 removes the old and deprecated v1alpha1 version of the FlowCollector API. If you previously installed this version on your cluster, it might still be referenced in the storedVersion of the FlowCollector CRD, even if it is removed from the etcd store, which blocks the upgrade process. These references need to be manually removed.

There are two options to remove stored versions:

1. Use the Storage Version Migrator Operator.
2. Uninstall and reinstall the Network Observability Operator, ensuring that the installation is in a clean state.

* You have an older version of the Operator installed, and you want to prepare your cluster to install the latest version of the Operator. Or you have attempted to install the Network Observability Operator 1.6 and run into the error: Failed risk of data loss updating "flowcollectors.flows.netobserv.io": new CRD removes version v1alpha1 that is listed as a stored version on the existing CRD.

1. Verify that the old FlowCollector CRD version is still referenced in the storedVersion:

```terminal
$ oc get crd flowcollectors.flows.netobserv.io -ojsonpath='{.status.storedVersions}'
```

2. If v1alpha1 appears in the list of results, proceed with Step a to use the Kubernetes Storage Version Migrator or Step b to uninstall and reinstall the CRD and the Operator.
1. Option 1: Kubernetes Storage Version Migrator: Create a YAML to define the StorageVersionMigration object, for example migrate-flowcollector-v1alpha1.yaml:

```yaml
apiVersion: migration.k8s.io/v1alpha1
kind: StorageVersionMigration
metadata:
  name: migrate-flowcollector-v1alpha1
spec:
  resource:
    group: flows.netobserv.io
    resource: flowcollectors
    version: v1alpha1
```

1. Save the file.
2. Apply the StorageVersionMigration by running the following command:

```terminal
$ oc apply -f migrate-flowcollector-v1alpha1.yaml
```

3. Update the FlowCollector CRD to manually remove v1alpha1 from the storedVersion:

```terminal
$ oc edit crd flowcollectors.flows.netobserv.io
```

2. Option 2: Reinstall: Save the Network Observability Operator 1.5 version of the FlowCollector CR to a file, for example flowcollector-1.5.yaml.

```terminal
$ oc get flowcollector cluster -o yaml > flowcollector-1.5.yaml
```

1. Follow the steps in "Uninstalling the Network Observability Operator", which uninstalls the Operator and removes the existing FlowCollector CRD.
2. Install the Network Observability Operator latest version, 1.6.0.
3. Create the FlowCollector using backup that was saved in Step b.

* Run the following command:

```terminal
$ oc get crd flowcollectors.flows.netobserv.io -ojsonpath='{.status.storedVersions}'
```


The list of results should no longer show v1alpha1 and only show the latest version, v1beta1.

* Kubernetes Storage Version Migrator Operator

# Installing Kafka (optional)

The Kafka Operator is supported for large scale environments. Kafka provides high-throughput and low-latency data feeds for forwarding network flow data in a more resilient, scalable way. You can install the Kafka Operator as Red Hat AMQ Streams from the Operator Hub, just as the Loki Operator and Network Observability Operator were installed. Refer to "Configuring the FlowCollector resource with Kafka" to configure Kafka as a storage option.


[NOTE]
----
To uninstall Kafka, refer to the uninstallation process that corresponds with the method you used to install.
----

* Configuring the FlowCollector resource with Kafka

# Uninstalling the Network Observability Operator

You can uninstall the Network Observability Operator using the {product-title} web console Operator Hub, working in the Operators &#8594; Installed Operators area.

1. Remove the FlowCollector custom resource.
1. Click Flow Collector, which is next to the Network Observability Operator in the Provided APIs column.
2. Click the Options menu  for the cluster and select Delete FlowCollector.
2. Uninstall the Network Observability Operator.
1. Navigate back to the Operators -> Installed Operators area.
2. Click the Options menu  next to the  Network Observability Operator and select Uninstall Operator.
3. Home -> Projects and select openshift-netobserv-operator
4. Navigate to Actions and select Delete Project
3. Remove the FlowCollector custom resource definition (CRD).
1. Navigate to Administration -> CustomResourceDefinitions.
2. Look for FlowCollector and click the Options menu .
3. Select Delete CustomResourceDefinition.

[IMPORTANT]
----
The Loki Operator and Kafka remain if they were installed and must be removed separately. Additionally, you might have remaining data stored in an object store, and a persistent volume that must be removed.
----