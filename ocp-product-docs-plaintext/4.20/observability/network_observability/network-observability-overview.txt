# About network observability


Red Hat offers cluster administrators and developers the Network Observability Operator to observe the network traffic for {product-title} clusters. The Network Observability Operator uses the eBPF technology to create network flows, which are then enriched with {product-title} information. The flows are available as Prometheus metrics or as logs in Loki. You can view and analyze this stored information in the {product-title} console for further insight and troubleshooting.

# Network Observability Operator

The Network Observability Operator provides the FlowCollector API custom resource. A FlowCollector instance is a cluster-scoped resource that enables configuration of network flow collection. This instance deploys pods and services that form a monitoring pipeline.

The eBPF agent is deployed as a daemonset object and creates the network flows. The pipeline collects and enriches network flows with Kubernetes metadata before storing them in Loki or generating Prometheus metrics.

# Optional dependencies of the Network Observability Operator

You can optionally integrate the Network Observability Operator with other components to enhance its functionality and scalability. Supported optional dependencies include the Loki Operator for flow storage, and AMQ Streams for large-scale data handling with Kafka.

Loki Operator:: You can use Loki as the backend to store all collected flows with a maximal level of details. It is recommended to use the Red Hat supported Loki Operator to install Loki. You can also choose to use network observability without Loki, but you need to consider some factors. For more information, see "Network observability without Loki".
AMQ Streams Operator:: Kafka provides scalability, resiliency and high availability in the {product-title} cluster for large scale deployments. If you choose to use Kafka, it is recommended to use Red Hat supported AMQ Streams Operator.

* Network observability without Loki

# {product-title} console integration

{product-title} console integration offers an overview, a topology view, and traffic flow tables. The Network observability metrics dashboards in Observe &#8594; Dashboards are available only to users with administrator access.


[NOTE]
----
To enable multi-tenancy for developer access and for administrators with limited access to namespaces, you must specify permissions by defining roles. For more information, see "Enabling multi-tenancy in network observability".
----

* Enabling multi-tenancy in network observability

## Network observability metrics dashboards

In the {product-title} console on the Overview tab, you can view the overall aggregated metrics of the network traffic flow on the cluster. You can choose to display the information by cluster, node, namespace, owner, pod, and service. Filters and display options can further refine the metrics. For more information, see "Observing the network traffic from the Overview view".

In Observe &#8594; Dashboards, the Netobserv dashboards provide a quick overview of the network flows in your {product-title} cluster. The Netobserv/Health dashboard provides metrics about the health of the Operator. For more information, see "Network observability metrics" and "Viewing health information".

* Observing the network traffic from the Overview view
* Network observability metrics
* Health dashboards

## Network observability topology views

The {product-title} console offers the Topology tab which displays a graphical representation of the network flows and the amount of traffic. The topology view represents traffic between the {product-title} components as a network graph. You can refine the graph by using the filters and display options. You can access the information for cluster, zone, udn, node, namespace, owner, pod, and service.

## Traffic flow tables

The Traffic flow table view provides a view for raw flows, non aggregated filtering options, and configurable columns. The {product-title} console offers the Traffic flows tab which displays the data of the network flows and the amount of traffic.

# Network Observability CLI

You can quickly debug and troubleshoot networking issues with network observability by using the Network Observability command-line interface (CLI), oc netobserv. The Network Observability CLI is a flow and packet visualization tool that relies on eBPF agents to stream collected data to an ephemeral collector pod. It requires no persistent storage during the capture. After the run, the output is transferred to your local machine. This enables quick, live insight into packets and flow data without installing the Network Observability Operator.