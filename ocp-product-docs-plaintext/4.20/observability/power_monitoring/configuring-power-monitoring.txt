# Configuring power monitoring



[IMPORTANT]
----
Power monitoring is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----
The PowerMonitor resource is a Kubernetes custom resource definition (CRD) that enables you to configure the deployment and monitor the status of the PowerMonitor resource.

# The Kepler configuration

You can configure Kepler with the spec field of the PowerMonitor resource.


[IMPORTANT]
----
Ensure that the name of your PowerMonitor instance is power-monitor. All other instances are rejected by the Power Monitoring Operator Webhook.
----

The following is the list of configuration options:




```yaml
apiVersion: v1alpha1
kind: PowerMonitor
metadata:
  labels:
    app.kubernetes.io/name: powermonitor
    app.kubernetes.io/instance: powermonitor
    app.kubernetes.io/part-of: kepler-operator
  name: power-monitor
spec:
  kepler:
    deployment:
      nodeSelector:
        kubernetes.io/os: linux

      tolerations:
        - key: key1
          operator: Equal
          value: value1
          effect: NoSchedule

      security:
        mode: rbac
        allowedSANames:
          - openshift-user-workload-monitoring:prometheus-user-workload

    config:
      logLevel: info
      metricLevels: [node, pod, vm]
      staleness: 1s
      sampleRate: 10s
      maxTerminated: 1000
```


# Monitoring the Kepler status

You can monitor the state of the Kepler exporter with the status field of the PowerMonitor resource.

The status field includes information, such as the following:

* The number of nodes currently running the Kepler pods
* The number of nodes that should be running the Kepler pods
* Conditions representing the health of the Kepler resource

This provides you with valuable insights into the changes made through the spec field.


```yaml
apiVersion: kepler.system.sustainable.computing.io/v1alpha1
kind: PowerMonitor
metadata:
  name: power-monitor
status:
   conditions: 1
     - lastTransitionTime: '2024-01-11T11:07:39Z'
       message: Reconcile succeeded
       observedGeneration: 1
       reason: ReconcileSuccess
       status: 'True'
       type: Reconciled
     - lastTransitionTime: '2024-01-11T11:07:39Z'
       message: >-
         power-monitor daemonset "openshift-power-monitoring/power-monitor" is deployed to all nodes and
         available; ready 2/2
       observedGeneration: 1
       reason: DaemonSetReady
       status: 'True'
       type: Available
   currentNumberScheduled: 2 2
   desiredNumberScheduled: 2 3
```


The health of the PowerMonitor resource. In this example, the PowerMonitor resource is successfully reconciled and ready.
The number of nodes currently running the Kepler pods is 2.
The wanted number of nodes to run the Kepler pods is 2.