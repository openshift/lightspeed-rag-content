# Maintenance and support for monitoring


Not all configuration options for the monitoring stack are exposed. The only supported way of configuring {product-title} monitoring is by configuring the Cluster Monitoring Operator (CMO) using the options described in the Config map reference for the Cluster Monitoring Operator. Do not use other configurations, as they are unsupported.
Configuration paradigms might change across Prometheus releases, and such cases can only be handled gracefully if all configuration possibilities are controlled. If you use configurations other than those described in the Config map reference for the Cluster Monitoring Operator, your changes will disappear because the CMO automatically reconciles any differences and resets any unsupported changes back to the originally defined state by default and by design.

# Support considerations for monitoring


[NOTE]
----
Backward compatibility for metrics, recording rules, or alerting rules is not guaranteed.
----

The following modifications are explicitly not supported:

* Creating additional ServiceMonitor, PodMonitor, and PrometheusRule objects in the openshift-&#42; and kube-&#42; projects.
* Modifying any resources or objects deployed in the openshift-monitoring or openshift-user-workload-monitoring projects. The resources created by the {product-title} monitoring stack are not meant to be used by any other resources, as there are no guarantees about their backward compatibility.

[NOTE]
----
The Alertmanager configuration is deployed as the alertmanager-main secret resource in the openshift-monitoring namespace.
If you have enabled a separate Alertmanager instance for user-defined alert routing, an Alertmanager configuration is also deployed as the alertmanager-user-workload secret resource in the openshift-user-workload-monitoring namespace.
To configure additional routes for any instance of Alertmanager, you need to decode, modify, and then encode that secret.
This procedure is a supported exception to the preceding statement.
----
* Modifying resources of the stack. The {product-title} monitoring stack ensures its resources are always in the state it expects them to be. If they are modified, the stack will reset them.
* Deploying user-defined workloads to openshift-&#42;, and kube-&#42; projects. These projects are reserved for Red Hat provided components and they should not be used for user-defined workloads.
* Enabling symptom based monitoring by using the Probe custom resource definition (CRD) in Prometheus Operator.
* Manually deploying monitoring resources into namespaces that have the openshift.io/cluster-monitoring: "true" label.
* Adding the openshift.io/cluster-monitoring: "true" label to namespaces. This label is reserved only for the namespaces with core {product-title} components and Red Hat certified components.
* Installing custom Prometheus instances on {product-title}. A custom instance is a Prometheus custom resource (CR) managed by the Prometheus Operator.

# Support policy for monitoring Operators

Monitoring Operators ensure that {product-title} monitoring resources function as designed and tested. If Cluster Version Operator (CVO) control of an Operator is overridden, the Operator does not respond to configuration changes, reconcile the intended state of cluster objects, or receive updates.

While overriding CVO control for an Operator can be helpful during debugging, this is  unsupported and the cluster administrator assumes full control of the individual component configurations and upgrades.

The spec.overrides parameter can be added to the configuration for the CVO to allow administrators to provide a list of overrides to the behavior of the CVO for a component. Setting the spec.overrides[].unmanaged parameter to true for a component blocks cluster upgrades and alerts the administrator after a CVO override has been set:


```terminal
Disabling ownership via cluster version overrides prevents upgrades. Please remove overrides before continuing.
```



[WARNING]
----
Setting a CVO override puts the entire cluster in an unsupported state and prevents the monitoring stack from being reconciled to its intended state. This impacts the reliability features built into Operators and prevents updates from being received. Reported issues must be reproduced after removing any overrides for support to proceed.
----

# Support version matrix for monitoring components

The following matrix contains information about versions of monitoring components for {product-title} 4.12 and later releases:




[NOTE]
----
The openshift-state-metrics agent and Telemeter Client are OpenShift-specific components. Therefore, their versions correspond with the versions of {product-title}.
----