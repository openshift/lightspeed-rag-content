# Installing the Migration Toolkit for Containers in a restricted network environment


You can install the Migration Toolkit for Containers (MTC) on {product-title} 3 and 4 in a restricted network environment by performing the following procedures:
1. Create a mirrored Operator catalog.

This process creates a mapping.txt file, which contains the mapping between the registry.redhat.io image and your mirror registry image. The mapping.txt file is required for installing the Operator on the source cluster.
2. Install the Migration Toolkit for Containers Operator on the {product-title} {product-version} target cluster by using Operator Lifecycle Manager.

By default, the MTC web console and the Migration Controller pod run on the target cluster. You can configure the Migration Controller custom resource manifest to run the MTC web console and the Migration Controller pod on a source cluster or on a remote cluster.
3. Install the legacy Migration Toolkit for Containers Operator on the {product-title} 3 source cluster from the command-line interface.
4. Configure object storage to use as a replication repository.
To uninstall MTC, see Uninstalling MTC and deleting resources.

# Compatibility guidelines

You must install the Migration Toolkit for Containers (MTC) Operator that is compatible with your {product-title} version.

control cluster:: The cluster that runs the MTC controller and GUI.
remote cluster:: A source or destination cluster for a migration that runs Velero. The Control Cluster communicates with Remote clusters using the Velero API to drive migrations.

You must use the compatible MTC version for migrating your {product-title} clusters. For the migration to succeed, both your source cluster and the destination cluster must use the same version of MTC.

MTC 1.7 supports migrations from {product-title} 3.11 to 4.17.

MTC 1.8 only supports migrations from {product-title} 4.14 and later.



Edge cases exist where network restrictions prevent {product-title} 4 clusters from connecting to other clusters involved in the migration. For example, when migrating from an {product-title} 3.11 cluster on premises to a {product-title} 4 cluster in the cloud,  the {product-title} 4 cluster might have trouble connecting to the {product-title} 3.11 cluster. In this case, it is possible to designate the {product-title} 3.11 cluster as the control cluster and push workloads to the remote {product-title} 4 cluster.

# Installing the Migration Toolkit for Containers Operator on {product-title} {product-version}

You install the Migration Toolkit for Containers Operator on {product-title} {product-version} by using the Operator Lifecycle Manager.

* You must be logged in as a user with cluster-admin privileges on all clusters.
* You must create an Operator catalog from a mirror image in a local registry.

1. In the {product-title} web console, click Operators -> OperatorHub.
2. Use the Filter by keyword field to find the Migration Toolkit for Containers Operator.
3. Select the Migration Toolkit for Containers Operator and click Install.
4. Click Install.

On the Installed Operators page, the Migration Toolkit for Containers Operator appears in the openshift-migration project with the status Succeeded.
5. Click Migration Toolkit for Containers Operator.
6. Under Provided APIs, locate the Migration Controller tile, and click Create Instance.
7. Click Create.
8. Click Workloads -> Pods to verify that the MTC pods are running.

# Installing the legacy Migration Toolkit for Containers Operator on {product-title} 3

You can install the legacy Migration Toolkit for Containers Operator manually on {product-title} 3.

* You must be logged in as a user with cluster-admin privileges on all clusters.
* You must have access to registry.redhat.io.
* You must have podman installed.
* You must create an image stream secret and copy it to each node in the cluster.
* You must have a Linux workstation with network access in order to download files from registry.redhat.io.
* You must create a mirror image of the Operator catalog.
* You must install the Migration Toolkit for Containers Operator from the mirrored Operator catalog on {product-title} {product-version}.

1. Log in to registry.redhat.io with your Red Hat Customer Portal credentials:

```terminal
$ podman login registry.redhat.io
```

2. Download the operator.yml file by entering the following command:

```terminal
podman cp $(podman create registry.redhat.io/rhmtc/openshift-migration-legacy-rhel8-operator:v1.7):/operator.yml ./
```

3. Download the controller.yml file by entering the following command:

```terminal
podman cp $(podman create registry.redhat.io/rhmtc/openshift-migration-legacy-rhel8-operator:v1.7):/controller.yml ./
```

4. Obtain the Operator image mapping by running the following command:

```terminal
$ grep openshift-migration-legacy-rhel8-operator ./mapping.txt | grep rhmtc
```


The mapping.txt file was created when you mirrored the Operator catalog. The output shows the mapping between the registry.redhat.io image and your mirror registry image.
Example output

```terminal
registry.redhat.io/rhmtc/openshift-migration-legacy-rhel8-operator@sha256:468a6126f73b1ee12085ca53a312d1f96ef5a2ca03442bcb63724af5e2614e8a=<registry.apps.example.com>/rhmtc/openshift-migration-legacy-rhel8-operator
```

5. Update the image values for the ansible and operator containers and the REGISTRY value in the operator.yml file:

```yaml
containers:
  - name: ansible
    image: <registry.apps.example.com>/rhmtc/openshift-migration-legacy-rhel8-operator@sha256:<468a6126f73b1ee12085ca53a312d1f96ef5a2ca03442bcb63724af5e2614e8a> 1
...
  - name: operator
    image: <registry.apps.example.com>/rhmtc/openshift-migration-legacy-rhel8-operator@sha256:<468a6126f73b1ee12085ca53a312d1f96ef5a2ca03442bcb63724af5e2614e8a> 1
...
    env:
    - name: REGISTRY
      value: <registry.apps.example.com> 2
```

Specify your mirror registry and the sha256 value of the Operator image.
Specify your mirror registry.
6. Log in to your {product-title} source cluster.
7. Create the Migration Toolkit for Containers Operator object:

```terminal
$ oc create -f operator.yml
```

Example output

```terminal
namespace/openshift-migration created
rolebinding.rbac.authorization.k8s.io/system:deployers created
serviceaccount/migration-operator created
customresourcedefinition.apiextensions.k8s.io/migrationcontrollers.migration.openshift.io created
role.rbac.authorization.k8s.io/migration-operator created
rolebinding.rbac.authorization.k8s.io/migration-operator created
clusterrolebinding.rbac.authorization.k8s.io/migration-operator created
deployment.apps/migration-operator created
Error from server (AlreadyExists): error when creating "./operator.yml":
rolebindings.rbac.authorization.k8s.io "system:image-builders" already exists 1
Error from server (AlreadyExists): error when creating "./operator.yml":
rolebindings.rbac.authorization.k8s.io "system:image-pullers" already exists
```

You can ignore Error from server (AlreadyExists) messages. They are caused by the Migration Toolkit for Containers Operator creating resources for earlier versions of {product-title} 4 that are provided in later releases.
8. Create the MigrationController object:

```terminal
$ oc create -f controller.yml
```

9. Verify that the MTC pods are running:

```terminal
$ oc get pods -n openshift-migration
```


# Proxy configuration

For {product-title} 4.1 and earlier versions, you must configure proxies in the MigrationController custom resource (CR) manifest after you install the Migration Toolkit for Containers Operator because these versions do not support a cluster-wide proxy object.

For {product-title} 4.2 to {product-version}, the MTC inherits the cluster-wide proxy settings. You can change the proxy parameters if you want to override the cluster-wide proxy settings.

## Direct volume migration

Direct Volume Migration (DVM) was introduced in MTC 1.4.2. DVM supports only one proxy. The source cluster cannot access the route of the target cluster if the target cluster is also behind a proxy.

If you want to perform a DVM from a source cluster behind a proxy, you must configure a TCP proxy that works at the transport layer and forwards the SSL connections transparently without decrypting and re-encrypting them with their own SSL certificates. A Stunnel proxy is an example of such a proxy.

### TCP proxy setup for DVM

You can set up a direct connection between the source and the target cluster through a TCP proxy and configure the stunnel_tcp_proxy variable in the MigrationController CR to use the proxy:


```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigrationController
metadata:
  name: migration-controller
  namespace: openshift-migration
spec:
  [...]
  stunnel_tcp_proxy: http://username:password@ip:port
```


Direct volume migration (DVM) supports only basic authentication for the proxy. Moreover, DVM works only from behind proxies that can tunnel a TCP connection transparently. HTTP/HTTPS proxies in man-in-the-middle mode do not work. The existing cluster-wide proxies might not support this behavior. As a result, the proxy settings for DVM are intentionally kept different from the usual proxy configuration in MTC.

### Why use a TCP proxy instead of an HTTP/HTTPS proxy?

You can enable DVM by running Rsync between the source and the target cluster over an OpenShift route.  Traffic is encrypted using Stunnel, a TCP proxy. The Stunnel running on the source cluster initiates a TLS connection with the target Stunnel and transfers data over an encrypted channel.

Cluster-wide HTTP/HTTPS proxies in OpenShift are usually configured in man-in-the-middle mode where they negotiate their own TLS session with the outside servers. However, this does not work with Stunnel. Stunnel requires that its TLS session be untouched by the proxy, essentially making the proxy a transparent tunnel which simply forwards the TCP connection as-is. Therefore, you must use a TCP proxy.

### Known issue

The migration Controller uses the SPDY protocol to execute commands within remote pods. If the remote cluster is behind a proxy or a firewall that does not support the SPDY protocol, the migration controller fails to execute remote commands. The migration fails with the error message Upgrade request required.
Workaround: Use a proxy that supports the SPDY protocol.

In addition to supporting the SPDY protocol, the proxy or firewall also must pass the Upgrade HTTP header to the API server. The client uses this header to open a websocket connection with the API server. If the Upgrade header is blocked by the proxy or firewall, the migration fails with the error message Upgrade request required.
Workaround: Ensure that the proxy forwards the Upgrade header.

## Tuning network policies for migrations

OpenShift supports restricting traffic to or from pods using NetworkPolicy or EgressFirewalls based on the network plugin used by the cluster. If any of the source namespaces involved in a migration use such mechanisms to restrict network traffic to pods, the restrictions might inadvertently stop traffic to Rsync pods during migration.

Rsync pods running on both the source and the target clusters must connect to each other over an OpenShift Route. Existing NetworkPolicy or EgressNetworkPolicy objects can be configured to automatically exempt Rsync pods from these traffic restrictions.

### NetworkPolicy configuration

#### Egress traffic from Rsync pods

You can use the unique labels of Rsync pods to allow egress traffic to pass from them if the NetworkPolicy configuration in the source or destination namespaces blocks this type of traffic. The following policy allows all egress traffic from Rsync pods in the namespace:


```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress-from-rsync-pods
spec:
  podSelector:
    matchLabels:
      owner: directvolumemigration
      app: directvolumemigration-rsync-transfer
  egress:
  - {}
  policyTypes:
  - Egress
```


#### Ingress traffic to Rsync pods


```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress-from-rsync-pods
spec:
  podSelector:
    matchLabels:
      owner: directvolumemigration
      app: directvolumemigration-rsync-transfer
  ingress:
  - {}
  policyTypes:
  - Ingress
```


### EgressNetworkPolicy configuration

The EgressNetworkPolicy object or Egress Firewalls are OpenShift constructs designed to block egress traffic leaving the cluster.

Unlike the NetworkPolicy object, the Egress Firewall works at a project level because it applies to all pods in the namespace. Therefore, the unique labels of Rsync pods do not exempt only Rsync pods from the restrictions. However, you can add the CIDR ranges of the source or target cluster to the Allow rule of the policy so that a direct connection can be setup between two clusters.

Based on which cluster the Egress Firewall is present in, you can add the CIDR range of the other cluster to allow egress traffic between the two:


```yaml
apiVersion: network.openshift.io/v1
kind: EgressNetworkPolicy
metadata:
  name: test-egress-policy
  namespace: <namespace>
spec:
  egress:
  - to:
      cidrSelector: <cidr_of_source_or_target_cluster>
    type: Deny
```


### Choosing alternate endpoints for data transfer

By default, DVM uses an {product-title} route as an endpoint to transfer PV data to destination clusters. You can choose another type of supported endpoint, if cluster topologies allow.

For each cluster, you can configure an endpoint by setting the rsync_endpoint_type variable on the appropriate destination cluster in your MigrationController CR:


```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigrationController
metadata:
  name: migration-controller
  namespace: openshift-migration
spec:
  [...]
  rsync_endpoint_type: [NodePort|ClusterIP|Route]
```


### Configuring supplemental groups for Rsync pods

When your PVCs use a shared storage, you can configure the access to that storage by adding supplemental groups to Rsync pod definitions in order for the pods to allow access:



The MigrationController CR can be updated to set values for these supplemental groups:


```yaml
spec:
  src_supplemental_groups: "1000,2000"
  target_supplemental_groups: "2000,3000"
```


## Configuring proxies

* You must be logged in as a user with cluster-admin privileges on all clusters.

1. Get the MigrationController CR manifest:

```terminal
$ oc get migrationcontroller <migration_controller> -n openshift-migration
```

2. Update the proxy parameters:

```yaml
apiVersion: migration.openshift.io/v1alpha1
kind: MigrationController
metadata:
  name: <migration_controller>
  namespace: openshift-migration
...
spec:
  stunnel_tcp_proxy: http://<username>:<password>@<ip>:<port> 1
  noProxy: example.com 2
```

Stunnel proxy URL for direct volume migration.
Comma-separated list of destination domain names, domains, IP addresses, or other network CIDRs to exclude proxying.

Preface a domain with . to match subdomains only. For example, .y.com matches x.y.com, but not y.com. Use * to bypass proxy for all destinations.
If you scale up workers that are not included in the network defined by the networking.machineNetwork[].cidr field from the installation configuration, you must add them to this list to prevent connection issues.

This field is ignored if neither the httpProxy nor the httpsProxy field is set.
3. Save the manifest as migration-controller.yaml.
4. Apply the updated manifest:

```terminal
$ oc replace -f migration-controller.yaml -n openshift-migration
```


For more information, see Configuring the cluster-wide proxy.

# Configuring a replication repository

The Multicloud Object Gateway is the only supported option for a restricted network environment.

MTC supports the file system and snapshot data copy methods for migrating data from the source cluster to the target cluster. You can select a method that is suited for your environment and is supported by your storage provider.

## Prerequisites

* All clusters must have uninterrupted network access to the replication repository.
* If you use a proxy server with an internally hosted replication repository, you must ensure that the proxy allows access to the replication repository.

## Retrieving Multicloud Object Gateway credentials


[NOTE]
----
Although the MCG Operator is deprecated, the MCG plugin is still available for OpenShift Data Foundation. To download the plugin, browse to Download Red Hat OpenShift Data Foundation and download the appropriate MCG plugin for your operating system.
----

* You must deploy OpenShift Data Foundation by using the appropriate Red Hat OpenShift Data Foundation deployment guide.

## Additional resources

* Disconnected environment in the Red Hat OpenShift Data Foundation documentation.
* MTC workflow
* About data copy methods
* Adding a replication repository to the MTC web console

# Uninstalling MTC and deleting resources

You can uninstall the Migration Toolkit for Containers (MTC) and delete its resources to clean up the cluster.


[NOTE]
----
Deleting the velero CRDs removes Velero from the cluster.
----

* You must be logged in as a user with cluster-admin privileges.

1. Delete the MigrationController custom resource (CR) on all clusters:

```terminal
$ oc delete migrationcontroller <migration_controller>
```

2. Uninstall the Migration Toolkit for Containers Operator on {product-title} 4 by using the Operator Lifecycle Manager.
3. Delete cluster-scoped resources on all clusters by running the following commands:
* migration custom resource definitions (CRDs):

```terminal
$ oc delete $(oc get crds -o name | grep 'migration.openshift.io')
```

* velero CRDs:

```terminal
$ oc delete $(oc get crds -o name | grep 'velero')
```

* migration cluster roles:

```terminal
$ oc delete $(oc get clusterroles -o name | grep 'migration.openshift.io')
```

* migration-operator cluster role:

```terminal
$ oc delete clusterrole migration-operator
```

* velero cluster roles:

```terminal
$ oc delete $(oc get clusterroles -o name | grep 'velero')
```

* migration cluster role bindings:

```terminal
$ oc delete $(oc get clusterrolebindings -o name | grep 'migration.openshift.io')
```

* migration-operator cluster role bindings:

```terminal
$ oc delete clusterrolebindings migration-operator
```

* velero cluster role bindings:

```terminal
$ oc delete $(oc get clusterrolebindings -o name | grep 'velero')
```
