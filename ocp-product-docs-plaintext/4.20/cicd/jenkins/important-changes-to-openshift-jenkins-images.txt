# Important changes to OpenShift Jenkins images


{product-title} 4.11 moves the OpenShift Jenkins and OpenShift Agent Base images to the ocp-tools-4 repository at registry.redhat.io. It also removes the OpenShift Jenkins Maven and NodeJS Agent images from its payload:
* {product-title} 4.11 moves the OpenShift Jenkins and OpenShift Agent Base images to the ocp-tools-4 repository at registry.redhat.io so that Red Hat can produce and update the images outside the {product-title} lifecycle. Previously, these images were in the {product-title} install payload and the openshift4 repository at registry.redhat.io.
* {product-title} 4.10 deprecated the OpenShift Jenkins Maven and NodeJS Agent images. {product-title} 4.11 removes these images from its payload. Red Hat no longer produces these images, and they are not available from the ocp-tools-4 repository at registry.redhat.io. Red Hat maintains the 4.10 and earlier versions of these images for any significant bug fixes or security CVEs, following the {product-title} lifecycle policy.
These changes support the {product-title} 4.10 recommendation to use multiple container Pod Templates with the Jenkins Kubernetes Plugin.

# Relocation of OpenShift Jenkins images

{product-title} 4.11 makes significant changes to the location and availability of specific OpenShift Jenkins images. Additionally, you can configure when and how to update these images.

* The Cluster Samples Operator manages the ImageStream and Template objects for operating the OpenShift Jenkins images.
* By default, the Jenkins DeploymentConfig object from the Jenkins pod template triggers a redeployment when the Jenkins image changes. By default, this image is referenced by the jenkins:2 image stream tag of Jenkins image stream in the openshift namespace in the ImageStream YAML file in the Samples Operator payload.
* If you upgrade from {product-title} 4.10 and earlier to 4.11, the deprecated maven and nodejs pod templates are still in the default image configuration.
* If you upgrade from {product-title} 4.10 and earlier to 4.11, the jenkins-agent-maven and jenkins-agent-nodejs image streams still exist in your cluster. To maintain these image streams, see the following section, "What happens with the jenkins-agent-maven and jenkins-agent-nodejs image streams in the openshift namespace?"

Each new image in the ocp-tools-4 repository in the registry.redhat.io registry supports multiple versions of {product-title}. When Red&#160;Hat updates one of these new images, it is simultaneously available for all versions. This availability is ideal when Red&#160;Hat updates an image in response to a security advisory. Initially, this change applies to {product-title} 4.11 and later. It is planned that this change will eventually apply to {product-title} 4.9 and later.

Previously, each Jenkins image supported only one version of {product-title} and Red&#160;Hat might update those images sequentially over time.

By moving from an in-payload image stream to an image stream that references non-payload images, {product-title} can define additional image stream tags. Red&#160;Hat has created a series of new image stream tags to go along with the existing "value": "jenkins:2" and "value": "image-registry.openshift-image-registry.svc:5000/openshift/jenkins-agent-base-rhel8:latest" image stream tags present in {product-title} 4.10 and earlier. These new image stream tags address some requests to improve how the Jenkins-related image streams are maintained.

About the new image stream tags:

ocp-upgrade-redeploy:: To update your Jenkins image when you upgrade {product-title}, use this image stream tag in your Jenkins deployment configuration. This image stream tag corresponds to the existing 2 image stream tag of the jenkins image stream and the latest image stream tag of the jenkins-agent-base-rhel8 image stream. It employs an image tag specific to only one SHA or image digest. When the ocp-tools-4 image changes, such as for Jenkins security advisories, Red Hat Engineering updates the Cluster Samples Operator payload.
user-maintained-upgrade-redeploy:: To manually redeploy Jenkins after you upgrade {product-title}, use this image stream tag in your Jenkins deployment configuration. This image stream tag uses the least specific image version indicator available. When you redeploy Jenkins, run the following command: $ oc import-image jenkins:user-maintained-upgrade-redeploy -n openshift. When you issue this command, the {product-title} ImageStream controller accesses the registry.redhat.io image registry and stores any updated images in the OpenShift image registry's slot for that Jenkins ImageStreamTag object. Otherwise, if you do not run this command, your Jenkins deployment configuration does not trigger a redeployment.
scheduled-upgrade-redeploy:: To automatically redeploy the latest version of the Jenkins image when it is released, use this image stream tag in your Jenkins deployment configuration. This image stream tag uses the periodic importing of image stream tags feature of the {product-title} image stream controller, which checks for changes in the backing image. If the image changes, for example, due to a recent Jenkins security advisory, {product-title} triggers a redeployment of your Jenkins deployment configuration. See "Configuring periodic importing of image stream tags" in the following "Additional resources."

The OpenShift Jenkins Maven and NodeJS Agent images for {product-title} were deprecated in 4.10, and are removed from the {product-title} install payload in 4.11. They do not have alternatives defined in the ocp-tools-4 repository. However, you can work around this by using the sidecar pattern described in the "Jenkins agent" topic mentioned in the following "Additional resources" section.

However, the Cluster Samples Operator does not delete the jenkins-agent-maven and jenkins-agent-nodejs image streams created by prior releases, which point to the tags of the respective {product-title} payload images on registry.redhat.io. Therefore, you can pull updates to these images by running the following commands:


```terminal
$ oc import-image jenkins-agent-nodejs -n openshift
```



```terminal
$ oc import-image jenkins-agent-maven -n openshift
```


Jenkins supports the following architectures across {product-title} releases:

* amd64
* arm64
* ppc64le
* s390x

However, for {product-title} Extended Update Support (EUS) releases, only the amd64 architecture is officially supported. As a result, OpenShift Jenkins images are shipped exclusively for amd64 on these releases. This is because the {product-title} platform itself supports only the amd64 architecture for EUS releases. For more information, see Support Matrix for OpenShift Jenkins releases.

Yes, Jenkins container images are updated on a quarterly basis, and the updates are made available for all supported Jenkins images across all supported {product-title} releases.

Red&#160;Hat supports only the latest Long-Term Support (LTS) version of the Jenkins core, as provided in our latest container images. We do not support multiple core versions. Our policy is to align with the latest Jenkins LTS version released by the upstream community.

Yes. Our goal is to maintain platform alignment. This means that Jenkins controller and agent images are built and tested for each supported {product-title} releases.

Jenkins is no longer part of the {product-title} core payload. Releases are managed separately. However, our intent is to publish updated OpenShift Jenkins images for newly released {product-title} releases within a few weeks of the {product-title} GA release.

Yes. We align with the Jenkins upstream lifecycle and follow the LTS version. Red&#160;Hat typically ships OpenShift Jenkins image updates quarterly unless a critical fix requires an out-of-cycle release.

To verify the current Jenkins LTS version:
- Navigate to the Jenkins Catalog &#8594; Packages section
- Search for “Jenkins”
- The result will show two packages, one of which is the Jenkins LTS package.

* Jenkins versions older than the current OpenShift Jenkins LTS are not supported.
* Running Jenkins outside of {product-title} is not supported.
* Multiple core versions of Jenkins are not supported. Plugins bundled with our OpenShift Jenkins images follow the same versioning across all supported {product-title} releases.

# Customizing the Jenkins image stream tag

To override the default upgrade behavior and control how the Jenkins image is upgraded, you set the image stream tag value that your Jenkins deployment configurations use.

The default upgrade behavior is the behavior that existed when the Jenkins image was part of the install payload. The image stream tag names, 2 and ocp-upgrade-redeploy, in the jenkins-rhel.json image stream file use SHA-specific image references. Therefore, when those tags are updated with a new SHA, the {product-title} image change controller automatically redeploys the Jenkins deployment configuration from the associated templates, such as jenkins-ephemeral.json or jenkins-persistent.json.

For new deployments, to override that default value, you change the value of the  JENKINS_IMAGE_STREAM_TAG in the jenkins-ephemeral.json Jenkins template. For example, replace the 2 in "value": "jenkins:2" with one of the following image stream tags:

* ocp-upgrade-redeploy, the default value, updates your Jenkins image when you upgrade {product-title}.
* user-maintained-upgrade-redeploy requires you to manually redeploy Jenkins by running $ oc import-image jenkins:user-maintained-upgrade-redeploy -n openshift after upgrading {product-title}.
* scheduled-upgrade-redeploy periodically checks the given <image>:<tag> combination for changes and upgrades the image when it changes. The image change controller pulls the changed image and redeploys the Jenkins deployment configuration provisioned by the templates. For more information about this scheduled import policy, see the "Adding tags to image streams" in the following "Additional resources."


[NOTE]
----
To override the current upgrade value for existing deployments, change the values of the environment variables that correspond to those template parameters.
----

* You are running OpenShift Jenkins on {product-title} {product-version}.
* You know the namespace where OpenShift Jenkins is deployed.

* Set the image stream tag value, replacing <namespace> with namespace where OpenShift Jenkins is deployed and <image_stream_tag> with an image stream tag:
Example

```terminal
$ oc patch dc jenkins -p '{"spec":{"triggers":[{"type":"ImageChange","imageChangeParams":{"automatic":true,"containerNames":["jenkins"],"from":{"kind":"ImageStreamTag","namespace":"<namespace>","name":"jenkins:<image_stream_tag>"}}}]}}'
```


[TIP]
----
Alternatively, to edit the Jenkins deployment configuration YAML, enter $ oc edit dc/jenkins -n <namespace> and update the value: 'jenkins:<image_stream_tag>' line.
----

# Additional resources

* Adding tags to image streams
* Configuring periodic importing of image stream tags
* Jenkins agent
* Certified jenkins images
* Certified jenkins-agent-base images
* Certified jenkins-agent-maven images
* Certified jenkins-agent-nodejs images