# Securing builds by strategy


Builds in {product-title} are run in privileged containers. Depending on the build strategy used, if you have privileges, you can run builds to escalate their permissions on the cluster and host nodes. And as a security measure, it limits who can run builds and the strategy that is used for those builds. Custom builds are inherently less safe than source builds, because they can execute any code within a privileged container, and are disabled by default. Grant docker build permissions with caution, because a vulnerability in the Dockerfile processing logic could result in a privileges being granted on the host node.
By default, all users that can create builds are granted permission to use the docker and Source-to-image (S2I) build strategies. Users with cluster administrator privileges can enable the custom build strategy, as referenced in the restricting build strategies to a user globally section.
You can control who can build and which build strategies they can use by using an authorization policy. Each build strategy has a corresponding build subresource. A user must have permission to create a build and permission to create on the build strategy subresource to create builds using that strategy. Default roles are provided that grant the create permission on the build strategy subresource.

# Disabling access to a build strategy globally

To prevent access to a particular build strategy globally, log in as a user with cluster administrator privileges, remove the corresponding role from the system:authenticated group, and apply the annotation rbac.authorization.kubernetes.io/autoupdate: "false" to protect them from changes between the API restarts. The following example shows disabling the docker build strategy.

1. Apply the rbac.authorization.kubernetes.io/autoupdate annotation by entering the following command:

```terminal
$ oc annotate clusterrolebinding.rbac system:build-strategy-docker-binding 'rbac.authorization.kubernetes.io/autoupdate=false' --overwrite
```

2. Remove the role by entering the following command:

```terminal
$ oc adm policy remove-cluster-role-from-group system:build-strategy-docker system:authenticated
```

3. Ensure the build strategy subresources are also removed from the admin and edit user roles:

```terminal
$ oc get clusterrole admin -o yaml | grep "builds/docker"
```


```terminal
$ oc get clusterrole edit -o yaml | grep "builds/docker"
```


# Restricting build strategies to users globally

You can allow a set of specific users to create builds with a particular strategy.

* Assign the role that corresponds to the build strategy to a specific user. For
example, to add the system:build-strategy-docker cluster role to the user
devuser:

```terminal
$ oc adm policy add-cluster-role-to-user system:build-strategy-docker devuser
```


[WARNING]
----
Granting a user access at the cluster level to the builds/docker subresource means that the user can create builds with the docker strategy in any project in which they can create builds.
----

# Restricting build strategies to a user within a project

Similar to granting the build strategy role to a user globally, you can allow a set of specific users within a project to create builds with a particular strategy.

* Assign the role that corresponds to the build strategy to a specific user within a project. For example, to add the system:build-strategy-docker role within the project devproject to the user devuser:

```terminal
$ oc adm policy add-role-to-user system:build-strategy-docker devuser -n devproject
```
