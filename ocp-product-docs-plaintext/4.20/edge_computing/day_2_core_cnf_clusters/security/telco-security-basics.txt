# Security basics


Security is a critical component of telecommunications deployments on {product-title}, particularly when running cloud-native network functions (CNFs).
You can enhance security for high-bandwidth network deployments in telecommunications (telco) environments by following key security considerations. By implementing these standards and best practices, you can strengthen security in telco-specific use cases.

# RBAC overview

Role-based access control (RBAC) objects determine whether a user is allowed to perform a given action within a project.

Cluster administrators can use the cluster roles and bindings to control who has various access levels to the {product-title} platform itself and all projects.

Developers can use local roles and bindings to control who has access to their projects. Note that authorization is a separate step from authentication, which is more about determining the identity of who is taking the action.

Authorization is managed using the following authorization objects:

Rules:: Are sets of permitted actions on specific objects. For example, a rule can determine whether a user or service account can create pods. Each rule specifies an API resource, the resource within that API, and the allowed action.
Roles:: Are collections of rules that define what actions users or groups can perform. You can associate or bind rules to multiple users or groups. A role file can contain one or more rules that specify the actions and resources allowed for that role.

Roles are categorized into the following types:
* Cluster roles: You can define cluster roles at the cluster level. They are not tied to a single namespace. They can apply across all namespaces or specific namespaces when you bind them to users, groups, or service accounts.
* Project roles: You can create project roles within a specific namespace, and they only apply to that namespace. You can assign permissions to specific users to create roles and role bindings within their namespace, ensuring they do not affect other namespaces.
Bindings:: Are associations between users and/or groups with a role. You can create a role binding to connect the rules in a role to a specific user ID or group. This brings together the role and the user or group, defining what actions they can perform.

[NOTE]
----
You can bind more than one role to a user or group.
----

For more information on RBAC, see "Using RBAC to define and apply permissions".

## Operational RBAC considerations

To reduce operational overhead, it is important to manage access through groups rather than handling individual user IDs across multiple clusters. By managing groups at an organizational level, you can streamline access control and simplify administration across your organization.

* Using RBAC to define and apply permissions

# Security accounts overview

A service account is an {product-title} account that allows a component to directly access the API. Service accounts are API objects that exist within each project.
Service accounts provide a flexible way to control API access without sharing a regular user&#8217;s credentials.

You can use service accounts to apply role-based access control (RBAC) to pods. By assigning service accounts to workloads, such as pods and deployments, you can grant additional permissions, such as pulling from different registries. This also allows you to assign lower privileges to service accounts, reducing the security footprint of the pods that run under them.

For more information about service accounts, see "Understanding and creating service accounts".

* Understanding and creating service accounts

# Identity provider configuration

Configuring an identity provider is the first step in setting up users on the cluster. You can manage groups at the organizational level by using an identity provider.

The identity provider can pull in specific user groups that are maintained at the organizational level, rather than the cluster level. This allows you to add and remove users from groups that follow your organizationâ€™s established practices.


[NOTE]
----
You must set up a cron job to run frequently to pull any changes into the cluster.
----

You can use an identity provider to manage access levels for specific groups within your organization. For example, you can perform the following actions to manage access levels:

* Assign the cluster-admin role to teams that require cluster-level privileges.
* Grant application administrators specific privileges to manage only their respective projects.
* Provide operational teams with view access across the cluster to enable monitoring without allowing modifications.

For information about configuring an identity provider, see "Understanding identity provider configuration".

* Understanding identity provider configuration

# Replacing the kubeadmin user with a cluster-admin user

The kubeadmin user with the cluster-admin privileges is created on every cluster by default. To enhance the cluster security, you can replace the`kubeadmin` user with a cluster-admin user and then disable or remove the kubeadmin user.

* You have created a user with cluster-admin privileges.
* You have installed the OpenShift CLI (oc).
* You have administrative access to a virtual vault for secure storage.

1. Create an emergency cluster-admin user by using the htpasswd identity provider. For more information, see "About htpasswd authentication".
2. Assign the cluster-admin privileges to the new user by running the following command:

```terminal
$ oc adm policy add-cluster-role-to-user cluster-admin <emergency_user>
```

3. Verify the emergency user access:
1. Log in to the cluster using the new emergency user.
2. Confirm that the user has cluster-admin privileges by running the following command:

```terminal
$ oc whoami
```


Ensure the output shows the emergency user&#8217;s ID.
4. Store the password or authentication key for the emergency user securely in a virtual vault.

[NOTE]
----
Follow the best practices of your organization for securing sensitive credentials.
----
5. Disable or remove the kubeadmin user to reduce security risks by running the following command:

```terminal
$ oc delete secrets kubeadmin -n kube-system
```


* About htpasswd authentication

# Security considerations for telco CNFs

Telco workloads handle vast amounts of sensitive data and demand high reliability. A single security vulnerability can lead to broader cluster-wide compromises. With numerous components running on a single-node OpenShift cluster, each component must be secured to prevent any breach from escalating. Ensuring security across the entire infrastructure, including all components, is essential to maintaining the integrity of the telco network and avoiding vulnerabilities.

The following key security features are essential for telco:

* Security Context Constraints (SCCs): Provide granular control over pod security in the OpenShift clusters.
* Pod Security Admission (PSA): Kubernetes-native pod security controls.
* Encryption: Ensures data confidentiality in high-throughput network environments.

# Advancement of pod security in Kubernetes and {product-title}

Kubernetes initially had limited pod security. When {product-title} integrated Kubernetes, Red Hat added pod security through Security Context Constraints (SCCs). In Kubernetes version 1.3, PodSecurityPolicy (PSP) was introduced as a similar feature. However, Pod Security Admission (PSA) was introduced in Kubernetes version 1.21, which resulted in the deprecation of PSP in Kubernetes version 1.25.

PSA also became available in {product-title} version 4.11. While PSA improves pod security, it lacks some features provided by SCCs that are still necessary for telco use cases. Therefore, {product-title} continues to support both PSA and SCCs.

# Key areas for CNF deployment

The cloud-native network function (CNF) deployment contains the following key areas:

Core:: The first deployments of CNFs occurred in the core of the wireless network. Deploying CNFs in the core typically means racks of servers placed in central offices or data centers. These servers are connected to both the internet and the Radio Access Network (RAN), but they are often behind multiple security firewalls or sometimes disconnected from the internet altogether. This type of setup is called an offline or disconnected cluster.
RAN:: After CNFs were successfully tested in the core network and found to be effective, they were considered for deployment in the Radio Access Network (RAN). Deploying CNFs in RAN requires a large number of servers (up to 100,000 in a large deployment). These servers are located near cellular towers and typically run as single-node OpenShift clusters, with the need for high scalability.

# Telco-specific infrastructure

Hardware requirements:: In telco networks, clusters are primarily built on bare-metal hardware. This means that the operating system (op-system-first) is installed directly on the physical machines, without using virtual machines. This reduces network connectivity complexity, minimizes latency, and optimizes CPU usage for applications.
Network requirements:: Telco networks require much higher bandwidth compared to standard IT networks. Telco networks commonly use dual-port 25 GB connections or 100 GB Network Interface Cards (NICs) to handle massive data throughput. Security is critical, requiring encrypted connections and secure endpoints to protect sensitive personal data.

# Lifecycle management

Upgrades are critical for security. When a vulnerability is discovered, it is patched in the latest z-stream release. This fix is then rolled back through each lower y-stream release until all supported versions are patched. Releases that are no longer supported do not receive patches. Therefore, it is important to upgrade {product-title} clusters regularly to stay within a supported release and ensure they remain protected against vulnerabilities.

For more information about lifecycle management and upgrades, see "Upgrading a telco core CNF clusters".

Upgrading a telco core CNF clusters

# Evolution of Network Functions to CNFs

Network Functions (NFs) began as Physical Network Functions (PNFs), which were purpose-built hardware devices operating independently. Over time, PNFs evolved into Virtual Network Functions (VNFs), which virtualized their capabilities while controlling resources like CPU, memory, storage, and network.

As technology advanced further, VNFs transitioned to cloud-native network functions (CNFs). CNFs run in lightweight, secure, and scalable containers. They enforce stringent restrictions, including non-root execution and minimal host interference, to enhance security and performance.

PNFs had unrestricted root access to operate independently without interference. With the shift to VNFs, resource usage was controlled, but processes could still run as root within their virtual machines. In contrast, CNFs restrict root access and limit container capabilities to prevent interference with other containers or the host operating system.

The main challenges in migrating to CNFs are as follows:

* Breaking down monolithic network functions into smaller, containerized processes.
* Adhering to cloud-native principles, such as non-root execution and isolation, while maintaining telco-grade performance and reliability.