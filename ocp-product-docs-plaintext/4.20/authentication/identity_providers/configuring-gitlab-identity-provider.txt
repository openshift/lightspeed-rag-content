# Configuring a GitLab identity provider


Configure the gitlab identity provider using GitLab.com or any other GitLab instance as an identity provider.

# About GitLab authentication

Configuring GitLab authentication allows users to log in to {product-title} with their GitLab credentials.

If you use GitLab version 7.7.0 to 11.0, you connect using the OAuth integration. If you use GitLab version 11.1 or later, you can use OpenID Connect (OIDC) to connect instead of OAuth.

# Creating the secret

Identity providers use {product-title} Secret objects in the openshift-config namespace to contain the client secret, client certificates, and keys.

* Create a Secret object containing a string by using the following command:

```terminal
$ oc create secret generic <secret_name> --from-literal=clientSecret=<secret> -n openshift-config
```


[TIP]
----
You can alternatively apply the following YAML to create the secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: <secret_name>
  namespace: openshift-config
type: Opaque
data:
  clientSecret: <base64_encoded_client_secret>
```

----
* You can define a Secret object containing the contents of a file by using the following command:

```terminal
$ oc create secret generic <secret_name> --from-file=<path_to_file> -n openshift-config
```


# Creating a config map

Identity providers use {product-title} ConfigMap objects in the openshift-config
namespace to contain the certificate authority bundle. These are primarily
used to contain certificate bundles needed by the identity provider.

* Define an {product-title} ConfigMap object containing the
certificate authority by using the following command. The certificate
authority must be stored in the ca.crt key of the ConfigMap object.

```terminal
$ oc create configmap ca-config-map --from-file=ca.crt=/path/to/ca -n openshift-config
```


[TIP]
----
You can alternatively apply the following YAML to create the config map:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ca-config-map
  namespace: openshift-config
data:
  ca.crt: |
    <CA_certificate_PEM>
```

----

# Sample GitLab CR

The following custom resource (CR) shows the parameters and acceptable values for a
GitLab identity provider.


```yaml
apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  name: cluster
spec:
  identityProviders:
  - name: gitlabidp 1
    mappingMethod: claim 2
    type: GitLab
    gitlab:
      clientID: {...} 3
      clientSecret: 4
        name: gitlab-secret
      url: https://gitlab.com 5
      ca: 6
        name: ca-config-map
```


This provider name is prefixed to the GitLab numeric user ID to form an
identity name. It is also used to build the callback URL.
Controls how mappings are established between this provider's identities and User objects.
The client ID of a
registered GitLab OAuth application.
The application must be configured with a callback URL of
https://oauth-openshift.apps.<cluster-name>.<cluster-domain>/oauth2callback/<idp-provider-name>.
Reference to an {product-title} Secret object containing the client secret
issued by GitLab.
The host URL of a GitLab provider. This could either be https://gitlab.com/
or any other self hosted instance of GitLab.
Optional: Reference to an {product-title} ConfigMap object containing the
PEM-encoded certificate authority bundle to use in validating server
certificates for the configured URL.

* See Identity provider parameters for information on parameters, such as mappingMethod, that are common to all identity providers.

# Adding an identity provider to your cluster

After you install your cluster, add an identity provider to it so your
users can authenticate.

* Create an {product-title} cluster.
* Create the custom resource (CR) for your identity providers.
* You must be logged in as an administrator.

1. Apply the defined CR:

```terminal
$ oc apply -f </path/to/CR>
```


[NOTE]
----
If a CR does not exist, oc apply creates a new CR and might trigger the following warning: Warning: oc apply should be used on resources created by either oc create --save-config or oc apply. In this case you can safely ignore this warning.
----
2. Log in to the cluster as a user from your identity provider, entering the
password when prompted.

```terminal
$ oc login -u <username>
```

3. Confirm that the user logged in successfully, and display the user name.

```terminal
$ oc whoami
```
