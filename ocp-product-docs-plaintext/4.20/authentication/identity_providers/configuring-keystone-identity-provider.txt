# Configuring a Keystone identity provider


Configure the keystone identity provider to integrate your {product-title} cluster with Keystone to enable shared authentication with an OpenStack Keystone v3 server configured to store users in an internal database. This configuration allows users to log in to {product-title} with their Keystone credentials.

# About identity providers in {product-title}

By default, only a kubeadmin user exists on your cluster. To specify an
identity provider, you must create a custom resource (CR) that describes
that identity provider and add it to the cluster.


[NOTE]
----
{product-title} user names containing /, :, and % are not supported.
----

# About Keystone authentication

Keystone is an OpenStack project that provides identity, token, catalog, and policy services.

You can configure the integration with Keystone so that the new {product-title} users are based on either the Keystone user names or unique Keystone IDs. With both methods, users log in by entering their Keystone user name and password. Basing the {product-title} users on the Keystone ID is more secure because if you delete a Keystone user and create a new Keystone user with that user name, the new user might have access to the old user&#8217;s resources.

# Creating the secret

Identity providers use {product-title} Secret objects in the openshift-config namespace to contain the client secret, client certificates, and keys.

* Create a Secret object that contains the key and certificate by using the following command:

```terminal
$ oc create secret tls <secret_name> --key=key.pem --cert=cert.pem -n openshift-config
```


[TIP]
----
You can alternatively apply the following YAML to create the secret:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: <secret_name>
  namespace: openshift-config
type: kubernetes.io/tls
data:
  tls.crt: <base64_encoded_cert>
  tls.key: <base64_encoded_key>
```

----

# Creating a config map

Identity providers use {product-title} ConfigMap objects in the openshift-config
namespace to contain the certificate authority bundle. These are primarily
used to contain certificate bundles needed by the identity provider.

* Define an {product-title} ConfigMap object containing the
certificate authority by using the following command. The certificate
authority must be stored in the ca.crt key of the ConfigMap object.

```terminal
$ oc create configmap ca-config-map --from-file=ca.crt=/path/to/ca -n openshift-config
```


[TIP]
----
You can alternatively apply the following YAML to create the config map:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ca-config-map
  namespace: openshift-config
data:
  ca.crt: |
    <CA_certificate_PEM>
```

----

# Sample Keystone CR

The following custom resource (CR) shows the parameters and acceptable values for a
Keystone identity provider.


```yaml
apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  name: cluster
spec:
  identityProviders:
  - name: keystoneidp 1
    mappingMethod: claim 2
    type: Keystone
    keystone:
      domainName: default 3
      url: https://keystone.example.com:5000 4
      ca: 5
        name: ca-config-map
      tlsClientCert: 6
        name: client-cert-secret
      tlsClientKey: 7
        name: client-key-secret
```


This provider name is prefixed to provider user names to form an identity name.
Controls how mappings are established between this provider's identities and User objects.
Keystone domain name. In Keystone, usernames are domain-specific. Only a single domain is supported.
The URL to use to connect to the Keystone server (required). This must
use https.
Optional: Reference to an {product-title} ConfigMap object containing the
PEM-encoded certificate authority bundle to use in validating server
certificates for the configured URL.
Optional: Reference to an {product-title} Secret object containing the client
certificate to present when making requests to the configured URL.
Reference to an {product-title} Secret object containing the key for the
client certificate. Required if tlsClientCert is specified.

* See Identity provider parameters for information on parameters, such as mappingMethod, that are common to all identity providers.

# Adding an identity provider to your cluster

After you install your cluster, add an identity provider to it so your
users can authenticate.

* Create an {product-title} cluster.
* Create the custom resource (CR) for your identity providers.
* You must be logged in as an administrator.

1. Apply the defined CR:

```terminal
$ oc apply -f </path/to/CR>
```


[NOTE]
----
If a CR does not exist, oc apply creates a new CR and might trigger the following warning: Warning: oc apply should be used on resources created by either oc create --save-config or oc apply. In this case you can safely ignore this warning.
----
2. Log in to the cluster as a user from your identity provider, entering the
password when prompted.

```terminal
$ oc login -u <username>
```

3. Confirm that the user logged in successfully, and display the user name.

```terminal
$ oc whoami
```
