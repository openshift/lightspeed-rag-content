# Using RBAC to define and apply permissions



# RBAC overview

Role-based access control (RBAC) objects determine whether a user is allowed to
perform a given action within a project.

can use the cluster roles and bindings to control who has various access levels to the {product-title} platform itself and all projects.

Developers can use local roles and bindings to control who has access
to their projects. Note that authorization is a separate step from
authentication, which is more about determining the identity of who is taking the action.

Authorization is managed using:



Be mindful of the difference between local and cluster bindings. For example,
if you bind the cluster-admin role to a user by using a local role binding,
it might appear that this user has the privileges of a cluster administrator.
This is not the case. Binding the cluster-admin to a user in a project
grants super administrator privileges for only that project to the user. That user has the permissions of the cluster role admin, plus a few additional permissions like the ability to edit rate limits, for that project. This binding can be confusing via the web console UI, which does not list cluster role bindings that are bound to true cluster administrators. However, it does list local role bindings that you can use to locally bind cluster-admin.

The relationships between cluster roles, local roles, cluster role bindings,
local role bindings, users, groups and service accounts are illustrated below.

![{product-title} RBAC]


[WARNING]
----
The get pods/exec, get pods/*, and get * rules grant execution privileges when they are applied to a role. Apply the principle of least privilege and assign only the minimal RBAC rights required for users and agents. For more information, see RBAC rules allow execution privileges.
----

## Evaluating authorization

{product-title} evaluates authorization by using:

Identity:: The user name and list of groups that the user belongs to.
Action:: The action you perform. In most cases, this consists of:
* Project: The project you access. A project is a Kubernetes namespace with
additional annotations that allows a community of users to organize and manage
their content in isolation from other communities.
* Verb : The action itself:  get, list, create, update, delete, deletecollection, or watch.
* Resource name: The API endpoint that you access.
Bindings:: The full list of bindings, the associations between users or groups
with a role.

{product-title} evaluates authorization by using the following steps:

1. The identity and the project-scoped action is used to find all bindings that
apply to the user or their groups.
2. Bindings are used to locate all the roles that apply.
3. Roles are used to find all the rules that apply.
4. The action is checked against each rule to find a match.
5. If no matching rule is found, the action is then denied by default.

including a matrix of the verbs and resources each are associated with.

# Projects and namespaces

A Kubernetes namespace provides a mechanism to scope resources in a cluster.
The
Kubernetes documentation
has more information on namespaces.

Namespaces provide a unique scope for:

* Named resources to avoid basic naming collisions.
* Delegated management authority to trusted users.
* The ability to limit community resource consumption.

Most objects in the system are scoped by namespace, but some are
excepted and have no namespace, including nodes and users.

A project is a Kubernetes namespace with additional annotations and is the central vehicle
by which access to resources for regular users is managed.
A project allows a community of users to organize and manage their content in
isolation from other communities. Users must be given access to projects by administrators,
or if allowed to create projects, automatically have access to their own projects.

Projects can have a separate name, displayName, and description.

* The mandatory name is a unique identifier for the project and is most visible when using the CLI tools or API. The maximum name length is 63 characters.
* The optional displayName is how the project is displayed in the web console (defaults to name).
* The optional description can be a more detailed description of the project and is also visible in the web console.

Each project scopes its own set of:



Cluster administrators
can create projects and delegate administrative rights for the project to any member of the user community.
Cluster administrators
can also allow developers to create their own projects.

Developers and administrators can interact with projects by using the CLI or the
web console.

# Default projects

{product-title} comes with a number of default projects, and projects
starting with openshift- are the most essential to users.
These projects host master components that run as pods and other infrastructure
components. The pods created in these namespaces that have a
critical pod annotation
are considered critical, and the have guaranteed admission by kubelet.
Pods created for master components in these namespaces are already marked as
critical.


[IMPORTANT]
----
Do not run workloads in or share access to default projects. Default projects are reserved for running core cluster components.
The following default projects are considered highly privileged: default, kube-public, kube-system, openshift, openshift-infra, openshift-node, and other system-created projects that have the openshift.io/run-level label set to 0 or 1. Functionality that relies on admission plugins, such as pod security admission, security context constraints, cluster resource quotas, and image reference resolution, does not work in highly privileged projects.
----

# Viewing cluster roles and bindings

You can use the oc CLI to view cluster roles and bindings by using the
oc describe command.

* Install the oc CLI.
* Obtain permission to view the cluster roles and bindings.

1. To view the cluster roles and their associated rule sets:
2. To view the current set of cluster role bindings, which shows the users and
groups that are bound to various roles:

# Viewing local roles and bindings

You can use the oc CLI to view local roles and bindings by using the
oc describe command.

* Install the oc CLI.
* Obtain permission to view the local roles and bindings:
* Users with the admin default cluster role bound locally can view and manage
roles and bindings in that project.

1. To view the current set of local role bindings, which show the users and groups
that are bound to various roles for the current project:

```terminal
$ oc describe rolebinding.rbac
```

2. To view the local role bindings for a different project, add the -n flag
to the command:

```terminal
$ oc describe rolebinding.rbac -n joe-project
```

Example output

```terminal
Name:         admin
Labels:       <none>
Annotations:  <none>
Role:
  Kind:  ClusterRole
  Name:  admin
Subjects:
  Kind  Name        Namespace
  ----  ----        ---------
  User  kube:admin


Name:         system:deployers
Labels:       <none>
Annotations:  openshift.io/description:
                Allows deploymentconfigs in this namespace to rollout pods in
                this namespace.  It is auto-managed by a controller; remove
                subjects to disa...
Role:
  Kind:  ClusterRole
  Name:  system:deployer
Subjects:
  Kind            Name      Namespace
  ----            ----      ---------
  ServiceAccount  deployer  joe-project


Name:         system:image-builders
Labels:       <none>
Annotations:  openshift.io/description:
                Allows builds in this namespace to push images to this
                namespace.  It is auto-managed by a controller; remove subjects
                to disable.
Role:
  Kind:  ClusterRole
  Name:  system:image-builder
Subjects:
  Kind            Name     Namespace
  ----            ----     ---------
  ServiceAccount  builder  joe-project


Name:         system:image-pullers
Labels:       <none>
Annotations:  openshift.io/description:
                Allows all pods in this namespace to pull images from this
                namespace.  It is auto-managed by a controller; remove subjects
                to disable.
Role:
  Kind:  ClusterRole
  Name:  system:image-puller
Subjects:
  Kind   Name                                Namespace
  ----   ----                                ---------
  Group  system:serviceaccounts:joe-project
```


# Adding roles to users

You can use  the oc adm administrator CLI to manage the roles and bindings.

Binding, or adding, a role to users or groups gives the user or group the access
that is granted by the role. You can add and remove roles to and from users and
groups using oc adm policy commands.

You can bind any of the default cluster roles to local users or groups in your
project.

1. Add a role to a user in a specific project:

```terminal
$ oc adm policy add-role-to-user <role> <user> -n <project>
```


For example, you can add the admin role to the alice user in joe project
by running:

```terminal
$ oc adm policy add-role-to-user admin alice -n joe
```


[TIP]
----
You can alternatively apply the following YAML to add the role to the user:

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: admin-0
  namespace: joe
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: alice
```

----
2. View the local role bindings and verify the addition in the output:

```terminal
$ oc describe rolebinding.rbac -n <project>
```


For example, to view the local role bindings for the joe project:

```terminal
$ oc describe rolebinding.rbac -n joe
```

Example output

```terminal
Name:         admin
Labels:       <none>
Annotations:  <none>
Role:
  Kind:  ClusterRole
  Name:  admin
Subjects:
  Kind  Name        Namespace
  ----  ----        ---------
  User  kube:admin


Name:         admin-0
Labels:       <none>
Annotations:  <none>
Role:
  Kind:  ClusterRole
  Name:  admin
Subjects:
  Kind  Name   Namespace
  ----  ----   ---------
  User  alice 1


Name:         system:deployers
Labels:       <none>
Annotations:  openshift.io/description:
                Allows deploymentconfigs in this namespace to rollout pods in
                this namespace.  It is auto-managed by a controller; remove
                subjects to disa...
Role:
  Kind:  ClusterRole
  Name:  system:deployer
Subjects:
  Kind            Name      Namespace
  ----            ----      ---------
  ServiceAccount  deployer  joe


Name:         system:image-builders
Labels:       <none>
Annotations:  openshift.io/description:
                Allows builds in this namespace to push images to this
                namespace.  It is auto-managed by a controller; remove subjects
                to disable.
Role:
  Kind:  ClusterRole
  Name:  system:image-builder
Subjects:
  Kind            Name     Namespace
  ----            ----     ---------
  ServiceAccount  builder  joe


Name:         system:image-pullers
Labels:       <none>
Annotations:  openshift.io/description:
                Allows all pods in this namespace to pull images from this
                namespace.  It is auto-managed by a controller; remove subjects
                to disable.
Role:
  Kind:  ClusterRole
  Name:  system:image-puller
Subjects:
  Kind   Name                                Namespace
  ----   ----                                ---------
  Group  system:serviceaccounts:joe
```

The alice user has been added to the admins RoleBinding.

# Local role binding commands

When you manage a user or group&#8217;s associated roles for local role bindings using the
following operations, a project may be specified with the -n flag. If it is
not specified, then the current project is used.

You can use the following commands for local RBAC management.



# Creating a cluster admin

The cluster-admin role is required to perform administrator
level tasks on the {product-title} cluster, such as modifying
cluster resources.

* You must have created a user to define as the cluster admin.

* Define the user as a cluster admin:

```terminal
$ oc adm policy add-cluster-role-to-user cluster-admin <user>
```


# Cluster role bindings for unauthenticated groups


[NOTE]
----
Before {product-title} 4.17, unauthenticated groups were allowed access to some cluster roles. Clusters updated from versions before {product-title} 4.17 retain this access for unauthenticated groups.
----

For security reasons {product-title} {product-version} does not allow unauthenticated groups to have default access to cluster roles.

There are use cases where it might be necessary to add system:unauthenticated to a cluster role.

Cluster administrators can add unauthenticated users to the following cluster roles:

* system:scope-impersonation
* system:webhook
* system:oauth-token-deleter
* self-access-reviewer


[IMPORTANT]
----
Always verify compliance with your organization's security standards when modifying unauthenticated access.
----