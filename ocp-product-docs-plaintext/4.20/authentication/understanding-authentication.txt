# Understanding authentication


For users to interact with {product-title}, they must first authenticate
to the cluster. The authentication layer identifies the user associated with requests to the
{product-title} API. The authorization layer then uses information about the
requesting user to determine if the request is allowed.

# Users

A user in {product-title} is an entity that can make requests to the
{product-title} API. An {product-title} User object represents an actor which
can be granted permissions in the system by adding roles to them or to their
groups. Typically, this represents the account of a developer or
administrator that is interacting with {product-title}.

Several types of users can exist:



Each user must authenticate in
some way to access {product-title}. API requests with no authentication
or invalid authentication are authenticated as requests by the anonymous
system user. After authentication, policy determines what the user is
authorized to do.

# Groups

A user can be assigned to one or more groups, each of which represent a
certain set of users. Groups are useful when managing authorization policies
to grant permissions to multiple users at once, for example allowing
access to objects within a project, versus granting
them to users individually.

In addition to explicitly defined groups, there are also
system groups, or virtual groups, that are automatically provisioned by
the cluster.

The following default virtual groups are most important:



# API authentication

Requests to the {product-title} API are authenticated using the following
methods:

OAuth access tokens:: 
* Obtained from the {product-title} OAuth server using the
<namespace_route>/oauth/authorize and <namespace_route>/oauth/token
endpoints.
* Sent as an Authorization: Bearer&#8230;&#8203; header.
* Sent as a websocket subprotocol header in the form
base64url.bearer.authorization.k8s.io.<base64url-encoded-token> for websocket
requests.
X.509 client certificates:: 
* Requires an HTTPS connection to the API server.
* Verified by the API server against a trusted certificate authority bundle.
* The API server creates and distributes certificates to controllers to authenticate themselves.

Any request with an invalid access token or an invalid certificate is rejected
by the authentication layer with a 401 error.

If no access token or certificate is presented, the authentication layer assigns
the system:anonymous virtual user and the system:unauthenticated virtual
group to the request. This allows the authorization layer to determine which
requests, if any, an anonymous user is allowed to make.

## {product-title} OAuth server

The {product-title} Control Plane includes a built-in OAuth server. Users obtain OAuth
access tokens to authenticate themselves to the API.

When a person requests a new OAuth token, the OAuth server uses the configured
identity provider
to determine the identity of the person making the request.

It then determines what user that identity maps to, creates an access token for
that user, and returns the token for use.

### OAuth token requests

Every request for an OAuth token must specify the OAuth client that will
receive and use the token. The following OAuth clients are automatically
created when starting the {product-title} API:



1. <namespace_route> refers to the namespace route. This is found by
running the following command:

```terminal
$ oc get route oauth-openshift -n openshift-authentication -o json | jq .spec.host
```

All requests for OAuth tokens involve a request to
<namespace_route>/oauth/authorize. Most authentication integrations place an
authenticating proxy in front of this endpoint, or configure
{product-title} to validate credentials against a backing identity provider.
Requests to <namespace_route>/oauth/authorize can come from user-agents that
cannot display interactive login pages, such as the CLI. Therefore,
{product-title} supports authenticating using a WWW-Authenticate
challenge in addition to interactive login flows.

If an authenticating proxy is placed in front of the
<namespace_route>/oauth/authorize endpoint, it sends unauthenticated,
non-browser user-agents WWW-Authenticate challenges rather than
displaying an interactive login page or redirecting to an interactive
login flow.


[NOTE]
----
To prevent cross-site request forgery (CSRF) attacks against browser
clients,  only send Basic authentication challenges with if a
X-CSRF-Token header is on the request. Clients that expect
to receive Basic WWW-Authenticate challenges must set this header to a
non-empty value.
If the authenticating proxy cannot support WWW-Authenticate challenges,
or if {product-title} is configured to use an identity provider that does
not support WWW-Authenticate challenges, you must use a browser to manually
obtain a token from
<namespace_route>/oauth/token/request.
----