# Enabling direct authentication with an external OIDC identity provider


While the built-in OpenShift OAuth server supports integration with a variety of identity providers, including external OpenID Connect (OIDC) identity providers, it is limited to the capabilities of the OAuth server itself. You can configure {product-title} to use an external OIDC identity provider directly to issue tokens for authentication, which replaces the built-in OpenShift OAuth server.

[IMPORTANT]
----
Direct authentication with an OIDC identity provider is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

# About direct authentication with an external OIDC identity provider

You can enable direct integration with an external OpenID Connect (OIDC) identity provider to issue tokens for authentication. This bypasses the built-in OAuth server and uses the external identity provider directly.

By integrating directly with an external OIDC provider, you can leverage the advanced capabilities of your preferred OIDC provider instead of being limited by the capabilities of the built-in OAuth server. Your organization can manage users and groups from a single interface, while also streamlining authentication across multiple clusters and in hybrid environments. You can also integrate with existing tools and solutions.


[IMPORTANT]
----
Currently, you may configure only one OIDC provider for direct authentication.
----

After switching to direct authentication, existing authentication configuration is not guaranteed to be preserved. Prior to enabling direct authentication, back up any existing user, group, oauthclient, or identity provider configuration in case you need to revert back to using the built-in OAuth server for authentication.

Before replacing the built-in OAuth server with an external provider, ensure that you have access to a long-lived method of logging in with cluster administrator permissions, such as one of the following:

* a certificate-based user kubeconfig file, such as the one generated by the installation program
* a long-lived service account token kubeconfig file
* a certificate-based service account kubeconfig file

If there are any issues with the external identity provider, you need one of these methods to gain access to the {product-title} cluster in an emergency situation.

## Direct authentication identity providers

Direct authentication has been tested with the following OpenID Connect (OIDC) identity providers:

* Keycloak
* Microsoft Entra ID


[NOTE]
----
Red Hat does not test all factors associated with third-party identity provider functionality. For more information about third-party support, see the Red Hat third-party support policy.
----

# Configuring an external OIDC identity provider for direct authentication

You can configure {product-title} to directly use an external OIDC identity provider to issue tokens for authentication.


[IMPORTANT]
----
Direct authentication with an OIDC identity provider is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

* You have enabled the TechPreviewNoUpgrade feature set.
* You have configured your external authentication provider.

This procedure uses Keycloak as the identity provider and assumes that you have the following clients configured:
* A confidential client for the web console called console-test with the valid redirect URIs set to https://<openshift_console_route>/auth/callback
* A public client for the OpenShift CLI (`oc`) called oc-cli-test with the valid redirect URIs set to http://localhost:8080
* You have access to the kubeconfig file generated by the installation program for the cluster.
* You have backed up any existing authentication configuration, in case you need to revert back to using the built-in OAuth server for authentication.

1. Ensure that you are using the kubeconfig file generated by the installation program, or another long-lived method of logging in as a cluster administrator.
2. Create a secret that allows you to authenticate with the web console by running the following command:

```terminal
$ oc create secret generic console-secret \
    --from-literal=clientSecret=<secret_value> \1
    -n openshift-config
```

Replace <secret_value> with the value of the secret for the console-test client in your identity provider.
3. Optional: Create a config map that contains the provider's certificate authority bundle by running the following command:

```terminal
$ oc create configmap keycloak-oidc-ca --from-file=ca-bundle.crt=my-directory/ca-bundle.crt \1
    -n openshift-config
```

Specify the path to your provider's ca-bundle.crt file.
4. Edit the authentication configuration by running the following command:

```terminal
$ oc edit authentication.config/cluster
```

5. Update the authentication configuration by setting the type field to OIDC, configuring the oidcProviders field for your provider, and setting the webhookTokenAuthenticator field to null:

```yaml
apiVersion: config.openshift.io/v1
kind: Authentication
metadata:
# ...
spec:
  oidcProviders: 1
  - claimMappings:
      groups:
        claim: groups 2
        prefix: 'oidc-groups-test:'
      username:
        claim: email 3
        prefixPolicy: Prefix
        prefix:
          prefixString: 'oidc-user-test:'
    issuer:
      audiences: 4
      - console-test
      - oc-cli-test
      issuerCertificateAuthority:
        name: keycloak-oidc-ca 5
      issuerURL: https://keycloak-keycloak.apps.example.com/realms/master 6
    name: 'keycloak-oidc-server' 7
    oidcClients:
    - clientID: oc-cli-test 8
      componentName: cli
      componentNamespace: openshift-console
    - clientID: console-test 9
      clientSecret:
        name: console-secret 10
      componentName: console
      componentNamespace: openshift-console
  type: OIDC 11
  webhookTokenAuthenticator: null 12
```

The OIDC provider configuration. Currently, only one OIDC provider configuration is allowed.
The name of the claim to construct group names for the cluster identity.
The name of the claim to construct usernames for the cluster identity.
The list of audiences that this authentication provider issues tokens for.
The name of the config map that contains the ca-bundle.crt key. If unset, system trust is used instead.
The URL for the token issuer.
The name for external OIDC provider.
The client ID that your provider uses for the OpenShift CLI (`oc`).
The client ID that your provider uses for the {product-title} web console.
The name of the secret that stores the secret value for the console client.
Must be set to OIDC to indicate to use an external OIDC identity provider.
Must be set to null when type is set to OIDC.

For more details on all available parameters, see "OIDC provider configuration parameters".
6. Exit and save the changes to apply the new configuration.
7. Wait for the cluster to roll out new revisions to all nodes.
1. Check the Kubernetes API server Operator status by running the following command:

```terminal
$ oc get co kube-apiserver
```

Example output

```terminal
NAME             VERSION   AVAILABLE   PROGRESSING   DEGRADED   SINCE   MESSAGE
kube-apiserver   4.19.0    True        True          False      85m     NodeInstallerProgressing: 2 node are at revision 8; 1 node is at revision 10
```


The message in the preceding example shows that one node has progressed to the new revision and two nodes have not yet updated. It can take 20 minutes or more to roll out the new revision to all nodes, depending on the size of your cluster.
2. To troubleshoot any issues, you can also check the Cluster Authentication Operator and kube-apiserver pod logs for errors.

1. Verify that you can log in to the OpenShift CLI (`oc`) by authenticating with your identity provider:
1. Log in by running the following command:

```terminal
$ oc login --exec-plugin=oc-oidc \1
    --issuer-url=https://keycloak-keycloak.apps.example.com/realms/master \2
    --client-id=oc-cli-test \3
    --extra-scopes=email --callback-port=8080 \
    --oidc-certificate-authority my-directory/ca-bundle.crt 4
```

Specify oc-oidc as the exec plugin type. Only a value of oc-oidc is allowed.
Specify the issuer URL for your identity provider.
Specify client ID for the OpenShift CLI (`oc`).
Specify the path to the ca-bundle.crt file on your local machine.
Example output

```terminal
Please visit the following URL in your browser: http://localhost:8080
```

2. Open http://localhost:8080 in a browser.
3. Authenticate with credentials from your identity provider.

After successfully authenticating, you should see a message similar to the following output in your terminal:

```terminal
Logged into "https://api.my-cluster.example.com:6443" as "oidc-user-test:user1@example.com" from an external oidc issuer.
```

2. Verify that you can log in to the {product-title} web console by authenticating with your identity provider:
1. Open the web console URL for your cluster in a browser.

You are redirected to your identity provider to log in.
2. Authenticate with credentials from your identity provider.

Verify that you logged in successfully and are redirected to the {product-title} web console.

## OIDC provider configuration parameters

The following table lists all available OIDC provider parameters for direct authentication:



# Disabling direct authentication

If necessary, you can disable direct authentication for your cluster and revert back to authenticating with the built-in OpenShift OAuth server.

* You have access to the kubeconfig file generated by the installation program for the cluster.

1. Ensure that you are using the kubeconfig file generated by the installation program, or another long-lived method of logging in as a cluster administrator.
2. Update the authentication configuration to use the built-in OpenShift OAuth server by running the following command:

```terminal
$ oc patch authentication.config/cluster --type=merge -p='
spec:
  type: "" 1
  oidcProviders: null 2
'
```

Sets type to "" to use the built-in OpenShift OAuth server. A value of IntegratedOAuth is also equivalent.
Removes the oidcProviders configuration.
3. Wait for the cluster to roll out new revisions to all nodes.
1. Check the Kubernetes API server Operator status by running the following command:

```terminal
$ oc get co kube-apiserver
```

Example output

```terminal
NAME             VERSION   AVAILABLE   PROGRESSING   DEGRADED   SINCE   MESSAGE
kube-apiserver   4.19.0    True        True          False      85m     NodeInstallerProgressing: 2 node are at revision 12; 1 node is at revision 14
```


The message in the preceding example shows that one node has progressed to the new revision and two nodes have not yet updated. It can take 20 minutes or more to roll out the new revision to all nodes, depending on the size of your cluster.
2. To troubleshoot any issues, you can also check the Cluster Authentication Operator and kube-apiserver pod logs for errors.
4. If necessary, restore any existing authentication configuration.

* Verify that you can successfully log in to the {product-title} web console and OpenShift CLI (`oc`).