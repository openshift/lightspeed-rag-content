# Understanding identity provider configuration


The {product-title} master includes a built-in OAuth server. Developers and
administrators obtain OAuth access tokens to authenticate themselves to the API.
As an administrator, you can configure OAuth to specify an identity provider
after you install your cluster.

# About identity providers in {product-title}

By default, only a kubeadmin user exists on your cluster. To specify an
identity provider, you must create a custom resource (CR) that describes
that identity provider and add it to the cluster.


[NOTE]
----
{product-title} user names containing /, :, and % are not supported.
----

# Supported identity providers

You can configure the following types of identity providers:



Once an identity provider has been defined, you can
use RBAC to define and apply permissions.

# Removing the kubeadmin user

After you define an identity provider and create a new cluster-admin
user, you can remove the kubeadmin to improve cluster security.


[WARNING]
----
If you follow this procedure before another user is a cluster-admin,
then {product-title} must be reinstalled. It is not possible to undo
this command.
----

* You must have configured at least one identity provider.
* You must have added the cluster-admin role to a user.
* You must be logged in as an administrator.

* Remove the kubeadmin secrets:

```terminal
$ oc delete secrets kubeadmin -n kube-system
```


# Identity provider parameters

The following parameters are common to all identity providers:




[NOTE]
----
When adding or changing identity providers, you can map identities from the new
provider to existing users by setting the mappingMethod parameter to
add.
----

# Sample identity provider CR

The following custom resource (CR) shows the parameters and default
values that you use to configure an identity provider. This example
uses the htpasswd identity provider.


```yaml
apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  name: cluster
spec:
  identityProviders:
  - name: my_identity_provider 1
    mappingMethod: claim 2
    type: HTPasswd
    htpasswd:
      fileData:
        name: htpass-secret 3
```


This provider name is prefixed to provider user names to form an
identity name.
Controls how mappings are established between this provider's
identities and User objects.
An existing secret containing a file generated using
htpasswd.

# Manually provisioning a user when using the lookup mapping method

Typically, identities are automatically mapped to users during login. The lookup mapping method disables this automatic mapping, which requires you to provision users manually. If you are using the lookup mapping method, use the following procedure for each user after configuring the identity provider.

* You have installed the OpenShift CLI (`oc`).

1. Create an {product-title} user:

```terminal
$ oc create user <username>
```

2. Create an {product-title} identity:

```terminal
$ oc create identity <identity_provider>:<identity_provider_user_id>
```


Where <identity_provider_user_id> is a name that uniquely represents the user in the identity provider.
3. Create a user identity mapping for the created user and identity:

```terminal
$ oc create useridentitymapping <identity_provider>:<identity_provider_user_id> <username>
```


* How to create user, identity and map user and identity in LDAP authentication for mappingMethod as lookup inside the OAuth manifest
* How to create user, identity and map user and identity in OIDC authentication for mappingMethod as lookup