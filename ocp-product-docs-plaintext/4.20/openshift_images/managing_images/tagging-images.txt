# Tagging images


The following sections provide an overview and instructions for using image tags in the context of container images for working with {product-title} image streams and their tags.

# Image tags

An image tag is a label applied to a container image in a repository that distinguishes a specific image from other images in an image stream. Typically, the tag represents a version number of some sort. For example, here :v3.11.59-2 is the tag:


```text
registry.access.redhat.com/openshift3/jenkins-2-rhel7:v3.11.59-2
```


You can add additional tags to an image. For example, an image might be assigned the tags :v3.11.59-2 and :latest.

{product-title} provides the oc tag command, which is similar to the docker tag command, but operates on image streams instead of directly on images.

# Image tag conventions

Images evolve over time and their tags reflect this. Generally, an image tag always points to the latest image built.

If there is too much information embedded in a tag name, like v2.0.1-may-2019, the tag points to just one revision of an image and is never updated. Using default image pruning options, such an image is never removed.

If the tag is named v2.0, image revisions are more likely. This results in longer tag history and, therefore, the image pruner is more likely to remove old and unused images.

Although tag naming convention is up to you, here are a few examples in the format <image_name>:<image_tag>:



If you require dates in tag names, periodically inspect old and unsupported images and istags and remove them. Otherwise, you can experience increasing resource usage caused by retaining old images.

# Adding tags to image streams

An image stream in {product-title} comprises zero or more container images identified by tags.

There are different types of tags available. The default behavior uses a permanent tag, which points to a specific image in time. If the permanent tag is in use and the source changes, the tag does not change for the destination.

A tracking tag means the destination tag&#8217;s metadata is updated during the import of the source tag.

* You can add tags to an image stream using the oc tag command:

```terminal
$ oc tag <source> <destination>
```


For example, to configure the ruby image stream static-2.0 tag to always refer to the current image for the ruby image stream 2.0 tag:

```terminal
$ oc tag ruby:2.0 ruby:static-2.0
```


This creates a new image stream tag named static-2.0 in the ruby image stream. The new tag directly references the image id that the ruby:2.0 image stream tag pointed to at the time oc tag was run, and the image it points to never changes.
* To ensure the destination tag is updated when the source tag changes, use the --alias=true flag:

```terminal
$ oc tag --alias=true <source> <destination>
```



[NOTE]
----
Use a tracking tag for creating permanent aliases, for example, latest or stable. The tag only works correctly within a single image stream. Trying to create a cross-image stream alias produces an error.
----

* You can also add the --scheduled=true flag to have the destination tag be
refreshed, or re-imported, periodically. The period is configured globally at
the system level.
* The --reference flag creates an image stream tag that is not imported. The tag points to the source location, permanently.

If you want to instruct {product-title} to always fetch the tagged image from the integrated registry, use --reference-policy=local. The registry uses the pull-through feature to serve the image to the client. By default, the image blobs are mirrored locally by the registry. As a result, they can be pulled more quickly the next time they are needed. The flag also allows for pulling from insecure registries without a need to supply --insecure-registry to the container runtime as long as the image stream has an insecure annotation or the tag has an insecure import policy.

# Removing tags from image streams

You can remove tags from an image stream.

* To remove a tag completely from an image stream run:

```terminal
$ oc delete istag/ruby:latest
```


or:

```terminal
$ oc tag -d ruby:latest
```


# Referencing images in imagestreams

You can use tags to reference images in image streams using the following reference types.



When viewing example image stream definitions you may notice they contain definitions of ImageStreamTag and references to DockerImage, but nothing related to ImageStreamImage.

This is because the ImageStreamImage objects are automatically created in {product-title} when you import or tag an image into the image stream. You should never have to explicitly define an ImageStreamImage object in any image stream definition that you use to create image streams.

* To reference an image for a given image stream and tag, use ImageStreamTag:

```
<image_stream_name>:<tag>
```

* To reference an image for a given image stream and image sha ID, use ImageStreamImage:

```
<image_stream_name>@<id>
```


The <id> is an immutable identifier for a specific image, also called a
digest.
* To reference or retrieve an image for a given external registry, use DockerImage:

```
openshift/ruby-20-centos7:2.0
```


[NOTE]
----
When no tag is specified, it is assumed the latest tag is used.
----

You can also reference a third-party registry:

```
registry.redhat.io/rhel7:latest
```


Or an image with a digest:

```
centos/ruby-22-centos7@sha256:3a335d7d8a452970c5b4054ad7118ff134b3a6b50a2bb6d0c07c746e8986b28e
```
