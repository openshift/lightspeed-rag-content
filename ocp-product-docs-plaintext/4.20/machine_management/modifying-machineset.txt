# Modifying a compute machine set


You can modify a compute machine set, such as adding labels, changing the instance type, or changing block storage.

[NOTE]
----
If you need to scale a compute machine set without making other changes, see Manually scaling a compute machine set.
----

# Modifying a compute machine set by using the CLI

You can modify the configuration of a compute machine set, and then propagate the changes to the machines in your cluster by using the CLI.

By updating the compute machine set configuration, you can enable features or change the properties of the machines it creates.
When you modify a compute machine set, your changes only apply to compute machines that are created after you save the updated MachineSet custom resource (CR).
The changes do not affect existing machines.


[NOTE]
----
Changes made in the underlying cloud provider are not reflected in the Machine or MachineSet CRs.
To adjust instance configuration in cluster-managed infrastructure, use the cluster-side resources.
----

You can replace the existing machines with new ones that reflect the updated configuration by scaling the compute machine set to create twice the number of replicas and then scaling it down to the original number of replicas.

If you need to scale a compute machine set without making other changes, you do not need to delete the machines.


[NOTE]
----
By default, the {product-title} router pods are deployed on compute machines.
Because the router is required to access some cluster resources, including the web console, do not scale the compute machine set to 0 unless you first relocate the router pods.
----

The output examples in this procedure use the values for an AWS cluster.

* Your {product-title} cluster uses the Machine API.
* You are logged in to the cluster as an administrator by using the OpenShift CLI (`oc`).

1. List the compute machine sets in your cluster by running the following command:

```terminal
$ oc get machinesets.machine.openshift.io -n openshift-machine-api
```

Example output

```text
NAME                           DESIRED   CURRENT   READY   AVAILABLE   AGE
<compute_machine_set_name_1>   1         1         1       1           55m
<compute_machine_set_name_2>   1         1         1       1           55m
```

2. Edit a compute machine set by running the following command:

```terminal
$ oc edit machinesets.machine.openshift.io <machine_set_name> \
  -n openshift-machine-api
```

3. Note the value of the spec.replicas field, because you need it when scaling the machine set to apply the changes.

```yaml
apiVersion: machine.openshift.io/v1beta1
kind: MachineSet
metadata:
  name: <machine_set_name>
  namespace: openshift-machine-api
spec:
  replicas: 2 1
# ...
```

The examples in this procedure show a compute machine set that has a replicas value of 2.
4. Update the compute machine set CR with the configuration options that you want and save your changes.
5. List the machines that are managed by the updated compute machine set by running the following command:

```terminal
$ oc get machines.machine.openshift.io \
  -n openshift-machine-api \
  -l machine.openshift.io/cluster-api-machineset=<machine_set_name>
```

Example output for an AWS cluster

```text
NAME                        PHASE     TYPE         REGION      ZONE         AGE
<machine_name_original_1>   Running   m6i.xlarge   us-west-1   us-west-1a   4h
<machine_name_original_2>   Running   m6i.xlarge   us-west-1   us-west-1a   4h
```

6. For each machine that is managed by the updated compute machine set, set the delete annotation by running the following command:

```terminal
$ oc annotate machine.machine.openshift.io/<machine_name_original_1> \
  -n openshift-machine-api \
  machine.openshift.io/delete-machine="true"
```

7. To create replacement machines with the new configuration, scale the compute machine set to twice the number of replicas by running the following command:

```terminal
$ oc scale --replicas=4 \1
  machineset.machine.openshift.io <machine_set_name> \
  -n openshift-machine-api
```

The original example value of 2 is doubled to 4.
8. List the machines that are managed by the updated compute machine set by running the following command:

```terminal
$ oc get machines.machine.openshift.io \
  -n openshift-machine-api \
  -l machine.openshift.io/cluster-api-machineset=<machine_set_name>
```

Example output for an AWS cluster

```text
NAME                        PHASE          TYPE         REGION      ZONE         AGE
<machine_name_original_1>   Running        m6i.xlarge   us-west-1   us-west-1a   4h
<machine_name_original_2>   Running        m6i.xlarge   us-west-1   us-west-1a   4h
<machine_name_updated_1>    Provisioned    m6i.xlarge   us-west-1   us-west-1a   55s
<machine_name_updated_2>    Provisioning   m6i.xlarge   us-west-1   us-west-1a   55s
```


When the new machines are in the Running phase, you can scale the compute machine set to the original number of replicas.
9. To remove the machines that were created with the old configuration, scale the compute machine set to the original number of replicas by running the following command:

```terminal
$ oc scale --replicas=2 \1
  machineset.machine.openshift.io <machine_set_name> \
  -n openshift-machine-api
```

The original example value of 2.

* To verify that a machine created by the updated machine set has the correct configuration, examine the relevant fields in the CR for one of the new machines by running the following command:

```terminal
$ oc describe machine.machine.openshift.io <machine_name_updated_1> \
  -n openshift-machine-api
```

* To verify that the compute machines without the updated configuration are deleted, list the machines that are managed by the updated compute machine set by running the following command:

```terminal
$ oc get machines.machine.openshift.io \
  -n openshift-machine-api \
  -l machine.openshift.io/cluster-api-machineset=<machine_set_name>
```

Example output while deletion is in progress for an AWS cluster

```text
NAME                        PHASE           TYPE         REGION      ZONE         AGE
<machine_name_original_1>   Deleting        m6i.xlarge   us-west-1   us-west-1a   4h
<machine_name_original_2>   Deleting        m6i.xlarge   us-west-1   us-west-1a   4h
<machine_name_updated_1>    Running         m6i.xlarge   us-west-1   us-west-1a   5m41s
<machine_name_updated_2>    Running         m6i.xlarge   us-west-1   us-west-1a   5m41s
```

Example output when deletion is complete for an AWS cluster

```text
NAME                        PHASE           TYPE         REGION      ZONE         AGE
<machine_name_updated_1>    Running         m6i.xlarge   us-west-1   us-west-1a   6m30s
<machine_name_updated_2>    Running         m6i.xlarge   us-west-1   us-west-1a   6m30s
```


* Lifecycle hooks for the machine deletion phase
* Scaling a compute machine set manually
* Controlling pod placement using the scheduler