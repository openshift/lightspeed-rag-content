# Network Policy


As a user with the admin role, you can create a network policy for the netobserv namespace to secure inbound access to the Network Observability Operator.

# Configuring an ingress network policy by using the FlowCollector custom resource

You can configure the FlowCollector custom resource (CR) to deploy an ingress network policy for network observability by setting the spec.NetworkPolicy.enable specification to true. By default, the specification is false.

If you have installed Loki, Kafka or any exporter in a different namespace that also has a network policy, you must ensure that the Network Observability components can communicate with them. Consider the following about your setup:

* Connection to Loki (as defined in the FlowCollector CR spec.loki parameter)
* Connection to Kafka (as defined in the FlowCollector CR spec.kafka parameter)
* Connection to any exporter (as defined in FlowCollector CR spec.exporters parameter)
* If you are using Loki and including it in the policy target, connection to an external object storage (as defined in your LokiStack related secret)

1. In the web console, go to Operators -> Installed Operators page.
2. Under the Provided APIs heading for Network Observability, select Flow Collector.
3. Select cluster then select the YAML tab.
4. Configure the FlowCollector CR. A sample configuration is as follows:
Example FlowCollector CR for network policy

```yaml
apiVersion: flows.netobserv.io/v1beta2
kind: FlowCollector
metadata:
  name: cluster
spec:
  namespace: netobserv
  networkPolicy:
    enable: true   1
    additionalNamespaces: ["openshift-console", "openshift-monitoring"] 2
# ...
```

By default, the enable value is false.
Default values are ["openshift-console", "openshift-monitoring"].

# Creating a network policy for network observability

If you want to further customize the network policies for the netobserv and netobserv-privileged namespaces, you must disable the managed installation of the policy from the FlowCollector CR, and create your own. You can use the network policy resources that are enabled from the FlowCollector CR as a starting point for the procedure that follows:


```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
spec:
  ingress:
  - from:
    - podSelector: {}
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: netobserv-privileged
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: openshift-console
    ports:
    - port: 9001
      protocol: TCP
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: openshift-monitoring
  podSelector: {}
  policyTypes:
  - Ingress
```



```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netobserv
  namespace: netobserv-privileged
spec:
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: openshift-monitoring
  podSelector: {}
  policyTypes:
  - Ingress
```


1. Navigate to Networking -> NetworkPolicies.
2. Select the netobserv project from the Project dropdown menu.
3. Name the policy. For this example, the policy name is allow-ingress.
4. Click Add ingress rule three times to create three ingress rules.
5. Specify the following in the form:
1. Make the following specifications for the first Ingress rule:
1. From the Add allowed source dropdown menu, select Allow pods from the same namespace.
2. Make the following specifications for the second Ingress rule:
1. From the Add allowed source dropdown menu, select Allow pods from inside the cluster.
2. Click + Add namespace selector.
3. Add the label, kubernetes.io/metadata.name, and the selector, openshift-console.
3. Make the following specifications for the third Ingress rule:
1. From the Add allowed source dropdown menu, select Allow pods from inside the cluster.
2. Click + Add namespace selector.
3. Add the label, kubernetes.io/metadata.name, and the selector, openshift-monitoring.

1. Navigate to Observe -> Network Traffic.
2. View the Traffic Flows tab, or any tab, to verify that the data is displayed.
3. Navigate to Observe -> Dashboards. In the NetObserv/Health selection, verify that the flows are being ingested and sent to Loki, which is represented in the first graph.

* Creating a network policy using the CLI