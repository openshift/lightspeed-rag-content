# Installing a cluster on GCP in a disconnected environment


In Red Hat OpenShift Container Platform 4.18, you can install a cluster on Google Cloud Platform (GCP) in a restricted network by creating an internal mirror of the installation release content on an existing Google Virtual Private Cloud (VPC).

[IMPORTANT]
----
You can install an Red Hat OpenShift Container Platform cluster by using mirrored installation release content, but your cluster will require internet access to use the GCP APIs.
----

# Prerequisites

* You reviewed details about the Red Hat OpenShift Container Platform installation and update processes.
* You read the documentation on selecting a cluster installation method and preparing it for users.
* You configured a GCP project to host the cluster.
* You mirrored the images for a disconnected installation to your registry and obtained the imageContentSources data for your version of Red Hat OpenShift Container Platform.

[IMPORTANT]
----
Because the installation media is on the mirror host, you can use that computer to complete all installation steps.
----
* You have an existing VPC in GCP. While installing a cluster in a restricted network that uses installer-provisioned infrastructure, you cannot use the installer-provisioned VPC. You must use a user-provisioned VPC that satisfies one of the following requirements:
* Contains the mirror registry
* Has firewall rules or a peering connection to access the mirror registry hosted elsewhere
* If you use a firewall, you configured it to allow the sites that your cluster requires access to. While you might need to grant access to more sites, you must grant access to *.googleapis.com and accounts.google.com.

# About installations in restricted networks

In Red Hat OpenShift Container Platform 4.18, you can perform an installation that does not
require an active connection to the internet to obtain software components. Restricted network installations can be completed using installer-provisioned infrastructure or user-provisioned infrastructure, depending on the cloud platform to which you are installing the cluster.

If you choose to perform a restricted network installation on a cloud platform, you
still require access to its cloud APIs. Some cloud functions, like
Amazon Web Service&#8217;s Route 53 DNS and IAM services, require internet access.
Depending on your network, you might require less internet
access for an installation on bare metal hardware, Nutanix, or on VMware vSphere.

To complete a restricted network installation, you must create a registry that
mirrors the contents of the OpenShift image registry and contains the
installation media. You can create this registry on a mirror host, which can
access both the internet and your closed network, or by using other methods
that meet your restrictions.

## Additional limits

Clusters in restricted networks have the following additional limitations and restrictions:

* The ClusterVersion status includes an Unable to retrieve available updates
error.
* By default, you cannot use the contents of the Developer Catalog because
you cannot access the required image stream tags.

# Internet access for Red Hat OpenShift Container Platform

In Red Hat OpenShift Container Platform 4.18, you require access to the internet to
obtain the images that are necessary to install
your cluster.

You must have internet access to perform the following actions:

* Access OpenShift Cluster Manager to download the installation program and perform subscription management. If the cluster has internet access and you do not disable Telemetry, that service automatically entitles your cluster.
* Access Quay.io to obtain the packages that are required to install your cluster.
* Obtain the packages that are required to perform cluster updates.

# Generating a key pair for cluster node SSH access

During an Red Hat OpenShift Container Platform installation, you can provide an SSH public key to the installation program. The key is passed to the Red Hat Enterprise Linux CoreOS (RHCOS) nodes through their Ignition config files and is used to authenticate SSH access to the nodes. The key is added to the ~/.ssh/authorized_keys list for the core user on each node, which enables password-less authentication.

After the key is passed to the nodes, you can use the key pair to SSH in to the RHCOS nodes as the user core. To access the nodes through SSH, the private key identity must be managed by SSH for your local user.

If you want to SSH in to your cluster nodes to perform installation debugging or disaster recovery, you must provide the SSH public key during the installation process. The ./openshift-install gather command also requires the SSH public key to be in place on the cluster nodes.


[IMPORTANT]
----
Do not skip this procedure in production environments, where disaster recovery and debugging is required.
----


[NOTE]
----
You must use a local key, not one that you configured with platform-specific approaches.
----

1. If you do not have an existing SSH key pair on your local machine to use for authentication onto your cluster nodes, create one. For example, on a computer that uses a Linux operating system, run the following command:

```terminal
$ ssh-keygen -t ed25519 -N '' -f <path>/<file_name> 1
```

Specify the path and file name, such as ~/.ssh/id_ed25519, of the new SSH key. If you have an existing key pair, ensure your public key is in the your ~/.ssh directory.

[NOTE]
----
If you plan to install an Red Hat OpenShift Container Platform cluster that uses the RHEL cryptographic libraries that have been submitted to NIST for FIPS 140-2/140-3 Validation on only the x86_64, ppc64le, and s390x architectures, do not create a key that uses the ed25519 algorithm. Instead, create a key that uses the rsa or ecdsa algorithm.
----
2. View the public SSH key:

```terminal
$ cat <path>/<file_name>.pub
```


For example, run the following to view the ~/.ssh/id_ed25519.pub public key:

```terminal
$ cat ~/.ssh/id_ed25519.pub
```

3. Add the SSH private key identity to the SSH agent for your local user, if it has not already been added. SSH agent management of the key is required for password-less SSH authentication onto your cluster nodes, or if you want to use the ./openshift-install gather command.

[NOTE]
----
On some distributions, default SSH private key identities such as ~/.ssh/id_rsa and ~/.ssh/id_dsa are managed automatically.
----
1. If the ssh-agent process is not already running for your local user, start it as a background task:

```terminal
$ eval "$(ssh-agent -s)"
```

Example output

```terminal
Agent pid 31874
```


[NOTE]
----
If your cluster is in FIPS mode, only use FIPS-compliant algorithms to generate the SSH key. The key must be either RSA or ECDSA.
----
4. Add your SSH private key to the ssh-agent:

```terminal
$ ssh-add <path>/<file_name> 1
```

Specify the path and file name for your SSH private key, such as ~/.ssh/id_ed25519
Example output

```terminal
Identity added: /home/<you>/<path>/<file_name> (<computer_name>)
```


* When you install Red Hat OpenShift Container Platform, provide the SSH public key to the installation program.

# Creating the installation configuration file

You can customize the Red Hat OpenShift Container Platform cluster you install on
Google Cloud Platform (GCP).

* You have the Red Hat OpenShift Container Platform installation program and the pull secret for your cluster.
For a restricted network installation, these files are on your mirror host.
* You have the imageContentSources values that were generated during mirror registry creation.
* You have obtained the contents of the certificate for your mirror registry.
* Configure a GCP account.

1. Create the install-config.yaml file.
1. Change to the directory that contains the installation program and run the following command:

```terminal
$ ./openshift-install create install-config --dir <installation_directory> 1
```

For <installation_directory>, specify the directory name to store the
files that the installation program creates.

When specifying the directory:
* Verify that the directory has the execute permission. This permission is required to run Terraform binaries under the installation directory.
* Use an empty directory. Some installation assets, such as bootstrap X.509 certificates, have short expiration intervals, therefore you must not reuse an installation directory. If you want to reuse individual files from another cluster installation, you can copy them into your directory. However, the file names for the installation assets might change between releases. Use caution when copying installation files from an earlier Red Hat OpenShift Container Platform version.
2. At the prompts, provide the configuration details for your cloud:
1. Optional: Select an SSH key to use to access your cluster machines.

[NOTE]
----
For production Red Hat OpenShift Container Platform clusters on which you want to perform installation debugging or disaster recovery, specify an SSH key that your ssh-agent process uses.
----
2. Select gcp as the platform to target.
3. If you have not configured the service account key for your GCP account on
your computer, you must obtain it from GCP and paste the contents of the file
or enter the absolute path to the file.
4. Select the project ID to provision the cluster in. The default value is
specified by the service account that you configured.
5. Select the region to deploy the cluster to.
6. Select the base domain to deploy the cluster to. The base domain corresponds
to the public DNS zone that you created for your cluster.
7. Enter a descriptive name for your cluster.
2. Edit the install-config.yaml file to give the additional information that is required for an installation in a restricted network.
1. Update the pullSecret value to contain the authentication information for
your registry:

```yaml
pullSecret: '{"auths":{"<mirror_host_name>:5000": {"auth": "<credentials>","email": "you@example.com"}}}'
```


For <mirror_host_name>, specify the registry domain name
that you specified in the certificate for your mirror registry, and for
<credentials>, specify the base64-encoded user name and password for
your mirror registry.
2. Add the additionalTrustBundle parameter and value.

```yaml
additionalTrustBundle: |
  -----BEGIN CERTIFICATE-----
  ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
  -----END CERTIFICATE-----
```


The value must be the contents of the certificate file that you used for your mirror registry. The certificate file can be an existing, trusted certificate authority, or the self-signed certificate that you generated for the mirror registry.
3. Define the network and subnets for the VPC to install the cluster in under the parent platform.gcp field:

```yaml
network: <existing_vpc>
controlPlaneSubnet: <control_plane_subnet>
computeSubnet: <compute_subnet>
```


For platform.gcp.network, specify the name for the existing Google VPC. For platform.gcp.controlPlaneSubnet and platform.gcp.computeSubnet, specify the existing subnets to deploy the control plane machines and compute machines, respectively.
4. Add the image content resources, which resemble the following YAML excerpt:

```yaml
imageContentSources:
- mirrors:
  - <mirror_host_name>:5000/<repo_name>/release
  source: quay.io/openshift-release-dev/ocp-release
- mirrors:
  - <mirror_host_name>:5000/<repo_name>/release
  source: registry.redhat.io/ocp/release
```


For these values, use the imageContentSources that you recorded during mirror registry creation.
5. Optional: Set the publishing strategy to Internal:

```yaml
publish: Internal
```


By setting this option, you create an internal Ingress Controller and a private load balancer.
3. Make any other modifications to the install-config.yaml file that you require.

For more information about the parameters, see "Installation configuration parameters".
4. Back up the install-config.yaml file so that you can use
it to install multiple clusters.

[IMPORTANT]
----
The install-config.yaml file is consumed during the installation process. If
you want to reuse the file, you must back it up now.
----

* Installation configuration parameters for GCP

## Minimum resource requirements for cluster installation

Each cluster machine must meet the following minimum requirements:



1. One vCPU is equivalent to one physical core when simultaneous multithreading (SMT), or Hyper-Threading, is not enabled. When enabled, use the following formula to calculate the corresponding ratio: (threads per core × cores) × sockets = vCPUs.
2. Red Hat OpenShift Container Platform and Kubernetes are sensitive to disk performance, and faster storage is recommended, particularly for etcd on the control plane nodes which require a 10 ms p99 fsync duration. Note that on many cloud platforms, storage size and IOPS scale together, so you might need to over-allocate storage volume to obtain sufficient performance.
3. As with all user-provisioned installations, if you choose to use RHEL compute machines in your cluster, you take responsibility for all operating system life cycle management and maintenance, including performing system updates, applying patches, and completing all other required tasks. Use of RHEL 7 compute machines is deprecated and has been removed in Red Hat OpenShift Container Platform 4.10 and later.


[NOTE]
----
For Red Hat OpenShift Container Platform version 4.18, RHCOS is based on RHEL version 9.4, which updates the micro-architecture requirements. The following list contains the minimum instruction set architectures (ISA) that each architecture requires:
* x86-64 architecture requires x86-64-v2 ISA
* ARM64 architecture requires ARMv8.0-A ISA
* IBM Power architecture requires Power 9 ISA
* s390x architecture requires z14 ISA
For more information, see Architectures (RHEL documentation).
----

If an instance type for your platform meets the minimum requirements for cluster machines, it is supported to use in Red Hat OpenShift Container Platform.

* Optimizing storage

## Tested instance types for GCP

The following Google Cloud Platform instance types have been tested with Red Hat OpenShift Container Platform.


[NOTE]
----
Not all instance types are available in all regions and zones. For a detailed breakdown of which instance types are available in which zones, see regions and zones (Google documentation).
Some instance types require the use of Hyperdisk storage. If you use an instance type that requires Hyperdisk storage, all of the nodes in your cluster must support Hyperdisk storage, and you must change the default storage class to use Hyperdisk storage. For more information, see machine series support for Hyperdisk (Google documentation). For instructions on modifying storage classes, see the "GCE PersistentDisk (gcePD) object definition" section in the Dynamic Provisioning page in Storage.
----

https://raw.githubusercontent.com/openshift/installer/release-4.18/docs/user/gcp/tested_instance_types.md

## Tested instance types for GCP on 64-bit ARM infrastructures

The following Google Cloud Platform (GCP) 64-bit ARM instance types have been tested with Red Hat OpenShift Container Platform.

https://raw.githubusercontent.com/openshift/installer/release-4.18/docs/user/gcp/tested_instance_types_arm.md

## Using custom machine types

Using a custom machine type to install a Red Hat OpenShift Container Platform cluster is supported.

Consider the following when using a custom machine type:

* Similar to predefined instance types, custom machine types must meet the minimum resource requirements for control plane and compute machines. For more information, see "Minimum resource requirements for cluster installation".
* The name of the custom machine type must adhere to the following syntax:
custom-<number_of_cpus>-<amount_of_memory_in_mb>
For example, custom-6-20480.

As part of the installation process, you specify the custom machine type in the install-config.yaml file.


```yaml
compute:
- architecture: amd64
  hyperthreading: Enabled
  name: worker
  platform:
    gcp:
      type: custom-6-20480
  replicas: 2
controlPlane:
  architecture: amd64
  hyperthreading: Enabled
  name: master
  platform:
    gcp:
      type: custom-6-20480
  replicas: 3
```


## Enabling Shielded VMs

You can use Shielded VMs when installing your cluster. Shielded VMs have extra security features including secure boot, firmware and integrity monitoring, and rootkit detection. For more information, see Google&#8217;s documentation on Shielded VMs.


[NOTE]
----
Shielded VMs are currently not supported on clusters with 64-bit ARM infrastructures.
----

* Use a text editor to edit the install-config.yaml file prior to deploying your cluster and add one of the following stanzas:
1. To use shielded VMs for only control plane machines:

```yaml
controlPlane:
  platform:
    gcp:
       secureBoot: Enabled
```

2. To use shielded VMs for only compute machines:

```yaml
compute:
- platform:
    gcp:
       secureBoot: Enabled
```

3. To use shielded VMs for all machines:

```yaml
platform:
  gcp:
    defaultMachinePlatform:
       secureBoot: Enabled
```


## Enabling Confidential VMs

You can use Confidential VMs when installing your cluster. Confidential VMs encrypt data while it is being processed. For more information, see Google&#8217;s documentation on Confidential Computing. You can enable Confidential VMs and Shielded VMs at the same time, although they are not dependent on each other.


[NOTE]
----
Confidential VMs are currently not supported on 64-bit ARM architectures.
----

* Use a text editor to edit the install-config.yaml file prior to deploying your cluster and add one of the following stanzas:
1. To use confidential VMs for only control plane machines:

```yaml
controlPlane:
  platform:
    gcp:
       confidentialCompute: Enabled 1
       type: n2d-standard-8 2
       onHostMaintenance: Terminate 3
```

Enable confidential VMs.
Specify a machine type that supports Confidential VMs. Confidential VMs require the N2D or C2D series of machine types. For more information on supported machine types, see Supported operating systems and machine types.
Specify the behavior of the VM during a host maintenance event, such as a hardware or software update. For a machine that uses Confidential VM, this value must be set to Terminate, which stops the VM. Confidential VMs do not support live VM migration.
2. To use confidential VMs for only compute machines:

```yaml
compute:
- platform:
    gcp:
       confidentialCompute: Enabled
       type: n2d-standard-8
       onHostMaintenance: Terminate
```

3. To use confidential VMs for all machines:

```yaml
platform:
  gcp:
    defaultMachinePlatform:
       confidentialCompute: Enabled
       type: n2d-standard-8
       onHostMaintenance: Terminate
```


## Sample customized install-config.yaml file for GCP

You can customize the install-config.yaml file to specify more details about your Red Hat OpenShift Container Platform cluster&#8217;s platform or modify the values of the required parameters.


[IMPORTANT]
----
This sample YAML file is provided for reference only. You must obtain your install-config.yaml file by using the installation program and modify it.
----


```yaml
apiVersion: v1
baseDomain: example.com 1
credentialsMode: Mint 2
controlPlane: 3 4
  hyperthreading: Enabled 5
  name: master
  platform:
    gcp:
      type: n2-standard-4
      zones:
      - us-central1-a
      - us-central1-c
      osDisk:
        diskType: pd-ssd
        diskSizeGB: 1024
        encryptionKey: 6
          kmsKey:
            name: worker-key
            keyRing: test-machine-keys
            location: global
            projectID: project-id
      tags: 7
      - control-plane-tag1
      - control-plane-tag2
      osImage: 8
        project: example-project-name
        name: example-image-name
  replicas: 3
compute: 3 4
- hyperthreading: Enabled 5
  name: worker
  platform:
    gcp:
      type: n2-standard-4
      zones:
      - us-central1-a
      - us-central1-c
      osDisk:
        diskType: pd-standard
        diskSizeGB: 128
        encryptionKey: 6
          kmsKey:
            name: worker-key
            keyRing: test-machine-keys
            location: global
            projectID: project-id
        tags: 7
        - compute-tag1
        - compute-tag2
        osImage: 8
          project: example-project-name
          name: example-image-name
  replicas: 3
metadata:
  name: test-cluster 1
networking:
  clusterNetwork:
  - cidr: 10.128.0.0/14
    hostPrefix: 23
  machineNetwork:
  - cidr: 10.0.0.0/16
  networkType: OVNKubernetes 9
  serviceNetwork:
  - 172.30.0.0/16
platform:
  gcp:
    projectID: openshift-production 1
    region: us-central1 1
    defaultMachinePlatform:
      tags: 7
      - global-tag1
      - global-tag2
      osImage: 8
        project: example-project-name
        name: example-image-name
    network: existing_vpc 10
    controlPlaneSubnet: control_plane_subnet 11
    computeSubnet: compute_subnet 12
pullSecret: '{"auths":{"<local_registry>": {"auth": "<credentials>","email": "you@example.com"}}}' 13
fips: false 14
sshKey: ssh-ed25519 AAAA... 15
additionalTrustBundle: | 16
    -----BEGIN CERTIFICATE-----
    <MY_TRUSTED_CA_CERT>
    -----END CERTIFICATE-----
imageContentSources: 17
- mirrors:
  - <local_registry>/<local_repository_name>/release
  source: quay.io/openshift-release-dev/ocp-release
- mirrors:
  - <local_registry>/<local_repository_name>/release
  source: quay.io/openshift-release-dev/ocp-v4.0-art-dev
```


Required. The installation program prompts you for this value.
Optional: Add this parameter to force the Cloud Credential Operator (CCO) to use the specified mode. By default, the CCO uses the root credentials in the kube-system namespace to dynamically try to determine the capabilities of the credentials. For details about CCO modes, see the "About the Cloud Credential Operator" section in the Authentication and authorization guide.
If you do not provide these parameters and values, the installation program provides the default value.
The controlPlane section is a single mapping, but the compute section is a sequence of mappings. To meet the requirements of the different data structures, the first line of the compute section must begin with a hyphen, -, and the first line of the controlPlane section must not. Only one control plane pool is used.
Whether to enable or disable simultaneous multithreading, or hyperthreading. By default, simultaneous multithreading is enabled to increase the performance of your machines' cores. You can disable it by setting the parameter value to Disabled. If you disable simultaneous multithreading in some cluster machines, you must disable it in all cluster machines.

[IMPORTANT]
----
If you disable simultaneous multithreading, ensure that your capacity planning accounts for the dramatically decreased machine performance. Use larger machine types, such as n1-standard-8, for your machines if you disable simultaneous multithreading.
----
Optional: The custom encryption key section to encrypt both virtual machines and persistent volumes. Your default compute service account must have the permissions granted to use your KMS key and have the correct IAM role assigned. The default service account name follows the service-<project_number>@compute-system.iam.gserviceaccount.com pattern. For more information about granting the correct permissions for your service account, see "Machine management" -> "Creating compute machine sets" -> "Creating a compute machine set on GCP".
Optional: A set of network tags to apply to the control plane or compute machine sets. The platform.gcp.defaultMachinePlatform.tags parameter will apply to both control plane and compute machines. If the compute.platform.gcp.tags or controlPlane.platform.gcp.tags parameters are set, they override the platform.gcp.defaultMachinePlatform.tags parameter.
Optional: A custom Red Hat Enterprise Linux CoreOS (RHCOS) that should be used to boot control plane and compute machines. The project and name parameters under platform.gcp.defaultMachinePlatform.osImage apply to both control plane and compute machines. If the project and name parameters under controlPlane.platform.gcp.osImage or compute.platform.gcp.osImage are set, they override the platform.gcp.defaultMachinePlatform.osImage parameters.
The cluster network plugin to install. The default value OVNKubernetes is the only supported value.
Specify the name of an existing VPC.
Specify the name of the existing subnet to deploy the control plane machines to. The subnet must belong to the VPC that you specified.
Specify the name of the existing subnet to deploy the compute machines to. The subnet must belong to the VPC that you specified.
For <local_registry>, specify the registry domain name, and optionally the port, that your mirror registry uses to serve content. For example, registry.example.com or registry.example.com:5000. For <credentials>, specify the base64-encoded user name and password for your mirror registry.
Whether to enable or disable FIPS mode. By default, FIPS mode is not enabled. If FIPS mode is enabled, the Red Hat Enterprise Linux CoreOS (RHCOS) machines that Red Hat OpenShift Container Platform runs on bypass the default Kubernetes cryptography suite and use the cryptography modules that are provided with RHCOS instead.

[IMPORTANT]
----
When running Red Hat Enterprise Linux (RHEL) or Red Hat Enterprise Linux CoreOS (RHCOS) booted in FIPS mode, Red Hat OpenShift Container Platform core components use the RHEL cryptographic libraries that have been submitted to NIST for FIPS 140-2/140-3 Validation on only the x86_64, ppc64le, and s390x architectures.
----
You can optionally provide the sshKey value that you use to access the machines in your cluster.

[NOTE]
----
For production Red Hat OpenShift Container Platform clusters on which you want to perform installation debugging or disaster recovery, specify an SSH key that your ssh-agent process uses.
----
Provide the contents of the certificate file that you used for your mirror registry.
Provide the imageContentSources section from the output of the command to mirror the repository.

## Create an Ingress Controller with global access on GCP

You can create an Ingress Controller that has global access to a Google Cloud Platform (GCP) cluster. Global access is only available to Ingress Controllers using internal load balancers.

* You created the install-config.yaml and complete any modifications to it.

Create an Ingress Controller with global access on a new GCP cluster.

1. Change to the directory that contains the installation program and create a manifest file:

```terminal
$ ./openshift-install create manifests --dir <installation_directory> 1
```

For <installation_directory>, specify the name of the directory that
contains the install-config.yaml file for your cluster.
2. Create a file that is named cluster-ingress-default-ingresscontroller.yaml in the <installation_directory>/manifests/ directory:

```terminal
$ touch <installation_directory>/manifests/cluster-ingress-default-ingresscontroller.yaml 1
```

For <installation_directory>, specify the directory name that contains the
manifests/ directory for your cluster.

After creating the file, several network configuration files are in the
manifests/ directory, as shown:

```terminal
$ ls <installation_directory>/manifests/cluster-ingress-default-ingresscontroller.yaml
```

Example output

```terminal
cluster-ingress-default-ingresscontroller.yaml
```

3. Open the cluster-ingress-default-ingresscontroller.yaml file in an editor and enter a custom resource (CR) that describes the Operator configuration you want:
Sample clientAccess configuration to Global

```yaml
  apiVersion: operator.openshift.io/v1
  kind: IngressController
  metadata:
    name: default
    namespace: openshift-ingress-operator
  spec:
    endpointPublishingStrategy:
      loadBalancer:
        providerParameters:
          gcp:
            clientAccess: Global 1
          type: GCP
        scope: Internal          2
      type: LoadBalancerService
```

Set gcp.clientAccess to Global.
Global access is only available to Ingress Controllers using internal load balancers.

## Configuring the cluster-wide proxy during installation

Production environments can deny direct access to the internet and instead have
an HTTP or HTTPS proxy available. You can configure a new Red Hat OpenShift Container Platform
cluster to use a proxy by configuring the proxy settings in the
install-config.yaml file.

* You have an existing install-config.yaml file.
* You reviewed the sites that your cluster requires access to and determined whether any of them need to bypass the proxy. By default, all cluster egress traffic is proxied, including calls to hosting cloud provider APIs. You added sites to the Proxy object's spec.noProxy field to bypass the proxy if necessary.

[NOTE]
----
The Proxy object status.noProxy field is populated with the values of the networking.machineNetwork[].cidr, networking.clusterNetwork[].cidr, and networking.serviceNetwork[] fields from your installation configuration.
For installations on Amazon Web Services (AWS), Google Cloud Platform (GCP), Microsoft Azure, and Red Hat OpenStack Platform (RHOSP), the Proxy object status.noProxy field is also populated with the instance metadata endpoint (169.254.169.254).
----

1. Edit your install-config.yaml file and add the proxy settings. For example:

```yaml
apiVersion: v1
baseDomain: my.domain.com
proxy:
  httpProxy: http://<username>:<pswd>@<ip>:<port> 1
  httpsProxy: https://<username>:<pswd>@<ip>:<port> 2
  noProxy: example.com 3
additionalTrustBundle: | 4
    -----BEGIN CERTIFICATE-----
    <MY_TRUSTED_CA_CERT>
    -----END CERTIFICATE-----
additionalTrustBundlePolicy: <policy_to_add_additionalTrustBundle> 5
```

A proxy URL to use for creating HTTP connections outside the cluster. The
URL scheme must be http.
A proxy URL to use for creating HTTPS connections outside the cluster.
A comma-separated list of destination domain names, IP addresses, or other network CIDRs to exclude from proxying. Preface a domain with . to match subdomains only. For example, .y.com matches x.y.com, but not y.com. Use * to bypass the proxy for all destinations.
If provided, the installation program generates a config map that is named user-ca-bundle in
the openshift-config namespace that contains one or more additional CA
certificates that are required for proxying HTTPS connections. The Cluster Network
Operator then creates a trusted-ca-bundle config map that merges these contents
with the Red Hat Enterprise Linux CoreOS (RHCOS) trust bundle, and this config map is referenced in the trustedCA field of the Proxy object. The additionalTrustBundle field is required unless
the proxy's identity certificate is signed by an authority from the RHCOS trust
bundle.
Optional: The policy to determine the configuration of the Proxy object to reference the user-ca-bundle config map in the trustedCA field. The allowed values are Proxyonly and Always. Use Proxyonly to reference the user-ca-bundle config map only when http/https proxy is configured. Use Always to always reference the user-ca-bundle config map. The default value is Proxyonly.

[NOTE]
----
The installation program does not support the proxy readinessEndpoints field.
----

[NOTE]
----
If the installer times out, restart and then complete the deployment by using the wait-for command of the installer. For example:

```terminal
$ ./openshift-install wait-for install-complete --log-level debug
```

----
2. Save the file and reference it when installing Red Hat OpenShift Container Platform.

The installation program creates a cluster-wide proxy that is named cluster that uses the proxy
settings in the provided install-config.yaml file. If no proxy settings are
provided, a cluster Proxy object is still created, but it will have a nil
spec.


[NOTE]
----
Only the Proxy object named cluster is supported, and no additional
proxies can be created.
----

# Installing the OpenShift CLI

You can install the OpenShift CLI (`oc`) to interact with
Red Hat OpenShift Container Platform
from a command-line interface. You can install oc on Linux, Windows, or macOS.


[IMPORTANT]
----
If you installed an earlier version of oc, you cannot use it to complete all of the commands in
Red Hat OpenShift Container Platform 4.18.
Download and install the new version of oc.
----

## Installing the OpenShift CLI on Linux

You can install the OpenShift CLI (oc) binary on Linux by using the following procedure.

1. Navigate to the Red Hat OpenShift Container Platform downloads page on the Red Hat Customer Portal.
2. Select the architecture from the Product Variant drop-down list.
3. Select the appropriate version from the Version drop-down list.
4. Click Download Now next to the OpenShift v4.18 Linux Clients entry and save the file.
5. Unpack the archive:

```terminal
$ tar xvf <file>
```

6. Place the oc binary in a directory that is on your PATH.

To check your PATH, execute the following command:

```terminal
$ echo $PATH
```


* After you install the OpenShift CLI, it is available using the oc command:

```terminal
$ oc <command>
```


## Installing the OpenShift CLI on Windows

You can install the OpenShift CLI (oc) binary on Windows by using the following procedure.

1. Navigate to the Red Hat OpenShift Container Platform downloads page on the Red Hat Customer Portal.
2. Select the appropriate version from the Version drop-down list.
3. Click Download Now next to the OpenShift v4.18 Windows Client entry and save the file.
4. Unzip the archive with a ZIP program.
5. Move the oc binary to a directory that is on your PATH.

To check your PATH, open the command prompt and execute the following command:

```terminal
C:\> path
```


* After you install the OpenShift CLI, it is available using the oc command:

```terminal
C:\> oc <command>
```


## Installing the OpenShift CLI on macOS

You can install the OpenShift CLI (oc) binary on macOS by using the following procedure.

1. Navigate to the Red Hat OpenShift Container Platform downloads page on the Red Hat Customer Portal.
2. Select the appropriate version from the Version drop-down list.
3. Click Download Now next to the OpenShift v4.18 macOS Clients entry and save the file.

[NOTE]
----
For macOS arm64, choose the OpenShift v4.18 macOS arm64 Client entry.
----
4. Unpack and unzip the archive.
5. Move the oc binary to a directory on your PATH.

To check your PATH, open a terminal and execute the following command:

```terminal
$ echo $PATH
```


* Verify your installation by using an oc command:

```terminal
$ oc <command>
```


# Alternatives to storing administrator-level secrets in the kube-system project

By default, administrator secrets are stored in the kube-system project. If you configured the credentialsMode parameter in the install-config.yaml file to Manual, you must use one of the following alternatives:

* To manage long-term cloud credentials manually, follow the procedure in Manually creating long-term credentials.
* To implement short-term credentials that are managed outside the cluster for individual components, follow the procedures in Configuring a GCP cluster to use short-term credentials.

## Manually creating long-term credentials

The Cloud Credential Operator (CCO) can be put into manual mode prior to installation in environments where the cloud identity and access management (IAM) APIs are not reachable, or the administrator prefers not to store an administrator-level credential secret in the cluster kube-system namespace.

1. Add the following granular permissions to the GCP account that the installation program uses:
Required GCP permissions
* compute.machineTypes.list
* compute.regions.list
* compute.zones.list
* dns.changes.create
* dns.changes.get
* dns.managedZones.create
* dns.managedZones.delete
* dns.managedZones.get
* dns.managedZones.list
* dns.networks.bindPrivateDNSZone
* dns.resourceRecordSets.create
* dns.resourceRecordSets.delete
* dns.resourceRecordSets.list
2. If you did not set the credentialsMode parameter in the install-config.yaml configuration file to Manual, modify the value as shown:
Sample configuration file snippet

```yaml
apiVersion: v1
baseDomain: example.com
credentialsMode: Manual
# ...
```

3. If you have not previously created installation manifest files, do so by running the following command:

```terminal
$ openshift-install create manifests --dir <installation_directory>
```


where <installation_directory> is the directory in which the installation program creates files.
4. Set a $RELEASE_IMAGE variable with the release image from your installation file by running the following command:

```terminal
$ RELEASE_IMAGE=$(./openshift-install version | awk '/release image/ {print $3}')
```

5. Extract the list of CredentialsRequest custom resources (CRs) from the Red Hat OpenShift Container Platform release image by running the following command:

```terminal
$ oc adm release extract \
  --from=$RELEASE_IMAGE \
  --credentials-requests \
  --included \1
  --install-config=<path_to_directory_with_installation_configuration>/install-config.yaml \2
  --to=<path_to_directory_for_credentials_requests> 3
```

The --included parameter includes only the manifests that your specific cluster configuration requires.
Specify the location of the install-config.yaml file.
Specify the path to the directory where you want to store the CredentialsRequest objects. If the specified directory does not exist, this command creates it.

This command creates a YAML file for each CredentialsRequest object.
Sample CredentialsRequest object

```yaml
apiVersion: cloudcredential.openshift.io/v1
kind: CredentialsRequest
metadata:
  name: <component_credentials_request>
  namespace: openshift-cloud-credential-operator
  ...
spec:
  providerSpec:
    apiVersion: cloudcredential.openshift.io/v1
    kind: GCPProviderSpec
    predefinedRoles:
    - roles/storage.admin
    - roles/iam.serviceAccountUser
    skipServiceCheck: true
  ...
```

6. Create YAML files for secrets in the openshift-install manifests directory that you generated previously. The secrets must be stored using the namespace and secret name defined in the spec.secretRef for each CredentialsRequest object.
Sample CredentialsRequest object with secrets

```yaml
apiVersion: cloudcredential.openshift.io/v1
kind: CredentialsRequest
metadata:
  name: <component_credentials_request>
  namespace: openshift-cloud-credential-operator
  ...
spec:
  providerSpec:
    apiVersion: cloudcredential.openshift.io/v1
      ...
  secretRef:
    name: <component_secret>
    namespace: <component_namespace>
  ...
```

Sample Secret object

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: <component_secret>
  namespace: <component_namespace>
data:
  service_account.json: <base64_encoded_gcp_service_account_file>
```



[IMPORTANT]
----
Before upgrading a cluster that uses manually maintained credentials, you must ensure that the CCO is in an upgradeable state.
----

## Configuring a GCP cluster to use short-term credentials

To install a cluster that is configured to use GCP Workload Identity, you must configure the CCO utility and create the required GCP resources for your cluster.

### Configuring the Cloud Credential Operator utility

To create and manage cloud credentials from outside of the cluster when the Cloud Credential Operator (CCO) is operating in manual mode, extract and prepare the CCO utility (ccoctl) binary.


[NOTE]
----
The ccoctl utility is a Linux binary that must run in a Linux environment.
----

* You have access to an Red Hat OpenShift Container Platform account with cluster administrator access.
* You have installed the OpenShift CLI (`oc`).

* You have added one of the following authentication options to the GCP account that the ccoctl utility uses:
* The IAM Workload Identity Pool Admin role
* The following granular permissions:
* compute.projects.get
* iam.googleapis.com/workloadIdentityPoolProviders.create
* iam.googleapis.com/workloadIdentityPoolProviders.get
* iam.googleapis.com/workloadIdentityPools.create
* iam.googleapis.com/workloadIdentityPools.delete
* iam.googleapis.com/workloadIdentityPools.get
* iam.googleapis.com/workloadIdentityPools.undelete
* iam.roles.create
* iam.roles.delete
* iam.roles.list
* iam.roles.undelete
* iam.roles.update
* iam.serviceAccounts.create
* iam.serviceAccounts.delete
* iam.serviceAccounts.getIamPolicy
* iam.serviceAccounts.list
* iam.serviceAccounts.setIamPolicy
* iam.workloadIdentityPoolProviders.get
* iam.workloadIdentityPools.delete
* resourcemanager.projects.get
* resourcemanager.projects.getIamPolicy
* resourcemanager.projects.setIamPolicy
* storage.buckets.create
* storage.buckets.delete
* storage.buckets.get
* storage.buckets.getIamPolicy
* storage.buckets.setIamPolicy
* storage.objects.create
* storage.objects.delete
* storage.objects.list

1. Set a variable for the Red Hat OpenShift Container Platform release image by running the following command:

```terminal
$ RELEASE_IMAGE=$(./openshift-install version | awk '/release image/ {print $3}')
```

2. Obtain the CCO container image from the Red Hat OpenShift Container Platform release image by running the following command:

```terminal
$ CCO_IMAGE=$(oc adm release info --image-for='cloud-credential-operator' $RELEASE_IMAGE -a ~/.pull-secret)
```


[NOTE]
----
Ensure that the architecture of the $RELEASE_IMAGE matches the architecture of the environment in which you will use the ccoctl tool.
----
3. Extract the ccoctl binary from the CCO container image within the Red Hat OpenShift Container Platform release image by running the following command:

```terminal
$ oc image extract $CCO_IMAGE \
  --file="/usr/bin/ccoctl.<rhel_version>" \1
  -a ~/.pull-secret
```

For <rhel_version>, specify the value that corresponds to the version of Red Hat Enterprise Linux (RHEL) that the host uses.
If no value is specified, ccoctl.rhel8 is used by default.
The following values are valid:
* rhel8: Specify this value for hosts that use RHEL 8.
* rhel9: Specify this value for hosts that use RHEL 9.
4. Change the permissions to make ccoctl executable by running the following command:

```terminal
$ chmod 775 ccoctl.<rhel_version>
```


* To verify that ccoctl is ready to use, display the help file. Use a relative file name when you run the command, for example:

```terminal
$ ./ccoctl.rhel9
```

Example output

```terminal
OpenShift credentials provisioning tool

Usage:
  ccoctl [command]

Available Commands:
  aws          Manage credentials objects for AWS cloud
  azure        Manage credentials objects for Azure
  gcp          Manage credentials objects for Google cloud
  help         Help about any command
  ibmcloud     Manage credentials objects for {ibm-cloud-title}
  nutanix      Manage credentials objects for Nutanix

Flags:
  -h, --help   help for ccoctl

Use "ccoctl [command] --help" for more information about a command.
```


### Creating GCP resources with the Cloud Credential Operator utility

You can use the ccoctl gcp create-all command to automate the creation of GCP resources.


[NOTE]
----
By default, ccoctl creates objects in the directory in which the commands are run. To create the objects in a different directory, use the --output-dir flag. This procedure uses <path_to_ccoctl_output_dir> to refer to this directory.
----

You must have:

* Extracted and prepared the ccoctl binary.

1. Set a $RELEASE_IMAGE variable with the release image from your installation file by running the following command:

```terminal
$ RELEASE_IMAGE=$(./openshift-install version | awk '/release image/ {print $3}')
```

2. Extract the list of CredentialsRequest objects from the Red Hat OpenShift Container Platform release image by running the following command:

```terminal
$ oc adm release extract \
  --from=$RELEASE_IMAGE \
  --credentials-requests \
  --included \1
  --install-config=<path_to_directory_with_installation_configuration>/install-config.yaml \2
  --to=<path_to_directory_for_credentials_requests> 3
```

The --included parameter includes only the manifests that your specific cluster configuration requires.
Specify the location of the install-config.yaml file.
Specify the path to the directory where you want to store the CredentialsRequest objects. If the specified directory does not exist, this command creates it.

[NOTE]
----
This command might take a few moments to run.
----
3. Use the ccoctl tool to process all CredentialsRequest objects by running the following command:

```terminal
$ ccoctl gcp create-all \
  --name=<name> \1
  --region=<gcp_region> \2
  --project=<gcp_project_id> \3
  --credentials-requests-dir=<path_to_credentials_requests_directory> 4
```

Specify the user-defined name for all created GCP resources used for tracking. If you plan to install the GCP Filestore Container Storage Interface (CSI) Driver Operator, retain this value.
Specify the GCP region in which cloud resources will be created.
Specify the GCP project ID in which cloud resources will be created.
Specify the directory containing the files of CredentialsRequest manifests to create GCP service accounts.

[NOTE]
----
If your cluster uses Technology Preview features that are enabled by the TechPreviewNoUpgrade feature set, you must include the --enable-tech-preview parameter.
----

* To verify that the Red Hat OpenShift Container Platform secrets are created, list the files in the <path_to_ccoctl_output_dir>/manifests directory:

```terminal
$ ls <path_to_ccoctl_output_dir>/manifests
```

Example output

```text
cluster-authentication-02-config.yaml
openshift-cloud-controller-manager-gcp-ccm-cloud-credentials-credentials.yaml
openshift-cloud-credential-operator-cloud-credential-operator-gcp-ro-creds-credentials.yaml
openshift-cloud-network-config-controller-cloud-credentials-credentials.yaml
openshift-cluster-api-capg-manager-bootstrap-credentials-credentials.yaml
openshift-cluster-csi-drivers-gcp-pd-cloud-credentials-credentials.yaml
openshift-image-registry-installer-cloud-credentials-credentials.yaml
openshift-ingress-operator-cloud-credentials-credentials.yaml
openshift-machine-api-gcp-cloud-credentials-credentials.yaml
```


You can verify that the IAM service accounts are created by querying GCP. For more information, refer to GCP documentation on listing IAM service accounts.

### Incorporating the Cloud Credential Operator utility manifests

To implement short-term security credentials managed outside the cluster for individual components, you must move the manifest files that the Cloud Credential Operator utility (ccoctl) created to the correct directories for the installation program.

* You have configured an account with the cloud platform that hosts your cluster.
* You have configured the Cloud Credential Operator utility (ccoctl).
* You have created the cloud provider resources that are required for your cluster with the ccoctl utility.

1. Add the following granular permissions to the GCP account that the installation program uses:
Required GCP permissions
* compute.machineTypes.list
* compute.regions.list
* compute.zones.list
* dns.changes.create
* dns.changes.get
* dns.managedZones.create
* dns.managedZones.delete
* dns.managedZones.get
* dns.managedZones.list
* dns.networks.bindPrivateDNSZone
* dns.resourceRecordSets.create
* dns.resourceRecordSets.delete
* dns.resourceRecordSets.list
2. If you did not set the credentialsMode parameter in the install-config.yaml configuration file to Manual, modify the value as shown:
Sample configuration file snippet

```yaml
apiVersion: v1
baseDomain: example.com
credentialsMode: Manual
# ...
```

3. If you have not previously created installation manifest files, do so by running the following command:

```terminal
$ openshift-install create manifests --dir <installation_directory>
```


where <installation_directory> is the directory in which the installation program creates files.
4. Copy the manifests that the ccoctl utility generated to the manifests directory that the installation program created by running the following command:

```terminal
$ cp /<path_to_ccoctl_output_dir>/manifests/* ./manifests/
```

5. Copy the tls directory that contains the private key to the installation directory:

```terminal
$ cp -a /<path_to_ccoctl_output_dir>/tls .
```


# Deploying the cluster

You can install Red Hat OpenShift Container Platform on a compatible cloud platform.


[IMPORTANT]
----
You can run the create cluster command of the installation program only once, during initial installation.
----

* You have configured an account with the cloud platform that hosts your cluster.
* You have the Red Hat OpenShift Container Platform installation program and the pull secret for your cluster.
* You have verified that the cloud provider account on your host has the correct permissions to deploy the cluster. An account with incorrect permissions causes the installation process to fail with an error message that displays the missing permissions.

1. Remove any existing GCP credentials that do not use the service account key
for the GCP account that you configured for your cluster and that are stored in the
following locations:
* The GOOGLE_CREDENTIALS, GOOGLE_CLOUD_KEYFILE_JSON, or GCLOUD_KEYFILE_JSON
environment variables
* The ~/.gcp/osServiceAccount.json file
* The gcloud cli default credentials
2. In the directory that contains the installation program, initialize the cluster deployment by running the following command:

```terminal
$ ./openshift-install create cluster --dir <installation_directory> \ 1
    --log-level=info 2
```

For <installation_directory>, specify the
location of your customized ./install-config.yaml file.
To view different installation details, specify warn, debug, or
error instead of info.
3. Optional: You can reduce the number of permissions for the service account that you used to install the cluster.
* If you assigned the Owner role to your service account, you can remove that role and replace it with the Viewer role.
* If you included the Service Account Key Admin role,
you can remove it.

When the cluster deployment completes successfully:

* The terminal displays directions for accessing your cluster, including a link to the web console and credentials for the kubeadmin user.
* Credential information also outputs to <installation_directory>/.openshift_install.log.


[IMPORTANT]
----
Do not delete the installation program or the files that the installation program creates. Both are required to delete the cluster.
----


```terminal
...
INFO Install complete!
INFO To access the cluster as the system:admin user when using 'oc', run 'export KUBECONFIG=/home/myuser/install_dir/auth/kubeconfig'
INFO Access the OpenShift web-console here: https://console-openshift-console.apps.mycluster.example.com
INFO Login to the console with user: "kubeadmin", and password: "password"
INFO Time elapsed: 36m22s
```



[IMPORTANT]
----
* The Ignition config files that the installation program generates contain certificates that expire after 24 hours, which are then renewed at that time. If the cluster is shut down before renewing the certificates and the cluster is later restarted after the 24 hours have elapsed, the cluster automatically recovers the expired certificates. The exception is that you must manually approve the pending node-bootstrapper certificate signing requests (CSRs) to recover kubelet certificates. See the documentation for Recovering from expired control plane certificates for more information.
* It is recommended that you use Ignition config files within 12 hours after they are generated because the 24-hour certificate rotates from 16 to 22 hours after the cluster is installed. By using the Ignition config files within 12 hours, you can avoid installation failure if the certificate update runs during installation.
----

# Logging in to the cluster by using the CLI

You can log in to your cluster as a default system user by exporting the cluster kubeconfig file.
The kubeconfig file contains information about the cluster that is used by the CLI to connect a client to the correct cluster and API server.
The file is specific to a cluster and is created during Red Hat OpenShift Container Platform installation.

* You deployed an Red Hat OpenShift Container Platform cluster.
* You installed the OpenShift CLI (`oc`).

1. Export the kubeadmin credentials by running the following command:

```terminal
$ export KUBECONFIG=<installation_directory>/auth/kubeconfig 1
```

For <installation_directory>, specify the path to the directory that you stored
the installation files in.
2. Verify you can run oc commands successfully using the exported configuration by running the following command:

```terminal
$ oc whoami
```

Example output

```terminal
system:admin
```


# Disabling the default OperatorHub catalog sources

Operator catalogs that source content provided by Red Hat and community projects are configured for OperatorHub by default during an Red Hat OpenShift Container Platform installation.
In a restricted network environment, you must disable the default catalogs as a cluster administrator.

* Disable the sources for the default catalogs by adding disableAllDefaultSources: true to the OperatorHub object:

```terminal
$ oc patch OperatorHub cluster --type json \
    -p '[{"op": "add", "path": "/spec/disableAllDefaultSources", "value": true}]'
```



[TIP]
----
Alternatively, you can use the web console to manage catalog sources. From the Administration -> Cluster Settings -> Configuration -> OperatorHub page, click the Sources tab, where you can create, update, delete, disable, and enable individual sources.
----

# Telemetry access for Red Hat OpenShift Container Platform

In Red Hat OpenShift Container Platform 4.18, the Telemetry service, which runs by default to provide metrics about cluster health and the success of updates, requires internet access. If your cluster is connected to the internet, Telemetry runs automatically, and your cluster is registered to OpenShift Cluster Manager.

After you confirm that your OpenShift Cluster Manager inventory is correct, either maintained automatically by Telemetry or manually by using OpenShift Cluster Manager, use subscription watch to track your Red Hat OpenShift Container Platform subscriptions at the account or multi-cluster level.

* See About remote health monitoring for more information about the Telemetry service

# Next steps

* Validate an installation.
* Customize your cluster.
* Configure image streams for the Cluster Samples Operator and the must-gather tool.
* Learn how to use Operator Lifecycle Manager in disconnected environments.
* If the mirror registry that you used to install your cluster has a trusted CA, add it to the cluster by configuring additional trust stores.
* If necessary, you can Remote health reporting.
* If necessary, see Registering your disconnected cluster