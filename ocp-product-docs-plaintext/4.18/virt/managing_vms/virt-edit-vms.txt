# Editing virtual machines


You can update a virtual machine (VM) configuration by using the Red Hat OpenShift Container Platform web console. You can update the YAML file or the VirtualMachine details page.
You can also edit a VM by using the command line.
To edit a VM to configure disk sharing by using virtual disks or LUN, see Configuring shared volumes for virtual machines.

# Changing the instance type of a VM

You can change the instance type associated with a running virtual machine (VM) by using the web console. The change takes effect immediately.

* You created the VM by using an instance type.

1. In the Red Hat OpenShift Container Platform web console, click Virtualization -> VirtualMachines.
2. Select a VM to open the VirtualMachine details page.
3. Click the Configuration tab.
4. On the Details tab, click the instance type text to open the Edit Instancetype dialog. For example, click 1 CPU | 2 GiB Memory.
5. Edit the instance type by using the Series and Size lists.
1. Select an item from the Series list to show the relevant sizes for that series. For example, select General Purpose.
2. Select the VM's new instance type from the Size list. For example, select medium: 1 CPUs, 4Gi Memory, which is available in the General Purpose series.
6. Click Save.

1. Click the YAML tab.
2. Click Reload.
3. Review the VM YAML to confirm that the instance type changed.

# Hot plugging memory on a virtual machine

You can add or remove the amount of memory allocated to a virtual machine (VM) without having to restart the VM by using the Red Hat OpenShift Container Platform web console.

1. Navigate to Virtualization -> VirtualMachines.
2. Select the required VM to open the VirtualMachine details page.
3. On the Configuration tab, click Edit CPU|Memory.
4. Enter the desired amount of memory and click Save.

The system applies these changes immediately. If the VM is migratable, a live migration is triggered. If not, or if the changes cannot be live-updated, a RestartRequired condition is added to the VM.


[NOTE]
----
* Linux guests require a kernel version of 5.16 or later and Windows guests require the latest viomem drivers.
* By default, you can hot-plug a VM with up to 4 times its initial CPU or memory configuration. For example, a VM with 1 vCPU and 2 GiB memory can scale up to 4 vCPUs and 8 GiB before a restart is needed. You can adjust this behavior cluster-wide by using the maxHotplugRatio parameter or override it in your VM.
----

# Hot plugging CPUs on a virtual machine

You can increase or decrease the number of CPU sockets allocated to a virtual machine (VM) without having to restart the VM by using the Red Hat OpenShift Container Platform web console.

1. Navigate to Virtualization -> VirtualMachines.
2. Select the required VM to open the VirtualMachine details page.
3. On the Configuration tab, click Edit CPU|Memory.
4. Select the vCPU radio button.
5. Enter the desired number of vCPU sockets and click Save.

If the VM is migratable, a live migration is triggered. If not, or if the changes cannot be live-updated, a RestartRequired condition is added to the VM.


[NOTE]
----
If a VM has the spec.template.spec.domain.devices.networkInterfaceMultiQueue field enabled and CPUs are hot plugged, the following behavior occurs:
* Existing network interfaces that you attach before the CPU hot plug retain their original queue count, even after you add more virtual CPUs (vCPUs). The underlying virtualization technology causes this expected behavior.
* To update the queue count of existing interfaces to match the new vCPU configuration, you can restart the VM. A restart is only necessary if the update improves performance.
* New VirtIO network interfaces that you hot plugged after the CPU hotplug automatically receive a queue count that matches the updated vCPU configuration.
----

# Editing a virtual machine by using the CLI

You can edit a virtual machine (VM) by using the command line.

* You installed the oc CLI.

1. Obtain the virtual machine configuration by running the following command:

```terminal
$ oc edit vm <vm_name>
```

2. Edit the YAML configuration.
3. If you edit a running virtual machine, you need to do one of the following:
* Restart the virtual machine.
* Run the following command for the new configuration to take effect:

```terminal
$ oc apply vm <vm_name> -n <namespace>
```


# Adding a disk to a virtual machine

You can add a virtual disk to a virtual machine (VM) by using the Red Hat OpenShift Container Platform web console.

1. Navigate to Virtualization -> VirtualMachines in the web console.
2. Select a VM to open the VirtualMachine details page.
3. On the Disks tab, click Add disk.
4. Specify the Source, Name, Size, Type, Interface, and Storage Class.
1. Optional: You can enable preallocation if you use a blank disk source and require maximum write performance when creating data volumes. To do so, select the Enable preallocation checkbox.
2. Optional: You can clear Apply optimized StorageProfile settings to change the Volume Mode and Access Mode for the virtual disk. If you do not specify these parameters, the system uses the default values from the kubevirt-storage-class-defaults config map.
5. Click Add.


[NOTE]
----
If the VM is running, you must restart the VM to apply the change.
----

## Storage fields



## Advanced storage settings

The following advanced storage settings are optional and available for Blank, Import via URL, and Clone existing PVC disks.

If you do not specify these parameters, the system uses the default storage profile values.



# Mounting a Windows driver disk on a virtual machine

You can mount a Windows driver disk on a virtual machine (VM) by using the Red Hat OpenShift Container Platform web console.

1. Navigate to Virtualization -> VirtualMachines.
2. Select the required VM to open the VirtualMachine details page.
3. On the Configuration tab, click Storage.
4. Select the Mount Windows drivers disk checkbox.

The Windows driver disk is displayed in the list of mounted disks.

# Adding a secret, config map, or service account to a virtual machine

You add a secret, config map, or service account to a virtual machine by using the Red Hat OpenShift Container Platform web console.

These resources are added to the virtual machine as disks. You then mount the secret, config map, or service account as you would mount any other disk.

If the virtual machine is running, changes do not take effect until you restart the virtual machine. The newly added resources are marked as pending changes at the top of the page.

* The secret, config map, or service account that you want to add must exist in the same namespace as the target virtual machine.

1. Click Virtualization -> VirtualMachines from the side menu.
2. Select a virtual machine to open the VirtualMachine details page.
3. Click Configuration -> Environment.
4. Click Add Config Map, Secret or Service Account.
5. Click Select a resource and select a resource from the list. A six character serial number is automatically generated for the selected resource.
6. Optional: Click Reload to revert the environment to its last saved state.
7. Click Save.

1. On the VirtualMachine details page, click Configuration -> Disks and verify that the resource is displayed in the list of disks.
2. Restart the virtual machine by clicking Actions -> Restart.

You can now mount the secret, config map, or service account as you would mount any other disk.

# Updating multiple virtual machines

You can use the command line interface (CLI) to update multiple virtual machines (VMs) at the same time.

* You installed the oc CLI.
* You have access to the Red Hat OpenShift Container Platform cluster, and you have cluster-admin permissions.

1. Create a privileged service account by running the following commands:

```terminal
$ oc adm new-project kubevirt-api-lifecycle-automation
```


```terminal
$ oc create sa kubevirt-api-lifecycle-automation -n kubevirt-api-lifecycle-automation
```


```terminal
$ oc create clusterrolebinding kubevirt-api-lifecycle-automation --clusterrole=cluster-admin --serviceaccount=kubevirt-api-lifecycle-automation:kubevirt-api-lifecycle-automation
```

2. Determine the pull URL for the kubevirt-api-lifecycle image by running the following command:

```terminal
$ oc get csv -n openshift-cnv -l=operators.coreos.com/kubevirt-hyperconverged.openshift-cnv -ojson | jq '.items[0].spec.relatedImages[] | select(.name|test(".*kubevirt-api-lifecycle-automation.*")) | .image'
```

3. Deploy Kubevirt-Api-Lifecycle-Automation by creating a job object as shown in the following example:

```yaml
apiVersion: batch/v1
kind: Job
metadata:
 name: kubevirt-api-lifecycle-automation
 namespace: kubevirt-api-lifecycle-automation
spec:
 template:
  spec:
   containers:
   - name: kubevirt-api-lifecycle-automation
     image: quay.io/openshift-virtualization/kubevirt-api-lifecycle-automation:v4.19 1
     imagePullPolicy: Always
     env:
     - name: MACHINE_TYPE_GLOB 2
       value: smth-glob9.10.0
     - name: RESTART_REQUIRED 3
       value: "true"
     - name: NAMESPACE 4
       value: "default"
     - name: LABEL_SELECTOR 5
       value: my-vm
     securityContext:
      allowPrivilegeEscalation: false
      capabilities:
       drop:
       - ALL
      privileged: false
      runAsNonRoot: true
      seccompProfile:
       type: RuntimeDefault
   restartPolicy: Never
   serviceAccountName: kubevirt-api-lifecycle-automation
```


Replace the image value with your pull URL for the image.
Replace the MACHINE_TYPE_GLOB value with your own pattern. This pattern is used to detect deprecated machine types that need to be upgraded.
If the RESTART_REQUIRED emvironment variable is set to true, VMs are restarted after the machine type is updated. If you do not want VMs to be restarted, set the value to false.
The namespace environment value indicates the namespace to look for VMs in. Leave the parameter empty for the job to go over all namespaces in the cluster.
You can use the LABEL_SELECTOR environment variable to select VMs that receive the job action. If you want the job to go over all VMs in the cluster, do not assign a value to the parameter.

## Additional resources for config maps, secrets, and service accounts

* Understanding config maps
* Providing sensitive data to pods
* Understanding and creating service accounts