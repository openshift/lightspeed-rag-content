# APIs used with OADP


The document provides information about the following APIs that you can use with OADP:
* Velero API
* OADP API

# Velero API

Velero API documentation is maintained by Velero, not by Red Hat. It can be found at Velero API types.

# OADP API

The following tables provide the structure of the OADP API:



Complete schema definitions for the OADP API.




[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Complete schema definitions for the type BackupLocation.



Complete schema definitions for the type SnapshotLocation.



Complete schema definitions for the type ApplicationConfig.



Complete schema definitions for the type VeleroConfig.



Complete schema definitions for the type CustomPlugin.



Complete schema definitions for the type ResticConfig.



## Configuring node agents and node labels

The Data Protection Application (DPA) uses the nodeSelector field to select which nodes can run the node agent. The nodeSelector field is the recommended form of node selection constraint.

1. Run the node agent on any node that you choose by adding a custom label:

```terminal
$ oc label node/<node_name> node-role.kubernetes.io/nodeAgent=""
```


[NOTE]
----
Any label specified must match the labels on each node.
----
2. Use the same custom label in the DPA.spec.configuration.nodeAgent.podConfig.nodeSelector field, which you used for labeling nodes:

```terminal
configuration:
  nodeAgent:
    enable: true
    podConfig:
      nodeSelector:
        node-role.kubernetes.io/nodeAgent: ""
```


The following example is an anti-pattern of nodeSelector and does not work unless both labels, node-role.kubernetes.io/infra: "" and node-role.kubernetes.io/worker: "", are on the node:

```terminal
    configuration:
      nodeAgent:
        enable: true
        podConfig:
          nodeSelector:
            node-role.kubernetes.io/infra: ""
            node-role.kubernetes.io/worker: ""
```


Complete schema definitions for the type PodConfig.



Complete schema definitions for the type Features.



The OADP API is more fully detailed in OADP Operator.