Understanding node rebooting

To reboot a node without causing an outage for applications running on the platform, it is important to first evacuate the pods. For pods that are made highly available by the routing tier, nothing else needs to be done. For other pods needing storage, typically databases, it is critical to ensure that they can remain in operation with one pod temporarily going offline. While implementing resiliency for stateful pods is different for each application, in all cases it is important to configure the scheduler to use node anti-affinity to ensure that the pods are properly spread across available nodes.

Another challenge is how to handle nodes that are running critical infrastructure such as the router or the registry. The same node evacuation process applies, though it is important to understand certain edge cases.
About rebooting nodes running critical infrastructure
When rebooting nodes that host critical Red Hat OpenShift Container Platform infrastructure components, such as router pods, registry pods, and monitoring pods, ensure that there are at least three nodes available to run these components.

The following scenario demonstrates how service interruptions can occur with applications running on Red Hat OpenShift Container Platform when only two nodes are available:

Node A is marked unschedulable and all pods are evacuated.

The registry pod running on that node is now redeployed on node B. Node B is now running both registry pods.

Node B is now marked unschedulable and is evacuated.

The service exposing the two pod endpoints on node B loses all endpoints, for a brief period of time, until they are redeployed to node A.


When using three nodes for infrastructure components, this process does not result in a service disruption. However, due to pod scheduling, the last node that is evacuated and brought back into rotation does not have a registry pod. One of the other nodes has two registry pods. To schedule the third registry pod on the last node, use pod anti-affinity to prevent the scheduler from locating two registry pods on the same node.

For more information on pod anti-affinity, see Placing pods relative to other pods using affinity and anti-affinity rules.
Rebooting a node using pod anti-affinity
Pod anti-affinity is slightly different than node anti-affinity. Node anti-affinity can be violated if there are no other suitable locations to deploy a pod. Pod anti-affinity can be set to either required or preferred.

With this in place, if only two infrastructure nodes are available and one is rebooted, the container image registry pod is prevented from running on the other node. oc get pods reports the pod as unready until a suitable node is available. Once a node is available and all pods are back in ready state, the next node can be restarted.

To reboot a node using pod anti-affinity:

Edit the node specification to configure pod anti-affinity:

Enable the MatchInterPodAffinity scheduler predicate in the scheduling policy file.

Perform a graceful restart of the node.
Understanding how to reboot nodes running routers
In most cases, a pod running an Red Hat OpenShift Container Platform router exposes a host port.

The PodFitsPorts scheduler predicate ensures that no router pods using the same port can run on the same node, and pod anti-affinity is achieved. If the routers are relying on IP failover for high availability, there is nothing else that is needed.

For router pods relying on an external service such as AWS Elastic Load Balancing for high availability, it is that service's responsibility to react to router pod restarts.

In rare cases, a router pod may not have a host port configured. In those cases, it is important to follow the recommended restart process for infrastructure nodes.
Rebooting a node gracefully
Before rebooting a node, it is recommended to backup etcd data to avoid any data loss on the node.

For single-node OpenShift clusters that require users to perform the oc login command rather than having the certificates in kubeconfig file to manage the cluster, the oc adm commands might not be available after cordoning and draining the node. This is because the openshift-oauth-apiserver pod is not running due to the cordon. You can use SSH to access the nodes as indicated in the following procedure.

In a single-node OpenShift cluster, pods cannot be rescheduled when cordoning and draining. However, doing so gives the pods, especially your workload pods, time to properly stop and release associated resources.
To perform a graceful restart of a node:

Mark the node as unschedulable:

Drain the node to remove all the running pods:

Access the node in debug mode:

Change your root directory to /host:

Restart the node:

After the reboot is complete, mark the node as schedulable by running the following command:

Verify that the node is ready:


For information on etcd data backup, see Backing up etcd data.