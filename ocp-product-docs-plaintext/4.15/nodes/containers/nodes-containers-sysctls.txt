Using sysctls in containers

Sysctl settings are exposed through Kubernetes, allowing users to modify certain kernel parameters at runtime. Only sysctls that are namespaced can be set independently on pods. If a sysctl is not namespaced, called node-level, you must use another method of setting the sysctl, such as by using the Node Tuning Operator.

Network sysctls are a special category of sysctl. Network sysctls include:

System-wide sysctls, for example net.ipv4.ip_local_port_range, that are valid for all networking. You can set these independently for each pod on a node.

Interface-specific sysctls, for example net.ipv4.conf.IFNAME.accept_local, that only apply to a specific additional network interface for a given pod. You can set these independently for each additional network configuration. You set these by using a configuration in the tuning-cni after the network interfaces are created.


Moreover, only those sysctls considered safe are whitelisted by default; you can manually enable other unsafe sysctls on the node to be available to the user.

If you are setting the sysctl and it is not node-level, you can find information on this procedure in the section Using the Node Tuning Operator.
About sysctls
In Linux, the sysctl interface allows an administrator to modify kernel parameters at runtime. Parameters are available from the /proc/sys/ virtual process file system. The parameters cover various subsystems, such as:

kernel (common prefix: kernel.)

networking (common prefix: net.)

virtual memory (common prefix: vm.)

MDADM (common prefix: dev.)


More subsystems are described in Kernel documentation. To get a list of all parameters, run:

$ sudo sysctl -a
Namespaced and node-level sysctls
A number of sysctls are namespaced in the Linux kernels. This means that you can set them independently for each pod on a node. Being namespaced is a requirement for sysctls to be accessible in a pod context within Kubernetes.

The following sysctls are known to be namespaced:

kernel.shm*

kernel.msg*

kernel.sem

fs.mqueue.*


Additionally, most of the sysctls in the net.* group are known to be namespaced. Their namespace adoption differs based on the kernel version and distributor.

Sysctls that are not namespaced are called node-level and must be set manually by the cluster administrator, either by means of the underlying Linux distribution of the nodes, such as by modifying the /etc/sysctls.conf file, or by using a daemon set with privileged containers. You can use the Node Tuning Operator to set node-level sysctls.

Consider marking nodes with special sysctls as tainted. Only schedule pods onto them that need those sysctl settings. Use the taints and toleration feature to mark the nodes.
Safe and unsafe sysctls
Sysctls are grouped into safe and unsafe sysctls.

For system-wide sysctls to be considered safe, they must be namespaced. A namespaced sysctl ensures there is isolation between namespaces and therefore pods. If you set a sysctl for one pod it must not add any of the following:

Influence any other pod on the node

Harm the node health

Gain CPU or memory resources outside of the resource limits of a pod


Being namespaced alone is not sufficient for the sysctl to be considered safe.
Any sysctl that is not added to the allowed list on Red Hat OpenShift Container Platform is considered unsafe for Red Hat OpenShift Container Platform.

Unsafe sysctls are not allowed by default. For system-wide sysctls the cluster administrator must manually enable them on a per-node basis. Pods with disabled unsafe sysctls are scheduled but do not launch.

You cannot manually enable interface-specific unsafe sysctls.
Red Hat OpenShift Container Platform adds the following system-wide and interface-specific safe sysctls to an allowed safe list:



When setting these values using the tuning CNI plugin, use the value IFNAME literally. The interface name is represented by the IFNAME token, and is replaced with the actual name of the interface at runtime.
Updating the interface-specific safe sysctls list
Red Hat OpenShift Container Platform includes a predefined list of safe interface-specific sysctls. You can modify this list by updating the cni-sysctl-allowlist in the openshift-multus namespace.

The support for updating the interface-specific safe sysctls list is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.

For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
Follow this procedure to modify the predefined list of safe sysctls. This procedure describes how to extend the default allow list.

View the existing predefined list by running the following command:

Edit the list by using the following command:

Save the changes to the file and exit.


Follow this procedure to enforce stricter reverse path forwarding for IPv4. For more information on reverse path forwarding see Reverse Path Forwarding.

Create a network attachment definition, such as reverse-path-fwd-example.yaml, with the following content:

Apply the yaml by running the following command:

Create a pod such as examplepod.yaml using the following YAML:

Apply the yaml by running the following command:

Verify that the pod is created by running the following command:

Log in to the pod by running the following command:

Verify the value of the configured sysctl flag. For example, find the value net.ipv4.conf.net1.rp_filter by running the following command:


Linux networking documentation
Starting a pod with safe sysctls
You can set sysctls on pods using the pod's securityContext. The securityContext applies to all containers in the same pod.

Safe sysctls are allowed by default.

This example uses the pod securityContext to set the following safe sysctls:

kernel.shm_rmid_forced

net.ipv4.ip_local_port_range

net.ipv4.tcp_syncookies

net.ipv4.ping_group_range


To avoid destabilizing your operating system, modify sysctl parameters only after you understand their effects.
Use this procedure to start a pod with the configured sysctl settings.

In most cases you modify an existing pod definition and add the securityContext spec.
Create a YAML file sysctl_pod.yaml that defines an example pod and add the securityContext spec, as shown in the following example:

Create the pod by running the following command:

Verify that the pod is created by running the following command:

Log in to the pod by running the following command:

Verify the values of the configured sysctl flags. For example, find the value kernel.shm_rmid_forced by running the following command:
Starting a pod with unsafe sysctls
A pod with unsafe sysctls fails to launch on any node unless the cluster administrator explicitly enables unsafe sysctls for that node. As with node-level sysctls, use the taints and toleration feature or labels on nodes to schedule those pods onto the right nodes.

The following example uses the pod securityContext to set a safe sysctl kernel.shm_rmid_forced and two unsafe sysctls, net.core.somaxconn and kernel.msgmax. There is no distinction between safe and unsafe sysctls in the specification.

To avoid destabilizing your operating system, modify sysctl parameters only after you understand their effects.
The following example illustrates what happens when you add safe and unsafe sysctls to a pod specification:

Create a YAML file sysctl-example-unsafe.yaml that defines an example pod and add the securityContext specification, as shown in the following example:

Create the pod using the following command:

Verify that the pod is scheduled but does not deploy because unsafe sysctls are not allowed for the node using the following command:
Enabling unsafe sysctls
A cluster administrator can allow certain unsafe sysctls for very special situations such as high performance or real-time application tuning.

If you want to use unsafe sysctls, a cluster administrator must enable them individually for a specific type of node. The sysctls must be namespaced.

You can further control which sysctls are set in pods by specifying lists of sysctls or sysctl patterns in the allowedUnsafeSysctls field of the Security Context Constraints.

The allowedUnsafeSysctls option controls specific needs such as high performance or real-time application tuning.


Due to their nature of being unsafe, the use of unsafe sysctls is at-your-own-risk and can lead to severe problems, such as improper behavior of containers, resource shortage, or breaking a node.
List existing MachineConfig objects for your Red Hat OpenShift Container Platform cluster to decide how to label your machine config by running the following command:

Add a label to the machine config pool where the containers with the unsafe sysctls will run by running the following command:

Create a YAML file set-sysctl-worker.yaml that defines a KubeletConfig custom resource (CR):

Create the object by running the following command:

Wait for the Machine Config Operator to generate the new rendered configuration and apply it to the machines by running the following command:

Create a YAML file sysctl-example-safe-unsafe.yaml that defines an example pod and add the securityContext spec, as shown in the following example:

Create the pod by running the following command:

Verify that the pod is created by running the following command:

Log in to the pod by running the following command:

Verify the values of the configured sysctl flags. For example, find the value net.core.somaxconn by running the following command:


The unsafe sysctl is now allowed and the value is set as defined in the securityContext spec of the updated pod specification.
Additional resources
Configuring system controls by using the tuning CNI

Using the Node Tuning Operator