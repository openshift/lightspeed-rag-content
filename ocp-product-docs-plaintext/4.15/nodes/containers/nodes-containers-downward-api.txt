Allowing containers to consume API objects

The Downward API is a mechanism that allows containers to consume information about API objects without coupling to Red Hat OpenShift Container Platform. Such information includes the pod's name, namespace, and resource values. Containers can consume information from the downward API using environment variables or a volume plugin.
Expose pod information to Containers using the Downward API
The Downward API contains such information as the pod's name, project, and resource values. Containers can consume information from the downward API using environment variables or a volume plugin.

Fields within the pod are selected using the FieldRef API type. FieldRef has two fields:


Currently, the valid selectors in the v1 API include:


The apiVersion field, if not specified, defaults to the API version of the enclosing pod template.
Understanding how to consume container values using the downward API
You containers can consume API values using environment variables or a volume plugin. Depending on the method you choose, containers can consume:

Pod name

Pod project/namespace

Pod annotations

Pod labels


Annotations and labels are available using only a volume plugin.

Consuming container values using environment variables
When using a container's environment variables, use the EnvVar type's valueFrom field (of type EnvVarSource) to specify that the variable's value should come from a FieldRef source instead of the literal value specified by the value field.

Only constant attributes of the pod can be consumed this way, as environment variables cannot be updated once a process is started in a way that allows the process to be notified that the value of a variable has changed. The fields supported using environment variables are:

Pod name

Pod project/namespace


Create a new pod spec that contains the environment variables you want the container to consume:


Check the container's logs for the MY_POD_NAME and MY_POD_NAMESPACE
values:
Consuming container values using a volume plugin
You containers can consume API values using a volume plugin.

Containers can consume:

Pod name

Pod project/namespace

Pod annotations

Pod labels


To use the volume plugin:

Create a new pod spec that contains the environment variables you want the container to consume:


Check the container's logs and verify the presence of the configured fields:
Understanding how to consume container resources using the Downward API
When creating pods, you can use the Downward API to inject information about computing resource requests and limits so that image and application authors can correctly create an image for specific environments.

You can do this using environment variable or a volume plugin.

Consuming container resources using environment variables
When creating pods, you can use the Downward API to inject information about computing resource requests and limits using environment variables.

When creating the pod configuration, specify environment variables that correspond to the contents of the resources field in the spec.container field.

If the resource limits are not included in the container configuration, the downward API defaults to the node's CPU and memory allocatable values.
Create a new pod spec that contains the resources you want to inject:
Consuming container resources using a volume plugin
When creating pods, you can use the Downward API to inject information about computing resource requests and limits using a volume plugin.

When creating the pod configuration, use the spec.volumes.downwardAPI.items field to describe the desired resources that correspond to the spec.resources field.

If the resource limits are not included in the container configuration, the Downward API defaults to the node's CPU and memory allocatable values.
Create a new pod spec that contains the resources you want to inject:
Consuming secrets using the Downward API
When creating pods, you can use the downward API to inject secrets so image and application authors can create an image for specific environments.

Create a secret to inject:

Create a pod that references the username field from the above Secret object:


Check the container's logs for the MY_SECRET_USERNAME value:
Consuming configuration maps using the Downward API
When creating pods, you can use the Downward API to inject configuration map values so image and application authors can create an image for specific environments.

Create a config map with the values to inject:

Create a pod that references the above config map:


Check the container's logs for the MY_CONFIGMAP_VALUE value:
Referencing environment variables
When creating pods, you can reference the value of a previously defined environment variable by using the $() syntax. If the environment variable reference can not be resolved, the value will be left as the provided string.

Create a pod that references an existing environment variable:


Check the container's logs for the MY_ENV_VAR_REF_ENV value:
Escaping environment variable references
When creating a pod, you can escape an environment variable reference by using a double dollar sign. The value will then be set to a single dollar sign version of the provided value.

Create a pod that references an existing environment variable:


Check the container's logs for the MY_NEW_ENV value: