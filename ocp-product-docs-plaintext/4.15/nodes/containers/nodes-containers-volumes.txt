Using volumes to persist container data

Files in a container are ephemeral. As such, when a container crashes or stops, the data is lost. You can use volumes to persist the data used by the containers in a pod. A volume is directory, accessible to the Containers in a pod, where data is stored for the life of the pod.
Understanding volumes
Volumes are mounted file systems available to pods and their containers which may be backed by a number of host-local or network attached storage endpoints. Containers are not persistent by default; on restart, their contents are cleared.

To ensure that the file system on the volume contains no errors and, if errors are present, to repair them when possible, Red Hat OpenShift Container Platform invokes the fsck utility prior to the mount utility. This occurs when either adding a volume or updating an existing volume.

The simplest volume type is emptyDir, which is a temporary directory on a single machine. Administrators may also allow you to request a persistent volume that is automatically attached to your pods.

emptyDir volume storage may be restricted by a quota based on the pod's FSGroup, if the FSGroup parameter is enabled by your cluster administrator.
Working with volumes using the Red Hat OpenShift Container Platform CLI
You can use the CLI command oc set volume to add and remove volumes and volume mounts for any object that has a pod template like replication controllers or deployment configs. You can also list volumes in pods or any object that has a pod template.

The oc set volume command uses the following general syntax:

$ oc set volume <object_selection> <operation> <mandatory_parameters> <options>

Object selection
Specify one of the following for the object_selection parameter in the oc set volume command:




Operation
Specify --add or --remove for the operation parameter in the oc set volume command.
Mandatory parameters
Any mandatory parameters are specific to the
selected operation and are discussed in later sections.
Options
Any options are specific to the
selected operation and are discussed in later sections.
Listing volumes and volume mounts in a pod
You can list volumes and volume mounts in pods or pod templates:

To list volumes:

$ oc set volume <object_type>/<name> [options]
List volume supported options:


For example:

To list all volumes for pod p1:

To list volume v1 defined on all deployment configs:
Adding volumes to a pod
You can add volumes and volume mounts to a pod.

To add a volume, a volume mount, or both to pod templates:

$ oc set volume <object_type>/<name> --add [options]

For example:

To add a new volume source emptyDir to the registry DeploymentConfig object:

To add volume v1 with secret secret1 for replication controller r1 and mount
inside the containers at /data:

To add existing persistent volume v1 with claim name pvc1 to deployment
configuration dc.json on disk, mount the volume on container c1 at
/data, and update the DeploymentConfig object on the server:

To add a volume v1 based on Git repository
https://github.com/namespace1/project1 with revision 5125c45f9f563 for
all replication controllers:
Updating volumes and volume mounts in a pod
You can modify the volumes and volume mounts in a pod.

Updating existing volumes using the --overwrite option:

$ oc set volume <object_type>/<name> --add --overwrite [options]
For example:

To replace existing volume v1 for replication controller r1 with existing
persistent volume claim pvc1:

To change the DeploymentConfig object d1 mount point to /opt for volume v1:
Removing volumes and volume mounts from a pod
You can remove a volume or volume mount from a pod.

To remove a volume from pod templates:

$ oc set volume <object_type>/<name> --remove [options]

For example:

To remove a volume v1 from the DeploymentConfig object d1:

To unmount volume v1 from container c1 for the DeploymentConfig object d1 and remove the volume v1 if it is not referenced by any containers on d1:

To remove all volumes for replication controller r1:
Configuring volumes for multiple uses in a pod
You can configure a volume to allows you to share one volume for multiple uses in a single pod using the volumeMounts.subPath property to specify a subPath value inside a volume instead of the volume's root.

You cannot add a subPath parameter to an existing scheduled pod.
To view the list of files in the volume, run the oc rsh command:

Specify the subPath: