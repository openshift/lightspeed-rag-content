Restrict resource consumption with limit ranges

By default, containers run with unbounded compute resources on an Red Hat OpenShift Container Platform cluster. With limit ranges, you can restrict resource consumption for specific objects in a project:

pods and containers: You can set minimum and maximum requirements for CPU and
memory for pods and their containers.

Image streams: You can set limits on the number of images and tags in an
ImageStream object.

Images: You can limit the size of images that can be pushed to an internal
registry.

Persistent volume claims (PVC): You can restrict the size of the PVCs that can
be requested.


If a pod does not meet the constraints imposed by the limit range, the pod cannot be created in the namespace.
About limit ranges
A limit range, defined by a LimitRange object, restricts resource consumption in a project. In the project you can set specific resource limits for a pod, container, image, image stream, or persistent volume claim (PVC).

All requests to create and modify resources are evaluated against each LimitRange object in the project. If the resource violates any of the enumerated constraints, the resource is rejected.

The following shows a limit range object for all components: pod, container, image, image stream, or PVC. You can configure limits for any or all of these components in the same object. You create a different limit range object for each project where you want to control resources.

apiVersion: "v1"
kind: "LimitRange"
metadata:
  name: "resource-limits"
spec:
  limits:
    - type: "Container"
      max:
        cpu: "2"
        memory: "1Gi"
      min:
        cpu: "100m"
        memory: "4Mi"
      default:
        cpu: "300m"
        memory: "200Mi"
      defaultRequest:
        cpu: "200m"
        memory: "100Mi"
      maxLimitRequestRatio:
        cpu: "10"
About component limits
The following examples show limit range parameters for each component. The examples are broken out for clarity. You can create a single LimitRange object for any or all components as necessary.

Container limits
A limit range allows you to specify the minimum and maximum CPU and memory that each container in a pod can request for a specific project. If a container is created in the project, the container CPU and memory requests in the Pod spec must comply with the values set in the LimitRange object. If not, the pod does not get created.

The container CPU or memory request and limit must be greater than or equal to the
min resource constraint for containers that are specified in the LimitRange object.

The container CPU or memory request and limit must be less than or equal to the
max resource constraint for containers that are specified in the LimitRange object.

The ratio of the container limits to requests must be
less than or equal to the maxLimitRequestRatio value for containers that
is specified in the LimitRange object.


If the Pod spec does not specify a container resource memory or limit, the default or defaultRequest CPU and memory values for containers specified in the limit range object are assigned to the container.

apiVersion: "v1"
kind: "LimitRange"
metadata:
  name: "resource-limits" 1
spec:
  limits:
    - type: "Container"
      max:
        cpu: "2" 2
        memory: "1Gi" 3
      min:
        cpu: "100m" 4
        memory: "4Mi" 5
      default:
        cpu: "300m" 6
        memory: "200Mi" 7
      defaultRequest:
        cpu: "200m" 8
        memory: "100Mi" 9
      maxLimitRequestRatio:
        cpu: "10" 10
The name of the LimitRange object.

The maximum amount of CPU that a single container in a pod can request.

The maximum amount of memory that a single container in a pod can request.

The minimum amount of CPU that a single container in a pod can request.

The minimum amount of memory that a single container in a pod can request.

The default amount of CPU that a container can use if not specified in the Pod spec.

The default amount of memory that a container can use if not specified in the Pod spec.

The default amount of CPU that a container can request if not specified in the Pod spec.

The default amount of memory that a container can request if not specified in the Pod spec.

The maximum limit-to-request ratio for a container.
Pod limits
A limit range allows you to specify the minimum and maximum CPU and memory limits for all containers across a pod in a given project. To create a container in the project, the container CPU and memory requests in the Pod spec must comply with the values set in the LimitRange object. If not, the pod does not get created.

If the Pod spec does not specify a container resource memory or limit, the default or defaultRequest CPU and memory values for containers specified in the limit range object are assigned to the container.

Across all containers in a pod, the following must hold true:

The container CPU or memory request and limit must be greater than or equal to the
min resource constraints for pods that are specified in the LimitRange object.

The container CPU or memory request and limit must be less than or equal to the
max resource constraints for pods that are specified in the LimitRange object.

The ratio of the container limits to requests must be less than or equal to
the maxLimitRequestRatio constraint specified in the LimitRange object.


apiVersion: "v1"
kind: "LimitRange"
metadata:
  name: "resource-limits" 1
spec:
  limits:
    - type: "Pod"
      max:
        cpu: "2" 2
        memory: "1Gi" 3
      min:
        cpu: "200m" 4
        memory: "6Mi" 5
      maxLimitRequestRatio:
        cpu: "10" 6
The name of the limit range object.

The maximum amount of CPU that a pod can request across all containers.

The maximum amount of memory that a pod can request across all containers.

The minimum amount of CPU that a pod can request across all containers.

The minimum amount of memory that a pod can request across all containers.

The maximum limit-to-request ratio for a container.
Image limits
A LimitRange object allows you to specify the maximum size of an image that can be pushed to an OpenShift image registry.

When pushing images to an OpenShift image registry, the following must hold true:

The size of the image must be less than or equal to the max size for
images that is specified in the LimitRange object.


apiVersion: "v1"
kind: "LimitRange"
metadata:
  name: "resource-limits" 1
spec:
  limits:
    - type: openshift.io/Image
      max:
        storage: 1Gi 2
The name of the LimitRange object.

The maximum size of an image that can be pushed to an OpenShift image registry.


The image size is not always available in the manifest of an uploaded image. This is especially the case for images built with Docker 1.10 or higher and pushed to a v2 registry. If such an image is pulled with an older Docker daemon, the image manifest is converted by the registry to schema v1 lacking all the size information. No storage limit set on images prevent it from being uploaded.

The issue is being addressed.
Image stream limits
A LimitRange object allows you to specify limits for image streams.

For each image stream, the following must hold true:

The number of image tags in an ImageStream specification must be less
than or equal to the openshift.io/image-tags constraint in the LimitRange object.

The number of unique references to images in an ImageStream specification
must be less than or equal to the openshift.io/images constraint in the limit
range object.


apiVersion: "v1"
kind: "LimitRange"
metadata:
  name: "resource-limits" 1
spec:
  limits:
    - type: openshift.io/ImageStream
      max:
        openshift.io/image-tags: 20 2
        openshift.io/images: 30 3
The name of the LimitRange object.

The maximum number of unique image tags in the imagestream.spec.tags
parameter in imagestream spec.

The maximum number of unique image references in the imagestream.status.tags
parameter in the imagestream spec.


The openshift.io/image-tags resource represents unique image references. Possible references are an ImageStreamTag, an ImageStreamImage and a DockerImage. Tags can be created using the oc tag and oc import-image commands. No distinction is made between internal and external references. However, each unique reference tagged in an ImageStream specification is counted just once. It does not restrict pushes to an internal container image registry in any way, but is useful for tag restriction.

The openshift.io/images resource represents unique image names recorded in image stream status. It allows for restriction of a number of images that can be pushed to the OpenShift image registry. Internal and external references are not distinguished.
Persistent volume claim limits
A LimitRange object allows you to restrict the storage requested in a persistent volume claim (PVC).

Across all persistent volume claims in a project, the following must hold true:

The resource request in a persistent volume claim (PVC) must be greater than or equal
the min constraint for PVCs that is specified in the LimitRange object.

The resource request in a persistent volume claim (PVC) must be less than or equal
the max constraint for PVCs that is specified in the LimitRange object.


apiVersion: "v1"
kind: "LimitRange"
metadata:
  name: "resource-limits" 1
spec:
  limits:
    - type: "PersistentVolumeClaim"
      min:
        storage: "2Gi" 2
      max:
        storage: "50Gi" 3
The name of the LimitRange object.

The minimum amount of storage that can be requested in a persistent volume claim.

The maximum amount of storage that can be requested in a persistent volume claim.
Creating a Limit Range
To apply a limit range to a project:

Create a LimitRange object with your required specifications:

Create the object:
Viewing a limit
You can view any limits defined in a project by navigating in the web console to the project's Quota page.

You can also use the CLI to view limit range details:

Get the list of LimitRange object defined in the project. For example, for a
project called demoproject:

Describe the LimitRange object you are interested in, for example the
resource-limits limit range:
Deleting a Limit Range
To remove any active LimitRange object to no longer enforce the limits in a project:

Run the following command: