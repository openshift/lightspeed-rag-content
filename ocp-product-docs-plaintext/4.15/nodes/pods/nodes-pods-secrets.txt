Providing sensitive data to pods by using secrets

Some applications need sensitive information, such as passwords and user names, that you do not want developers to have.

As an administrator, you can use Secret objects to provide this information without exposing that information in clear text.
Understanding secrets
The Secret object type provides a mechanism to hold sensitive information such as passwords, Red Hat OpenShift Container Platform client configuration files, private source repository credentials, and so on. Secrets decouple sensitive content from the pods. You can mount secrets into containers using a volume plugin or the system can use secrets to perform actions on behalf of a pod.

Key properties include:

Secret data can be referenced independently from its definition.

Secret data volumes are backed by temporary file-storage facilities (tmpfs) and never come to rest on a node.

Secret data can be shared within a namespace.


apiVersion: v1
kind: Secret
metadata:
  name: test-secret
  namespace: my-namespace
type: Opaque 1
data: 2
  username: <username> 3
  password: <password>
stringData: 4
  hostname: myapp.mydomain.com 5
Indicates the structure of the secret's key names and values.

The allowable format for the keys in the data field must meet the
guidelines in the DNS_SUBDOMAIN value in
the
Kubernetes identifiers glossary.

The value associated with keys in the data map must be base64 encoded.

Entries in the stringData map are converted to base64
and the entry will then be moved to the data map automatically. This field
is write-only; the value will only be returned via the data field.

The value associated with keys in the stringData map is made up of
plain text strings.


You must create a secret before creating the pods that depend on that secret.

When creating secrets:

Create a secret object with secret data.

Update the pod's service account to allow the reference to the secret.

Create a pod, which consumes the secret as an environment variable or as a file
(using a secret volume).


Types of secrets
The value in the type field indicates the structure of the secret's key names and values. The type can be used to enforce the presence of user names and keys in the secret object. If you do not want validation, use the opaque type, which is the default.

Specify one of the following types to trigger minimal server-side validation to ensure the presence of specific key names in the secret data:

kubernetes.io/service-account-token. Uses a service account token.

kubernetes.io/basic-auth. Use with Basic Authentication.

kubernetes.io/ssh-auth. Use with SSH Key Authentication.

kubernetes.io/tls. Use with TLS certificate authorities.


Specify type: Opaque if you do not want validation, which means the secret does not claim to conform to any convention for key names or values. An opaque secret, allows for unstructured key:value pairs that can contain arbitrary values.

You can specify other arbitrary types, such as example.com/my-secret-type. These types are not enforced server-side, but indicate that the creator of the secret intended to conform to the key/value requirements of that type.
For examples of different secret types, see the code samples in Using Secrets.
Secret data keys
Secret keys must be in a DNS subdomain.
Automatically generated secrets
By default, Red Hat OpenShift Container Platform creates the following secrets for each service account:

A dockercfg image pull secret

A service account token secret


This service account token secret and docker configuration image pull secret are necessary to integrate the OpenShift image registry into the cluster's user authentication and authorization system.

However, if you do not enable the ImageRegistry capability or if you disable the integrated OpenShift image registry in the Cluster Image Registry Operator's configuration, these secrets are not generated for each service account.

Do not rely on these automatically generated secrets for your own use; they might be removed in a future Red Hat OpenShift Container Platform release.
Workloads are automatically injected with a projected volume to obtain a bound service account token. If your workload needs an additional service account token, add an additional projected volume in your workload manifest. Bound service account tokens are more secure than service account token secrets for the following reasons:

Bound service account tokens have a bounded lifetime.

Bound service account tokens contain audiences.

Bound service account tokens can be bound to pods or secrets and the bound tokens are invalidated when the bound object is removed.


For more information, see Configuring bound service account tokens using volume projection.

You can also manually create a service account token secret to obtain a token, if the security exposure of a non-expiring token in a readable API object is acceptable to you. For more information, see Creating a service account token secret.

For information about requesting bound service account tokens, see Using bound service account tokens

For information about creating a service account token secret, see Creating a service account token secret.
Understanding how to create secrets
As an administrator you must create a secret before developers can create the pods that depend on that secret.

When creating secrets:

Create a secret object that contains the data you want to keep secret. The specific data required for each secret type is descibed in the following sections.

Update the pod's service account to reference the secret:

Create a pod, which consumes the secret as an environment variable or as a file
(using a secret volume):


Secret creation restrictions
To use a secret, a pod needs to reference the secret. A secret can be used with a pod in three ways:

To populate environment variables for containers.

As files in a volume mounted on one or more of its containers.

By kubelet when pulling images for the pod.


Volume type secrets write data into the container as a file using the volume mechanism. Image pull secrets use service accounts for the automatic injection of the secret into all pods in a namespace.

When a template contains a secret definition, the only way for the template to use the provided secret is to ensure that the secret volume sources are validated and that the specified object reference actually points to a Secret object. Therefore, a secret needs to be created before any pods that depend on it. The most effective way to ensure this is to have it get injected automatically through the use of a service account.

Secret API objects reside in a namespace. They can only be referenced by pods in that same namespace.

Individual secrets are limited to 1MB in size. This is to discourage the creation of large secrets that could exhaust apiserver and kubelet memory. However, creation of a number of smaller secrets could also exhaust memory.
Creating an opaque secret
As an administrator, you can create an opaque secret, which allows you to store unstructured key:value pairs that can contain arbitrary values.

Create a Secret object in a YAML file on a control plane node.

Use the following command to create a Secret object:

To use the secret in a pod:


For more information on using secrets in pods, see Understanding how to create secrets.
Creating a service account token secret
As an administrator, you can create a service account token secret, which allows you to distribute a service account token to applications that must authenticate to the API.

It is recommended to obtain bound service account tokens using the TokenRequest API instead of using service account token secrets. The tokens obtained from the TokenRequest API are more secure than the tokens stored in secrets, because they have a bounded lifetime and are not readable by other API clients.

You should create a service account token secret only if you cannot use the TokenRequest API and if the security exposure of a non-expiring token in a readable API object is acceptable to you.

See the Additional resources section that follows for information on creating bound service account tokens.
Create a Secret object in a YAML file on a control plane node:

Use the following command to create the Secret object:

To use the secret in a pod:


For more information on using secrets in pods, see Understanding how to create secrets.

For information on requesting bound service account tokens, see Using bound service account tokens

For information on creating service accounts, see Understanding and creating service accounts.
Creating a basic authentication secret
As an administrator, you can create a basic authentication secret, which allows you to store the credentials needed for basic authentication. When using this secret type, the data parameter of the Secret object must contain the following keys encoded in the base64 format:

username: the user name for authentication

password: the password or token for authentication


You can use the stringData parameter to use clear text content.
Create a Secret object in a YAML file on a control plane node:

Use the following command to create the Secret object:

To use the secret in a pod:


For more information on using secrets in pods, see Understanding how to create secrets.
Creating an SSH authentication secret
As an administrator, you can create an SSH authentication secret, which allows you to store data used for SSH authentication. When using this secret type, the data parameter of the Secret object must contain the SSH credential to use.

Create a Secret object in a YAML file on a control plane node:

Use the following command to create the Secret object:

To use the secret in a pod:


Understanding how to create secrets.
Creating a Docker configuration secret
As an administrator, you can create a Docker configuration secret, which allows you to store the credentials for accessing a container image registry.

kubernetes.io/dockercfg. Use this secret type to store your local Docker configuration file. The data parameter of the secret object must contain the contents of a .dockercfg file encoded in the base64 format.

kubernetes.io/dockerconfigjson. Use this secret type to store your local Docker configuration JSON file. The data parameter of the secret object must contain the contents of a .docker/config.json file encoded in the base64 format.


Create a Secret object in a YAML file on a control plane node.

Use the following command to create the Secret object

To use the secret in a pod:


For more information on using secrets in pods, see Understanding how to create secrets.
Creating a secret using the web console
You can create secrets using the web console.

Navigate to Workloads -> Secrets.

Click Create -> From YAML.

Click Create.

Click Add Secret to workload.
Understanding how to update secrets
When you modify the value of a secret, the value (used by an already running pod) will not dynamically change. To change a secret, you must delete the original pod and create a new pod (perhaps with an identical PodSpec).

Updating a secret follows the same workflow as deploying a new Container image. You can use the kubectl rolling-update command.

The resourceVersion value in a secret is not specified when it is referenced. Therefore, if a secret is updated at the same time as pods are starting, the version of the secret that is used for the pod is not defined.

Currently, it is not possible to check the resource version of a secret object that was used when a pod was created. It is planned that pods will report this information, so that a controller could restart ones using an old resourceVersion. In the interim, do not update the data of existing secrets, but create new ones with distinct names.
Creating and using secrets
As an administrator, you can create a service account token secret. This allows you to distribute a service account token to applications that must authenticate to the API.

Create a service account in your namespace by running the following command:

Save the following YAML example to a file named service-account-token-secret.yaml. The example includes a Secret object configuration that you can use to generate a service account token:

Generate the service account token by applying the file:

Get the service account token from the secret by running the following command:

Use your service account token to authenticate with the API of your cluster:
About using signed certificates with secrets
To secure communication to your service, you can configure Red Hat OpenShift Container Platform to generate a signed serving certificate/key pair that you can add into a secret in a project.

A service serving certificate secret is intended to support complex middleware applications that need out-of-the-box certificates. It has the same settings as the server certificates generated by the administrator tooling for nodes and masters.

apiVersion: v1
kind: Service
metadata:
  name: registry
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: registry-cert1
# ...
Specify the name for the certificate


Other pods can trust cluster-created certificates (which are only signed for internal DNS names), by using the CA bundle in the /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt file that is automatically mounted in their pod.

The signature algorithm for this feature is x509.SHA256WithRSA. To manually rotate, delete the generated secret. A new certificate is created.

Generating signed certificates for use with secrets
To use a signed serving certificate/key pair with a pod, create or edit the service to add the service.beta.openshift.io/serving-cert-secret-name annotation, then add the secret to the pod.

To create a service serving certificate secret:

Edit the Pod spec for your service.

Add the service.beta.openshift.io/serving-cert-secret-name annotation
with the name you want to use for your secret.

Create the service:

View the secret to make sure it was created:

Edit your Pod spec with that secret.
Troubleshooting secrets
If a service certificate generation fails with (service's service.beta.openshift.io/serving-cert-generation-error annotation contains):

secret/ssl-key references serviceUID 62ad25ca-d703-11e6-9d6f-0e9c0057b608, which does not match 77b6dd80-d716-11e6-9d6f-0e9c0057b60
The service that generated the certificate no longer exists, or has a different serviceUID. You must force certificates regeneration by removing the old secret, and clearing the following annotations on the service service.beta.openshift.io/serving-cert-generation-error, service.beta.openshift.io/serving-cert-generation-error-num:

Delete the secret:

Clear the annotations:


The command removing annotation has a - after the annotation name to be removed.