Configuring a basic authentication identity provider

Configure the basic-authentication identity provider for users to log in to Red Hat OpenShift Container Platform with credentials validated against a remote identity provider. Basic authentication is a generic back-end integration mechanism.
About identity providers in Red Hat OpenShift Container Platform
By default, only a kubeadmin user exists on your cluster. To specify an identity provider, you must create a custom resource (CR) that describes that identity provider and add it to the cluster.

Red Hat OpenShift Container Platform user names containing /, :, and % are not supported.
About basic authentication
Basic authentication is a generic back-end integration mechanism that allows users to log in to Red Hat OpenShift Container Platform with credentials validated against a remote identity provider.

Because basic authentication is generic, you can use this identity provider for advanced authentication configurations.

Basic authentication must use an HTTPS connection to the remote server to prevent potential snooping of the user ID and password and man-in-the-middle attacks.
With basic authentication configured, users send their user name and password to Red Hat OpenShift Container Platform, which then validates those credentials against a remote server by making a server-to-server request, passing the credentials as a basic authentication header. This requires users to send their credentials to Red Hat OpenShift Container Platform during login.

This only works for user name/password login mechanisms, and Red Hat OpenShift Container Platform must be able to make network requests to the remote authentication server.
User names and passwords are validated against a remote URL that is protected by basic authentication and returns JSON.

A 401 response indicates failed authentication.

A non-200 status, or the presence of a non-empty "error" key, indicates an error:

{"error":"Error message"}
A 200 status with a sub (subject) key indicates success:

{"sub":"userid"} 1
The subject must be unique to the authenticated user and must not be able to
be modified.


A successful response can optionally provide additional data, such as:

A display name using the name key. For example:

An email address using the email key. For example:

A preferred user name using the preferred_username key. This is useful when
the unique, unchangeable subject is a database key or UID, and a more
human-readable name exists. This is used as a hint when provisioning the
Red Hat OpenShift Container Platform user for the authenticated identity. For example:
Creating the secret
Identity providers use Red Hat OpenShift Container Platform Secret objects in the openshift-config namespace to contain the client secret, client certificates, and keys.

Create a Secret object that contains the key and certificate by using the following command:
Creating a config map
Identity providers use Red Hat OpenShift Container Platform ConfigMap objects in the openshift-config namespace to contain the certificate authority bundle. These are primarily used to contain certificate bundles needed by the identity provider.

Define an Red Hat OpenShift Container Platform ConfigMap object containing the
certificate authority by using the following command. The certificate
authority must be stored in the ca.crt key of the ConfigMap object.
Sample basic authentication CR
The following custom resource (CR) shows the parameters and acceptable values for a basic authentication identity provider.

apiVersion: config.openshift.io/v1
kind: OAuth
metadata:
  name: cluster
spec:
  identityProviders:
  - name: basicidp 1
    mappingMethod: claim 2
    type: BasicAuth
    basicAuth:
      url: https://www.example.com/remote-idp 3
      ca: 4
        name: ca-config-map
      tlsClientCert: 5
        name: client-cert-secret
      tlsClientKey: 6
        name: client-key-secret
This provider name is prefixed to the returned user ID to form an identity
name.

Controls how mappings are established between this provider's identities and User objects.

URL accepting credentials in Basic authentication headers.

Optional: Reference to an Red Hat OpenShift Container Platform ConfigMap object containing the
PEM-encoded certificate authority bundle to use in validating server
certificates for the configured URL.

Optional: Reference to an Red Hat OpenShift Container Platform Secret object containing the client
certificate to present when making requests to the configured URL.

Reference to an Red Hat OpenShift Container Platform Secret object containing the key for the
client certificate. Required if tlsClientCert is specified.


See Identity provider parameters for information on parameters, such as mappingMethod, that are common to all identity providers.
Adding an identity provider to your cluster
After you install your cluster, add an identity provider to it so your users can authenticate.

Create an Red Hat OpenShift Container Platform cluster.

Create the custom resource (CR) for your identity providers.

You must be logged in as an administrator.


Apply the defined CR:

Log in to the cluster as a user from your identity provider, entering the
password when prompted.

Confirm that the user logged in successfully, and display the user name.
Example Apache HTTPD configuration for basic identity providers
The basic identify provider (IDP) configuration in Red Hat OpenShift Container Platform 4 requires that the IDP server respond with JSON for success and failures. You can use CGI scripting in Apache HTTPD to accomplish this. This section provides examples.

<VirtualHost *:443>
  # CGI Scripts in here
  DocumentRoot /var/www/cgi-bin

  # SSL Directives
  SSLEngine on
  SSLCipherSuite PROFILE=SYSTEM
  SSLProxyCipherSuite PROFILE=SYSTEM
  SSLCertificateFile /etc/pki/tls/certs/localhost.crt
  SSLCertificateKeyFile /etc/pki/tls/private/localhost.key

  # Configure HTTPD to execute scripts
  ScriptAlias /basic /var/www/cgi-bin

  # Handles a failed login attempt
  ErrorDocument 401 /basic/fail.cgi

  # Handles authentication
  <Location /basic/login.cgi>
    AuthType Basic
    AuthName "Please Log In"
    AuthBasicProvider file
    AuthUserFile /etc/httpd/conf/passwords
    Require valid-user
  </Location>
</VirtualHost>
#!/bin/bash
echo "Content-Type: application/json"
echo ""
echo '{"sub":"userid", "name":"'$REMOTE_USER'"}'
exit 0
#!/bin/bash
echo "Content-Type: application/json"
echo ""
echo '{"error": "Login failure"}'
exit 0
File requirements
These are the requirements for the files you create on an Apache HTTPD web server:

login.cgi and fail.cgi must be executable (chmod +x).

login.cgi and fail.cgi must have proper SELinux contexts if SELinux is
enabled: restorecon -RFv /var/www/cgi-bin, or ensure that the context is
httpd_sys_script_exec_t using ls -laZ.

login.cgi is only executed if your user successfully logs in per Require
and Auth directives.

fail.cgi is executed if the user fails to log in, resulting in an HTTP 401
response.
Basic authentication troubleshooting
The most common issue relates to network connectivity to the backend server. For simple debugging, run curl commands on the master. To test for a successful login, replace the <user> and <password> in the following example command with valid credentials. To test an invalid login, replace them with false credentials.

$ curl --cacert /path/to/ca.crt --cert /path/to/client.crt --key /path/to/client.key -u <user>:<password> -v https://www.example.com/remote-idp
Successful responses

A 200 status with a sub (subject) key indicates success:

{"sub":"userid"}
The subject must be unique to the authenticated user, and must not be able to be modified.

A successful response can optionally provide additional data, such as:

A display name using the name key:

An email address using the email key:

A preferred user name using the preferred_username key:


Failed responses

A 401 response indicates failed authentication.

A non-200 status or the presence of a non-empty "error" key indicates an
error: {"error":"Error message"}