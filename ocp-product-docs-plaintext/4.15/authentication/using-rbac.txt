Using RBAC to define and apply permissions

RBAC overview
Role-based access control (RBAC) objects determine whether a user is allowed to perform a given action within a project.

can use the cluster roles and bindings to control who has various access levels to the Red Hat OpenShift Container Platform platform itself and all projects.

Developers can use local roles and bindings to control who has access to their projects. Note that authorization is a separate step from authentication, which is more about determining the identity of who is taking the action.

Authorization is managed using:


Be mindful of the difference between local and cluster bindings. For example, if you bind the cluster-admin role to a user by using a local role binding, it might appear that this user has the privileges of a cluster administrator. This is not the case. Binding the cluster-admin to a user in a project grants super administrator privileges for only that project to the user. That user has the permissions of the cluster role admin, plus a few additional permissions like the ability to edit rate limits, for that project. This binding can be confusing via the web console UI, which does not list cluster role bindings that are bound to true cluster administrators. However, it does list local role bindings that you can use to locally bind cluster-admin.

The relationships between cluster roles, local roles, cluster role bindings, local role bindings, users, groups and service accounts are illustrated below.


The get pods/exec, get pods/*, and get * rules grant execution privileges when they are applied to a role. Apply the principle of least privilege and assign only the minimal RBAC rights required for users and agents. For more information, see RBAC rules allow execution privileges.
Evaluating authorization
Red Hat OpenShift Container Platform evaluates authorization by using:


Identity
The user name and list of groups that the user belongs to.
Action
The action you perform. In most cases, this consists of:
Bindings
The full list of bindings, the associations between users or groups
with a role.


Red Hat OpenShift Container Platform evaluates authorization by using the following steps:

The identity and the project-scoped action is used to find all bindings that
apply to the user or their groups.

Bindings are used to locate all the roles that apply.

Roles are used to find all the rules that apply.

The action is checked against each rule to find a match.

If no matching rule is found, the action is then denied by default.


including a matrix of the verbs and resources each are associated with.
Projects and namespaces
A Kubernetes namespace provides a mechanism to scope resources in a cluster. The Kubernetes documentation has more information on namespaces.

Namespaces provide a unique scope for:

Named resources to avoid basic naming collisions.

Delegated management authority to trusted users.

The ability to limit community resource consumption.


Most objects in the system are scoped by namespace, but some are excepted and have no namespace, including nodes and users.

A project is a Kubernetes namespace with additional annotations and is the central vehicle by which access to resources for regular users is managed. A project allows a community of users to organize and manage their content in isolation from other communities. Users must be given access to projects by administrators, or if allowed to create projects, automatically have access to their own projects.

Projects can have a separate name, displayName, and description.

The mandatory name is a unique identifier for the project and is most visible when using the CLI tools or API. The maximum name length is 63 characters.

The optional displayName is how the project is displayed in the web console (defaults to name).

The optional description can be a more detailed description of the project and is also visible in the web console.


Each project scopes its own set of:


Cluster administrators can create projects and delegate administrative rights for the project to any member of the user community. Cluster administrators can also allow developers to create their own projects.

Developers and administrators can interact with projects by using the CLI or the web console.
Default projects
Red Hat OpenShift Container Platform comes with a number of default projects, and projects starting with openshift- are the most essential to users. These projects host master components that run as pods and other infrastructure components. The pods created in these namespaces that have a critical pod annotation are considered critical, and the have guaranteed admission by kubelet. Pods created for master components in these namespaces are already marked as critical.

Do not run workloads in or share access to default projects. Default projects are reserved for running core cluster components.

The following default projects are considered highly privileged: default, kube-public, kube-system, openshift, openshift-infra, openshift-node, and other system-created projects that have the openshift.io/run-level label set to 0 or 1. Functionality that relies on admission plugins, such as pod security admission, security context constraints, cluster resource quotas, and image reference resolution, does not work in highly privileged projects.
Viewing cluster roles and bindings
You can use the oc CLI to view cluster roles and bindings by using the oc describe command.

Install the oc CLI.

Obtain permission to view the cluster roles and bindings.


To view the cluster roles and their associated rule sets:

To view the current set of cluster role bindings, which shows the users and
groups that are bound to various roles:
Viewing local roles and bindings
You can use the oc CLI to view local roles and bindings by using the oc describe command.

Install the oc CLI.

Obtain permission to view the local roles and bindings:


To view the current set of local role bindings, which show the users and groups
that are bound to various roles for the current project:

To view the local role bindings for a different project, add the -n flag
to the command:
Adding roles to users
You can use  the oc adm administrator CLI to manage the roles and bindings.

Binding, or adding, a role to users or groups gives the user or group the access that is granted by the role. You can add and remove roles to and from users and groups using oc adm policy commands.

You can bind any of the default cluster roles to local users or groups in your project.

Add a role to a user in a specific project:

View the local role bindings and verify the addition in the output:
Local role binding commands
When you manage a user or group's associated roles for local role bindings using the following operations, a project may be specified with the -n flag. If it is not specified, then the current project is used.

You can use the following commands for local RBAC management.
Creating a cluster admin
The cluster-admin role is required to perform administrator level tasks on the Red Hat OpenShift Container Platform cluster, such as modifying cluster resources.

You must have created a user to define as the cluster admin.


Define the user as a cluster admin: