Syncing LDAP groups

you can use groups to manage users, change their permissions, and enhance collaboration. Your organization may have already created user groups and stored them in an LDAP server. Red Hat OpenShift Container Platform can sync those LDAP records with internal Red Hat OpenShift Container Platform records, enabling you to manage your groups in one place. Red Hat OpenShift Container Platform currently supports group sync with LDAP servers using three common schemas for defining group membership: RFC 2307, Active Directory, and augmented Active Directory.

For more information on configuring LDAP, see Configuring an LDAP identity provider.
About configuring LDAP sync
Before you can run LDAP sync, you need a sync configuration file. This file contains the following LDAP client configuration details:

Configuration for connecting to your LDAP server.

Sync configuration options that are dependent on the schema used in your LDAP
server.

An administrator-defined list of name mappings that maps Red Hat OpenShift Container Platform group names to groups in your LDAP server.


The format of the configuration file depends upon the schema you are using: RFC 2307, Active Directory, or augmented Active Directory.


LDAP client configuration
The LDAP client configuration section of the configuration defines the connections to your LDAP server.


The LDAP client configuration section of the configuration defines the connections to your LDAP server.

url: ldap://10.0.0.0:389 1
bindDN: cn=admin,dc=example,dc=com 2
bindPassword: <password> 3
insecure: false 4
ca: my-ldap-ca-bundle.crt 5
The connection protocol, IP address of the LDAP server hosting your
database, and the port to connect to, formatted as scheme://host:port.

Optional distinguished name (DN) to use as the Bind DN.
Red Hat OpenShift Container Platform uses this if elevated privilege is required to retrieve entries for
the sync operation.

Optional password to use to bind. Red Hat OpenShift Container Platform uses this if elevated privilege is
necessary to retrieve entries for the sync operation. This value may also be
provided in an environment variable, external file, or encrypted file.

When false, secure
LDAP (ldaps://) URLs connect using TLS, and insecure LDAP (ldap://) URLs are
upgraded to TLS. When true, no TLS connection is made to the server and you cannot use ldaps:// URL schemes.

The certificate bundle to use for validating server certificates for the
configured URL. If empty, Red Hat OpenShift Container Platform uses system-trusted roots. This only applies
if insecure is set to false.



LDAP query definition
Sync configurations consist of LDAP query definitions for the entries that are
required for synchronization. The specific definition of an LDAP query depends
on the schema used to store membership information in the LDAP server.


baseDN: ou=users,dc=example,dc=com 1
scope: sub 2
derefAliases: never 3
timeout: 0 4
filter: (objectClass=person) 5
pageSize: 0 6
The distinguished name (DN) of the branch of the directory where all
searches will start from. It is required that you specify the top of your
directory tree, but you can also specify a subtree in the directory.

The scope of the search. Valid values are base, one, or sub. If this
is left undefined, then a scope of sub is assumed. Descriptions of the scope
options can be found in the table below.

The behavior of the search with respect to aliases in the LDAP tree. Valid
values are never, search, base, or always. If this is left undefined,
then the default is to always dereference aliases. Descriptions of the
dereferencing behaviors can be found in the table below.

The time limit allowed for the search by the client, in seconds. A value of
0 imposes no client-side limit.

A valid LDAP search filter. If this is left undefined, then the default is
(objectClass=*).

The optional maximum size of response pages from the server, measured in LDAP
entries. If set to 0, no size restrictions will be made on pages of responses.
Setting paging sizes is necessary when queries return more entries than the
client or server allow by default.





User-defined name mapping
A user-defined name mapping explicitly maps the names of Red Hat OpenShift Container Platform groups to
unique identifiers that find groups on your LDAP server. The mapping uses normal
YAML syntax. A user-defined mapping can contain an entry for every group in your
LDAP server or only a subset of those groups. If there are groups on the LDAP
server that do not have a user-defined name mapping, the default behavior during
sync is to use the attribute specified as the Red Hat OpenShift Container Platform group's name.


groupUIDNameMapping:
  "cn=group1,ou=groups,dc=example,dc=com": firstgroup
  "cn=group2,ou=groups,dc=example,dc=com": secondgroup
  "cn=group3,ou=groups,dc=example,dc=com": thirdgroup
About the RFC 2307 configuration file
The RFC 2307 schema requires you to provide an LDAP query definition for both user and group entries, as well as the attributes with which to represent them in the internal Red Hat OpenShift Container Platform records.

For clarity, the group you create in Red Hat OpenShift Container Platform should use attributes other than the distinguished name whenever possible for user- or administrator-facing fields. For example, identify the users of an Red Hat OpenShift Container Platform group by their e-mail, and use the name of the group as the common name. The following configuration file creates these relationships:

If using user-defined name mappings, your configuration file will differ.
kind: LDAPSyncConfig
apiVersion: v1
url: ldap://LDAP_SERVICE_IP:389 1
insecure: false 2
rfc2307:
    groupsQuery:
        baseDN: "ou=groups,dc=example,dc=com"
        scope: sub
        derefAliases: never
        pageSize: 0
    groupUIDAttribute: dn 3
    groupNameAttributes: [ cn ] 4
    groupMembershipAttributes: [ member ] 5
    usersQuery:
        baseDN: "ou=users,dc=example,dc=com"
        scope: sub
        derefAliases: never
        pageSize: 0
    userUIDAttribute: dn 6
    userNameAttributes: [ mail ] 7
    tolerateMemberNotFoundErrors: false
    tolerateMemberOutOfScopeErrors: false
The IP address and host of the LDAP server where this group's record is
stored.

When false, secure
LDAP (ldaps://) URLs connect using TLS, and insecure LDAP (ldap://) URLs are
upgraded to TLS. When true, no TLS connection is made to the server and you cannot use ldaps:// URL schemes.

The attribute that uniquely identifies a group on the LDAP server.
You cannot specify groupsQuery filters when using DN for groupUIDAttribute.
For fine-grained filtering, use the whitelist / blacklist method.

The attribute to use as the name of the group.

The attribute on the group that stores the membership information.

The attribute that uniquely identifies a user on the LDAP server. You
cannot specify usersQuery filters when using DN for userUIDAttribute. For
fine-grained  filtering, use the whitelist / blacklist method.

The attribute to use as the name of the user in the Red Hat OpenShift Container Platform group record.
About the Active Directory configuration file
The Active Directory schema requires you to provide an LDAP query definition for user entries, as well as the attributes to represent them with in the internal Red Hat OpenShift Container Platform group records.

For clarity, the group you create in Red Hat OpenShift Container Platform should use attributes other than the distinguished name whenever possible for user- or administrator-facing fields. For example, identify the users of an Red Hat OpenShift Container Platform group by their e-mail, but define the name of the group by the name of the group on the LDAP server. The following configuration file creates these relationships:

kind: LDAPSyncConfig
apiVersion: v1
url: ldap://LDAP_SERVICE_IP:389
activeDirectory:
    usersQuery:
        baseDN: "ou=users,dc=example,dc=com"
        scope: sub
        derefAliases: never
        filter: (objectclass=person)
        pageSize: 0
    userNameAttributes: [ mail ] 1
    groupMembershipAttributes: [ memberOf ] 2
The attribute to use as the name of the user in the Red Hat OpenShift Container Platform group record.

The attribute on the user that stores the membership information.
About the augmented Active Directory configuration file
The augmented Active Directory schema requires you to provide an LDAP query definition for both user entries and group entries, as well as the attributes with which to represent them in the internal Red Hat OpenShift Container Platform group records.

For clarity, the group you create in Red Hat OpenShift Container Platform should use attributes other than the distinguished name whenever possible for user- or administrator-facing fields. For example, identify the users of an Red Hat OpenShift Container Platform group by their e-mail, and use the name of the group as the common name. The following configuration file creates these relationships.

kind: LDAPSyncConfig
apiVersion: v1
url: ldap://LDAP_SERVICE_IP:389
augmentedActiveDirectory:
    groupsQuery:
        baseDN: "ou=groups,dc=example,dc=com"
        scope: sub
        derefAliases: never
        pageSize: 0
    groupUIDAttribute: dn 1
    groupNameAttributes: [ cn ] 2
    usersQuery:
        baseDN: "ou=users,dc=example,dc=com"
        scope: sub
        derefAliases: never
        filter: (objectclass=person)
        pageSize: 0
    userNameAttributes: [ mail ] 3
    groupMembershipAttributes: [ memberOf ] 4
The attribute that uniquely identifies a group on the LDAP server. You
cannot specify groupsQuery filters when using DN for groupUIDAttribute. For
fine-grained filtering, use the whitelist / blacklist method.

The attribute to use as the name of the group.

The attribute to use as the name of the user in the Red Hat OpenShift Container Platform group record.

The attribute on the user that stores the membership information.
Running LDAP sync
Once you have created a sync configuration file, you can begin to sync. Red Hat OpenShift Container Platform allows administrators to perform a number of different sync types with the same server.

Syncing the LDAP server with Red Hat OpenShift Container Platform
You can sync all groups from the LDAP server with Red Hat OpenShift Container Platform.

Create a sync configuration file.

You have access to the cluster as a user with the cluster-admin role.


To sync all groups from the LDAP server with Red Hat OpenShift Container Platform:
Syncing Red Hat OpenShift Container Platform groups with the LDAP server
You can sync all groups already in Red Hat OpenShift Container Platform that correspond to groups in the LDAP server specified in the configuration file.

Create a sync configuration file.

You have access to the cluster as a user with the cluster-admin role.


To sync Red Hat OpenShift Container Platform groups with the LDAP server:
Syncing subgroups from the LDAP server with Red Hat OpenShift Container Platform
You can sync a subset of LDAP groups with Red Hat OpenShift Container Platform using whitelist files, blacklist files, or both.

You can use any combination of blacklist files, whitelist files, or whitelist literals. Whitelist and blacklist files must contain one unique group identifier per line, and you can include whitelist literals directly in the command itself. These guidelines apply to groups found on LDAP servers as well as groups already present in Red Hat OpenShift Container Platform.
Create a sync configuration file.

You have access to the cluster as a user with the cluster-admin role.


To sync a subset of LDAP groups with Red Hat OpenShift Container Platform, use any the following commands:
Running a group pruning job
An administrator can also choose to remove groups from Red Hat OpenShift Container Platform records if the records on the LDAP server that created them are no longer present. The prune job will accept the same sync configuration file and whitelists or blacklists as used for the sync job.

For example:

$ oc adm prune groups --sync-config=/path/to/ldap-sync-config.yaml --confirm
$ oc adm prune groups --whitelist=/path/to/whitelist.txt --sync-config=/path/to/ldap-sync-config.yaml --confirm
$ oc adm prune groups --blacklist=/path/to/blacklist.txt --sync-config=/path/to/ldap-sync-config.yaml --confirm
Automatically syncing LDAP groups
You can automatically sync LDAP groups on a periodic basis by configuring a cron job.

You have access to the cluster as a user with the cluster-admin role.

You have configured an LDAP identity provider (IDP).


Create a project where the cron job will run:

Locate the secret and config map that you created when configuring the LDAP identity provider and copy them to this new project.

Define a service account:

Create the service account:

Define a cluster role:

Create the cluster role:

Define a cluster role binding to bind the cluster role to the service account:

Create the cluster role binding:

Define a config map that specifies the sync configuration file:

Create the config map:

Define a cron job:

Create the cron job:


Configuring an LDAP identity provider

Creating cron jobs
LDAP group sync examples
This section contains examples for the RFC 2307, Active Directory, and augmented Active Directory schemas.

These examples assume that all users are direct members of their respective groups. Specifically, no groups have other groups as members. See the Nested Membership Sync Example for information on how to sync nested groups.
Syncing groups using the RFC 2307 schema
For the RFC 2307 schema, the following examples synchronize a group named admins that has two members: Jane and Jim. The examples explain:

How the group and users are added to the LDAP server.

What the resulting group record in Red Hat OpenShift Container Platform will be after synchronization.


These examples assume that all users are direct members of their respective groups. Specifically, no groups have other groups as members. See the Nested Membership Sync Example for information on how to sync nested groups.
In the RFC 2307 schema, both users (Jane and Jim) and groups exist on the LDAP server as first-class entries, and group membership is stored in attributes on the group. The following snippet of ldif defines the users and group for this schema:

  dn: ou=users,dc=example,dc=com
  objectClass: organizationalUnit
  ou: users
  dn: cn=Jane,ou=users,dc=example,dc=com
  objectClass: person
  objectClass: organizationalPerson
  objectClass: inetOrgPerson
  cn: Jane
  sn: Smith
  displayName: Jane Smith
  mail: jane.smith@example.com
  dn: cn=Jim,ou=users,dc=example,dc=com
  objectClass: person
  objectClass: organizationalPerson
  objectClass: inetOrgPerson
  cn: Jim
  sn: Adams
  displayName: Jim Adams
  mail: jim.adams@example.com
  dn: ou=groups,dc=example,dc=com
  objectClass: organizationalUnit
  ou: groups
  dn: cn=admins,ou=groups,dc=example,dc=com 1
  objectClass: groupOfNames
  cn: admins
  owner: cn=admin,dc=example,dc=com
  description: System Administrators
  member: cn=Jane,ou=users,dc=example,dc=com 2
  member: cn=Jim,ou=users,dc=example,dc=com
The group is a first-class entry in the LDAP server.

Members of a group are listed with an identifying reference as attributes on
the group.


Create the configuration file.

You have access to the cluster as a user with the cluster-admin role.


Run the sync with the rfc2307_config.yaml file:
Syncing groups using the RFC2307 schema with user-defined name mappings
When syncing groups with user-defined name mappings, the configuration file changes to contain these mappings as shown below.

kind: LDAPSyncConfig
apiVersion: v1
groupUIDNameMapping:
  "cn=admins,ou=groups,dc=example,dc=com": Administrators 1
rfc2307:
    groupsQuery:
        baseDN: "ou=groups,dc=example,dc=com"
        scope: sub
        derefAliases: never
        pageSize: 0
    groupUIDAttribute: dn 2
    groupNameAttributes: [ cn ] 3
    groupMembershipAttributes: [ member ]
    usersQuery:
        baseDN: "ou=users,dc=example,dc=com"
        scope: sub
        derefAliases: never
        pageSize: 0
    userUIDAttribute: dn 4
    userNameAttributes: [ mail ]
    tolerateMemberNotFoundErrors: false
    tolerateMemberOutOfScopeErrors: false
The user-defined name mapping.

The unique identifier attribute that is used for the keys in the
user-defined name mapping. You cannot specify groupsQuery filters when using
DN for groupUIDAttribute. For fine-grained filtering, use the whitelist / blacklist method.

The attribute to name Red Hat OpenShift Container Platform groups with if their unique identifier is
not in the user-defined name mapping.

The attribute that uniquely identifies a user on the LDAP server. You
cannot specify usersQuery filters when using DN for userUIDAttribute. For
fine-grained  filtering, use the whitelist / blacklist method.


Create the configuration file.

You have access to the cluster as a user with the cluster-admin role.


Run the sync with the rfc2307_config_user_defined.yaml file:
Syncing groups using RFC 2307 with user-defined error tolerances
By default, if the groups being synced contain members whose entries are outside of the scope defined in the member query, the group sync fails with an error:

Error determining LDAP group membership for "<group>": membership lookup for user "<user>" in group "<group>" failed because of "search for entry with dn="<user-dn>" would search outside of the base dn specified (dn="<base-dn>")".
This often indicates a misconfigured baseDN in the usersQuery field. However, in cases where the baseDN intentionally does not contain some of the members of the group, setting tolerateMemberOutOfScopeErrors: true allows the group sync to continue. Out of scope members will be ignored.

Similarly, when the group sync process fails to locate a member for a group, it fails outright with errors:

Error determining LDAP group membership for "<group>": membership lookup for user "<user>" in group "<group>" failed because of "search for entry with base dn="<user-dn>" refers to a non-existent entry".
Error determining LDAP group membership for "<group>": membership lookup for user "<user>" in group "<group>" failed because of "search for entry with base dn="<user-dn>" and filter "<filter>" did not return any results".
This often indicates a misconfigured usersQuery field. However, in cases where the group contains member entries that are known to be missing, setting tolerateMemberNotFoundErrors: true allows the group sync to continue. Problematic members will be ignored.

Enabling error tolerances for the LDAP group sync causes the sync process to ignore problematic member entries. If the LDAP group sync is not configured correctly, this could result in synced Red Hat OpenShift Container Platform groups missing members.
  dn: ou=users,dc=example,dc=com
  objectClass: organizationalUnit
  ou: users
  dn: cn=Jane,ou=users,dc=example,dc=com
  objectClass: person
  objectClass: organizationalPerson
  objectClass: inetOrgPerson
  cn: Jane
  sn: Smith
  displayName: Jane Smith
  mail: jane.smith@example.com
  dn: cn=Jim,ou=users,dc=example,dc=com
  objectClass: person
  objectClass: organizationalPerson
  objectClass: inetOrgPerson
  cn: Jim
  sn: Adams
  displayName: Jim Adams
  mail: jim.adams@example.com
  dn: ou=groups,dc=example,dc=com
  objectClass: organizationalUnit
  ou: groups
  dn: cn=admins,ou=groups,dc=example,dc=com
  objectClass: groupOfNames
  cn: admins
  owner: cn=admin,dc=example,dc=com
  description: System Administrators
  member: cn=Jane,ou=users,dc=example,dc=com
  member: cn=Jim,ou=users,dc=example,dc=com
  member: cn=INVALID,ou=users,dc=example,dc=com 1
  member: cn=Jim,ou=OUTOFSCOPE,dc=example,dc=com 2
A member that does not exist on the LDAP server.

A member that may exist, but is not under the baseDN in the
user query for the sync job.


To tolerate the errors in the above example, the following additions to your sync configuration file must be made:

kind: LDAPSyncConfig
apiVersion: v1
url: ldap://LDAP_SERVICE_IP:389
rfc2307:
    groupsQuery:
        baseDN: "ou=groups,dc=example,dc=com"
        scope: sub
        derefAliases: never
    groupUIDAttribute: dn
    groupNameAttributes: [ cn ]
    groupMembershipAttributes: [ member ]
    usersQuery:
        baseDN: "ou=users,dc=example,dc=com"
        scope: sub
        derefAliases: never
    userUIDAttribute: dn 1
    userNameAttributes: [ mail ]
    tolerateMemberNotFoundErrors: true 2
    tolerateMemberOutOfScopeErrors: true 3
The attribute that uniquely identifies a user on the LDAP server. You
cannot specify usersQuery filters when using DN for userUIDAttribute. For
fine-grained  filtering, use the whitelist / blacklist method.

When true, the sync job tolerates groups for which some members were not
found, and members whose LDAP entries are not found are ignored. The
default behavior for the sync job is to fail if a member of a group is not
found.

When true, the sync job tolerates groups for which some members are outside
the user scope given in the usersQuery base DN, and members outside the member
query scope are ignored. The default behavior for the sync job is to fail if a
member of a group is out of scope.


Create the configuration file.

You have access to the cluster as a user with the cluster-admin role.


Run the sync with the rfc2307_config_tolerating.yaml file:
Syncing groups using the Active Directory schema
In the Active Directory schema, both users (Jane and Jim) exist in the LDAP server as first-class entries, and group membership is stored in attributes on the user. The following snippet of ldif defines the users and group for this schema:

dn: ou=users,dc=example,dc=com
objectClass: organizationalUnit
ou: users

dn: cn=Jane,ou=users,dc=example,dc=com
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
objectClass: testPerson
cn: Jane
sn: Smith
displayName: Jane Smith
mail: jane.smith@example.com
memberOf: admins 1

dn: cn=Jim,ou=users,dc=example,dc=com
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
objectClass: testPerson
cn: Jim
sn: Adams
displayName: Jim Adams
mail: jim.adams@example.com
memberOf: admins
The user's group memberships are listed as attributes on the user, and the
group does not exist as an entry on the server. The memberOf attribute does
not have to be a literal attribute on the user; in some LDAP servers, it is created
during search and returned to the client, but not committed to the database.


Create the configuration file.

You have access to the cluster as a user with the cluster-admin role.


Run the sync with the active_directory_config.yaml file:
Syncing groups using the augmented Active Directory schema
In the augmented Active Directory schema, both users (Jane and Jim) and groups exist in the LDAP server as first-class entries, and group membership is stored in attributes on the user. The following snippet of ldif defines the users and group for this schema:

dn: ou=users,dc=example,dc=com
objectClass: organizationalUnit
ou: users

dn: cn=Jane,ou=users,dc=example,dc=com
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
objectClass: testPerson
cn: Jane
sn: Smith
displayName: Jane Smith
mail: jane.smith@example.com
memberOf: cn=admins,ou=groups,dc=example,dc=com 1

dn: cn=Jim,ou=users,dc=example,dc=com
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
objectClass: testPerson
cn: Jim
sn: Adams
displayName: Jim Adams
mail: jim.adams@example.com
memberOf: cn=admins,ou=groups,dc=example,dc=com

dn: ou=groups,dc=example,dc=com
objectClass: organizationalUnit
ou: groups

dn: cn=admins,ou=groups,dc=example,dc=com 2
objectClass: groupOfNames
cn: admins
owner: cn=admin,dc=example,dc=com
description: System Administrators
member: cn=Jane,ou=users,dc=example,dc=com
member: cn=Jim,ou=users,dc=example,dc=com
The user's group memberships are listed as attributes on the user.

The group is a first-class entry on the LDAP server.


Create the configuration file.

You have access to the cluster as a user with the cluster-admin role.


Run the sync with the augmented_active_directory_config.yaml file:


LDAP nested membership sync example
Groups in Red Hat OpenShift Container Platform do not nest. The LDAP server must flatten group membership before the data can be consumed. Microsoft's Active Directory Server supports this feature via the LDAP_MATCHING_RULE_IN_CHAIN rule, which has the OID 1.2.840.113556.1.4.1941. Furthermore, only explicitly whitelisted groups can be synced when using this matching rule.

This section has an example for the augmented Active Directory schema, which synchronizes a group named admins that has one user Jane and one group otheradmins as members. The otheradmins group has one user member: Jim. This example explains:

How the group and users are added to the LDAP server.

What the LDAP sync configuration file looks like.

What the resulting group record in Red Hat OpenShift Container Platform will be after synchronization.


In the augmented Active Directory schema, both users (Jane and Jim) and groups exist in the LDAP server as first-class entries, and group membership is stored in attributes on the user or the group. The following snippet of ldif defines the users and groups for this schema:

dn: ou=users,dc=example,dc=com
objectClass: organizationalUnit
ou: users

dn: cn=Jane,ou=users,dc=example,dc=com
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
objectClass: testPerson
cn: Jane
sn: Smith
displayName: Jane Smith
mail: jane.smith@example.com
memberOf: cn=admins,ou=groups,dc=example,dc=com 1

dn: cn=Jim,ou=users,dc=example,dc=com
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
objectClass: testPerson
cn: Jim
sn: Adams
displayName: Jim Adams
mail: jim.adams@example.com
memberOf: cn=otheradmins,ou=groups,dc=example,dc=com 1

dn: ou=groups,dc=example,dc=com
objectClass: organizationalUnit
ou: groups

dn: cn=admins,ou=groups,dc=example,dc=com 2
objectClass: group
cn: admins
owner: cn=admin,dc=example,dc=com
description: System Administrators
member: cn=Jane,ou=users,dc=example,dc=com
member: cn=otheradmins,ou=groups,dc=example,dc=com

dn: cn=otheradmins,ou=groups,dc=example,dc=com 2
objectClass: group
cn: otheradmins
owner: cn=admin,dc=example,dc=com
description: Other System Administrators
memberOf: cn=admins,ou=groups,dc=example,dc=com 1 3
member: cn=Jim,ou=users,dc=example,dc=com
The user's and group's memberships are listed as attributes on the object.

The groups are first-class entries on the LDAP server.

The otheradmins group is a member of the admins group.


When syncing nested groups with Active Directory, you must provide an LDAP query definition for both user entries and group entries, as well as the attributes with which to represent them in the internal Red Hat OpenShift Container Platform group records. Furthermore, certain changes are required in this configuration:

The oc adm groups sync command must explicitly whitelist groups.

The user's groupMembershipAttributes must include
"memberOf:1.2.840.113556.1.4.1941:" to comply with the
LDAP_MATCHING_RULE_IN_CHAIN
rule.

The groupUIDAttribute must be set to dn.

The groupsQuery:


For clarity, the group you create in Red Hat OpenShift Container Platform should use attributes other than the distinguished name whenever possible for user- or administrator-facing fields. For example, identify the users of an Red Hat OpenShift Container Platform group by their e-mail, and use the name of the group as the common name. The following configuration file creates these relationships:

kind: LDAPSyncConfig
apiVersion: v1
url: ldap://LDAP_SERVICE_IP:389
augmentedActiveDirectory:
    groupsQuery: 1
        derefAliases: never
        pageSize: 0
    groupUIDAttribute: dn 2
    groupNameAttributes: [ cn ] 3
    usersQuery:
        baseDN: "ou=users,dc=example,dc=com"
        scope: sub
        derefAliases: never
        filter: (objectclass=person)
        pageSize: 0
    userNameAttributes: [ mail ] 4
    groupMembershipAttributes: [ "memberOf:1.2.840.113556.1.4.1941:" ] 5
groupsQuery filters cannot be specified. The groupsQuery base DN and scope
values are ignored. groupsQuery must set a valid derefAliases.

The attribute that uniquely identifies a group on the LDAP server. It must be set to dn.

The attribute to use as the name of the group.

The attribute to use as the name of the user in the Red Hat OpenShift Container Platform group
record. mail or sAMAccountName are preferred choices in most installations.

The attribute on the user that stores the membership information. Note the use
of LDAP_MATCHING_RULE_IN_CHAIN.


Create the configuration file.

You have access to the cluster as a user with the cluster-admin role.


Run the sync with the augmented_active_directory_config_nested.yaml file:
LDAP sync configuration specification
The object specification for the configuration file is below.  Note that the different schema objects have different fields.  For example, v1.ActiveDirectoryConfig has no groupsQuery field whereas v1.RFC2307Config and v1.AugmentedActiveDirectoryConfig both do.

There is no support for binary attributes. All attribute data coming from the LDAP server must be in the format of a UTF-8 encoded string. For example, never use a binary attribute, such as objectGUID, as an ID attribute. You must use string attributes, such as sAMAccountName or userPrincipalName, instead.
v1.LDAPSyncConfig
LDAPSyncConfig holds the necessary configuration options to define an LDAP group sync.
v1.StringSource
StringSource allows specifying a string inline, or externally via environment variable or file. When it contains only a string value, it marshals to a simple JSON string.
v1.LDAPQuery
LDAPQuery holds the options necessary to build an LDAP query.
v1.RFC2307Config
RFC2307Config holds the necessary configuration options to define how an LDAP group sync interacts with an LDAP server using the RFC2307 schema.
v1.ActiveDirectoryConfig
ActiveDirectoryConfig holds the necessary configuration options to define how an LDAP group sync interacts with an LDAP server using the Active Directory schema.
v1.AugmentedActiveDirectoryConfig
AugmentedActiveDirectoryConfig holds the necessary configuration options to define how an LDAP group sync interacts with an LDAP server using the augmented Active Directory schema.