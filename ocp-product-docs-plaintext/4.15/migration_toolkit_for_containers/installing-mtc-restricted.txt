Installing the Migration Toolkit for Containers in a restricted network environment

You can install the Migration Toolkit for Containers (MTC) on Red Hat OpenShift Container Platform 4 in a restricted network environment by performing the following procedures:

Create a mirrored Operator catalog.

Install the Migration Toolkit for Containers Operator on the Red Hat OpenShift Container Platform 4.15 target cluster by using Operator Lifecycle Manager.

Install the Migration Toolkit for Containers Operator on the source cluster:

Configure object storage to use as a replication repository.


To install MTC on Red Hat OpenShift Container Platform 3, see Installing the legacy Migration Toolkit for Containers Operator on Red Hat OpenShift Container Platform 3.
To uninstall MTC, see Uninstalling MTC and deleting resources.
Compatibility guidelines
You must install the Migration Toolkit for Containers (MTC) Operator that is compatible with your Red Hat OpenShift Container Platform version.


legacy platform
Red Hat OpenShift Container Platform 4.5 and earlier.
modern platform
Red Hat OpenShift Container Platform 4.6 and later.
legacy operator
The MTC Operator designed for legacy platforms.
modern operator
The MTC Operator designed for modern platforms.
control cluster
The cluster that runs the MTC controller and GUI.
remote cluster
A source or destination cluster for a migration that runs Velero. The Control Cluster communicates with Remote clusters via the Velero API to drive migrations.


You must use the compatible MTC version for migrating your Red Hat OpenShift Container Platform clusters. For the migration to succeed both your source cluster and the destination cluster must use the same version of MTC.

MTC 1.7 supports migrations from Red Hat OpenShift Container Platform 3.11 to 4.8.

MTC 1.8 only supports migrations from Red Hat OpenShift Container Platform 4.9 and later.


Edge cases exist in which network restrictions prevent modern clusters from connecting to other clusters involved in the migration. For example, when migrating from an Red Hat OpenShift Container Platform 3.11 cluster on premises to a modern Red Hat OpenShift Container Platform cluster in the cloud, where the modern cluster cannot connect to the Red Hat OpenShift Container Platform 3.11 cluster.

With MTC v.1.7.z, if one of the remote clusters is unable to communicate with the control cluster because of network restrictions, use the crane tunnel-api command.

With the stable MTC release, although you should always designate the most modern cluster as the control cluster, in this specific case it is possible to designate the legacy cluster as the control cluster and push workloads to the remote cluster.
Installing the Migration Toolkit for Containers Operator on Red Hat OpenShift Container Platform 4.15
You install the Migration Toolkit for Containers Operator on Red Hat OpenShift Container Platform 4.15 by using the Operator Lifecycle Manager.

You must be logged in as a user with cluster-admin privileges on all clusters.

You must create an Operator catalog from a mirror image in a local registry.


In the Red Hat OpenShift Container Platform web console, click Operators -> OperatorHub.

Use the Filter by keyword field to find the Migration Toolkit for Containers Operator.

Select the Migration Toolkit for Containers Operator and click Install.

Click Install.

Click Migration Toolkit for Containers Operator.

Under Provided APIs, locate the Migration Controller tile, and click Create Instance.

Click Create.

Click Workloads -> Pods to verify that the MTC pods are running.
Installing the legacy Migration Toolkit for Containers Operator on Red Hat OpenShift Container Platform 4.2 to 4.5
You can install the legacy Migration Toolkit for Containers Operator manually on Red Hat OpenShift Container Platform versions 4.2 to 4.5.

You must be logged in as a user with cluster-admin privileges on all clusters.

You must have access to registry.redhat.io.

You must have podman installed.

You must have a Linux workstation with network access in order to download files from registry.redhat.io.

You must create a mirror image of the Operator catalog.

You must install the Migration Toolkit for Containers Operator from the mirrored Operator catalog on Red Hat OpenShift Container Platform 4.15.


Log in to registry.redhat.io with your Red Hat Customer Portal credentials:

Download the operator.yml file by entering the following command:

Download the controller.yml file by entering the following command:

Obtain the Operator image mapping by running the following command:

Update the image values for the ansible and operator containers and the REGISTRY value in the operator.yml file:

Log in to your Red Hat OpenShift Container Platform source cluster.

Create the Migration Toolkit for Containers Operator object:

Create the MigrationController object:

Verify that the MTC pods are running:
Proxy configuration
For Red Hat OpenShift Container Platform 4.1 and earlier versions, you must configure proxies in the MigrationController custom resource (CR) manifest after you install the Migration Toolkit for Containers Operator because these versions do not support a cluster-wide proxy object.

For Red Hat OpenShift Container Platform 4.2 to 4.15, the Migration Toolkit for Containers (MTC) inherits the cluster-wide proxy settings. You can change the proxy parameters if you want to override the cluster-wide proxy settings.

Direct volume migration
Direct Volume Migration (DVM) was introduced in MTC 1.4.2. DVM supports only one proxy. The source cluster cannot access the route of the target cluster if the target cluster is also behind a proxy.

If you want to perform a DVM from a source cluster behind a proxy, you must configure a TCP proxy that works at the transport layer and forwards the SSL connections transparently without decrypting and re-encrypting them with their own SSL certificates. A Stunnel proxy is an example of such a proxy.

TCP proxy setup for DVM
You can set up a direct connection between the source and the target cluster through a TCP proxy and configure the stunnel_tcp_proxy variable in the MigrationController CR to use the proxy:

apiVersion: migration.openshift.io/v1alpha1
kind: MigrationController
metadata:
  name: migration-controller
  namespace: openshift-migration
spec:
  [...]
  stunnel_tcp_proxy: http://username:password@ip:port
Direct volume migration (DVM) supports only basic authentication for the proxy. Moreover, DVM works only from behind proxies that can tunnel a TCP connection transparently. HTTP/HTTPS proxies in man-in-the-middle mode do not work. The existing cluster-wide proxies might not support this behavior. As a result, the proxy settings for DVM are intentionally kept different from the usual proxy configuration in MTC.
Why use a TCP proxy instead of an HTTP/HTTPS proxy?
You can enable DVM by running Rsync between the source and the target cluster over an OpenShift route.  Traffic is encrypted using Stunnel, a TCP proxy. The Stunnel running on the source cluster initiates a TLS connection with the target Stunnel and transfers data over an encrypted channel.

Cluster-wide HTTP/HTTPS proxies in OpenShift are usually configured in man-in-the-middle mode where they negotiate their own TLS session with the outside servers. However, this does not work with Stunnel. Stunnel requires that its TLS session be untouched by the proxy, essentially making the proxy a transparent tunnel which simply forwards the TCP connection as-is. Therefore, you must use a TCP proxy.
Known issue
The migration Controller uses the SPDY protocol to execute commands within remote pods. If the remote cluster is behind a proxy or a firewall that does not support the SPDY protocol, the migration controller fails to execute remote commands. The migration fails with the error message Upgrade request required. Workaround: Use a proxy that supports the SPDY protocol.

In addition to supporting the SPDY protocol, the proxy or firewall also must pass the Upgrade HTTP header to the API server. The client uses this header to open a websocket connection with the API server. If the Upgrade header is blocked by the proxy or firewall, the migration fails with the error message Upgrade request required. Workaround: Ensure that the proxy forwards the Upgrade header.
Tuning network policies for migrations
OpenShift supports restricting traffic to or from pods using NetworkPolicy or EgressFirewalls based on the network plugin used by the cluster. If any of the source namespaces involved in a migration use such mechanisms to restrict network traffic to pods, the restrictions might inadvertently stop traffic to Rsync pods during migration.

Rsync pods running on both the source and the target clusters must connect to each other over an OpenShift Route. Existing NetworkPolicy or EgressNetworkPolicy objects can be configured to automatically exempt Rsync pods from these traffic restrictions.

NetworkPolicy configuration
Egress traffic from Rsync pods
You can use the unique labels of Rsync pods to allow egress traffic to pass from them if the NetworkPolicy configuration in the source or destination namespaces blocks this type of traffic. The following policy allows all egress traffic from Rsync pods in the namespace:

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress-from-rsync-pods
spec:
  podSelector:
    matchLabels:
      owner: directvolumemigration
      app: directvolumemigration-rsync-transfer
  egress:
  - {}
  policyTypes:
  - Egress
Ingress traffic to Rsync pods
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-egress-from-rsync-pods
spec:
  podSelector:
    matchLabels:
      owner: directvolumemigration
      app: directvolumemigration-rsync-transfer
  ingress:
  - {}
  policyTypes:
  - Ingress
EgressNetworkPolicy configuration
The EgressNetworkPolicy object or Egress Firewalls are OpenShift constructs designed to block egress traffic leaving the cluster.

Unlike the NetworkPolicy object, the Egress Firewall works at a project level because it applies to all pods in the namespace. Therefore, the unique labels of Rsync pods do not exempt only Rsync pods from the restrictions. However, you can add the CIDR ranges of the source or target cluster to the Allow rule of the policy so that a direct connection can be setup between two clusters.

Based on which cluster the Egress Firewall is present in, you can add the CIDR range of the other cluster to allow egress traffic between the two:

apiVersion: network.openshift.io/v1
kind: EgressNetworkPolicy
metadata:
  name: test-egress-policy
  namespace: <namespace>
spec:
  egress:
  - to:
      cidrSelector: <cidr_of_source_or_target_cluster>
    type: Deny
Choosing alternate endpoints for data transfer
By default, DVM uses an Red Hat OpenShift Container Platform route as an endpoint to transfer PV data to destination clusters. You can choose another type of supported endpoint, if cluster topologies allow.

For each cluster, you can configure an endpoint by setting the rsync_endpoint_type variable on the appropriate destination cluster in your MigrationController CR:

apiVersion: migration.openshift.io/v1alpha1
kind: MigrationController
metadata:
  name: migration-controller
  namespace: openshift-migration
spec:
  [...]
  rsync_endpoint_type: [NodePort|ClusterIP|Route]
Configuring supplemental groups for Rsync pods
When your PVCs use a shared storage, you can configure the access to that storage by adding supplemental groups to Rsync pod definitions in order for the pods to allow access:


The MigrationController CR can be updated to set values for these supplemental groups:

spec:
  src_supplemental_groups: "1000,2000"
  target_supplemental_groups: "2000,3000"
Configuring proxies
You must be logged in as a user with cluster-admin privileges on all clusters.


Get the MigrationController CR manifest:

Update the proxy parameters:

Save the manifest as migration-controller.yaml.

Apply the updated manifest:


For more information, see Configuring the cluster-wide proxy.
Running Rsync as either root or non-root
This section applies only when you are working with the OpenShift API, not the web console.
OpenShift environments have the PodSecurityAdmission controller enabled by default. This controller requires cluster administrators to enforce Pod Security Standards by means of namespace labels. All workloads in the cluster are expected to run one of the following Pod Security Standard levels: Privileged, Baseline or Restricted. Every cluster has its own default policy set.

To guarantee successful data transfer in all environments, Migration Toolkit for Containers (MTC) 1.7.5 introduced changes in Rsync pods, including running Rsync pods as non-root user by default. This ensures that data transfer is possible even for workloads that do not necessarily require higher privileges. This change was made because it is best to run workloads with the lowest level of privileges possible.


Although running Rsync pods as non-root user works in most cases, data transfer might fail when you run workloads as root user on the source side. MTC provides two ways to manually override default non-root operation for data transfer:

Configure all migrations to run an Rsync pod as root on the destination cluster for all migrations.

Run an Rsync pod as root on the destination cluster per migration.


In both cases, you must set the following labels on the source side of any namespaces that are running workloads with higher privileges prior to migration: enforce, audit, and warn.

To learn more about Pod Security Admission and setting values for labels, see Controlling pod security admission synchronization.

Configuring the MigrationController CR as root or non-root for all migrations
By default, Rsync runs as non-root.

On the destination cluster, you can configure the MigrationController CR to run Rsync as root.

Configure the MigrationController CR as follows:
Configuring the MigMigration CR as root or non-root per migration
On the destination cluster, you can configure the MigMigration CR to run Rsync as root or non-root, with the following non-root options:

As a specific user ID (UID)

As a specific group ID (GID)


To run Rsync as root, configure the MigMigration CR according to this example:

To run Rsync as a specific User ID (UID) or as a specific Group ID (GID), configure the MigMigration CR according to this example:
Configuring a replication repository
The Multicloud Object Gateway is the only supported option for a restricted network environment.

MTC supports the file system and snapshot data copy methods for migrating data from the source cluster to the target cluster. You can select a method that is suited for your environment and is supported by your storage provider.

Prerequisites
All clusters must have uninterrupted network access to the replication repository.

If you use a proxy server with an internally hosted replication repository, you must ensure that the proxy allows access to the replication repository.
Retrieving Multicloud Object Gateway credentials
You must retrieve the Multicloud Object Gateway (MCG) credentials in order to create a Secret custom resource (CR) for the OpenShift API for Data Protection (OADP).

MCG is a component of OpenShift Data Foundation.

You must deploy OpenShift Data Foundation by using the appropriate OpenShift Data Foundation deployment guide.


Obtain the S3 endpoint, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY by running the describe command on the NooBaa custom resource.
Additional resources
Disconnected environment in the Red Hat OpenShift Data Foundation documentation.

MTC workflow

About data copy methods

Adding a replication repository to the MTC web console
Uninstalling MTC and deleting resources
You can uninstall the Migration Toolkit for Containers (MTC) and delete its resources to clean up the cluster.

Deleting the velero CRDs removes Velero from the cluster.
You must be logged in as a user with cluster-admin privileges.


Delete the MigrationController custom resource (CR) on all clusters:

Uninstall the Migration Toolkit for Containers Operator on Red Hat OpenShift Container Platform 4 by using the Operator Lifecycle Manager.

Delete cluster-scoped resources on all clusters by running the following commands: