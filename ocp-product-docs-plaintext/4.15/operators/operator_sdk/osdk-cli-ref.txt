Operator SDK CLI reference

The Operator SDK command-line interface (CLI) is a development kit designed to make writing Operators easier.

$ operator-sdk <command> [<subcommand>] [<argument>] [<flags>]
Operator authors with cluster administrator access to a Kubernetes-based cluster (such as Red Hat OpenShift Container Platform) can use the Operator SDK CLI to develop their own Operators based on Go, Ansible, or Helm. Kubebuilder is embedded into the Operator SDK as the scaffolding solution for Go-based Operators, which means existing Kubebuilder projects can be used as is with the Operator SDK and continue to work.
bundle
The operator-sdk bundle command manages Operator bundle metadata.

validate
The bundle validate subcommand validates an Operator bundle.
cleanup
The operator-sdk cleanup command destroys and removes resources that were created for an Operator that was deployed with the run command.
completion
The operator-sdk completion command generates shell completions to make issuing CLI commands quicker and easier.



For example:

$ operator-sdk completion bash
# bash completion for operator-sdk                         -*- shell-script -*-
...
# ex: ts=4 sw=4 et filetype=sh
create
The operator-sdk create command is used to create, or scaffold, a Kubernetes API.

api
The create api subcommand scaffolds a Kubernetes API. The subcommand must be run in a project that was initialized with the init command.
generate
The operator-sdk generate command invokes a specific generator to generate code or manifests.

bundle
The generate bundle subcommand generates a set of bundle manifests, metadata, and a bundle.Dockerfile file for your Operator project.

Typically, you run the generate kustomize manifests subcommand first to generate the input Kustomize bases that are used by the generate bundle subcommand. However, you can use the make bundle command in an initialized project to automate running these commands in sequence.

See Bundling an Operator for a full procedure that includes using the make bundle command to call the generate bundle subcommand.
kustomize
The generate kustomize subcommand contains subcommands that generate Kustomize data for the Operator.

manifests
The generate kustomize manifests subcommand generates or regenerates Kustomize bases and a kustomization.yaml file in the config/manifests directory, which are used to build bundle manifests by other Operator SDK commands. This command interactively asks for UI metadata, an important component of manifest bases, by default unless a base already exists or you set the --interactive=false flag.
init
The operator-sdk init command initializes an Operator project and generates, or scaffolds, a default project directory layout for the given plugin.

This command writes the following files:

Boilerplate license file

PROJECT file with the domain and repository

Makefile to build the project

go.mod file with project dependencies

kustomization.yaml file for customizing manifests

Patch file for customizing images for manager manifests

Patch file for enabling Prometheus metrics

main.go file to run
run
The operator-sdk run command provides options that can launch the Operator in various environments.

bundle
The run bundle subcommand deploys an Operator in the bundle format with Operator Lifecycle Manager (OLM).


The restricted security context is not compatible with the default namespace. To configure your Operator's pod security admission in your production environment, see "Complying with pod security admission". For more information about pod security admission, see "Understanding and managing pod security admission".
See Operator group membership for details on possible install modes.

Complying with pod security admission

Understanding and managing pod security admission
bundle-upgrade
The run bundle-upgrade subcommand upgrades an Operator that was previously installed in the bundle format with Operator Lifecycle Manager (OLM).


The restricted security context is not compatible with the default namespace. To configure your Operator's pod security admission in your production environment, see "Complying with pod security admission". For more information about pod security admission, see "Understanding and managing pod security admission".
Complying with pod security admission

Understanding and managing pod security admission
scorecard
The operator-sdk scorecard command runs the scorecard tool to validate an Operator bundle and provide suggestions for improvements. The command takes one argument, either a bundle image or directory containing manifests and metadata. If the argument holds an image tag, the image must be present remotely.


The restricted security context is not compatible with the default namespace. To configure your Operator's pod security admission in your production environment, see "Complying with pod security admission". For more information about pod security admission, see "Understanding and managing pod security admission".
See Validating Operators using the scorecard tool for details about running the scorecard tool.

Complying with pod security admission

Understanding and managing pod security admission