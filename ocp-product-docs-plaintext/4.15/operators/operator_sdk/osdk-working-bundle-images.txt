Working with bundle images

You can use the Operator SDK to package, deploy, and upgrade Operators in the bundle format for use on Operator Lifecycle Manager (OLM).
Bundling an Operator
The Operator bundle format is the default packaging method for Operator SDK and Operator Lifecycle Manager (OLM). You can get your Operator ready for use on OLM by using the Operator SDK to build and push your Operator project as a bundle image.

Operator SDK CLI installed on a development workstation

OpenShift CLI (oc) v4.15+ installed

Operator project initialized by using the Operator SDK

If your Operator is Go-based, your project must be updated to use supported images for running on Red Hat OpenShift Container Platform


Run the following make commands in your Operator project directory to build and push your Operator image. Modify the IMG argument in the following steps to reference a repository that you have access to. You can obtain an account for storing containers at repository sites such as Quay.io.

Create your Operator bundle manifest by running the make bundle command, which invokes several commands, including the Operator SDK generate bundle and bundle validate subcommands:

Build and push your bundle image by running the following commands. OLM consumes Operator bundles using an index image, which reference one or more bundle images.
Deploying an Operator with Operator Lifecycle Manager
Operator Lifecycle Manager (OLM) helps you to install, update, and manage the lifecycle of Operators and their associated services on a Kubernetes cluster. OLM is installed by default on Red Hat OpenShift Container Platform and runs as a Kubernetes extension so that you can use the web console and the OpenShift CLI (oc) for all Operator lifecycle management functions without any additional tools.

The Operator bundle format is the default packaging method for Operator SDK and OLM. You can use the Operator SDK to quickly run a bundle image on OLM to ensure that it runs properly.

Operator SDK CLI installed on a development workstation

Operator bundle image built and pushed to a registry

OLM installed on a Kubernetes-based cluster (v1.16.0 or later if you use apiextensions.k8s.io/v1 CRDs, for example Red Hat OpenShift Container Platform 4.15)

Logged in to the cluster with oc using an account with cluster-admin permissions

If your Operator is Go-based, your project must be updated to use supported images for running on Red Hat OpenShift Container Platform


Enter the following command to run the Operator on the cluster:


File-based catalogs in Operator Framework packaging format

File-based catalogs in Managing custom catalogs

Bundle format
Publishing a catalog containing a bundled Operator
To install and manage Operators, Operator Lifecycle Manager (OLM) requires that Operator bundles are listed in an index image, which is referenced by a catalog on the cluster. As an Operator author, you can use the Operator SDK to create an index containing the bundle for your Operator and all of its dependencies. This is useful for testing on remote clusters and publishing to container registries.

The Operator SDK uses the opm CLI to facilitate index image creation. Experience with the opm command is not required. For advanced use cases, the opm command can be used directly instead of the Operator SDK.
Operator SDK CLI installed on a development workstation

Operator bundle image built and pushed to a registry

OLM installed on a Kubernetes-based cluster (v1.16.0 or later if you use apiextensions.k8s.io/v1 CRDs, for example Red Hat OpenShift Container Platform 4.15)

Logged in to the cluster with oc using an account with cluster-admin permissions


Run the following make command in your Operator project directory to build an index image containing your Operator bundle:

Push the built index image to a repository:

Define a CatalogSource object that references the index image you just generated, and then create the object by using the oc apply command or web console:

Check the catalog source:


Install the Operator using your catalog:

Verify the installed Operator is running:


See Managing custom catalogs for details on direct usage of the opm CLI for more advanced use cases.
Testing an Operator upgrade on Operator Lifecycle Manager
You can quickly test upgrading your Operator by using Operator Lifecycle Manager (OLM) integration in the Operator SDK, without requiring you to manually manage index images and catalog sources.

The run bundle-upgrade subcommand automates triggering an installed Operator to upgrade to a later version by specifying a bundle image for the later version.

Operator installed with OLM either by using the run bundle subcommand or with traditional OLM installation

A bundle image that represents a later version of the installed Operator


If your Operator has not already been installed with OLM, install the earlier version either by using the run bundle subcommand or with traditional OLM installation.

Upgrade the installed Operator by specifying the bundle image for the later Operator version:

Clean up the installed Operators:


Traditional Operator installation with OLM
Controlling Operator compatibility with Red Hat OpenShift Container Platform versions
Kubernetes periodically deprecates certain APIs that are removed in subsequent releases. If your Operator is using a deprecated API, it might no longer work after the Red Hat OpenShift Container Platform cluster is upgraded to the Kubernetes version where the API has been removed.

As an Operator author, it is strongly recommended that you review the Deprecated API Migration Guide in Kubernetes documentation and keep your Operator projects up to date to avoid using deprecated and removed APIs. Ideally, you should update your Operator before the release of a future version of Red Hat OpenShift Container Platform that would make the Operator incompatible.
When an API is removed from an Red Hat OpenShift Container Platform version, Operators running on that cluster version that are still using removed APIs will no longer work properly. As an Operator author, you should plan to update your Operator projects to accommodate API deprecation and removal to avoid interruptions for users of your Operator.

You can check the event alerts of your Operators to find whether there are any warnings about APIs currently in use. The following alerts fire when they detect an API in use that will be removed in the next release:


APIRemovedInNextReleaseInUse
APIs that will be removed in the next Red Hat OpenShift Container Platform release.
APIRemovedInNextEUSReleaseInUse
APIs that will be removed in the next Red Hat OpenShift Container Platform Extended Update Support (EUS) release.
If a cluster administrator has installed your Operator, before they upgrade to the next version of Red Hat OpenShift Container Platform, they must ensure a version of your Operator is installed that is compatible with that next cluster version. While it is recommended that you update your Operator projects to no longer use deprecated or removed APIs, if you still need to publish your Operator bundles with removed APIs for continued use on earlier versions of Red Hat OpenShift Container Platform, ensure that the bundle is configured accordingly.

The following procedure helps prevent administrators from installing versions of your Operator on an incompatible version of Red Hat OpenShift Container Platform. These steps also prevent administrators from upgrading to a newer version of Red Hat OpenShift Container Platform that is incompatible with the version of your Operator that is currently installed on their cluster.

This procedure is also useful when you know that the current version of your Operator will not work well, for any reason, on a specific Red Hat OpenShift Container Platform version. By defining the cluster versions where the Operator should be distributed, you ensure that the Operator does not appear in a catalog of a cluster version which is outside of the allowed range.

Operators that use deprecated APIs can adversely impact critical workloads when cluster administrators upgrade to a future version of Red Hat OpenShift Container Platform where the API is no longer supported. If your Operator is using deprecated APIs, you should configure the following settings in your Operator project as soon as possible.
An existing Operator project


If you know that a specific bundle of your Operator is not supported and will not work correctly on Red Hat OpenShift Container Platform later than a certain cluster version, configure the maximum version of Red Hat OpenShift Container Platform that your Operator is compatible with. In your Operator project's cluster service version (CSV), set the olm.maxOpenShiftVersion annotation to prevent administrators from upgrading their cluster before upgrading the installed Operator to a compatible version:

If your bundle is intended for distribution in a Red Hat-provided Operator catalog, configure the compatible versions of Red Hat OpenShift Container Platform for your Operator by setting the following properties. This configuration ensures your Operator is only included in catalogs that target compatible versions of Red Hat OpenShift Container Platform:


You can now bundle a new version of your Operator and publish the updated version to a catalog for distribution.

Managing OpenShift Versions in the Certified Operator Build Guide

Updating installed Operators

Red Hat-provided Operator catalogs
Additional resources
See Operator Framework packaging format for details on the bundle format.

See Managing custom catalogs for details on adding bundle images to index images by using the opm command.

See Operator Lifecycle Manager workflow for details on how upgrades work for installed Operators.