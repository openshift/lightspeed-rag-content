Configuring Operator projects for multi-platform support

Operator projects that support multiple architectures and operating systems, or platforms, can run on more Kubernetes and Red Hat OpenShift Container Platform clusters than Operator projects that support only a single platform. Example architectures include amd64, arm64, ppc64le, and s390x. Example operating systems include Linux and Windows.

Perform the following actions to ensure your Operator project can run on multiple Red Hat OpenShift Container Platform platforms:

Build a manifest list that specifies the platforms that your Operator supports.

Set your Operator's node affinity to support multi-architecture compute machines.
Building a manifest list of the platforms your Operator supports
You can use the make docker-buildx command to build a manifest list of the platforms supported by your Operator and operands. A manifest list references specific image manifests for one or more architectures. An image manifest specifies the platforms that an image supports.

For more information, see OpenContainers Image Index Spec or Image Manifest v2, Schema 2.

If your Operator project deploys an application or other workload resources, the following procedure assumes the application's multi-platform images are built during the application release process.
An Operator project built using the Operator SDK version 1.31.0 or later

Docker installed


Inspect the image manifests of your Operator and operands to find which platforms your Operator project can support. Run the following command to inspect an image manifest:

If the previous command does not output platform information, then the specified base image might be a single image instead of an image manifest. You can find which architectures an image supports by running the following command:

For Go-based Operator projects, the Operator SDK explicitly references the amd64 architecture in your project's Dockerfile. Make the following change
to your Dockerfile to set an environment variable to the value specified by the platform flag:

Your Operator project's makefile defines the PLATFORMS environment variable. If your Operator's images do not support all of the platforms set by default, edit the variable to specify the supported platforms. The following example defines the supported platforms as linux/arm64 and linux/amd64:

Run the following command from your Operator project directory to build your manager image. Running the command builds a manager image with multi-platform support and pushes the manifest list to your registry.
About node affinity rules for multi-architecture compute machines and Operator workloads
You must set node affinity rules to ensure your Operator workloads can run on multi-architecture compute machines. Node affinity is a set of rules used by the scheduler to define a pod's placement. Setting node affinity rules ensures your Operator's workloads are scheduled to compute machines with compatible architectures.

If your Operator performs better on particular architectures, you can set preferred node affinity rules to schedule pods to machines with the specified architectures.

For more information, see "About clusters with multi-architecture compute machines" and "Controlling pod placement on nodes using node affinity rules".

Controlling pod placement on nodes using node affinity rules

Using node affinity to control where an Operator is installed

About clusters with multi-architecture compute machines


Using required node affinity rules to support multi-architecture compute machines for Operator projects
If you want your Operator to support multi-architecture compute machines, you must define your Operator's required node affinity rules.

An Operator project created or maintained with Operator SDK 1.31.0 or later.

A manifest list defining the platforms your Operator supports.


Search your Operator project for Kubernetes manifests that define pod spec and pod template spec objects.

Set the required node affinity rules in the Kubernetes manifests that define pod spec and pod template spec objects, similar to the following example:

Go-based Operator projects that use dynamically created workloads might embed pod spec and pod template spec objects in the Operator's logic.


If you do not set node affinity rules and a container is scheduled to a compute machine with an incompatible architecture, the pod fails and triggers one of the following events:


CrashLoopBackOff
Occurs when an image manifest's entry point fails to run and an exec format error message is printed in the logs.
ImagePullBackOff
Occurs when a manifest list does not include a manifest for the architecture where a pod is scheduled or the node affinity terms are set to the wrong values.
Configuring a required node affinity rule

Sample node affinity rules
Using preferred node affinity rules to configure support for multi-architecture compute machines for Operator projects
If your Operator performs better on particular architectures, you can configure preferred node affinity rules to schedule pods to nodes to the specified architectures.

An Operator project created or maintained with Operator SDK 1.31.0 or later.

A manifest list defining the platforms your Operator supports.

Required node affinity rules are set for your Operator project.


Search your Operator project for Kubernetes manifests that define pod spec and pod template spec objects.

Set your Operator's preferred node affinity rules in the Kubernetes manifests that define pod spec and pod template spec objects, similar to the following example:


Configuring a preferred node affinity rule
Next steps
Label the platforms your Operator supports for Operator Lifecycle Manager (OLM)

Bundle your Operator and Deploy with OLM

Validate your Operator's multi-platform readiness