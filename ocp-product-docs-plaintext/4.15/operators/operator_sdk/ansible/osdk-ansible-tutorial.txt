Operator SDK tutorial for Ansible-based Operators

Operator developers can take advantage of Ansible support in the Operator SDK to build an example Ansible-based Operator for Memcached, a distributed key-value store, and manage its lifecycle. This tutorial walks through the following process:

Create a Memcached deployment

Ensure that the deployment size is the same as specified by the Memcached custom resource (CR) spec

Update the Memcached CR status using the status writer with the names of the memcached pods


This process is accomplished by using two centerpieces of the Operator Framework:


Operator SDK
The operator-sdk CLI tool and controller-runtime library API
Operator Lifecycle Manager (OLM)
Installation, upgrade, and role-based access control (RBAC) of Operators on a cluster


This tutorial goes into greater detail than Getting started with Operator SDK for Ansible-based Operators.
Prerequisites
Operator SDK CLI installed

OpenShift CLI (oc) 4.15+ installed

Ansible 2.15.0

Ansible Runner 2.3.3+

Ansible Runner HTTP Event Emitter plugin 1.0.0+

Python 3.9+

Python Kubernetes client

Logged into an Red Hat OpenShift Container Platform 4.15 cluster with oc with an account that has cluster-admin permissions

To allow the cluster to pull the image, the repository where you push your image must be set as public, or you must configure an image pull secret


Installing the Operator SDK CLI

Getting started with the OpenShift CLI
Creating a project
Use the Operator SDK CLI to create a project called memcached-operator.

Create a directory for the project:

Change to the directory:

Run the operator-sdk init command
with the ansible plugin
to initialize the project:


PROJECT file
Among the files generated by the operator-sdk init command is a Kubebuilder PROJECT file. Subsequent operator-sdk commands, as well as help output, that are run from the project root read this file and are aware that the project type is Ansible. For example:

domain: example.com
layout:
- ansible.sdk.operatorframework.io/v1
plugins:
  manifests.sdk.operatorframework.io/v2: {}
  scorecard.sdk.operatorframework.io/v2: {}
  sdk.x-openshift.io/v1: {}
projectName: memcached-operator
version: "3"
Creating an API
Use the Operator SDK CLI to create a Memcached API.

Run the following command to create an API with group cache, version, v1, and kind Memcached:


After creating the API, your Operator project updates with the following structure:


Memcached CRD
Includes a sample Memcached resource
Manager
Program that reconciles the state of the cluster to the desired state by using:
Modifying the manager
Update your Operator project to provide the reconcile logic, in the form of an Ansible role, which runs every time a Memcached resource is created, updated, or deleted.

Update the roles/memcached/tasks/main.yml file with the following structure:

Set default values for variables used in your Ansible role by editing the roles/memcached/defaults/main.yml file:

Update the Memcached sample resource in the config/samples/cache_v1_memcached.yaml file with the following structure:


The names of all variables in the spec field are converted to snake case, meaning lowercase with an underscore, by the Operator before running Ansible. For example, serviceAccount in the spec becomes service_account in Ansible.

You can disable this case conversion by setting the snakeCaseParameters option to false in your watches.yaml file. It is recommended that you perform some type validation in Ansible on the variables to ensure that your application is receiving expected input.
Enabling proxy support
Operator authors can develop Operators that support network proxies. Cluster administrators configure proxy support for the environment variables that are handled by Operator Lifecycle Manager (OLM). To support proxied clusters, your Operator must inspect the environment for the following standard proxy variables and pass the values to Operands:

HTTP_PROXY

HTTPS_PROXY

NO_PROXY


This tutorial uses HTTP_PROXY as an example environment variable.
A cluster with cluster-wide egress proxy enabled.


Add the environment variables to the deployment by updating the roles/memcached/tasks/main.yml file with the following:

Set the environment variable on the Operator deployment by adding the following to the config/manager/manager.yaml file:
Running the Operator
There are three ways you can use the Operator SDK CLI to build and run your Operator:

Run locally outside the cluster as a Go program.

Run as a deployment on the cluster.

Bundle your Operator and use Operator Lifecycle Manager (OLM) to deploy on the cluster.


Running locally outside the cluster
You can run your Operator project as a Go program outside of the cluster. This is useful for development purposes to speed up deployment and testing.

Run the following command to install the custom resource definitions (CRDs) in the cluster configured in your ~/.kube/config file and run the Operator locally:
Running as a deployment on the cluster
You can run your Operator project as a deployment on your cluster.

Run the following make commands to build and push the Operator image. Modify the IMG argument in the following steps to reference a repository that you have access to. You can obtain an account for storing containers at repository sites such as Quay.io.

Run the following command to deploy the Operator:

Run the following command to verify that the Operator is running:
Bundling an Operator and deploying with Operator Lifecycle Manager
Bundling an Operator
The Operator bundle format is the default packaging method for Operator SDK and Operator Lifecycle Manager (OLM). You can get your Operator ready for use on OLM by using the Operator SDK to build and push your Operator project as a bundle image.

Operator SDK CLI installed on a development workstation

OpenShift CLI (oc) v4.15+ installed

Operator project initialized by using the Operator SDK


Run the following make commands in your Operator project directory to build and push your Operator image. Modify the IMG argument in the following steps to reference a repository that you have access to. You can obtain an account for storing containers at repository sites such as Quay.io.

Create your Operator bundle manifest by running the make bundle command, which invokes several commands, including the Operator SDK generate bundle and bundle validate subcommands:

Build and push your bundle image by running the following commands. OLM consumes Operator bundles using an index image, which reference one or more bundle images.
Deploying an Operator with Operator Lifecycle Manager
Operator Lifecycle Manager (OLM) helps you to install, update, and manage the lifecycle of Operators and their associated services on a Kubernetes cluster. OLM is installed by default on Red Hat OpenShift Container Platform and runs as a Kubernetes extension so that you can use the web console and the OpenShift CLI (oc) for all Operator lifecycle management functions without any additional tools.

The Operator bundle format is the default packaging method for Operator SDK and OLM. You can use the Operator SDK to quickly run a bundle image on OLM to ensure that it runs properly.

Operator SDK CLI installed on a development workstation

Operator bundle image built and pushed to a registry

OLM installed on a Kubernetes-based cluster (v1.16.0 or later if you use apiextensions.k8s.io/v1 CRDs, for example Red Hat OpenShift Container Platform 4.15)

Logged in to the cluster with oc using an account with cluster-admin permissions


Enter the following command to run the Operator on the cluster:
Creating a custom resource
After your Operator is installed, you can test it by creating a custom resource (CR) that is now provided on the cluster by the Operator.

Example Memcached Operator, which provides the Memcached CR, installed on a cluster


Change to the namespace where your Operator is installed. For example, if you deployed the Operator using the make deploy command:

Edit the sample Memcached CR manifest at config/samples/cache_v1_memcached.yaml to contain the following specification:

Create the CR:

Ensure that the Memcached Operator creates the deployment for the sample CR with the correct size:

Check the pods and CR status to confirm the status is updated with the Memcached pod names.

Update the deployment size.

Delete the CR by running the following command:

Clean up the resources that have been created as part of this tutorial.
Additional resources
See Project layout for Ansible-based Operators to learn about the directory structures created by the Operator SDK.

If a cluster-wide egress proxy is configured, cluster administrators can override the proxy settings or inject a custom CA certificate for specific Operators running on Operator Lifecycle Manager (OLM).