Configuring built-in monitoring with Prometheus

This guide describes the built-in monitoring support provided by the Operator SDK using the Prometheus Operator and details usage for authors of Go-based and Ansible-based Operators.
Prometheus Operator support
Prometheus is an open-source systems monitoring and alerting toolkit. The Prometheus Operator creates, configures, and manages Prometheus clusters running on Kubernetes-based clusters, such as Red Hat OpenShift Container Platform.

Helper functions exist in the Operator SDK by default to automatically set up metrics in any generated Go-based Operator for use on clusters where the Prometheus Operator is deployed.
Exposing custom metrics for Go-based Operators
As an Operator author, you can publish custom metrics by using the global Prometheus registry from the controller-runtime/pkg/metrics library.

Go-based Operator generated using the Operator SDK

Prometheus Operator, which is deployed by default on Red Hat OpenShift Container Platform clusters


In your Operator SDK project, uncomment the following line in the config/default/kustomization.yaml file:

Create a custom controller class to publish additional metrics from the Operator. The following example declares the widgets and widgetFailures collectors as global variables, and then registers them with the init() function in the controller's package:

Record to these collectors from any part of the reconcile loop in the main controller class, which determines the business logic for the metric:

Build and push the Operator:

Deploy the Operator:

Create role and role binding definitions to allow the service monitor of the Operator to be scraped by the Prometheus instance of the Red Hat OpenShift Container Platform cluster.

Apply the roles and role bindings for the deployed Operator:

Set the labels for the namespace that you want to scrape, which enables OpenShift cluster monitoring for that namespace:


Query and view the metrics in the Red Hat OpenShift Container Platform web console. You can use the names that were set in the custom controller class, for example widgets_total and widget_failures_total.
Exposing custom metrics for Ansible-based Operators
As an Operator author creating Ansible-based Operators, you can use the Operator SDK's osdk_metrics module to expose custom Operator and Operand metrics, emit events, and support logging.

Ansible-based Operator generated using the Operator SDK

Prometheus Operator, which is deployed by default on Red Hat OpenShift Container Platform clusters


Generate an Ansible-based Operator. This example uses a testmetrics.com domain:

Create a metrics API. This example uses a kind named Testmetrics:

Edit the roles/testmetrics/tasks/main.yml file and use the osdk_metrics module to create custom metrics for your Operator project:


Run your Operator on a cluster. For example, to use the "run as a deployment" method:

Create a Testmetrics custom resource (CR):

Get the pod details:

Get the endpoint details:

Request a custom metrics token:

Check the metrics values: