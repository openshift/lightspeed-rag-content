Managing custom catalogs

Cluster administrators and Operator catalog maintainers can create and manage custom catalogs packaged using the bundle format on Operator Lifecycle Manager (OLM) in Red Hat OpenShift Container Platform.

Kubernetes periodically deprecates certain APIs that are removed in subsequent releases. As a result, Operators are unable to use removed APIs starting with the version of Red Hat OpenShift Container Platform that uses the Kubernetes version that removed the API.

If your cluster is using custom catalogs, see Controlling Operator compatibility with Red Hat OpenShift Container Platform versions for more details about how Operator authors can update their projects to help avoid workload issues and prevent incompatible upgrades.
Red Hat-provided Operator catalogs
Prerequisites
You have installed the opm CLI.
File-based catalogs
File-based catalogs are the latest iteration of the catalog format in Operator Lifecycle Manager (OLM). It is a plain text-based (JSON or YAML) and declarative config evolution of the earlier SQLite database format, and it is fully backwards compatible.

As of Red Hat OpenShift Container Platform 4.11, the default Red Hat-provided Operator catalog releases in the file-based catalog format. The default Red Hat-provided Operator catalogs for Red Hat OpenShift Container Platform 4.6 through 4.10 released in the deprecated SQLite database format.

The opm subcommands, flags, and functionality related to the SQLite database format are also deprecated and will be removed in a future release. The features are still supported and must be used for catalogs that use the deprecated SQLite database format.

Many of the opm subcommands and flags for working with the SQLite database format, such as opm index prune, do not work with the file-based catalog format. For more information about working with file-based catalogs, see Operator Framework packaging format and Mirroring images for a disconnected installation using the oc-mirror plugin.
Creating a file-based catalog image
You can use the opm CLI to create a catalog image that uses the plain text file-based catalog format (JSON or YAML), which replaces the deprecated SQLite database format.

You have installed the opm CLI.

You have podman version 1.9.3+.

A bundle image is built and pushed to a registry that supports Docker v2-2.


Initialize the catalog:

Add a bundle to the catalog by running the opm render command:

Add a channel entry for the bundle. For example, modify the following example to your specifications, and add it to your <catalog_dir>/index.yaml file:

Validate the file-based catalog:

Build the catalog image by running the podman build command:

Push the catalog image to a registry:


opm CLI reference
Updating or filtering a file-based catalog image
You can use the opm CLI to update or filter a catalog image that uses the file-based catalog format. By extracting the contents of an existing catalog image, you can modify the catalog as needed, for example:

Adding packages

Removing packages

Updating existing package entries

Detailing deprecation messages per package, channel, and bundle


You can then rebuild the image as an updated version of the catalog.

Alternatively, if you already have a catalog image on a mirror registry, you can use the oc-mirror CLI plugin to automatically prune any removed images from an updated source version of that catalog image while mirroring it to the target registry.

For more information about the oc-mirror plugin and this use case, see the "Keeping your mirror registry content updated" section, and specifically the "Pruning images" subsection, of "Mirroring images for a disconnected installation using the oc-mirror plugin".
You have the following on your workstation:


Extract the contents of the catalog image in YAML format to an index.yaml file in your catalog directory:

Modify the contents of the resulting index.yaml file to your specifications:

Save your changes.

Validate the catalog:

Rebuild the catalog:

Push the updated catalog image to a registry:


In the web console, navigate to the OperatorHub configuration resource in the Administration -> Cluster Settings -> Configuration page.

Add the catalog source or update the existing catalog source to use the pull spec for your updated catalog image.

After the catalog source is in a READY state, navigate to the Operators -> OperatorHub page and check that the changes you made are reflected in the list of Operators.


Packaging format -> Schemas -> olm.deprecations schema

Mirroring images for a disconnected installation using the oc-mirror plugin -> Keeping your mirror registry content updated

Adding a catalog source to a cluster
SQLite-based catalogs
The SQLite database format for Operator catalogs is a deprecated feature. Deprecated functionality is still included in Red Hat OpenShift Container Platform and continues to be supported; however, it will be removed in a future release of this product and is not recommended for new deployments.

For the most recent list of major functionality that has been deprecated or removed within Red Hat OpenShift Container Platform, refer to the Deprecated and removed features section of the Red Hat OpenShift Container Platform release notes.
Creating a SQLite-based index image
You can create an index image based on the SQLite database format by using the opm CLI.

You have installed the opm CLI.

You have podman version 1.9.3+.

A bundle image is built and pushed to a registry that supports Docker v2-2.


Start a new index:

Push the index image to a registry.
Updating a SQLite-based index image
After configuring OperatorHub to use a catalog source that references a custom index image, cluster administrators can keep the available Operators on their cluster up-to-date by adding bundle images to the index image.

You can update an existing index image using the opm index add command.

You have installed the opm CLI.

You have podman version 1.9.3+.

An index image is built and pushed to a registry.

You have an existing catalog source referencing the index image.


Update the existing index by adding bundle images:

Push the updated index image:

After Operator Lifecycle Manager (OLM) automatically polls the index image referenced in the catalog source at its regular interval, verify that the new packages are successfully added:
Filtering a SQLite-based index image
An index image, based on the Operator bundle format, is a containerized snapshot of an Operator catalog. You can filter, or prune, an index of all but a specified list of packages, which creates a copy of the source index containing only the Operators that you want.

You have podman version 1.9.3+.

You have grpcurl (third-party command-line tool).

You have installed the opm CLI.

You have access to a registry that supports
Docker v2-2.


Authenticate with your target registry:

Determine the list of packages you want to include in your pruned index.

Run the following command to prune the source index of all but the specified packages:

Run the following command to push the new index image to your target registry:
Catalog sources and pod security admission
Pod security admission was introduced in Red Hat OpenShift Container Platform 4.11 to ensure pod security standards. Catalog sources built using the SQLite-based catalog format and a version of the opm CLI tool released before Red Hat OpenShift Container Platform 4.11 cannot run under restricted pod security enforcement.

In Red Hat OpenShift Container Platform 4.15, namespaces do not have restricted pod security enforcement by default and the default catalog source security mode is set to legacy.

Default restricted enforcement for all namespaces is planned for inclusion in a future Red Hat OpenShift Container Platform release. When restricted enforcement occurs, the security context of the pod specification for catalog source pods must match the restricted pod security standard. If your catalog source image requires a different pod security standard, the pod security admissions label for the namespace must be explicitly set.

If you do not want to run your SQLite-based catalog source pods as restricted, you do not need to update your catalog source in Red Hat OpenShift Container Platform 4.15.

However, it is recommended that you take action now to ensure your catalog sources run under restricted pod security enforcement. If you do not take action to ensure your catalog sources run under restricted pod security enforcement, your catalog sources might not run in future Red Hat OpenShift Container Platform releases.
As a catalog author, you can enable compatibility with restricted pod security enforcement by completing either of the following actions:

Migrate your catalog to the file-based catalog format.

Update your catalog image with a version of the opm CLI tool released with Red Hat OpenShift Container Platform 4.11 or later.


The SQLite database catalog format is deprecated, but still supported by Red Hat. In a future release, the SQLite database format will not be supported, and catalogs will need to migrate to the file-based catalog format. As of Red Hat OpenShift Container Platform 4.11, the default Red Hat-provided Operator catalog is released in the file-based catalog format. File-based catalogs are compatible with restricted pod security enforcement.
If you do not want to update your SQLite database catalog image or migrate your catalog to the file-based catalog format, you can configure your catalog to run with elevated permissions.

Understanding and managing pod security admission


Migrating SQLite database catalogs to the file-based catalog format
You can update your deprecated SQLite database format catalogs to the file-based catalog format.

You have a SQLite database catalog source.

You have access to the cluster as a user with the cluster-admin role.

You have the latest version of the opm CLI tool released with Red Hat OpenShift Container Platform 4.15 on your workstation.


Migrate your SQLite database catalog to a file-based catalog by running the following command:

Generate a Dockerfile for your file-based catalog by running the following command:


The generated Dockerfile can be built, tagged, and pushed to your registry.


Adding a catalog source to a cluster
Rebuilding SQLite database catalog images
You can rebuild your SQLite database catalog image with the latest version of the opm CLI tool that is released with your version of Red Hat OpenShift Container Platform.

You have a SQLite database catalog source.

You have access to the cluster as a user with the cluster-admin role.

You have the latest version of the opm CLI tool released with Red Hat OpenShift Container Platform 4.15 on your workstation.


Run the following command to rebuild your catalog with a more recent version of the opm CLI tool:
Configuring catalogs to run with elevated permissions
If you do not want to update your SQLite database catalog image or migrate your catalog to the file-based catalog format, you can perform the following actions to ensure your catalog source runs when the default pod security enforcement changes to restricted:

Manually set the catalog security mode to legacy in your catalog source definition. This action ensures your catalog runs with legacy permissions even if the default catalog security mode changes to restricted.

Label the catalog source namespace for baseline or privileged pod security enforcement.


The SQLite database catalog format is deprecated, but still supported by Red Hat. In a future release, the SQLite database format will not be supported, and catalogs will need to migrate to the file-based catalog format. File-based catalogs are compatible with restricted pod security enforcement.
You have a SQLite database catalog source.

You have access to the cluster as a user with the cluster-admin role.

You have a target namespace that supports running pods with the elevated pod security admission standard of baseline or privileged.


Edit the CatalogSource definition by setting the spec.grpcPodConfig.securityContextConfig label to legacy, as shown in the following example:

Edit your <namespace>.yaml file to add elevated pod security admission standards to your catalog source namespace, as shown in the following example:
Adding a catalog source to a cluster
Adding a catalog source to an Red Hat OpenShift Container Platform cluster enables the discovery and installation of Operators for users. Cluster administrators can create a CatalogSource object that references an index image. OperatorHub uses catalog sources to populate the user interface.

Alternatively, you can use the web console to manage catalog sources. From the Administration -> Cluster Settings -> Configuration -> OperatorHub page, click the Sources tab, where you can create, update, delete, disable, and enable individual sources.
You built and pushed an index image to a registry.

You have access to the cluster as a user with the cluster-admin role.


Create a CatalogSource object that references your index image.

Verify the following resources are created successfully.


You can now install the Operators from the OperatorHub page on your Red Hat OpenShift Container Platform web console.

Operator Lifecycle Manager concepts and resources -> Catalog source

Accessing images for Operators from private registries

Image pull policy
Accessing images for Operators from private registries
If certain images relevant to Operators managed by Operator Lifecycle Manager (OLM) are hosted in an authenticated container image registry, also known as a private registry, OLM and OperatorHub are unable to pull the images by default. To enable access, you can create a pull secret that contains the authentication credentials for the registry. By referencing one or more pull secrets in a catalog source, OLM can handle placing the secrets in the Operator and catalog namespace to allow installation.

Other images required by an Operator or its Operands might require access to private registries as well. OLM does not handle placing the secrets in target tenant namespaces for this scenario, but authentication credentials can be added to the global cluster pull secret or individual namespace service accounts to enable the required access.

The following types of images should be considered when determining whether Operators managed by OLM have appropriate pull access:


Index images
A CatalogSource object can reference an index image, which use the Operator bundle format and are catalog sources packaged as container images hosted in images registries. If an index image is hosted in a private registry, a secret can be used to enable pull access.
Bundle images
Operator bundle images are metadata and manifests packaged as container images that represent a unique version of an Operator. If any bundle images referenced in a catalog source are hosted in one or more private registries, a secret can be used to enable pull access.
Operator and Operand images
If an Operator installed from a catalog source uses a private image, either for the Operator image itself or one of the Operand images it watches, the Operator will fail to install because the deployment will not have access to the required registry authentication. Referencing secrets in a catalog source does not enable OLM to place the secrets in target tenant namespaces in which Operands are installed.


You have at least one of the following hosted in a private registry:

You have access to the cluster as a user with the cluster-admin role.


Create a secret for each required private registry.

Create or update an existing CatalogSource object to reference one or more secrets:

If any Operator or Operand images that are referenced by a subscribed Operator require access to a private registry, you can either provide access to all namespaces in the cluster, or individual target tenant namespaces.


See What is a secret? for more information on the types of secrets, including those used for registry credentials.

See Updating the global cluster pull secret for more details on the impact of changing this secret.

See Allowing pods to reference images from other secured registries for more details on linking pull secrets to service accounts per namespace.
Disabling the default OperatorHub catalog sources
Operator catalogs that source content provided by Red Hat and community projects are configured for OperatorHub by default during an Red Hat OpenShift Container Platform installation. As a cluster administrator, you can disable the set of default catalogs.

Disable the sources for the default catalogs by adding disableAllDefaultSources: true to the OperatorHub object:


Alternatively, you can use the web console to manage catalog sources. From the Administration -> Cluster Settings -> Configuration -> OperatorHub page, click the Sources tab, where you can create, update, delete, disable, and enable individual sources.
Removing custom catalogs
As a cluster administrator, you can remove custom Operator catalogs that have been previously added to your cluster by deleting the related catalog source.

You have access to the cluster as a user with the cluster-admin role.


In the Administrator perspective of the web console, navigate to Administration -> Cluster Settings.

Click the Configuration tab, and then click OperatorHub.

Click the Sources tab.

Select the Options menu . for the catalog that you want to remove, and then click Delete CatalogSource.