Bare metal configuration

When deploying Red Hat OpenShift Container Platform on bare metal hosts, there are times when you need to make changes to the host either before or after provisioning. This can include inspecting the host's hardware, firmware, and firmware details. It can also include formatting disks or changing modifiable firmware settings.
About the Bare Metal Operator
Use the Bare Metal Operator (BMO) to provision, manage, and inspect bare-metal hosts in your cluster.

The BMO uses three resources to complete these tasks:

BareMetalHost

HostFirmwareSettings

FirmwareSchema


The BMO maintains an inventory of the physical hosts in the cluster by mapping each bare-metal host to an instance of the BareMetalHost custom resource definition. Each BareMetalHost resource features hardware, software, and firmware details. The BMO continually inspects the bare-metal hosts in the cluster to ensure each BareMetalHost resource accurately details the components of the corresponding host.

The BMO also uses the HostFirmwareSettings resource and the FirmwareSchema resource to detail firmware specifications for the bare-metal host.

The BMO interfaces with bare-metal hosts in the cluster by using the Ironic API service. The Ironic service uses the Baseboard Management Controller (BMC) on the host to interface with the machine.

Some common tasks you can complete by using the BMO include the following:

Provision bare-metal hosts to the cluster with a specific image

Format a host's disk contents before provisioning or after deprovisioning

Turn on or off a host

Change firmware settings

View the host's hardware details


Bare Metal Operator architecture
The Bare Metal Operator (BMO) uses three resources to provision, manage, and inspect bare-metal hosts in your cluster. The following diagram illustrates the architecture of these resources:


The BareMetalHost resource defines a physical host and its properties. When you provision a bare-metal host to the cluster, you must define a BareMetalHost resource for that host. For ongoing management of the host, you can inspect the information in the BareMetalHost or update this information.

The BareMetalHost resource features provisioning information such as the following:

Deployment specifications such as the operating system boot image or the custom RAM disk

Provisioning state

Baseboard Management Controller (BMC) address

Desired power state


The BareMetalHost resource features hardware information such as the following:

Number of CPUs

MAC address of a NIC

Size of the host's storage device

Current power state


You can use the HostFirmwareSettings resource to retrieve and manage the firmware settings for a host. When a host moves to the Available state, the Ironic service reads the host's firmware settings and creates the HostFirmwareSettings resource. There is a one-to-one mapping between the BareMetalHost resource and the HostFirmwareSettings resource.

You can use the HostFirmwareSettings resource to inspect the firmware specifications for a host or to update a host's firmware specifications.

You must adhere to the schema specific to the vendor firmware when you edit the spec field of the HostFirmwareSettings resource. This schema is defined in the read-only FirmwareSchema resource.
Firmware settings vary among hardware vendors and host models. A FirmwareSchema resource is a read-only resource that contains the types and limits for each firmware setting on each host model. The data comes directly from the BMC by using the Ironic service. The FirmwareSchema resource enables you to identify valid values you can specify in the spec field of the HostFirmwareSettings resource.

A FirmwareSchema resource can apply to many BareMetalHost resources if the schema is the same.

MetalÂ³ API service for provisioning bare-metal hosts

Ironic API service for managing bare-metal infrastructure
About the BareMetalHost resource
Metal3 introduces the concept of the BareMetalHost resource, which defines a physical host and its properties. The BareMetalHost resource contains two sections:

The BareMetalHost spec

The BareMetalHost status


The BareMetalHost spec
The spec section of the BareMetalHost resource defines the desired state of the host.
The BareMetalHost status
The BareMetalHost status represents the host's current state, and includes tested credentials, current hardware details, and other information.
Getting the BareMetalHost resource
The BareMetalHost resource contains the properties of a physical host. You must get the BareMetalHost resource for a physical host to review its properties.

Get the list of BareMetalHost resources:

Get the list of hosts:

Get the BareMetalHost resource for a specific host:
About the HostFirmwareSettings resource
You can use the HostFirmwareSettings resource to retrieve and manage the BIOS settings for a host. When a host moves to the Available state, Ironic reads the host's BIOS settings and creates the HostFirmwareSettings resource. The resource contains the complete BIOS configuration returned from the baseboard management controller (BMC). Whereas, the firmware field in the BareMetalHost resource returns three vendor-independent fields, the HostFirmwareSettings resource typically comprises many BIOS settings of vendor-specific fields per host.

The HostFirmwareSettings resource contains two sections:

The HostFirmwareSettings spec.

The HostFirmwareSettings status.


The HostFirmwareSettings spec
The spec section of the HostFirmwareSettings resource defines the desired state of the host's BIOS, and it is empty by default. Ironic uses the settings in the spec.settings section to update the baseboard management controller (BMC) when the host is in the Preparing state. Use the FirmwareSchema resource to ensure that you do not send invalid name/value pairs to hosts. See "About the FirmwareSchema resource" for additional details.

spec:
  settings:
    ProcTurboMode: Disabled1
In the foregoing example, the spec.settings section contains a name/value pair that will set the ProcTurboMode BIOS setting to Disabled.


Integer parameters listed in the status section appear as strings. For example, "1". When setting integers in the spec.settings section, the values should be set as integers without quotes. For example, 1.
The HostFirmwareSettings status
The status represents the current state of the host's BIOS.
Getting the HostFirmwareSettings resource
The HostFirmwareSettings resource contains the vendor-specific BIOS properties of a physical host. You must get the HostFirmwareSettings resource for a physical host to review its BIOS properties.

Get the detailed list of HostFirmwareSettings resources:

Get the list of HostFirmwareSettings resources:

Get the HostFirmwareSettings resource for a particular host
Editing the HostFirmwareSettings resource
You can edit the HostFirmwareSettings of provisioned hosts.

You can only edit hosts when they are in the provisioned state, excluding read-only values. You cannot edit hosts in the externally provisioned state.
Get the list of HostFirmwareSettings resources:

Edit a host's HostFirmwareSettings resource:

Add name/value pairs to the spec.settings section:

Save the changes and exit the editor.

Get the host's machine name:

Annotate the machine to delete it from the machineset:

Get a list of nodes and count the number of worker nodes:

Get the machineset:

Scale the machineset:

When the host enters the Available state, scale up the machineset to make the HostFirmwareSettings resource changes take effect:
Verifying the HostFirmware Settings resource is valid
When the user edits the spec.settings section to make a change to the HostFirmwareSetting(HFS) resource, the Bare Metal Operator (BMO) validates the change against the FimwareSchema resource, which is a read-only resource. If the setting is invalid, the BMO will set the Type value of the status.Condition setting to False and also generate an event and store it in the HFS resource. Use the following procedure to verify that the resource is valid.

Get a list of HostFirmwareSetting resources:

Verify that the HostFirmwareSettings resource for a particular host is valid:
About the FirmwareSchema resource
BIOS settings vary among hardware vendors and host models. A FirmwareSchema resource is a read-only resource that contains the types and limits for each BIOS setting on each host model. The data comes directly from the BMC through Ironic. The FirmwareSchema enables you to identify valid values you can specify in the spec field of the HostFirmwareSettings resource. The FirmwareSchema resource has a unique identifier derived from its settings and limits. Identical host models use the same FirmwareSchema identifier. It is likely that multiple instances of HostFirmwareSettings use the same FirmwareSchema.
Getting the FirmwareSchema resource
Each host model from each vendor has different BIOS settings. When editing the HostFirmwareSettings resource's spec section, the name/value pairs you set must conform to that host's firmware schema. To ensure you are setting valid name/value pairs, get the FirmwareSchema for the host and review it.

To get a list of FirmwareSchema resource instances, execute the following:

To get a particular FirmwareSchema instance, execute: