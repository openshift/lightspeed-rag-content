Postinstallation storage configuration

After installing Red Hat OpenShift Container Platform, you can further expand and customize your cluster to your requirements, including storage configuration.
Dynamic provisioning
About dynamic provisioning
The StorageClass resource object describes and classifies storage that can be requested, as well as provides a means for passing parameters for dynamically provisioned storage on demand. StorageClass objects can also serve as a management mechanism for controlling different levels of storage and access to the storage. Cluster Administrators (cluster-admin)  or Storage Administrators (storage-admin) define and create the StorageClass objects that users can request without needing any detailed knowledge about the underlying storage volume sources.

The Red Hat OpenShift Container Platform persistent volume framework enables this functionality and allows administrators to provision a cluster with persistent storage. The framework also gives users a way to request those resources without having any knowledge of the underlying infrastructure.

Many storage types are available for use as persistent volumes in Red Hat OpenShift Container Platform. While all of them can be statically provisioned by an administrator, some types of storage are created dynamically using the built-in provider and plugin APIs.
Available dynamic provisioning plugins
Red Hat OpenShift Container Platform provides the following provisioner plugins, which have generic implementations for dynamic provisioning that use the cluster's configured provider's API to create new storage resources:


Any chosen provisioner plugin also requires configuration for the relevant cloud, host, or third-party provider as per the relevant documentation.
Defining a storage class
StorageClass objects are currently a globally scoped object and must be created by cluster-admin or storage-admin users.

The Cluster Storage Operator might install a default storage class depending on the platform in use. This storage class is owned and controlled by the Operator. It cannot be deleted or modified beyond defining annotations and labels. If different behavior is desired, you must define a custom storage class.
The following sections describe the basic definition for a StorageClass object and specific examples for each of the supported plugin types.

Basic StorageClass object definition
The following resource shows the parameters and default values that you use to configure a storage class. This example uses the AWS ElasticBlockStore (EBS) object definition.

kind: StorageClass 1
apiVersion: storage.k8s.io/v1 2
metadata:
  name: <storage-class-name> 3
  annotations: 4
    storageclass.kubernetes.io/is-default-class: 'true'
    ...
provisioner: kubernetes.io/aws-ebs 5
parameters: 6
  type: gp3
...
(required) The API object type.

(required) The current apiVersion.

(required) The name of the storage class.

(optional) Annotations for the storage class.

(required) The type of provisioner associated with this storage class.

(optional) The parameters required for the specific provisioner, this will change from plug-in to plug-in.
Storage class annotations
To set a storage class as the cluster-wide default, add the following annotation to your storage class metadata:

storageclass.kubernetes.io/is-default-class: "true"
For example:

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
...
This enables any persistent volume claim (PVC) that does not specify a specific storage class to automatically be provisioned through the default storage class. However, your cluster can have more than one storage class, but only one of them can be the default storage class.

The beta annotation storageclass.beta.kubernetes.io/is-default-class is still working; however, it will be removed in a future release.
To set a storage class description, add the following annotation to your storage class metadata:

kubernetes.io/description: My Storage Class Description
For example:

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    kubernetes.io/description: My Storage Class Description
...
OpenStack Cinder object definition
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: <storage-class-name> 1
provisioner: kubernetes.io/cinder
parameters:
  type: fast  2
  availability: nova 3
  fsType: ext4 4
Name of the storage class. The persistent volume claim uses this storage class for provisioning the associated persistent volumes.

Volume type created in Cinder. Default is empty.

Availability Zone. If not specified, volumes are generally
round-robined across all active zones where the Red Hat OpenShift Container Platform cluster
has a node.

File system that is created on dynamically provisioned volumes. This
value is copied to the fsType field of dynamically provisioned
persistent volumes and the file system is created when the volume is
mounted for the first time. The default value is ext4.
AWS Elastic Block Store (EBS) object definition
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: <storage-class-name> 1
provisioner: kubernetes.io/aws-ebs
parameters:
  type: io1 2
  iopsPerGB: "10" 3
  encrypted: "true" 4
  kmsKeyId: keyvalue 5
  fsType: ext4 6
(required) Name of the storage class. The persistent volume claim uses this storage class for provisioning the associated persistent volumes.

(required) Select from io1, gp3, sc1, st1. The default is gp3.
See the
AWS documentation
for valid Amazon Resource Name (ARN) values.

Optional: Only for io1 volumes. I/O operations per second per GiB.
The AWS volume plugin multiplies this with the size of the requested
volume to compute IOPS of the volume. The value cap is 20,000 IOPS, which
is the maximum supported by AWS. See the
AWS documentation
for further details.

Optional: Denotes whether to encrypt the EBS volume. Valid values
are true or false.

Optional: The full ARN of the key to use when encrypting the volume.
If none is supplied, but encypted is set to true, then AWS generates a
key. See the
AWS documentation
for a valid ARN value.

Optional: File system that is created on dynamically provisioned
volumes. This value is copied to the fsType field of dynamically
provisioned persistent volumes and the file system is created when the
volume is mounted for the first time. The default value is ext4.
Azure Disk object definition
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: <storage-class-name> 1
provisioner: kubernetes.io/azure-disk
volumeBindingMode: WaitForFirstConsumer 2
allowVolumeExpansion: true
parameters:
  kind: Managed 3
  storageaccounttype: Premium_LRS 4
reclaimPolicy: Delete
Name of the storage class. The persistent volume claim uses this storage class for provisioning the associated persistent volumes.

Using WaitForFirstConsumer is strongly recommended. This provisions the volume while allowing enough storage to schedule the pod on a free worker node from an available zone.

Possible values are Shared (default), Managed, and Dedicated.

Azure storage account SKU tier. Default is empty. Note that Premium VMs can attach both Standard_LRS and Premium_LRS disks, Standard VMs can only attach Standard_LRS disks, Managed VMs can only attach managed disks, and unmanaged VMs can only attach unmanaged disks.
Azure File object definition
The Azure File storage class uses secrets to store the Azure storage account name and the storage account key that are required to create an Azure Files share. These permissions are created as part of the following procedure.

Define a ClusterRole object that allows access to create and view secrets:

Add the cluster role to the service account:

Create the Azure File StorageClass object:


Considerations when using Azure File
The following file system features are not supported by the default Azure File storage class:

Symlinks

Hard links

Extended attributes

Sparse files

Named pipes


Additionally, the owner user identifier (UID) of the Azure File mounted directory is different from the process UID of the container. The uid mount option can be specified in the StorageClass object to define a specific user identifier to use for the mounted directory.

The following StorageClass object demonstrates modifying the user and group identifier, along with enabling symlinks for the mounted directory.

kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: azure-file
mountOptions:
  - uid=1500 1
  - gid=1500 2
  - mfsymlinks 3
provisioner: kubernetes.io/azure-file
parameters:
  location: eastus
  skuName: Standard_LRS
reclaimPolicy: Delete
volumeBindingMode: Immediate
Specifies the user identifier to use for the mounted directory.

Specifies the group identifier to use for the mounted directory.

Enables symlinks.
GCE PersistentDisk (gcePD) object definition
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: <storage-class-name> 1
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-standard 2
  replication-type: none
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
reclaimPolicy: Delete
Name of the storage class. The persistent volume claim uses this storage class for provisioning the associated persistent volumes.

Select either pd-standard or pd-ssd. The default is pd-standard.
VMware vSphere object definition
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: <storage-class-name> 1
provisioner: csi.vsphere.vmware.com 2
Name of the storage class. The persistent volume claim uses this storage class for provisioning the associated persistent volumes.

For more information about using VMware vSphere CSI with Red Hat OpenShift Container Platform,
see the
Kubernetes documentation.
Changing the default storage class
Use the following procedure to change the default storage class.

For example, if you have two defined storage classes, gp3 and standard, and you want to change the default storage class from gp3 to standard.

Access to the cluster with cluster-admin privileges.


To change the default storage class:

List the storage classes:

Make the desired storage class the default.

Remove the default storage class setting from the old default storage class.

Verify the changes:
Optimizing storage
Optimizing storage helps to minimize storage use across all resources. By optimizing storage, administrators help ensure that existing storage resources are working in an efficient manner.
Available persistent storage options
Understand your persistent storage options so that you can optimize your Red Hat OpenShift Container Platform environment.


NetApp NFS supports dynamic PV provisioning when using the Trident plugin.
Recommended configurable storage technology
The following table summarizes the recommended and configurable storage technologies for the given Red Hat OpenShift Container Platform cluster application.


A scaled registry is an OpenShift image registry where two or more pod replicas are running.
Specific application storage recommendations
Testing shows issues with using the NFS server on Red Hat Enterprise Linux (RHEL) as storage backend for core services. This includes the OpenShift Container Registry and Quay, Prometheus for monitoring storage, and Elasticsearch for logging storage. Therefore, using RHEL NFS to back PVs used by core services is not recommended.

Other NFS implementations on the marketplace might not have these issues. Contact the individual NFS implementation vendor for more information on any testing that was possibly completed against these Red Hat OpenShift Container Platform core components.
Registry
In a non-scaled/high-availability (HA) OpenShift image registry cluster deployment:

The storage technology does not have to support RWX access mode.

The storage technology must ensure read-after-write consistency.

The preferred storage technology is object storage followed by block storage.

File storage is not recommended for OpenShift image registry cluster deployment with production workloads.
Scaled registry
In a scaled/HA OpenShift image registry cluster deployment:

The storage technology must support RWX access mode.

The storage technology must ensure read-after-write consistency.

The preferred storage technology is object storage.

Red Hat OpenShift Data Foundation (ODF), Amazon Simple Storage Service (Amazon S3), Google Cloud Storage (GCS), Microsoft Azure Blob Storage, and OpenStack Swift are supported.

Object storage should be S3 or Swift compliant.

For non-cloud platforms, such as vSphere and bare metal installations, the only configurable technology is file storage.

Block storage is not configurable.
Metrics
In an Red Hat OpenShift Container Platform hosted metrics cluster deployment:

The preferred storage technology is block storage.

Object storage is not configurable.


It is not recommended to use file storage for a hosted metrics cluster deployment with production workloads.
Logging
In an Red Hat OpenShift Container Platform hosted logging cluster deployment:

Loki Operator:

Elasticsearch Operator:


As of logging version 5.4.3 the Elasticsearch Operator is deprecated and is planned to be removed in a future release. Red Hat will provide bug fixes and support for this feature during the current release lifecycle, but this feature will no longer receive enhancements and will be removed. As an alternative to using the Elasticsearch Operator to manage the default log storage, you can use the Loki Operator.
Applications
Application use cases vary from application to application, as described in the following examples:

Storage technologies that support dynamic PV provisioning have low mount time latencies, and are not tied to nodes to support a healthy cluster.

Application developers are responsible for knowing and understanding the storage requirements for their application, and how it works with the provided storage to ensure that issues do not occur when an application scales or interacts with the storage layer.
Other specific application storage recommendations
It is not recommended to use RAID configurations on Write intensive workloads, such as etcd. If you are running etcd with a RAID configuration, you might be at risk of encountering performance issues with your workloads.
OpenStack Cinder: OpenStack Cinder tends to be adept in ROX access mode use cases.

Databases: Databases (RDBMSs, NoSQL DBs, etc.) tend to perform best with dedicated block storage.

The etcd database must have enough storage and adequate performance capacity to enable a large cluster. Information about monitoring and benchmarking tools to establish ample storage and a high-performance environment is described in Recommended etcd practices.


Recommended etcd practices
Deploy Red Hat OpenShift Data Foundation
Red Hat OpenShift Data Foundation is a provider of agnostic persistent storage for Red Hat OpenShift Container Platform supporting file, block, and object storage, either in-house or in hybrid clouds. As a Red Hat storage solution, Red Hat OpenShift Data Foundation is completely integrated with Red Hat OpenShift Container Platform for deployment, management, and monitoring.
Additional resources
Configuring the Elasticsearch log store