Installing a cluster on AWS into a Secret or Top Secret Region

In Red Hat OpenShift Container Platform version 4.15, you can install a cluster on Amazon Web Services (AWS) into the following secret regions:

Secret Commercial Cloud Services (SC2S)

Commercial Cloud Services (C2S)


To configure a cluster in either region, you change parameters in the install config.yaml file before you install the cluster.
Prerequisites
You reviewed details about the Red Hat OpenShift Container Platform installation and update processes.

You read the documentation on selecting a cluster installation method and preparing it for users.

You configured an AWS account to host the cluster.

If you use a firewall, you configured it to allow the sites that your cluster requires access to.
AWS secret regions
The following AWS secret partitions are supported:

us-isob-east-1 (SC2S)

us-iso-east-1 (C2S)


The maximum supported MTU in an AWS SC2S and C2S Regions is not the same as AWS commercial. For more information about configuring MTU during installation, see the Cluster Network Operator configuration object section in Installing a cluster on AWS with network customizations
Installation requirements
Red Hat does not publish a Red Hat Enterprise Linux CoreOS (RHCOS) Amzaon Machine Image for the AWS Secret and Top Secret Regions.

Before you can install the cluster, you must:

Upload a custom RHCOS AMI.

Manually create the installation configuration file (install-config.yaml).

Specify the AWS region, and the accompanying custom AMI, in the installation configuration file.


You cannot use the Red Hat OpenShift Container Platform installation program to create the installation configuration file. The installer does not list an AWS region without native support for an RHCOS AMI.

You must also define a custom CA certificate in the additionalTrustBundle field of the install-config.yaml file because the AWS API requires a custom CA trust bundle. To allow the installation program to access the AWS API, the CA certificates must also be defined on the machine that runs the installation program. You must add the CA bundle to the trust store on the machine, use the AWS_CA_BUNDLE environment variable, or define the CA bundle in the ca_bundle field of the AWS config file.
Private clusters
You can deploy a private Red Hat OpenShift Container Platform cluster that does not expose external endpoints. Private clusters are accessible from only an internal network and are not visible to the internet.

Public zones are not supported in Route 53 in an AWS Top Secret Region. Therefore, clusters must be private if they are deployed to an AWS Top Secret Region.
By default, Red Hat OpenShift Container Platform is provisioned to use publicly-accessible DNS and endpoints. A private cluster sets the DNS, Ingress Controller, and API server to private when you deploy your cluster. This means that the cluster resources are only accessible from your internal network and are not visible to the internet.

If the cluster has any public subnets, load balancer services created by administrators might be publicly accessible. To ensure cluster security, verify that these services are explicitly annotated as private.
To deploy a private cluster, you must:

Use existing networking that meets your requirements. Your cluster resources might be shared between other clusters on the network.

Deploy from a machine that has access to:


You can use any machine that meets these access requirements and follows your company's guidelines. For example, this machine can be a bastion host on your cloud network or a machine that has access to the network through a VPN.

Private clusters in AWS
To create a private cluster on Amazon Web Services (AWS), you must provide an existing private VPC and subnets to host the cluster. The installation program must also be able to resolve the DNS records that the cluster requires. The installation program configures the Ingress Operator and API server for access from only the private network.

The cluster still requires access to internet to access the AWS APIs.

The following items are not required or created when you install a private cluster:

Public subnets

Public load balancers, which support public ingress

A public Route 53 zone that matches the baseDomain for the cluster


The installation program does use the baseDomain that you specify to create a private Route 53 zone and the required records for the cluster. The cluster is configured so that the Operators do not create public records for the cluster and all cluster machines are placed in the private subnets that you specify.

Limitations
The ability to add public functionality to a private cluster is limited.

You cannot make the Kubernetes API endpoints public after installation without taking additional actions, including creating public subnets in the VPC for each availability zone in use, creating a public load balancer, and configuring the control plane security groups to allow traffic from the internet on 6443 (Kubernetes API port).

If you use a public Service type load balancer, you must tag a public subnet in each availability zone with kubernetes.io/cluster/<cluster-infra-id>: shared so that AWS can use them to create public load balancers.
About using a custom VPC
In Red Hat OpenShift Container Platform 4.15, you can deploy a cluster into existing subnets in an existing Amazon Virtual Private Cloud (VPC) in Amazon Web Services (AWS). By deploying Red Hat OpenShift Container Platform into an existing AWS VPC, you might be able to avoid limit constraints in new accounts or more easily abide by the operational constraints that your company's guidelines set. If you cannot obtain the infrastructure creation permissions that are required to create the VPC yourself, use this installation option.

Because the installation program cannot know what other components are also in your existing subnets, it cannot choose subnet CIDRs and so forth on your behalf. You must configure networking for the subnets that you install your cluster to yourself.

Requirements for using your VPC
The installation program no longer creates the following components:

Internet gateways

NAT gateways

Subnets

Route tables

VPCs

VPC DHCP options

VPC endpoints


The installation program requires that you use the cloud-provided DNS server. Using a custom DNS server is not supported and causes the installation to fail.
If you use a custom VPC, you must correctly configure it and its subnets for the installation program and the cluster to use. See Amazon VPC console wizard configurations and Work with VPCs and subnets in the AWS documentation for more information on creating and managing an AWS VPC.

The installation program cannot:

Subdivide network ranges for the cluster to use.

Set route tables for the subnets.

Set VPC options like DHCP.


You must complete these tasks before you install the cluster. See VPC networking components and Route tables for your VPC for more information on configuring networking in an AWS VPC.

Your VPC must meet the following characteristics:

The VPC must not use the kubernetes.io/cluster/.*: owned, Name, and openshift.io/cluster tags.

If you want to extend your Red Hat OpenShift Container Platform cluster into an AWS Outpost and have an existing Outpost subnet, the existing subnet must use the kubernetes.io/cluster/unmanaged: true tag. If you do not apply this tag, the installation might fail due to the Cloud Controller Manager creating a service load balancer in the Outpost subnet, which is an unsupported configuration.

You must enable the enableDnsSupport and enableDnsHostnames attributes in your VPC, so that the cluster can use the Route 53 zones that are attached to the VPC to resolve cluster's internal DNS records. See DNS Support in Your VPC in the AWS documentation.


A cluster in an SC2S or C2S Region is unable to reach the public IP addresses for the EC2, ELB, and S3 endpoints. Depending on the level to which you want to restrict internet traffic during the installation, the following configuration options are available:


Create a VPC endpoint and attach it to the subnets that the clusters are using. Name the endpoints as follows:


SC2S

C2S



With this option, network traffic remains private between your VPC and the required AWS services.


As part of the installation process, you can configure an HTTP or HTTPS proxy. With this option, internet traffic goes through the proxy to reach the required AWS services.


As part of the installation process, you can configure an HTTP or HTTPS proxy with VPC endpoints. Create a VPC endpoint and attach it to the subnets that the clusters are using. Name the endpoints as follows:


SC2S

C2S



When configuring the proxy in the install-config.yaml file, add these endpoints to the noProxy field. With this option, the proxy prevents the cluster from accessing the internet directly. However, network traffic remains private between your VPC and the required AWS services.

You must provide a suitable VPC and subnets that allow communication to your machines.
VPC validation
To ensure that the subnets that you provide are suitable, the installation program confirms the following data:

All the subnets that you specify exist.

You provide private subnets.

The subnet CIDRs belong to the machine CIDR that you specified.

You provide subnets for each availability zone. Each availability zone contains no more than one public and one private subnet. If you use a private cluster, provide only a private subnet for each availability zone. Otherwise, provide exactly one public and private subnet for each availability zone.

You provide a public subnet for each private subnet availability zone. Machines are not provisioned in availability zones that you do not provide private subnets for.


If you destroy a cluster that uses an existing VPC, the VPC is not deleted. When you remove the Red Hat OpenShift Container Platform cluster from a VPC, the kubernetes.io/cluster/.*: shared tag is removed from the subnets that it used.
Division of permissions
Starting with Red Hat OpenShift Container Platform 4.3, you do not need all of the permissions that are required for an installation program-provisioned infrastructure cluster to deploy a cluster. This change mimics the division of permissions that you might have at your company: some individuals can create different resource in your clouds than others. For example, you might be able to create application-specific items, like instances, buckets, and load balancers, but not networking-related components such as VPCs, subnets, or ingress rules.

The AWS credentials that you use when you create your cluster do not need the networking permissions that are required to make VPCs and core networking components within the VPC, such as subnets, routing tables, internet gateways, NAT, and VPN. You still need permission to make the application resources that the machines within the cluster require, such as ELBs, security groups, S3 buckets, and nodes.
Isolation between clusters
If you deploy Red Hat OpenShift Container Platform to an existing network, the isolation of cluster services is reduced in the following ways:

You can install multiple Red Hat OpenShift Container Platform clusters in the same VPC.

ICMP ingress is allowed from the entire network.

TCP 22 ingress (SSH) is allowed to the entire network.

Control plane TCP 6443 ingress (Kubernetes API) is allowed to the entire network.

Control plane TCP 22623 ingress (MCS) is allowed to the entire network.
Optional: AWS security groups
By default, the installation program creates and attaches security groups to control plane and compute machines. The rules associated with the default security groups cannot be modified.

However, you can apply additional existing AWS security groups, which are associated with your existing VPC, to control plane and compute machines. Applying custom security groups can help you meet the security needs of your organization, in such cases where you need to control the incoming or outgoing traffic of these machines.

As part of the installation process, you apply custom security groups by modifying the install-config.yaml file before deploying the cluster.

For more information, see "Applying existing AWS security groups to the cluster".
Internet access for Red Hat OpenShift Container Platform
In Red Hat OpenShift Container Platform 4.15, you require access to the internet to install your cluster.

You must have internet access to:

Access https://console.redhat.com/openshift [OpenShift Cluster Manager Hybrid Cloud Console] to download the installation program and perform subscription management. If the cluster has internet access and you do not disable Telemetry, that service automatically entitles your cluster.

Access Quay.io to obtain the packages that are required to install your cluster.

Obtain the packages that are required to perform cluster updates.
Uploading a custom RHCOS AMI in AWS
If you are deploying to a custom Amazon Web Services (AWS) region, you must upload a custom Red Hat Enterprise Linux CoreOS (RHCOS) Amazon Machine Image (AMI) that belongs to that region.

You configured an AWS account.

You created an Amazon S3 bucket with the required IAM
service role.

You uploaded your RHCOS VMDK file to Amazon S3.

You downloaded the AWS CLI and installed it on your computer. See
Install the AWS CLI Using the Bundled Installer.


Export your AWS profile as an environment variable:

Export the region to associate with your custom AMI as an environment
variable:

Export the version of RHCOS you uploaded to Amazon S3 as an environment
variable:

Export the Amazon S3 bucket name as an environment variable:

Create the containers.json file and define your RHCOS VMDK file:

Import the RHCOS disk as an Amazon EBS snapshot:

Check the status of the image import:

Create a custom RHCOS AMI from the RHCOS snapshot:


To learn more about these APIs, see the AWS documentation for importing snapshots and creating EBS-backed AMIs.
Generating a key pair for cluster node SSH access
During an Red Hat OpenShift Container Platform installation, you can provide an SSH public key to the installation program. The key is passed to the Red Hat Enterprise Linux CoreOS (RHCOS) nodes through their Ignition config files and is used to authenticate SSH access to the nodes. The key is added to the ~/.ssh/authorized_keys list for the core user on each node, which enables password-less authentication.

After the key is passed to the nodes, you can use the key pair to SSH in to the RHCOS nodes as the user core. To access the nodes through SSH, the private key identity must be managed by SSH for your local user.

If you want to SSH in to your cluster nodes to perform installation debugging or disaster recovery, you must provide the SSH public key during the installation process. The ./openshift-install gather command also requires the SSH public key to be in place on the cluster nodes.

Do not skip this procedure in production environments, where disaster recovery and debugging is required.
You must use a local key, not one that you configured with platform-specific approaches such as AWS key pairs.
If you do not have an existing SSH key pair on your local machine to use for authentication onto your cluster nodes, create one. For example, on a computer that uses a Linux operating system, run the following command:

View the public SSH key:

Add the SSH private key identity to the SSH agent for your local user, if it has not already been added. SSH agent management of the key is required for password-less SSH authentication onto your cluster nodes, or if you want to use the ./openshift-install gather command.

Add your SSH private key to the ssh-agent:


When you install Red Hat OpenShift Container Platform, provide the SSH public key to the installation program.
Obtaining the installation program
Before you install Red Hat OpenShift Container Platform, download the installation file on  the host you are using for installation.

You have a computer that runs Linux or macOS, with 500 MB of local disk space.


Access the Infrastructure Provider page on the OpenShift Cluster Manager site. If you have a Red Hat account, log in with your credentials. If you do not, create an account.

Select your infrastructure provider.

Navigate to the page for your installation type, download the installation program that corresponds with your host operating system and architecture, and place the file in the directory where you will store the installation configuration files.

Extract the installation program. For example, on a computer that uses a Linux
operating system, run the following command:

Download your installation https://console.redhat.com/openshift/install/pull-secret [pull secret from the Red Hat OpenShift Cluster Manager]. This pull secret allows you to authenticate with the services that are provided by the included authorities, including Quay.io, which serves the container images for Red Hat OpenShift Container Platform components.
Manually creating the installation configuration file
Installing the cluster requires that you manually create the installation configuration file.

You have uploaded a custom RHCOS AMI.

You have an SSH public key on your local machine to provide to the installation program. The key will be used for SSH authentication onto your cluster nodes for debugging and disaster recovery.

You have obtained the Red Hat OpenShift Container Platform installation program and the pull secret for your
cluster.


Create an installation directory to store your required installation assets in:

Customize the sample install-config.yaml file template that is provided and save
it in the <installation_directory>.

Back up the install-config.yaml file so that you can use it to install multiple clusters.


Installation configuration parameters for AWS


Tested instance types for AWS
The following Amazon Web Services (AWS) instance types have been tested with Red Hat OpenShift Container Platform.

Use the machine types included in the following charts for your AWS instances. If you use an instance type that is not listed in the chart, ensure that the instance size you use matches the minimum resource requirements that are listed in the section named "Minimum resource requirements for cluster installation".
c4.*

c5.*

i3.*

m4.*

m5.*

r4.*

r5.*

t3.*
Sample customized install-config.yaml file for AWS
You can customize the installation configuration file (install-config.yaml) to specify more details about your Red Hat OpenShift Container Platform cluster's platform or modify the values of the required parameters.

This sample YAML file is provided for reference only. Use it as a resource to enter parameter values into the installation configuration file that you created manually.
apiVersion: v1
baseDomain: example.com 1
credentialsMode: Mint 2
controlPlane: 3 4
  hyperthreading: Enabled 5
  name: master
  platform:
    aws:
      zones:
      - us-iso-east-1a
      - us-iso-east-1b
      rootVolume:
        iops: 4000
        size: 500
        type: io1 6
      metadataService:
        authentication: Optional 7
      type: m6i.xlarge
  replicas: 3
compute: 3
- hyperthreading: Enabled 5
  name: worker
  platform:
    aws:
      rootVolume:
        iops: 2000
        size: 500
        type: io1 6
      metadataService:
        authentication: Optional 7
      type: c5.4xlarge
      zones:
      - us-iso-east-1a
      - us-iso-east-1b
  replicas: 3
metadata:
  name: test-cluster 1
networking:
  clusterNetwork:
  - cidr: 10.128.0.0/14
    hostPrefix: 23
  machineNetwork:
  - cidr: 10.0.0.0/16
  networkType: OVNKubernetes 8
  serviceNetwork:
  - 172.30.0.0/16
platform:
  aws:
    region: us-iso-east-1 1
    propagateUserTags: true 3
    userTags:
      adminContact: jdoe
      costCenter: 7536
    subnets: 9
    - subnet-1
    - subnet-2
    - subnet-3
    amiID: ami-96c6f8f7 1 10
    serviceEndpoints: 11
      - name: ec2
        url: https://vpce-id.ec2.us-west-2.vpce.amazonaws.com
    hostedZone: Z3URY6TWQ91KVV 12
fips: false 13
sshKey: ssh-ed25519 AAAA... 14
publish: Internal 15
pullSecret: '{"auths": ...}' 1
additionalTrustBundle: | 16
    -----BEGIN CERTIFICATE-----
    <MY_TRUSTED_CA_CERT>
    -----END CERTIFICATE-----
Required.

Optional: Add this parameter to force the Cloud Credential Operator (CCO) to use the specified mode. By default, the CCO uses the root credentials in the kube-system namespace to dynamically try to determine the capabilities of the credentials. For details about CCO modes, see the "About the Cloud Credential Operator" section in the Authentication and authorization guide.

If you do not provide these parameters and values, the installation program
provides the default value.

The controlPlane section is a single mapping, but the compute section is a
sequence of mappings. To meet the requirements of the different data structures,
the first line of the compute section must begin with a hyphen, -, and the
first line of the controlPlane section must not. Only one control plane pool is used.

Whether to enable or disable simultaneous multithreading, or
hyperthreading. By default, simultaneous multithreading is enabled
to increase the performance of your machines' cores. You can disable it by
setting the parameter value to Disabled. If you disable simultaneous
multithreading in some cluster machines, you must disable it in all cluster
machines.

To configure faster storage for etcd, especially for larger clusters, set the storage type as io1 and set iops to 2000.

Whether to require the Amazon EC2 Instance Metadata Service v2 (IMDSv2). To require IMDSv2, set the parameter value to Required. To allow the use of both IMDSv1 and IMDSv2, set the parameter value to Optional. If no value is specified, both IMDSv1 and IMDSv2 are allowed.

The cluster network plugin to install. The default value OVNKubernetes is the only supported value.

If you provide your own VPC, specify subnets for each availability zone that your cluster uses.

The ID of the AMI used to boot machines for the cluster. If set, the AMI
must belong to the same region as the cluster.

The AWS service endpoints. Custom endpoints are required when installing to
an unknown AWS region. The endpoint URL must use the https protocol and the
host must trust the certificate.

The ID of your existing Route 53 private hosted zone. Providing an existing hosted zone requires that you supply your own VPC and the hosted zone is already associated with the VPC prior to installing your cluster. If undefined, the installation program creates a new hosted zone.

Whether to enable or disable FIPS mode. By default, FIPS mode is not enabled. If FIPS mode is enabled, the Red Hat Enterprise Linux CoreOS (RHCOS) machines that Red Hat OpenShift Container Platform runs on bypass the default Kubernetes cryptography suite and use the cryptography modules that are provided with RHCOS instead.

You can optionally provide the sshKey value that you use to access the machines in your cluster.

How to publish the user-facing endpoints of your cluster. Set publish to Internal to deploy a private cluster, which cannot be accessed from the internet. The default value is External.

The custom CA certificate. This is required when deploying to the SC2S or C2S Regions because the AWS API requires a custom CA trust bundle.
Configuring the cluster-wide proxy during installation
Production environments can deny direct access to the internet and instead have an HTTP or HTTPS proxy available. You can configure a new Red Hat OpenShift Container Platform cluster to use a proxy by configuring the proxy settings in the install-config.yaml file.

You have an existing install-config.yaml file.

You reviewed the sites that your cluster requires access to and determined whether any of them need to bypass the proxy. By default, all cluster egress traffic is proxied, including calls to hosting cloud provider APIs. You added sites to the Proxy object's spec.noProxy field to bypass the proxy if necessary.


Edit your install-config.yaml file and add the proxy settings. For example:

Save the file and reference it when installing Red Hat OpenShift Container Platform.


The installation program creates a cluster-wide proxy that is named cluster that uses the proxy settings in the provided install-config.yaml file. If no proxy settings are provided, a cluster Proxy object is still created, but it will have a nil spec.

Only the Proxy object named cluster is supported, and no additional proxies can be created.
Applying existing AWS security groups to the cluster
Applying existing AWS security groups to your control plane and compute machines can help you meet the security needs of your organization, in such cases where you need to control the incoming or outgoing traffic of these machines.

You have created the security groups in AWS. For more information, see the AWS documentation about working with security groups.

The security groups must be associated with the existing VPC that you are deploying the cluster to. The security groups cannot be associated with another VPC.

You have an existing install-config.yaml file.


In the install-config.yaml file, edit the compute.platform.aws.additionalSecurityGroupIDs parameter to specify one or more custom security groups for your compute machines.

Edit the controlPlane.platform.aws.additionalSecurityGroupIDs parameter to specify one or more custom security groups for your control plane machines.

Save the file and reference it when deploying the cluster.


# ...
compute:
- hyperthreading: Enabled
  name: worker
  platform:
    aws:
      additionalSecurityGroupIDs:
        - sg-1 1
        - sg-2
  replicas: 3
controlPlane:
  hyperthreading: Enabled
  name: master
  platform:
    aws:
      additionalSecurityGroupIDs:
        - sg-3
        - sg-4
  replicas: 3
platform:
  aws:
    region: us-east-1
    subnets: 2
      - subnet-1
      - subnet-2
      - subnet-3
Specify the name of the security group as it appears in the Amazon EC2 console, including the sg prefix.

Specify subnets for each availability zone that your cluster uses.
Installing the OpenShift CLI by downloading the binary
You can install the OpenShift CLI (`oc`) to interact with Red Hat OpenShift Container Platform from a command-line interface. You can install oc on Linux, Windows, or macOS.

If you installed an earlier version of oc, you cannot use it to complete all of the commands in Red Hat OpenShift Container Platform 4.15. Download and install the new version of oc.

You can install the OpenShift CLI (oc) binary on Linux by using the following procedure.

Navigate to the Red Hat OpenShift Container Platform downloads page on the Red Hat Customer Portal.

Select the architecture from the Product Variant drop-down list.

Select the appropriate version from the Version drop-down list.

Click Download Now next to the OpenShift v4.15 Linux Client entry and save the file.

Unpack the archive:

Place the oc binary in a directory that is on your PATH.


After you install the OpenShift CLI, it is available using the oc command:



You can install the OpenShift CLI (oc) binary on Windows by using the following procedure.

Navigate to the Red Hat OpenShift Container Platform downloads page on the Red Hat Customer Portal.

Select the appropriate version from the Version drop-down list.

Click Download Now next to the OpenShift v4.15 Windows Client entry and save the file.

Unzip the archive with a ZIP program.

Move the oc binary to a directory that is on your PATH.


After you install the OpenShift CLI, it is available using the oc command:



You can install the OpenShift CLI (oc) binary on macOS by using the following procedure.

Navigate to the Red Hat OpenShift Container Platform downloads page on the Red Hat Customer Portal.

Select the appropriate version from the Version drop-down list.

Click Download Now next to the OpenShift v4.15 macOS Client entry and save the file.

Unpack and unzip the archive.

Move the oc binary to a directory on your PATH.


After you install the OpenShift CLI, it is available using the oc command:
Alternatives to storing administrator-level secrets in the kube-system project
By default, administrator secrets are stored in the kube-system project. If you configured the credentialsMode parameter in the install-config.yaml file to Manual, you must use one of the following alternatives:

To manage long-term cloud credentials manually, follow the procedure in Manually creating long-term credentials.

To implement short-term credentials that are managed outside the cluster for individual components, follow the procedures in Configuring an AWS cluster to use short-term credentials.


Manually creating long-term credentials
The Cloud Credential Operator (CCO) can be put into manual mode prior to installation in environments where the cloud identity and access management (IAM) APIs are not reachable, or the administrator prefers not to store an administrator-level credential secret in the cluster kube-system namespace.

If you did not set the credentialsMode parameter in the install-config.yaml configuration file to Manual, modify the value as shown:

If you have not previously created installation manifest files, do so by running the following command:

Set a $RELEASE_IMAGE variable with the release image from your installation file by running the following command:

Extract the list of CredentialsRequest custom resources (CRs) from the Red Hat OpenShift Container Platform release image by running the following command:

Create YAML files for secrets in the openshift-install manifests directory that you generated previously. The secrets must be stored using the namespace and secret name defined in the spec.secretRef for each CredentialsRequest object.


Before upgrading a cluster that uses manually maintained credentials, you must ensure that the CCO is in an upgradeable state.
Configuring an AWS cluster to use short-term credentials
To install a cluster that is configured to use the AWS Security Token Service (STS), you must configure the CCO utility and create the required AWS resources for your cluster.

Configuring the Cloud Credential Operator utility
To create and manage cloud credentials from outside of the cluster when the Cloud Credential Operator (CCO) is operating in manual mode, extract and prepare the CCO utility (ccoctl) binary.

The ccoctl utility is a Linux binary that must run in a Linux environment.
You have access to an Red Hat OpenShift Container Platform account with cluster administrator access.

You have installed the OpenShift CLI (`oc`).


You have created an AWS account for the ccoctl utility to use with the following permissions:


Obtain the Red Hat OpenShift Container Platform release image by running the following command:

Obtain the CCO container image from the Red Hat OpenShift Container Platform release image by running the following command:

Extract the ccoctl binary from the CCO container image within the Red Hat OpenShift Container Platform release image by running the following command:

Change the permissions to make ccoctl executable by running the following command:


To verify that ccoctl is ready to use, display the help file by running the following command:
Creating AWS resources with the Cloud Credential Operator utility
You have the following options when creating AWS resources:

You can use the ccoctl aws create-all command to create the AWS resources automatically. This is the quickest way to create the resources. See Creating AWS resources with a single command.

If you need to review the JSON files that the ccoctl tool creates before modifying AWS resources, or if the process the ccoctl tool uses to create AWS resources automatically does not meet the requirements of your organization, you can create the AWS resources individually. See Creating AWS resources individually.


Creating AWS resources with a single command
If the process the ccoctl tool uses to create AWS resources automatically meets the requirements of your organization, you can use the ccoctl aws create-all command to automate the creation of AWS resources.

Otherwise, you can create the AWS resources individually. For more information, see "Creating AWS resources individually".

By default, ccoctl creates objects in the directory in which the commands are run. To create the objects in a different directory, use the --output-dir flag. This procedure uses <path_to_ccoctl_output_dir> to refer to this directory.
You must have:

Extracted and prepared the ccoctl binary.


Set a $RELEASE_IMAGE variable with the release image from your installation file by running the following command:

Extract the list of CredentialsRequest objects from the Red Hat OpenShift Container Platform release image by running the following command:

Use the ccoctl tool to process all CredentialsRequest objects by running the following command:


To verify that the Red Hat OpenShift Container Platform secrets are created, list the files in the <path_to_ccoctl_output_dir>/manifests directory:
Creating AWS resources individually
You can use the ccoctl tool to create AWS resources individually. This option might be useful for an organization that shares the responsibility for creating these resources among different users or departments.

Otherwise, you can use the ccoctl aws create-all command to create the AWS resources automatically. For more information, see "Creating AWS resources with a single command".

By default, ccoctl creates objects in the directory in which the commands are run. To create the objects in a different directory, use the --output-dir flag. This procedure uses <path_to_ccoctl_output_dir> to refer to this directory.

Some ccoctl commands make AWS API calls to create or modify AWS resources. You can use the --dry-run flag to avoid making API calls. Using this flag creates JSON files on the local file system instead. You can review and modify the JSON files and then apply them with the AWS CLI tool using the --cli-input-json parameters.
Extract and prepare the ccoctl binary.


Generate the public and private RSA key files that are used to set up the OpenID Connect provider for the cluster by running the following command:

Create an OpenID Connect identity provider and S3 bucket on AWS by running the following command:

Create IAM roles for each component in the cluster:


To verify that the Red Hat OpenShift Container Platform secrets are created, list the files in the <path_to_ccoctl_output_dir>/manifests directory:
Incorporating the Cloud Credential Operator utility manifests
To implement short-term security credentials managed outside the cluster for individual components, you must move the manifest files that the Cloud Credential Operator utility (ccoctl) created to the correct directories for the installation program.

You have configured an account with the cloud platform that hosts your cluster.

You have configured the Cloud Credential Operator utility (ccoctl).

You have created the cloud provider resources that are required for your cluster with the ccoctl utility.


If you did not set the credentialsMode parameter in the install-config.yaml configuration file to Manual, modify the value as shown:

If you have not previously created installation manifest files, do so by running the following command:

Copy the manifests that the ccoctl utility generated to the manifests directory that the installation program created by running the following command:

Copy the private key that the ccoctl utility generated in the tls directory to the installation directory by running the following command:
Deploying the cluster
You can install Red Hat OpenShift Container Platform on a compatible cloud platform.

You can run the create cluster command of the installation program only once, during initial installation.
You have configured an account with the cloud platform that hosts your cluster.

You have the Red Hat OpenShift Container Platform installation program and the pull secret for your cluster.

You have verified that the cloud provider account on your host has the correct permissions to deploy the cluster. An account with incorrect permissions causes the installation process to fail with an error message that displays the missing permissions.


Change to the directory that contains the installation program and initialize the cluster deployment:

Optional: Remove or disable the AdministratorAccess policy from the IAM
account that you used to install the cluster.


When the cluster deployment completes successfully:

The terminal displays directions for accessing your cluster, including a link to the web console and credentials for the kubeadmin user.

Credential information also outputs to <installation_directory>/.openshift_install.log.


Do not delete the installation program or the files that the installation program creates. Both are required to delete the cluster.
...
INFO Install complete!
INFO To access the cluster as the system:admin user when using 'oc', run 'export KUBECONFIG=/home/myuser/install_dir/auth/kubeconfig'
INFO Access the OpenShift web-console here: https://console-openshift-console.apps.mycluster.example.com
INFO Login to the console with user: "kubeadmin", and password: "password"
INFO Time elapsed: 36m22s
The Ignition config files that the installation program generates contain certificates that expire after 24 hours, which are then renewed at that time. If the cluster is shut down before renewing the certificates and the cluster is later restarted after the 24 hours have elapsed, the cluster automatically recovers the expired certificates. The exception is that you must manually approve the pending node-bootstrapper certificate signing requests (CSRs) to recover kubelet certificates. See the documentation for Recovering from expired control plane certificates for more information.

It is recommended that you use Ignition config files within 12 hours after they are generated because the 24-hour certificate rotates from 16 to 22 hours after the cluster is installed. By using the Ignition config files within 12 hours, you can avoid installation failure if the certificate update runs during installation.
Logging in to the cluster by using the CLI
You can log in to your cluster as a default system user by exporting the cluster kubeconfig file. The kubeconfig file contains information about the cluster that is used by the CLI to connect a client to the correct cluster and API server. The file is specific to a cluster and is created during Red Hat OpenShift Container Platform installation.

You deployed an Red Hat OpenShift Container Platform cluster.

You installed the oc CLI.


Export the kubeadmin credentials:

Verify you can run oc commands successfully using the exported configuration:
Logging in to the cluster by using the web console
The kubeadmin user exists by default after an Red Hat OpenShift Container Platform installation. You can log in to your cluster as the kubeadmin user by using the Red Hat OpenShift Container Platform web console.

You have access to the installation host.

You completed a cluster installation and all cluster Operators are available.


Obtain the password for the kubeadmin user from the kubeadmin-password file on the installation host:

List the Red Hat OpenShift Container Platform web console route:

Navigate to the route detailed in the output of the preceding command in a web browser and log in as the kubeadmin user.


Accessing the web console
Telemetry access for Red Hat OpenShift Container Platform
In Red Hat OpenShift Container Platform 4.15, the Telemetry service, which runs by default to provide metrics about cluster health and the success of updates, requires internet access. If your cluster is connected to the internet, Telemetry runs automatically, and your cluster is registered to https://console.redhat.com/openshift [OpenShift Cluster Manager Hybrid Cloud Console].

After you confirm that your https://console.redhat.com/openshift [OpenShift Cluster Manager Hybrid Cloud Console] inventory is correct, either maintained automatically by Telemetry or manually by using OpenShift Cluster Manager, use subscription watch to track your Red Hat OpenShift Container Platform subscriptions at the account or multi-cluster level.

About remote health monitoring
Next steps
Validating an installation.

Customize your cluster.

If necessary, you can opt out of remote health reporting.

If necessary, you can remove cloud provider credentials.