Installing a cluster on Azure Stack Hub using ARM templates

In Red Hat OpenShift Container Platform version 4.15, you can install a cluster on Microsoft Azure Stack Hub by using infrastructure that you provide.

Several Azure Resource Manager (ARM) templates are provided to assist in completing these steps or to help model your own.

The steps for performing a user-provisioned infrastructure installation are provided as an example only. Installing a cluster with infrastructure you provide requires knowledge of the cloud provider and the installation process of Red Hat OpenShift Container Platform. Several ARM templates are provided to assist in completing these steps or to help model your own. You are also free to create the required resources through other methods; the templates are just an example.
Prerequisites
You reviewed details about the Red Hat OpenShift Container Platform installation and update processes.

You read the documentation on selecting a cluster installation method and preparing it for users.

You configured an Azure Stack Hub account to host the cluster.

You downloaded the Azure CLI and installed it on your computer. See Install the Azure CLI in the Azure documentation. The documentation below was tested using version 2.28.0 of the Azure CLI. Azure CLI commands might perform differently based on the version you use.

If you use a firewall and plan to use the Telemetry service, you configured the firewall to allow the sites that your cluster requires access to.
Internet access for Red Hat OpenShift Container Platform
In Red Hat OpenShift Container Platform 4.15, you require access to the internet to install your cluster.

You must have internet access to:

Access https://console.redhat.com/openshift [OpenShift Cluster Manager Hybrid Cloud Console] to download the installation program and perform subscription management. If the cluster has internet access and you do not disable Telemetry, that service automatically entitles your cluster.

Access Quay.io to obtain the packages that are required to install your cluster.

Obtain the packages that are required to perform cluster updates.
Configuring your Azure Stack Hub project
Before you can install Red Hat OpenShift Container Platform, you must configure an Azure project to host it.

All Azure Stack Hub resources that are available through public endpoints are subject to resource name restrictions, and you cannot create resources that use certain terms. For a list of terms that Azure Stack Hub restricts, see Resolve reserved resource name errors in the Azure documentation.
Azure Stack Hub account limits
The Red Hat OpenShift Container Platform cluster uses a number of Microsoft Azure Stack Hub components, and the default Quota types in Azure Stack Hub affect your ability to install Red Hat OpenShift Container Platform clusters.

The following table summarizes the Azure Stack Hub components whose limits can impact your ability to install and run Red Hat OpenShift Container Platform clusters.


Optimizing storage.
Configuring a DNS zone in Azure Stack Hub
To successfully install Red Hat OpenShift Container Platform on Azure Stack Hub, you must create DNS records in an Azure Stack Hub DNS zone. The DNS zone must be authoritative for the domain. To delegate a registrar's DNS zone to Azure Stack Hub, see Microsoft's documentation for Azure Stack Hub datacenter DNS integration.

You can view Azure's DNS solution by visiting this example for creating DNS zones.
Certificate signing requests management
Because your cluster has limited access to automatic machine management when you use infrastructure that you provision, you must provide a mechanism for approving cluster certificate signing requests (CSRs) after installation. The kube-controller-manager only approves the kubelet client CSRs. The machine-approver cannot guarantee the validity of a serving certificate that is requested by using kubelet credentials because it cannot confirm that the correct machine issued the request. You must determine and implement a method of verifying the validity of the kubelet serving certificate requests and approving them.
Required Azure Stack Hub roles
Your Microsoft Azure Stack Hub account must have the following roles for the subscription that you use:

Owner


To set roles on the Azure portal, see the Manage access to resources in Azure Stack Hub with role-based access control in the Microsoft documentation.
Creating a service principal
Because Red Hat OpenShift Container Platform and its installation program create Microsoft Azure resources by using the Azure Resource Manager, you must create a service principal to represent it.

Install or update the Azure CLI.

Your Azure account has the required roles for the subscription that you use.


Register your environment:

Set the active environment:

Update your environment configuration to use the specific API version for Azure Stack Hub:

Log in to the Azure CLI:

If your Azure account uses subscriptions, ensure that you are using the right
subscription:

Record the tenantId and id parameter values from the output. You need these values during the Red Hat OpenShift Container Platform installation.

Create the service principal for your account:

Record the values of the appId and password parameters from the previous
output. You need these values during Red Hat OpenShift Container Platform installation.


For more information about CCO modes, see About the Cloud Credential Operator.
Obtaining the installation program
Before you install Red Hat OpenShift Container Platform, download the installation file on  the host you are using for installation.

You have a computer that runs Linux or macOS, with 500 MB of local disk space.


Access the Infrastructure Provider page on the OpenShift Cluster Manager site. If you have a Red Hat account, log in with your credentials. If you do not, create an account.

Select Azure as the cloud provider.

Navigate to the page for your installation type, download the installation program that corresponds with your host operating system and architecture, and place the file in the directory where you will store the installation configuration files.

Extract the installation program. For example, on a computer that uses a Linux
operating system, run the following command:

Download your installation https://console.redhat.com/openshift/install/pull-secret [pull secret from the Red Hat OpenShift Cluster Manager]. This pull secret allows you to authenticate with the services that are provided by the included authorities, including Quay.io, which serves the container images for Red Hat OpenShift Container Platform components.
Generating a key pair for cluster node SSH access
During an Red Hat OpenShift Container Platform installation, you can provide an SSH public key to the installation program. The key is passed to the Red Hat Enterprise Linux CoreOS (RHCOS) nodes through their Ignition config files and is used to authenticate SSH access to the nodes. The key is added to the ~/.ssh/authorized_keys list for the core user on each node, which enables password-less authentication.

After the key is passed to the nodes, you can use the key pair to SSH in to the RHCOS nodes as the user core. To access the nodes through SSH, the private key identity must be managed by SSH for your local user.

If you want to SSH in to your cluster nodes to perform installation debugging or disaster recovery, you must provide the SSH public key during the installation process. The ./openshift-install gather command also requires the SSH public key to be in place on the cluster nodes.

Do not skip this procedure in production environments, where disaster recovery and debugging is required.
You must use a local key, not one that you configured with platform-specific approaches such as AWS key pairs.
If you do not have an existing SSH key pair on your local machine to use for authentication onto your cluster nodes, create one. For example, on a computer that uses a Linux operating system, run the following command:

View the public SSH key:

Add the SSH private key identity to the SSH agent for your local user, if it has not already been added. SSH agent management of the key is required for password-less SSH authentication onto your cluster nodes, or if you want to use the ./openshift-install gather command.

Add your SSH private key to the ssh-agent:


When you install Red Hat OpenShift Container Platform, provide the SSH public key to the installation program.
Creating the installation files for Azure Stack Hub
To install Red Hat OpenShift Container Platform on Microsoft Azure Stack Hub using user-provisioned infrastructure, you must generate the files that the installation program needs to deploy your cluster and modify them so that the cluster creates only the machines that it will use. You manually create the install-config.yaml file, and then generate and customize the Kubernetes manifests and Ignition config files. You also have the option to first set up a separate var partition during the preparation phases of installation.

Manually creating the installation configuration file
Installing the cluster requires that you manually create the installation configuration file.

You have an SSH public key on your local machine to provide to the installation program. The key will be used for SSH authentication onto your cluster nodes for debugging and disaster recovery.

You have obtained the Red Hat OpenShift Container Platform installation program and the pull secret for your
cluster.


Create an installation directory to store your required installation assets in:

Customize the sample install-config.yaml file template that is provided and save
it in the <installation_directory>.

Back up the install-config.yaml file so that you can use it to install multiple clusters.


Installation configuration parameters for Azure Stack Hub
Sample customized install-config.yaml file for Azure Stack Hub
You can customize the install-config.yaml file to specify more details about your Red Hat OpenShift Container Platform cluster's platform or modify the values of the required parameters.

This sample YAML file is provided for reference only. Use it as a resource to enter parameter values into the installation configuration file that you created manually.
apiVersion: v1
baseDomain: example.com
controlPlane: 1
  name: master
  platform:
    azure:
      osDisk:
        diskSizeGB: 1024 2
        diskType: premium_LRS
  replicas: 3
compute: 1
- name: worker
  platform:
    azure:
      osDisk:
        diskSizeGB: 512 2
        diskType: premium_LRS
  replicas: 0
metadata:
  name: test-cluster 3
networking:
  clusterNetwork:
  - cidr: 10.128.0.0/14
    hostPrefix: 23
  machineNetwork:
  - cidr: 10.0.0.0/16
  networkType: OVNKubernetes 4
  serviceNetwork:
  - 172.30.0.0/16
platform:
  azure:
    armEndpoint: azurestack_arm_endpoint 5
    baseDomainResourceGroupName: resource_group 6
    region: azure_stack_local_region 7
    resourceGroupName: existing_resource_group 8
    outboundType: Loadbalancer
    cloudName: AzureStackCloud 9
pullSecret: '{"auths": ...}' 10
fips: false 11
additionalTrustBundle: | 12
    -----BEGIN CERTIFICATE-----
    <MY_TRUSTED_CA_CERT>
    -----END CERTIFICATE-----
sshKey: ssh-ed25519 AAAA... 13
The controlPlane section is a single mapping, but the compute section is a sequence of mappings. To meet the requirements of the different data structures, the first line of the compute section must begin with a hyphen, -, and the first line of the controlPlane section must not. Only one control plane pool is used.

You can specify the size of the disk to use in GB. Minimum recommendation for control plane nodes is 1024 GB.

Specify the name of the cluster.

The cluster network plugin to install. The default value OVNKubernetes is the only supported value.

Specify the Azure Resource Manager endpoint that your Azure Stack Hub operator provides.

Specify the name of the resource group that contains the DNS zone for your base domain.

Specify the name of your Azure Stack Hub local region.

Specify the name of an already existing resource group to install your cluster to. If undefined, a new resource group is created for the cluster.

Specify the Azure Stack Hub environment as your target platform.

Specify the pull secret required to authenticate your cluster.

Whether to enable or disable FIPS mode. By default, FIPS mode is not enabled. If FIPS mode is enabled, the Red Hat Enterprise Linux CoreOS (RHCOS) machines that Red Hat OpenShift Container Platform runs on bypass the default Kubernetes cryptography suite and use the cryptography modules that are provided with RHCOS instead.

If your Azure Stack Hub environment uses an internal certificate authority (CA), add the necessary certificate bundle in .pem format.

You can optionally provide the sshKey value that you use to access the machines in your cluster.
Configuring the cluster-wide proxy during installation
Production environments can deny direct access to the internet and instead have an HTTP or HTTPS proxy available. You can configure a new Red Hat OpenShift Container Platform cluster to use a proxy by configuring the proxy settings in the install-config.yaml file.

You have an existing install-config.yaml file.

You reviewed the sites that your cluster requires access to and determined whether any of them need to bypass the proxy. By default, all cluster egress traffic is proxied, including calls to hosting cloud provider APIs. You added sites to the Proxy object's spec.noProxy field to bypass the proxy if necessary.


Edit your install-config.yaml file and add the proxy settings. For example:

Save the file and reference it when installing Red Hat OpenShift Container Platform.


The installation program creates a cluster-wide proxy that is named cluster that uses the proxy settings in the provided install-config.yaml file. If no proxy settings are provided, a cluster Proxy object is still created, but it will have a nil spec.

Only the Proxy object named cluster is supported, and no additional proxies can be created.
Exporting common variables for ARM templates
You must export a common set of variables that are used with the provided Azure Resource Manager (ARM) templates used to assist in completing a user-provided infrastructure install on Microsoft Azure Stack Hub.

Specific ARM templates can also require additional exported variables, which are detailed in their related procedures.
Obtain the Red Hat OpenShift Container Platform installation program and the pull secret for your cluster.


Export common variables found in the install-config.yaml to be used by the
provided ARM templates:

Export the kubeadmin credentials:
Creating the Kubernetes manifest and Ignition config files
Because you must modify some cluster definition files and manually start the cluster machines, you must generate the Kubernetes manifest and Ignition config files that the cluster needs to configure the machines.

The installation configuration file transforms into the Kubernetes manifests. The manifests wrap into the Ignition configuration files, which are later used to configure the cluster machines.

The Ignition config files that the Red Hat OpenShift Container Platform installation program generates contain certificates that expire after 24 hours, which are then renewed at that time. If the cluster is shut down before renewing the certificates and the cluster is later restarted after the 24 hours have elapsed, the cluster automatically recovers the expired certificates. The exception is that you must manually approve the pending node-bootstrapper certificate signing requests (CSRs) to recover kubelet certificates. See the documentation for Recovering from expired control plane certificates for more information.

It is recommended that you use Ignition config files within 12 hours after they are generated because the 24-hour certificate rotates from 16 to 22 hours after the cluster is installed. By using the Ignition config files within 12 hours, you can avoid installation failure if the certificate update runs during installation.
You obtained the Red Hat OpenShift Container Platform installation program.

You created the install-config.yaml installation configuration file.


Change to the directory that contains the Red Hat OpenShift Container Platform installation program and generate the Kubernetes manifests for the cluster:

Remove the Kubernetes manifest files that define the control plane machines:

Remove the Kubernetes manifest files that define the control plane machine set:

Remove the Kubernetes manifest files that define the worker machines:

Check that the mastersSchedulable parameter in the <installation_directory>/manifests/cluster-scheduler-02-config.yml Kubernetes manifest file is set to false. This setting prevents pods from being scheduled on the control plane machines:

Optional: If you do not want
the Ingress Operator
to create DNS records on your behalf, remove the privateZone and publicZone
sections from the <installation_directory>/manifests/cluster-dns-02-config.yml DNS configuration file:

Optional: If your Azure Stack Hub environment uses an internal certificate authority (CA), you must update the .spec.trustedCA.name field in the <installation_directory>/manifests/cluster-proxy-01-config.yaml file to use user-ca-bundle:

When configuring Azure on user-provisioned infrastructure, you must export
some common variables defined in the manifest files to use later in the Azure
Resource Manager (ARM) templates:

Manually create your cloud credentials.

To create the Ignition configuration files, run the following command from the directory that contains the installation program:


Manually manage cloud credentials
Optional: Creating a separate /var partition
It is recommended that disk partitioning for Red Hat OpenShift Container Platform be left to the installer. However, there are cases where you might want to create separate partitions in a part of the filesystem that you expect to grow.

Red Hat OpenShift Container Platform supports the addition of a single partition to attach storage to either the /var partition or a subdirectory of /var. For example:

/var/lib/containers: Holds container-related content that can grow as more images and containers are added to a system.

/var/lib/etcd: Holds data that you might want to keep separate for purposes such as performance optimization of etcd storage.

/var: Holds data that you might want to keep separate for purposes such as auditing.


Storing the contents of a /var directory separately makes it easier to grow storage for those areas as needed and reinstall Red Hat OpenShift Container Platform at a later date and keep that data intact. With this method, you will not have to pull all your containers again, nor will you have to copy massive log files when you update systems.

Because /var must be in place before a fresh installation of Red Hat Enterprise Linux CoreOS (RHCOS), the following procedure sets up the separate /var partition by creating a machine config manifest that is inserted during the openshift-install preparation phases of an Red Hat OpenShift Container Platform installation.

If you follow the steps to create a separate /var partition in this procedure, it is not necessary to create the Kubernetes manifest and Ignition config files again as described later in this section.
Create a directory to hold the Red Hat OpenShift Container Platform installation files:

Run openshift-install to create a set of files in the manifest and openshift subdirectories. Answer the system questions as you are prompted:

Optional: Confirm that the installation program created manifests in the clusterconfig/openshift directory:

Create a Butane config that configures the additional partition. For example, name the file $HOME/clusterconfig/98-var-partition.bu, change the disk device name to the name of the storage device on the worker systems, and set the storage size as appropriate. This example places the /var directory on a separate partition:

Create a manifest from the Butane config and save it to the clusterconfig/openshift directory. For example, run the following command:

Run openshift-install again to create Ignition configs from a set of files in the manifest and openshift subdirectories:


Now you can use the Ignition config files as input to the installation procedures to install Red Hat Enterprise Linux CoreOS (RHCOS) systems.
Creating the Azure resource group
You must create a Microsoft Azure resource group. This is used during the installation of your Red Hat OpenShift Container Platform cluster on Azure Stack Hub.

Configure an Azure account.

Generate the Ignition config files for your cluster.


Create the resource group in a supported Azure region:
Uploading the RHCOS cluster image and bootstrap Ignition config file
The Azure client does not support deployments based on files existing locally. You must copy and store the RHCOS virtual hard disk (VHD) cluster image and bootstrap Ignition config file in a storage container so they are accessible during deployment.

Configure an Azure account.

Generate the Ignition config files for your cluster.


Create an Azure storage account to store the VHD cluster image:

Export the storage account key as an environment variable:

Export the URL of the RHCOS VHD to an environment variable:

Create the storage container for the VHD:

Download the compressed RHCOS VHD file locally:

Decompress the VHD file.

Copy the local VHD to a blob:

Create a blob storage container and upload the generated bootstrap.ign file:
Example for creating DNS zones
DNS records are required for clusters that use user-provisioned infrastructure. You should choose the DNS strategy that fits your scenario.

For this example, Azure Stack Hub's datacenter DNS integration is used, so you will create a DNS zone.

The DNS zone is not required to exist in the same resource group as the cluster deployment and might already exist in your organization for the desired base domain. If that is the case, you can skip creating the DNS zone; be sure the installation config you generated earlier reflects that scenario.
Configure an Azure account.

Generate the Ignition config files for your cluster.


Create the new DNS zone in the resource group exported in the
BASE_DOMAIN_RESOURCE_GROUP environment variable:


You can learn more about configuring a DNS zone in Azure Stack Hub by visiting that section.
Creating a VNet in Azure Stack Hub
You must create a virtual network (VNet) in Microsoft Azure Stack Hub for your Red Hat OpenShift Container Platform cluster to use. You can customize the VNet to meet your requirements. One way to create the VNet is to modify the provided Azure Resource Manager (ARM) template.

If you do not use the provided ARM template to create your Azure Stack Hub infrastructure, you must review the provided information and manually create the infrastructure. If your cluster does not initialize correctly, you might have to contact Red Hat support with your installation logs.
Configure an Azure account.

Generate the Ignition config files for your cluster.


Copy the template from the ARM template for the VNet section of this topic
and save it as 01_vnet.json in your cluster's installation directory. This template describes the
VNet that your cluster requires.

Create the deployment by using the az CLI:


ARM template for the VNet
You can use the following Azure Resource Manager (ARM) template to deploy the VNet that you need for your Red Hat OpenShift Container Platform cluster:

link:https://raw.githubusercontent.com/openshift/installer/release-4.15/upi/azurestack/01_vnet.json[role=include]
Deploying the RHCOS cluster image for the Azure Stack Hub infrastructure
You must use a valid Red Hat Enterprise Linux CoreOS (RHCOS) image for Microsoft Azure Stack Hub for your Red Hat OpenShift Container Platform nodes.

Configure an Azure account.

Generate the Ignition config files for your cluster.

Store the RHCOS virtual hard disk (VHD) cluster image in an Azure storage container.

Store the bootstrap Ignition config file in an Azure storage container.


Copy the template from the ARM template for image storage section of
this topic and save it as 02_storage.json in your cluster's installation directory. This template
describes the image storage that your cluster requires.

Export the RHCOS VHD blob URL as a variable:

Deploy the cluster image:


ARM template for image storage
You can use the following Azure Resource Manager (ARM) template to deploy the stored Red Hat Enterprise Linux CoreOS (RHCOS) image that you need for your Red Hat OpenShift Container Platform cluster:

link:https://raw.githubusercontent.com/openshift/installer/release-4.15/upi/azurestack/02_storage.json[role=include]
Networking requirements for user-provisioned infrastructure
All the Red Hat Enterprise Linux CoreOS (RHCOS) machines require networking to be configured in initramfs during boot to fetch their Ignition config files.

Network connectivity requirements
You must configure the network connectivity between machines to allow Red Hat OpenShift Container Platform cluster components to communicate. Each machine must be able to resolve the hostnames of all other machines in the cluster.

This section provides details about the ports that are required.

In connected Red Hat OpenShift Container Platform environments, all nodes are required to have internet access to pull images for platform containers and provide telemetry data to Red Hat.
Creating networking and load balancing components in Azure Stack Hub
You must configure networking and load balancing in Microsoft Azure Stack Hub for your Red Hat OpenShift Container Platform cluster to use. One way to create these components is to modify the provided Azure Resource Manager (ARM) template.

Load balancing requires the following DNS records:

An api DNS record for the API public load balancer in the DNS zone.

An api-int DNS record for the API internal load balancer in the DNS zone.


If you do not use the provided ARM template to create your Azure Stack Hub infrastructure, you must review the provided information and manually create the infrastructure. If your cluster does not initialize correctly, you might have to contact Red Hat support with your installation logs.
Configure an Azure account.

Generate the Ignition config files for your cluster.

Create and configure a VNet and associated subnets in Azure Stack Hub.


Copy the template from the ARM template for the network and load balancers
section of this topic and save it as 03_infra.json in your cluster's installation directory. This
template describes the networking and load balancing objects that your cluster
requires.

Create the deployment by using the az CLI:

Create an api DNS record and an api-int DNS record. When creating the API DNS records, the ${BASE_DOMAIN_RESOURCE_GROUP} variable must point to the resource group where the DNS zone exists.


ARM template for the network and load balancers
You can use the following Azure Resource Manager (ARM) template to deploy the networking objects and load balancers that you need for your Red Hat OpenShift Container Platform cluster:

link:https://raw.githubusercontent.com/openshift/installer/release-4.15/upi/azurestack/03_infra.json[role=include]
Creating the bootstrap machine in Azure Stack Hub
You must create the bootstrap machine in Microsoft Azure Stack Hub to use during Red Hat OpenShift Container Platform cluster initialization. One way to create this machine is to modify the provided Azure Resource Manager (ARM) template.

If you do not use the provided ARM template to create your bootstrap machine, you must review the provided information and manually create the infrastructure. If your cluster does not initialize correctly, you might have to contact Red Hat support with your installation logs.
Configure an Azure account.

Generate the Ignition config files for your cluster.

Create and configure a VNet and associated subnets in Azure Stack Hub.

Create and configure networking and load balancers in Azure Stack Hub.

Create control plane and compute roles.


Copy the template from the ARM template for the bootstrap machine section of
this topic and save it as 04_bootstrap.json in your cluster's installation directory. This template
describes the bootstrap machine that your cluster requires.

Export the bootstrap URL variable:

Export the bootstrap ignition variable:

Create the deployment by using the az CLI:


ARM template for the bootstrap machine
You can use the following Azure Resource Manager (ARM) template to deploy the bootstrap machine that you need for your Red Hat OpenShift Container Platform cluster:

link:https://raw.githubusercontent.com/openshift/installer/release-4.15/upi/azurestack/04_bootstrap.json[role=include]
Creating the control plane machines in Azure Stack Hub
You must create the control plane machines in Microsoft Azure Stack Hub for your cluster to use. One way to create these machines is to modify the provided Azure Resource Manager (ARM) template.

If you do not use the provided ARM template to create your control plane machines, you must review the provided information and manually create the infrastructure. If your cluster does not initialize correctly, consider contacting Red Hat support with your installation logs.

Configure an Azure account.

Generate the Ignition config files for your cluster.

Create and configure a VNet and associated subnets in Azure Stack Hub.

Create and configure networking and load balancers in Azure Stack Hub.

Create control plane and compute roles.

Create the bootstrap machine.


Copy the template from the ARM template for control plane machines
section of this topic and save it as 05_masters.json in your cluster's installation directory.
This template describes the control plane machines that your cluster requires.

Export the following variable needed by the control plane machine deployment:

Create the deployment by using the az CLI:


ARM template for control plane machines
You can use the following Azure Resource Manager (ARM) template to deploy the control plane machines that you need for your Red Hat OpenShift Container Platform cluster:

link:https://raw.githubusercontent.com/openshift/installer/release-4.15/upi/azurestack/05_masters.json[role=include]
Wait for bootstrap completion and remove bootstrap resources in Azure Stack Hub
After you create all of the required infrastructure in Microsoft Azure Stack Hub, wait for the bootstrap process to complete on the machines that you provisioned by using the Ignition config files that you generated with the installation program.

Configure an Azure account.

Generate the Ignition config files for your cluster.

Create and configure a VNet and associated subnets in Azure Stack Hub.

Create and configure networking and load balancers in Azure Stack Hub.

Create control plane and compute roles.

Create the bootstrap machine.

Create the control plane machines.


Change to the directory that contains the installation program and run the
following command:

Delete the bootstrap resources:


If you do not delete the bootstrap server, installation may not succeed due to API traffic being routed to the bootstrap server.
Creating additional worker machines in Azure Stack Hub
You can create worker machines in Microsoft Azure Stack Hub for your cluster to use by launching individual instances discretely or by automated processes outside the cluster, such as auto scaling groups. You can also take advantage of the built-in cluster scaling mechanisms and the machine API in Red Hat OpenShift Container Platform.

In this example, you manually launch one instance by using the Azure Resource Manager (ARM) template. Additional instances can be launched by including additional resources of type 06_workers.json in the file.

If you do not use the provided ARM template to create your control plane machines, you must review the provided information and manually create the infrastructure. If your cluster does not initialize correctly, consider contacting Red Hat support with your installation logs.

Configure an Azure account.

Generate the Ignition config files for your cluster.

Create and configure a VNet and associated subnets in Azure Stack Hub.

Create and configure networking and load balancers in Azure Stack Hub.

Create control plane and compute roles.

Create the bootstrap machine.

Create the control plane machines.


Copy the template from the ARM template for worker machines
section of this topic and save it as 06_workers.json in your cluster's installation directory. This
template describes the worker machines that your cluster requires.

Export the following variable needed by the worker machine deployment:

Create the deployment by using the az CLI:


ARM template for worker machines
You can use the following Azure Resource Manager (ARM) template to deploy the worker machines that you need for your Red Hat OpenShift Container Platform cluster:

link:https://raw.githubusercontent.com/openshift/installer/release-4.15/upi/azurestack/06_workers.json[role=include]
Installing the OpenShift CLI by downloading the binary
You can install the OpenShift CLI (`oc`) to interact with Red Hat OpenShift Container Platform from a command-line interface. You can install oc on Linux, Windows, or macOS.

If you installed an earlier version of oc, you cannot use it to complete all of the commands in Red Hat OpenShift Container Platform 4.15. Download and install the new version of oc.

You can install the OpenShift CLI (oc) binary on Linux by using the following procedure.

Navigate to the Red Hat OpenShift Container Platform downloads page on the Red Hat Customer Portal.

Select the architecture from the Product Variant drop-down list.

Select the appropriate version from the Version drop-down list.

Click Download Now next to the OpenShift v4.15 Linux Client entry and save the file.

Unpack the archive:

Place the oc binary in a directory that is on your PATH.


After you install the OpenShift CLI, it is available using the oc command:



You can install the OpenShift CLI (oc) binary on Windows by using the following procedure.

Navigate to the Red Hat OpenShift Container Platform downloads page on the Red Hat Customer Portal.

Select the appropriate version from the Version drop-down list.

Click Download Now next to the OpenShift v4.15 Windows Client entry and save the file.

Unzip the archive with a ZIP program.

Move the oc binary to a directory that is on your PATH.


After you install the OpenShift CLI, it is available using the oc command:



You can install the OpenShift CLI (oc) binary on macOS by using the following procedure.

Navigate to the Red Hat OpenShift Container Platform downloads page on the Red Hat Customer Portal.

Select the appropriate version from the Version drop-down list.

Click Download Now next to the OpenShift v4.15 macOS Client entry and save the file.

Unpack and unzip the archive.

Move the oc binary to a directory on your PATH.


After you install the OpenShift CLI, it is available using the oc command:
Logging in to the cluster by using the CLI
You can log in to your cluster as a default system user by exporting the cluster kubeconfig file. The kubeconfig file contains information about the cluster that is used by the CLI to connect a client to the correct cluster and API server. The file is specific to a cluster and is created during Red Hat OpenShift Container Platform installation.

You deployed an Red Hat OpenShift Container Platform cluster.

You installed the oc CLI.


Export the kubeadmin credentials:

Verify you can run oc commands successfully using the exported configuration:
Approving the certificate signing requests for your machines
When you add machines to a cluster, two pending certificate signing requests (CSRs) are generated for each machine that you added. You must confirm that these CSRs are approved or, if necessary, approve them yourself. The client requests must be approved first, followed by the server requests.

You added machines to your cluster.


Confirm that the cluster recognizes the machines:

Review the pending CSRs and ensure that you see the client requests with the Pending or Approved status for each machine that you added to the cluster:

If the CSRs were not approved, after all of the pending CSRs for the machines you added are in Pending status, approve the CSRs for your cluster machines:

Now that your client requests are approved, you must review the server requests for each machine that you added to the cluster:

If the remaining CSRs are not approved, and are in the Pending status, approve the CSRs for your cluster machines:

After all client and server CSRs have been approved, the machines have the Ready status. Verify this by running the following command:


For more information on CSRs, see Certificate Signing Requests.
Adding the Ingress DNS records
If you removed the DNS Zone configuration when creating Kubernetes manifests and generating Ignition configs, you must manually create DNS records that point at the Ingress load balancer. You can create either a wildcard *.apps.{baseDomain}. or specific records. You can use A, CNAME, and other records per your requirements.

You deployed an Red Hat OpenShift Container Platform cluster on Microsoft Azure Stack Hub by using infrastructure that you provisioned.

Install the OpenShift CLI (oc).

Install or update the Azure CLI.


Confirm the Ingress router has created a load balancer and populated the
EXTERNAL-IP field:

Export the Ingress router IP as a variable:

Add a *.apps record to the DNS zone.


If you prefer to add explicit domains instead of using a wildcard, you can create entries for each of the cluster's current routes:

$ oc get --all-namespaces -o jsonpath='{range .items[*]}{range .status.ingress[*]}{.host}{"\n"}{end}{end}' routes
oauth-openshift.apps.cluster.basedomain.com
console-openshift-console.apps.cluster.basedomain.com
downloads-openshift-console.apps.cluster.basedomain.com
alertmanager-main-openshift-monitoring.apps.cluster.basedomain.com
prometheus-k8s-openshift-monitoring.apps.cluster.basedomain.com
Completing an Azure Stack Hub installation on user-provisioned infrastructure
After you start the Red Hat OpenShift Container Platform installation on Microsoft Azure Stack Hub user-provisioned infrastructure, you can monitor the cluster events until the cluster is ready.

Deploy the bootstrap machine for an Red Hat OpenShift Container Platform cluster on user-provisioned Azure Stack Hub infrastructure.

Install the oc CLI and log in.


Complete the cluster installation:


See About remote health monitoring for more information about the Telemetry service.