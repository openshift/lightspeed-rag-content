# Installing a cluster on Azure using ARM templates


In Red Hat OpenShift Container Platform version 4.15, you can install a cluster on Microsoft Azure by using infrastructure that you provide.
Several Azure Resource Manager (ARM) templates are provided to assist in completing these steps or to help model your own.

[IMPORTANT]
----
The steps for performing a user-provisioned infrastructure installation are provided as an example only. Installing a cluster with infrastructure you provide requires knowledge of the cloud provider and the installation process of Red Hat OpenShift Container Platform. Several ARM templates are provided to assist in completing these steps or to help model your own. You are also free to create the required resources through other methods; the templates are just an example.
----

# Prerequisites

* You reviewed details about the Red Hat OpenShift Container Platform installation and update processes.
* You read the documentation on selecting a cluster installation method and preparing it for users.
* You configured an Azure account to host the cluster.
* You downloaded the Azure CLI and installed it on your computer. See Install the Azure CLI in the Azure documentation. The following documentation was last tested using version 2.49.0 of the Azure CLI. Azure CLI commands might perform differently based on the version you use.
* If the cloud identity and access management (IAM) APIs are not accessible in your environment, or if you do not want to store an administrator-level credential secret in the kube-system namespace, see Alternatives to storing administrator-level secrets in the kube-system project.
* If you use a firewall and plan to use the Telemetry service, you configured the firewall to allow the sites that your cluster requires access to.

[NOTE]
----
Be sure to also review this site list if you are configuring a proxy.
----

# Internet access for Red Hat OpenShift Container Platform

In Red Hat OpenShift Container Platform 4.15, you require access to the internet to
install
your cluster.

You must have internet access to:

* Access https://console.redhat.com/openshift [OpenShift Cluster Manager] to download the installation program and perform subscription management. If the cluster has internet access and you do not disable Telemetry, that service automatically entitles your cluster.
* Access Quay.io to obtain the packages that are required to install your cluster.
* Obtain the packages that are required to perform cluster updates.

# Configuring your Azure project

Before you can install Red Hat OpenShift Container Platform, you must configure an Azure project to host it.


[IMPORTANT]
----
All Azure resources that are available through public endpoints are subject to resource name restrictions, and you cannot create resources that use certain terms. For a list of terms that Azure restricts, see Resolve reserved resource name errors in the Azure documentation.
----

## Azure account limits

The Red Hat OpenShift Container Platform cluster uses a number of Microsoft {cp} components, and the default Azure subscription and service limits, quotas, and constraints affect your ability to install Red Hat OpenShift Container Platform clusters.


[IMPORTANT]
----
Default limits vary by offer category types, such as Free Trial and Pay-As-You-Go, and by series, such as Dv2, F, and G. For example, the default for Enterprise Agreement subscriptions is 350 cores.
Check the limits for your subscription type and if necessary, increase quota limits for your account before you install a default
cluster on Azure.
----

The following table summarizes the {cp} components whose limits can impact your
ability to install and run Red Hat OpenShift Container Platform clusters.



* Optimizing storage

## Configuring a public DNS zone in Azure

To install Red Hat OpenShift Container Platform, the Microsoft Azure account you use must
have a dedicated public hosted DNS zone in your account. This zone must be
authoritative for the domain. This service provides
cluster DNS resolution and name lookup for external connections to the cluster.

1. Identify your domain, or subdomain, and registrar. You can transfer an
existing domain and registrar or obtain a new one through Azure or another source.

[NOTE]
----
For more information about purchasing domains through Azure, see
Buy a custom domain name for Azure App Service
in the Azure documentation.
----
2. If you are using an existing domain and registrar, migrate its DNS to Azure. See
Migrate an active DNS name to Azure App Service
in the Azure documentation.
3. Configure DNS for your domain. Follow the steps in the
Tutorial: Host your domain in Azure DNS
in the Azure documentation to create a public hosted zone for your domain or
subdomain, extract the new authoritative name servers, and update the registrar
records for the name servers that your domain uses.

Use an appropriate root domain, such as openshiftcorp.com, or subdomain,
such as clusters.openshiftcorp.com.
4. If you use a subdomain, follow your company's procedures to add its delegation
records to the parent domain.

You can view Azure&#8217;s DNS solution by visiting this example for creating DNS zones.

## Increasing Azure account limits

To increase an account limit, file a support request on the Azure portal.


[NOTE]
----
You can increase only one type of quota per support request.
----

1. From the Azure portal, click Help + support in the lower left corner.
2. Click New support request and then select the required values:
1. From the Issue type list, select Service and subscription limits (quotas).
2. From the Subscription list, select the subscription to modify.
3. From the Quota type list, select the quota to increase. For example, select
Compute-VM (cores-vCPUs) subscription limit increases to increase the number
of vCPUs, which is required to install a cluster.
4. Click Next: Solutions.
3. On the Problem Details page, provide the required information for your quota
increase:
1. Click Provide details and provide the required details in the Quota details window.
2. In the SUPPORT METHOD and CONTACT INFO sections, provide the issue severity
and your contact details.
4. Click Next: Review + create and then click Create.

## Certificate signing requests management

Because your cluster has limited access to automatic machine management when you use infrastructure that you provision, you must provide a mechanism for approving cluster certificate signing requests (CSRs) after installation. The kube-controller-manager only approves the kubelet client CSRs. The machine-approver cannot guarantee the validity of a serving certificate that is requested by using kubelet credentials because it cannot confirm that the correct machine issued the request. You must determine and implement a method of verifying the validity of the kubelet serving certificate requests and approving them.

## Recording the subscription and tenant IDs

The installation program requires the subscription and tenant IDs that are associated with your Azure account. You can use the Azure CLI to gather this information.

* You have installed or updated the Azure CLI.

1. Log in to the Azure CLI by running the following command:

```terminal
$ az login
```

2. Ensure that you are using the right subscription:
1. View a list of available subscriptions by running the following command:

```terminal
$ az account list --refresh
```

Example output

```terminal
[
  {
    "cloudName": "AzureCloud",
    "id": "8xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "isDefault": true,
    "name": "Subscription Name 1",
    "state": "Enabled",
    "tenantId": "6xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "user": {
      "name": "you@example.com",
      "type": "user"
    }
  },
  {
    "cloudName": "AzureCloud",
    "id": "9xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "isDefault": false,
    "name": "Subscription Name 2",
    "state": "Enabled",
    "tenantId": "7xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "user": {
      "name": "you2@example.com",
      "type": "user"
    }
  }
]
```

2. View the details of the active account, and confirm that this is the subscription you want to use, by running the following command:

```terminal
$ az account show
```

Example output

```terminal
{
  "environmentName": "AzureCloud",
  "id": "8xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "isDefault": true,
  "name": "Subscription Name 1",
  "state": "Enabled",
  "tenantId": "6xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "user": {
    "name": "you@example.com",
    "type": "user"
  }
}
```

3. If you are not using the right subscription:
1. Change the active subscription by running the following command:

```terminal
$ az account set -s <subscription_id>
```

2. Verify that you are using the subscription you need by running the following command:

```terminal
$ az account show
```

Example output

```terminal
{
  "environmentName": "AzureCloud",
  "id": "9xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "isDefault": true,
  "name": "Subscription Name 2",
  "state": "Enabled",
  "tenantId": "7xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "user": {
    "name": "you2@example.com",
    "type": "user"
  }
}
```

4. Record the id and tenantId parameter values from the output. You require these values to install an Red Hat OpenShift Container Platform cluster.

## Supported identities to access Azure resources

An Red Hat OpenShift Container Platform cluster requires an Azure identity to create and manage Azure resources. As such, you need one of the following types of identities to complete the installation:

* A service principal
* A system-assigned managed identity
* A user-assigned managed identity

## Required Azure permissions for user-provisioned infrastructure

The installation program requires access to an Azure service principal or managed identity with the necessary permissions to deploy the cluster and to maintain its daily operation. These permissions must be granted to the Azure subscription that is associated with the identity.

The following options are available to you:

* You can assign the identity the Contributor and User Access Administrator roles. Assigning these roles is the quickest way to grant all of the required permissions.

For more information about assigning roles, see the Azure documentation for managing access to Azure resources using the Azure portal.
* If your organization's security policies require a more restrictive set of permissions, you can create a custom role with the necessary permissions.

The following permissions are required for creating an Red Hat OpenShift Container Platform cluster on Microsoft Azure.

* Microsoft.Authorization/policies/audit/action
* Microsoft.Authorization/policies/auditIfNotExists/action
* Microsoft.Authorization/roleAssignments/read
* Microsoft.Authorization/roleAssignments/write

* Microsoft.Compute/images/read
* Microsoft.Compute/images/write
* Microsoft.Compute/images/delete
* Microsoft.Compute/availabilitySets/read
* Microsoft.Compute/disks/beginGetAccess/action
* Microsoft.Compute/disks/delete
* Microsoft.Compute/disks/read
* Microsoft.Compute/disks/write
* Microsoft.Compute/galleries/images/read
* Microsoft.Compute/galleries/images/versions/read
* Microsoft.Compute/galleries/images/versions/write
* Microsoft.Compute/galleries/images/write
* Microsoft.Compute/galleries/read
* Microsoft.Compute/galleries/write
* Microsoft.Compute/snapshots/read
* Microsoft.Compute/snapshots/write
* Microsoft.Compute/snapshots/delete
* Microsoft.Compute/virtualMachines/delete
* Microsoft.Compute/virtualMachines/powerOff/action
* Microsoft.Compute/virtualMachines/read
* Microsoft.Compute/virtualMachines/write
* Microsoft.Compute/virtualMachines/deallocate/action

* Microsoft.ManagedIdentity/userAssignedIdentities/assign/action
* Microsoft.ManagedIdentity/userAssignedIdentities/read
* Microsoft.ManagedIdentity/userAssignedIdentities/write

* Microsoft.Network/dnsZones/A/write
* Microsoft.Network/dnsZones/CNAME/write
* Microsoft.Network/dnszones/CNAME/read
* Microsoft.Network/dnszones/read
* Microsoft.Network/loadBalancers/backendAddressPools/join/action
* Microsoft.Network/loadBalancers/backendAddressPools/read
* Microsoft.Network/loadBalancers/backendAddressPools/write
* Microsoft.Network/loadBalancers/read
* Microsoft.Network/loadBalancers/write
* Microsoft.Network/networkInterfaces/delete
* Microsoft.Network/networkInterfaces/join/action
* Microsoft.Network/networkInterfaces/read
* Microsoft.Network/networkInterfaces/write
* Microsoft.Network/networkSecurityGroups/join/action
* Microsoft.Network/networkSecurityGroups/read
* Microsoft.Network/networkSecurityGroups/securityRules/delete
* Microsoft.Network/networkSecurityGroups/securityRules/read
* Microsoft.Network/networkSecurityGroups/securityRules/write
* Microsoft.Network/networkSecurityGroups/write
* Microsoft.Network/privateDnsZones/A/read
* Microsoft.Network/privateDnsZones/A/write
* Microsoft.Network/privateDnsZones/A/delete
* Microsoft.Network/privateDnsZones/SOA/read
* Microsoft.Network/privateDnsZones/read
* Microsoft.Network/privateDnsZones/virtualNetworkLinks/read
* Microsoft.Network/privateDnsZones/virtualNetworkLinks/write
* Microsoft.Network/privateDnsZones/write
* Microsoft.Network/publicIPAddresses/delete
* Microsoft.Network/publicIPAddresses/join/action
* Microsoft.Network/publicIPAddresses/read
* Microsoft.Network/publicIPAddresses/write
* Microsoft.Network/virtualNetworks/join/action
* Microsoft.Network/virtualNetworks/read
* Microsoft.Network/virtualNetworks/subnets/join/action
* Microsoft.Network/virtualNetworks/subnets/read
* Microsoft.Network/virtualNetworks/subnets/write
* Microsoft.Network/virtualNetworks/write

* Microsoft.Resourcehealth/healthevent/Activated/action
* Microsoft.Resourcehealth/healthevent/InProgress/action
* Microsoft.Resourcehealth/healthevent/Pending/action
* Microsoft.Resourcehealth/healthevent/Resolved/action
* Microsoft.Resourcehealth/healthevent/Updated/action

* Microsoft.Resources/subscriptions/resourceGroups/read
* Microsoft.Resources/subscriptions/resourcegroups/write

* Microsoft.Resources/tags/write

* Microsoft.Storage/storageAccounts/blobServices/read
* Microsoft.Storage/storageAccounts/blobServices/containers/write
* Microsoft.Storage/storageAccounts/fileServices/read
* Microsoft.Storage/storageAccounts/fileServices/shares/read
* Microsoft.Storage/storageAccounts/fileServices/shares/write
* Microsoft.Storage/storageAccounts/fileServices/shares/delete
* Microsoft.Storage/storageAccounts/listKeys/action
* Microsoft.Storage/storageAccounts/read
* Microsoft.Storage/storageAccounts/write

* Microsoft.Resources/deployments/read
* Microsoft.Resources/deployments/write
* Microsoft.Resources/deployments/validate/action
* Microsoft.Resources/deployments/operationstatuses/read

* Microsoft.Compute/availabilitySets/delete
* Microsoft.Compute/availabilitySets/write

* Microsoft.MarketplaceOrdering/offertypes/publishers/offers/plans/agreements/read
* Microsoft.MarketplaceOrdering/offertypes/publishers/offers/plans/agreements/write

* Microsoft.Compute/diskEncryptionSets/read
* Microsoft.Compute/diskEncryptionSets/write
* Microsoft.Compute/diskEncryptionSets/delete
* Microsoft.KeyVault/vaults/read
* Microsoft.KeyVault/vaults/write
* Microsoft.KeyVault/vaults/delete
* Microsoft.KeyVault/vaults/deploy/action
* Microsoft.KeyVault/vaults/keys/read
* Microsoft.KeyVault/vaults/keys/write
* Microsoft.Features/providers/features/register/action

The following permissions are required for deleting an Red Hat OpenShift Container Platform cluster on Microsoft Azure.

* Microsoft.Authorization/roleAssignments/delete

* Microsoft.Compute/disks/delete
* Microsoft.Compute/galleries/delete
* Microsoft.Compute/galleries/images/delete
* Microsoft.Compute/galleries/images/versions/delete
* Microsoft.Compute/virtualMachines/delete
* Microsoft.Compute/images/delete

* Microsoft.ManagedIdentity/userAssignedIdentities/delete

* Microsoft.Network/dnszones/read
* Microsoft.Network/dnsZones/A/read
* Microsoft.Network/dnsZones/A/delete
* Microsoft.Network/dnsZones/CNAME/read
* Microsoft.Network/dnsZones/CNAME/delete
* Microsoft.Network/loadBalancers/delete
* Microsoft.Network/networkInterfaces/delete
* Microsoft.Network/networkSecurityGroups/delete
* Microsoft.Network/privateDnsZones/read
* Microsoft.Network/privateDnsZones/A/read
* Microsoft.Network/privateDnsZones/delete
* Microsoft.Network/privateDnsZones/virtualNetworkLinks/delete
* Microsoft.Network/publicIPAddresses/delete
* Microsoft.Network/virtualNetworks/delete

* Microsoft.Resourcehealth/healthevent/Activated/action
* Microsoft.Resourcehealth/healthevent/Resolved/action
* Microsoft.Resourcehealth/healthevent/Updated/action

* Microsoft.Resources/subscriptions/resourcegroups/delete

* Microsoft.Storage/storageAccounts/delete
* Microsoft.Storage/storageAccounts/listKeys/action


[NOTE]
----
To install Red Hat OpenShift Container Platform on Azure, you must scope the permissions related to resource group creation to your subscription. After the resource group is created, you can scope the rest of the permissions to the created resource group. If the public DNS zone is present in a different resource group, then the network DNS zone related permissions must always be applied to your subscription.
You can scope all the permissions to your subscription when deleting an Red Hat OpenShift Container Platform cluster.
----

## Using Azure managed identities

The installation program requires an Azure identity to complete the installation. You can use either a system-assigned or user-assigned managed identity.

If you are unable to use a managed identity, you can use a service principal.

1. If you are using a system-assigned managed identity, enable it on the virtual machine that you will run the installation program from.
2. If you are using a user-assigned managed identity:
1. Assign it to the virtual machine that you will run the installation program from.
2. Record its client ID. You require this value when installing the cluster.

For more information about viewing the details of a user-assigned managed identity, see the Microsoft Azure documentation for listing user-assigned managed identities.
3. Verify that the required permissions are assigned to the managed identity.

## Creating a service principal

The installation program requires an Azure identity to complete the installation. You can use a service principal.

If you are unable to use a service principal, you can use a managed identity.

* You have installed or updated the Azure CLI.
* You have an Azure subscription ID.
* If you are not going to assign the Contributor and User Administrator Access roles to the service principal, you have created a custom role with the required Azure permissions.

1. Create the service principal for your account by running the following command:

```terminal
$ az ad sp create-for-rbac --role <role_name> \1
     --name <service_principal> \2
     --scopes /subscriptions/<subscription_id> 3
```

Defines the role name. You can use the Contributor role, or you can specify a custom role which contains the necessary permissions.
Defines the service principal name.
Specifies the subscription ID.
Example output

```terminal
Creating 'Contributor' role assignment under scope '/subscriptions/<subscription_id>'
The output includes credentials that you must protect. Be sure that you do not
include these credentials in your code or check the credentials into your source
control. For more information, see https://aka.ms/azadsp-cli
{
  "appId": "axxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "displayName": <service_principal>",
  "password": "00000000-0000-0000-0000-000000000000",
  "tenantId": "8xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
}
```

2. Record the values of the appId and password parameters from the output. You require these values when installing the cluster.
3. If you applied the Contributor role to your service principal, assign the User Administrator Access role by running the following command:

```terminal
$ az role assignment create --role "User Access Administrator" \
  --assignee-object-id $(az ad sp show --id <appId> --query id -o tsv) 1
  --scope /subscriptions/<subscription_id> 2
```

Specify the appId parameter value for your service principal.
Specifies the subscription ID.

* For more information about CCO modes, see About the Cloud Credential Operator.

## Supported Azure regions

The installation program dynamically generates the list of available Microsoft Azure regions based on your subscription.

## Supported Azure public regions

* australiacentral (Australia Central)
* australiaeast (Australia East)
* australiasoutheast (Australia South East)
* brazilsouth (Brazil South)
* canadacentral (Canada Central)
* canadaeast (Canada East)
* centralindia (Central India)
* centralus (Central US)
* eastasia (East Asia)
* eastus (East US)
* eastus2 (East US 2)
* francecentral (France Central)
* germanywestcentral (Germany West Central)
* israelcentral (Israel Central)
* italynorth (Italy North)
* japaneast (Japan East)
* japanwest (Japan West)
* koreacentral (Korea Central)
* koreasouth (Korea South)
* mexicocentral (Mexico Central)
* newzealandnorth (New Zealand North)
* northcentralus (North Central US)
* northeurope (North Europe)
* norwayeast (Norway East)
* polandcentral (Poland Central)
* qatarcentral (Qatar Central)
* southafricanorth (South Africa North)
* southcentralus (South Central US)
* southeastasia (Southeast Asia)
* southindia (South India)
* spaincentral (Spain Central)
* swedencentral (Sweden Central)
* switzerlandnorth (Switzerland North)
* uaenorth (UAE North)
* uksouth (UK South)
* ukwest (UK West)
* westcentralus (West Central US)
* westeurope (West Europe)
* westindia (West India)
* westus (West US)
* westus2 (West US 2)
* westus3 (West US 3)

## Supported Azure Government regions

Support for the following Microsoft Azure Government (MAG) regions was added in Red Hat OpenShift Container Platform version 4.6:

* usgovtexas (US Gov Texas)
* usgovvirginia (US Gov Virginia)

You can reference all available MAG regions in the Azure documentation. Other provided MAG regions are expected to work with Red Hat OpenShift Container Platform, but have not been tested.

# Requirements for a cluster with user-provisioned infrastructure

For a cluster that contains user-provisioned infrastructure, you must deploy all
of the required machines.

This section describes the requirements for deploying Red Hat OpenShift Container Platform on user-provisioned infrastructure.

## Required machines for cluster installation

The smallest Red Hat OpenShift Container Platform clusters require the following hosts:




[IMPORTANT]
----
To maintain high availability of your cluster, use separate physical hosts for
these cluster machines.
----

The bootstrap and control plane machines must use Red Hat Enterprise Linux CoreOS (RHCOS) as the operating system. However, the compute machines can choose between Red Hat Enterprise Linux CoreOS (RHCOS), Red Hat Enterprise Linux (RHEL) 8.6 and later.

Note that RHCOS is based on Red Hat Enterprise Linux (RHEL) 9.2 and inherits all of its hardware certifications and requirements.
See Red Hat Enterprise Linux technology capabilities and limits.

## Minimum resource requirements for cluster installation

Each cluster machine must meet the following minimum requirements:



1. One vCPU is equivalent to one physical core when simultaneous multithreading (SMT), or Hyper-Threading, is not enabled. When enabled, use the following formula to calculate the corresponding ratio: (threads per core × cores) × sockets = vCPUs.
2. Red Hat OpenShift Container Platform and Kubernetes are sensitive to disk performance, and faster storage is recommended, particularly for etcd on the control plane nodes which require a 10 ms p99 fsync duration. Note that on many cloud platforms, storage size and IOPS scale together, so you might need to over-allocate storage volume to obtain sufficient performance.
3. As with all user-provisioned installations, if you choose to use RHEL compute machines in your cluster, you take responsibility for all operating system life cycle management and maintenance, including performing system updates, applying patches, and completing all other required tasks. Use of RHEL 7 compute machines is deprecated and has been removed in Red Hat OpenShift Container Platform 4.10 and later.


[NOTE]
----
As of Red Hat OpenShift Container Platform version 4.13, RHCOS is based on RHEL version 9.2, which updates the micro-architecture requirements. The following list contains the minimum instruction set architectures (ISA) that each architecture requires:
* x86-64 architecture requires x86-64-v2 ISA
* ARM64 architecture requires ARMv8.0-A ISA
* IBM Power architecture requires Power 9 ISA
* s390x architecture requires z14 ISA
For more information, see Architectures (RHEL documentation).
----


[IMPORTANT]
----
You are required to use Azure virtual machines that have the premiumIO parameter set to true.
----

If an instance type for your platform meets the minimum requirements for cluster machines, it is supported to use in Red Hat OpenShift Container Platform.

* Optimizing storage

## Tested instance types for Azure

The following Microsoft Azure instance types have been tested with Red Hat OpenShift Container Platform.

https://raw.githubusercontent.com/openshift/installer/release-4.15/docs/user/azure/tested_instance_types_x86_64.md

## Tested instance types for Azure on 64-bit ARM infrastructures

The following Microsoft Azure ARM64 instance types have been tested with Red Hat OpenShift Container Platform.

https://raw.githubusercontent.com/openshift/installer/release-4.15/docs/user/azure/tested_instance_types_aarch64.md

# Using the Azure Marketplace offering

Using the Azure Marketplace offering lets you deploy an Red Hat OpenShift Container Platform cluster, which is billed on pay-per-use basis (hourly, per core) through Azure, while still being supported directly by Red&#160;Hat.

To deploy an Red Hat OpenShift Container Platform cluster using the Azure Marketplace offering, you must first obtain the Azure Marketplace image. The installation program uses this image to deploy worker nodes. When obtaining your image, consider the following:

* While the images are the same, the Azure Marketplace publisher is different depending on your region. If you are located in North America, specify redhat as the publisher. If you are located in EMEA, specify redhat-limited as the publisher.
* The offer includes a rh-ocp-worker SKU and a rh-ocp-worker-gen1 SKU. The rh-ocp-worker SKU represents a Hyper-V generation version 2 VM image. The default instance types used in Red Hat OpenShift Container Platform are version 2 compatible. If you plan to use an instance type that is only version 1 compatible, use the image associated with the rh-ocp-worker-gen1 SKU. The rh-ocp-worker-gen1 SKU represents a Hyper-V version 1 VM image.


[IMPORTANT]
----
Installing images with the Azure marketplace is not supported on clusters with 64-bit ARM instances.
You should only modify the RHCOS image for compute machines to use {platform-abbreviation} Marketplace image. Control plane machines and infrastructure nodes do not require an Red Hat OpenShift Container Platform subscription and use the public RHCOS default image by default, which does not incur subscription costs on your {platform-abbreviation-short} bill. Therefore, you should not modify the cluster default boot image or the control plane boot images. Applying the {platform-abbreviation-short} Marketplace image to them will incur additional licensing costs that cannot be recovered.
----

* You have installed the Azure CLI client (az).
* Your Azure account is entitled for the offer and you have logged into this account with the Azure CLI client.

1. Display all of the available Red Hat OpenShift Container Platform images by running one of the following commands:
* North America:

```terminal
$  az vm image list --all --offer rh-ocp-worker --publisher redhat -o table
```

Example output

```terminal
Offer          Publisher       Sku                 Urn                                                             Version
-------------  --------------  ------------------  --------------------------------------------------------------  -----------------
rh-ocp-worker  RedHat          rh-ocp-worker       RedHat:rh-ocp-worker:rh-ocp-worker:4.15.2024072409              4.15.2024072409
rh-ocp-worker  RedHat          rh-ocp-worker-gen1  RedHat:rh-ocp-worker:rh-ocp-worker-gen1:4.15.2024072409         4.15.2024072409
```

* EMEA:

```terminal
$  az vm image list --all --offer rh-ocp-worker --publisher redhat-limited -o table
```

Example output

```terminal
Offer          Publisher       Sku                 Urn                                                                     Version
-------------  --------------  ------------------  --------------------------------------------------------------          -----------------
rh-ocp-worker  redhat-limited  rh-ocp-worker       redhat-limited:rh-ocp-worker:rh-ocp-worker:4.15.2024072409              4.15.2024072409
rh-ocp-worker  redhat-limited  rh-ocp-worker-gen1  redhat-limited:rh-ocp-worker:rh-ocp-worker-gen1:4.15.2024072409         4.15.2024072409
```

[NOTE]
----
Regardless of the version of Red Hat OpenShift Container Platform that you install, the correct version of the Azure Marketplace image to use is 4.13. If required, your VMs are automatically upgraded as part of the installation process.
----
2. Inspect the image for your offer by running one of the following commands:
* North America:

```terminal
$ az vm image show --urn redhat:rh-ocp-worker:rh-ocp-worker:<version>
```

* EMEA:

```terminal
$ az vm image show --urn redhat-limited:rh-ocp-worker:rh-ocp-worker:<version>
```

3. Review the terms of the offer by running one of the following commands:
* North America:

```terminal
$ az vm image terms show --urn redhat:rh-ocp-worker:rh-ocp-worker:<version>
```

* EMEA:

```terminal
$ az vm image terms show --urn redhat-limited:rh-ocp-worker:rh-ocp-worker:<version>
```

4. Accept the terms of the offering by running one of the following commands:
* North America:

```terminal
$ az vm image terms accept --urn redhat:rh-ocp-worker:rh-ocp-worker:<version>
```

* EMEA:

```terminal
$ az vm image terms accept --urn redhat-limited:rh-ocp-worker:rh-ocp-worker:<version>
```

5. Record the image details of your offer. If you use the Azure Resource Manager (ARM) template to deploy your worker nodes:
1. Update storageProfile.imageReference by deleting the id parameter and adding the offer, publisher, sku, and version parameters by using the values from your offer.
2. Specify a plan for the virtual machines (VMs).
Example 06_workers.json ARM template with an updated storageProfile.imageReference object and a specified plan

```json
...
  "plan" : {
    "name": "rh-ocp-worker",
    "product": "rh-ocp-worker",
    "publisher": "redhat"
  },
  "dependsOn" : [
    "[concat('Microsoft.Network/networkInterfaces/', concat(variables('vmNames')[copyIndex()], '-nic'))]"
  ],
  "properties" : {
...
  "storageProfile": {
    "imageReference": {
    "offer": "rh-ocp-worker",
    "publisher": "redhat",
    "sku": "rh-ocp-worker",
    "version": "413.92.2023101700"
    }
    ...
   }
...
  }
```


# Obtaining the installation program

Before you install Red Hat OpenShift Container Platform, download the installation file on
 the host you are using for installation.

* You have a computer that runs Linux or macOS, with at least 1.2 GB of local disk space.

1. Go to the Cluster Type page on the Red Hat Hybrid Cloud Console. If you have a Red Hat account, log in with your credentials. If you do not, create an account.

[TIP]
----
You can also download the binaries for a specific Red Hat OpenShift Container Platform release.
----
2. Select your infrastructure provider from the Run it yourself section of the page.
3. Select your host operating system and architecture from the dropdown menus under OpenShift Installer and click Download Installer.
4. Place the downloaded file in the directory where you want to store the installation configuration files.

[IMPORTANT]
----
* The installation program creates several files on the computer that you use to install your cluster. You must keep the installation program and the files that the installation program creates after you finish installing the cluster. Both of the files are required to delete the cluster.
* Deleting the files created by the installation program does not remove your cluster, even if the cluster failed during installation. To remove your cluster, complete the Red Hat OpenShift Container Platform uninstallation procedures for your specific cloud provider.
----
5. Extract the installation program. For example, on a computer that uses a Linux operating system, run the following command:

```terminal
$ tar -xvf openshift-install-linux.tar.gz
```

6. Download your installation https://console.redhat.com/openshift/install/pull-secret [pull secret from Red Hat OpenShift Cluster Manager]. This pull secret allows you to authenticate with the services that are provided by the included authorities, including Quay.io, which serves the container images for Red Hat OpenShift Container Platform components.


[TIP]
----
Alternatively, you can retrieve the installation program from the Red Hat Customer Portal, where you can specify a version of the installation program to download.
However, you must have an active subscription to access this page.
----

# Generating a key pair for cluster node SSH access

During an Red Hat OpenShift Container Platform installation, you can provide an SSH public key to the installation program. The key is passed to the Red Hat Enterprise Linux CoreOS (RHCOS) nodes through their Ignition config files and is used to authenticate SSH access to the nodes. The key is added to the ~/.ssh/authorized_keys list for the core user on each node, which enables password-less authentication.

After the key is passed to the nodes, you can use the key pair to SSH in to the RHCOS nodes as the user core. To access the nodes through SSH, the private key identity must be managed by SSH for your local user.

If you want to SSH in to your cluster nodes to perform installation debugging or disaster recovery, you must provide the SSH public key during the installation process. The ./openshift-install gather command also requires the SSH public key to be in place on the cluster nodes.


[IMPORTANT]
----
Do not skip this procedure in production environments, where disaster recovery and debugging is required.
----


[NOTE]
----
You must use a local key, not one that you configured with platform-specific
approaches such as
AWS key pairs.
----

1. If you do not have an existing SSH key pair on your local machine to use for authentication onto your cluster nodes, create one. For example, on a computer that uses a Linux operating system, run the following command:

```terminal
$ ssh-keygen -t ed25519 -N '' -f <path>/<file_name> 1
```

Specify the path and file name, such as ~/.ssh/id_ed25519, of the new SSH key. If you have an existing key pair, ensure your public key is in the your ~/.ssh directory.

[NOTE]
----
If you plan to install an Red Hat OpenShift Container Platform cluster that uses the RHEL cryptographic libraries that have been submitted to NIST for FIPS 140-2/140-3 Validation on only the x86_64, ppc64le, and s390x architectures, do not create a key that uses the ed25519 algorithm. Instead, create a key that uses the rsa or ecdsa algorithm.
----
2. View the public SSH key:

```terminal
$ cat <path>/<file_name>.pub
```


For example, run the following to view the ~/.ssh/id_ed25519.pub public key:

```terminal
$ cat ~/.ssh/id_ed25519.pub
```

3. Add the SSH private key identity to the SSH agent for your local user, if it has not already been added. SSH agent management of the key is required for password-less SSH authentication onto your cluster nodes, or if you want to use the ./openshift-install gather command.

[NOTE]
----
On some distributions, default SSH private key identities such as ~/.ssh/id_rsa and ~/.ssh/id_dsa are managed automatically.
----
1. If the ssh-agent process is not already running for your local user, start it as a background task:

```terminal
$ eval "$(ssh-agent -s)"
```

Example output

```terminal
Agent pid 31874
```


[NOTE]
----
If your cluster is in FIPS mode, only use FIPS-compliant algorithms to generate the SSH key. The key must be either RSA or ECDSA.
----
4. Add your SSH private key to the ssh-agent:

```terminal
$ ssh-add <path>/<file_name> 1
```

Specify the path and file name for your SSH private key, such as ~/.ssh/id_ed25519
Example output

```terminal
Identity added: /home/<you>/<path>/<file_name> (<computer_name>)
```


* When you install Red Hat OpenShift Container Platform, provide the SSH public key to the installation program.
If you install a cluster on infrastructure that you provision, you must provide the key to the installation program.

# Creating the installation files for Azure

To install Red Hat OpenShift Container Platform on {cp-first} using user-provisioned infrastructure, you must generate the files that the installation program needs to deploy your cluster and modify them so that the cluster creates only the machines that it will use. You generate and customize the install-config.yaml file, Kubernetes manifests, and Ignition config files. You also have the option to first set up a separate var partition during the preparation phases of installation.

## Optional: Creating a separate /var partition

It is recommended that disk partitioning for Red Hat OpenShift Container Platform be left to the installer. However, there are cases where you might want to create separate partitions in a part of the filesystem that you expect to grow.

Red Hat OpenShift Container Platform supports the addition of a single partition to attach storage to either the /var partition or a subdirectory of /var. For example:

* /var/lib/containers: Holds container-related content that can grow as more images and containers are added to a system.
* /var/lib/etcd: Holds data that you might want to keep separate for purposes such as performance optimization of etcd storage.
* /var: Holds data that you might want to keep separate for purposes such as auditing.

Storing the contents of a /var directory separately makes it easier to grow storage for those areas as needed and reinstall Red Hat OpenShift Container Platform at a later date and keep that data intact. With this method, you will not have to pull all your containers again, nor will you have to copy massive log files when you update systems.

Because /var must be in place before a fresh installation of Red Hat Enterprise Linux CoreOS (RHCOS), the following procedure sets up the separate /var partition by creating a machine config manifest that is inserted during the openshift-install preparation phases of an Red Hat OpenShift Container Platform installation.


[IMPORTANT]
----
If you follow the steps to create a separate /var partition in this procedure, it is not necessary to create the Kubernetes manifest and Ignition config files again as described later in this section.
----

1. Create a directory to hold the Red Hat OpenShift Container Platform installation files:

```terminal
$ mkdir $HOME/clusterconfig
```

2. Run openshift-install to create a set of files in the manifest and openshift subdirectories. Answer the system questions as you are prompted:

```terminal
$ openshift-install create manifests --dir $HOME/clusterconfig
```

Example output

```terminal
? SSH Public Key ...
INFO Credentials loaded from the "myprofile" profile in file "/home/myuser/.aws/credentials"
INFO Consuming Install Config from target directory
INFO Manifests created in: $HOME/clusterconfig/manifests and $HOME/clusterconfig/openshift
```

3. Optional: Confirm that the installation program created manifests in the clusterconfig/openshift directory:

```terminal
$ ls $HOME/clusterconfig/openshift/
```

Example output

```terminal
99_kubeadmin-password-secret.yaml
99_openshift-cluster-api_master-machines-0.yaml
99_openshift-cluster-api_master-machines-1.yaml
99_openshift-cluster-api_master-machines-2.yaml
...
```

4. Create a Butane config that configures the additional partition. For example, name the file $HOME/clusterconfig/98-var-partition.bu, change the disk device name to the name of the storage device on the worker systems, and set the storage size as appropriate. This example places the /var directory on a separate partition:

```yaml
variant: openshift
version: 4.15.0
metadata:
  labels:
    machineconfiguration.openshift.io/role: worker
  name: 98-var-partition
storage:
  disks:
  - device: /dev/disk/by-id/<device_name> 1
    partitions:
    - label: var
      start_mib: <partition_start_offset> 2
      size_mib: <partition_size> 3
      number: 5
  filesystems:
    - device: /dev/disk/by-partlabel/var
      path: /var
      format: xfs
      mount_options: [defaults, prjquota] 4
      with_mount_unit: true
```

The storage device name of the disk that you want to partition.
When adding a data partition to the boot disk, a minimum value of 25000 MiB (Mebibytes) is recommended. The root file system is automatically resized to fill all available space up to the specified offset. If no value is specified, or if the specified value is smaller than the recommended minimum, the resulting root file system will be too small, and future reinstalls of RHCOS might overwrite the beginning of the data partition.
The size of the data partition in mebibytes.
The prjquota mount option must be enabled for filesystems used for container storage.

[NOTE]
----
When creating a separate /var partition, you cannot use different instance types for worker nodes, if the different instance types do not have the same device name.
----
5. Create a manifest from the Butane config and save it to the clusterconfig/openshift directory. For example, run the following command:

```terminal
$ butane $HOME/clusterconfig/98-var-partition.bu -o $HOME/clusterconfig/openshift/98-var-partition.yaml
```

6. Run openshift-install again to create Ignition configs from a set of files in the manifest and openshift subdirectories:

```terminal
$ openshift-install create ignition-configs --dir $HOME/clusterconfig
$ ls $HOME/clusterconfig/
auth  bootstrap.ign  master.ign  metadata.json  worker.ign
```


Now you can use the Ignition config files as input to the installation procedures to install Red Hat Enterprise Linux CoreOS (RHCOS) systems.

## Creating the installation configuration file

You can customize the Red Hat OpenShift Container Platform cluster you install on
Microsoft Azure.

* You have the Red Hat OpenShift Container Platform installation program and the pull secret for your cluster.
* You have an Azure subscription ID and tenant ID.
* If you are installing the cluster using a service principal, you have its application ID and password.
* If you are installing the cluster using a system-assigned managed identity, you have enabled it on the virtual machine that you will run the installation program from.
* If you are installing the cluster using a user-assigned managed identity, you have met these prerequisites:
* You have its client ID.
* You have assigned it to the virtual machine that you will run the installation program from.

1. Optional: If you have run the installation program on this computer before, and want to use an alternative service principal or managed identity, go to the ~/.azure/ directory and delete the osServicePrincipal.json configuration file.

Deleting this file prevents the installation program from automatically reusing subscription and authentication values from a previous installation.
2. Create the install-config.yaml file.
1. Change to the directory that contains the installation program and run the following command:

```terminal
$ ./openshift-install create install-config --dir <installation_directory> 1
```

For <installation_directory>, specify the directory name to store the
files that the installation program creates.

When specifying the directory:
* Verify that the directory has the execute permission. This permission is required to run Terraform binaries under the installation directory.
* Use an empty directory. Some installation assets, such as bootstrap X.509 certificates, have short expiration intervals, therefore you must not reuse an installation directory. If you want to reuse individual files from another cluster installation, you can copy them into your directory. However, the file names for the installation assets might change between releases. Use caution when copying installation files from an earlier Red Hat OpenShift Container Platform version.
2. At the prompts, provide the configuration details for your cloud:
1. Optional: Select an SSH key to use to access your cluster machines.

[NOTE]
----
For production Red Hat OpenShift Container Platform clusters on which you want to perform installation debugging or disaster recovery, specify an SSH key that your ssh-agent process uses.
----
2. Select azure as the platform to target.

If the installation program cannot locate the osServicePrincipal.json configuration file from a previous installation, you are prompted for Azure subscription and authentication values.
3. Enter the following Azure parameter values for your subscription:
* azure subscription id: Enter the subscription ID to use for the cluster.
* azure tenant id: Enter the tenant ID.
4. Depending on the Azure identity you are using to deploy the cluster, do one of the following when prompted for the azure service principal client id:
* If you are using a service principal, enter its application ID.
* If you are using a system-assigned managed identity, leave this value blank.
* If you are using a user-assigned managed identity, specify its client ID.
5. Depending on the Azure identity you are using to deploy the cluster, do one of the following when prompted for the azure service principal client secret:
* If you are using a service principal, enter its password.
* If you are using a system-assigned managed identity, leave this value blank.
* If you are using a user-assigned managed identity, leave this value blank.
6. Select the region to deploy the cluster to.
7. Select the base domain to deploy the cluster to. The base domain corresponds
to the Azure DNS Zone that you created for your cluster.
8. Enter a descriptive name for your cluster.

[IMPORTANT]
----
All Azure resources that are available through public endpoints are subject to resource name restrictions, and you cannot create resources that use certain terms. For a list of terms that Azure restricts, see Resolve reserved resource name errors in the Azure documentation.
----
3. Modify the install-config.yaml file. You can find more information about the available parameters in the "Installation configuration parameters" section.

[NOTE]
----
If you are installing a three-node cluster, be sure to set the compute.replicas parameter to 0. This ensures that the cluster's control planes are schedulable. For more information, see "Installing a three-node cluster on Azure".
----
4. Back up the install-config.yaml file so that you can use
it to install multiple clusters.

[IMPORTANT]
----
The install-config.yaml file is consumed during the installation process. If
you want to reuse the file, you must back it up now.
----

If previously not detected, the installation program creates an osServicePrincipal.json configuration file and stores this file in the ~/.azure/ directory on your computer. This ensures that the installation program can load the profile when it is creating an Red Hat OpenShift Container Platform cluster on the target platform.

## Configuring the cluster-wide proxy during installation

Production environments can deny direct access to the internet and instead have
an HTTP or HTTPS proxy available. You can configure a new Red Hat OpenShift Container Platform
cluster to use a proxy by configuring the proxy settings in the
install-config.yaml file.

* You have an existing install-config.yaml file.
* You reviewed the sites that your cluster requires access to and determined whether any of them need to bypass the proxy. By default, all cluster egress traffic is proxied, including calls to hosting cloud provider APIs. You added sites to the Proxy object's spec.noProxy field to bypass the proxy if necessary.

[NOTE]
----
The Proxy object status.noProxy field is populated with the values of the networking.machineNetwork[].cidr, networking.clusterNetwork[].cidr, and networking.serviceNetwork[] fields from your installation configuration.
For installations on Amazon Web Services (AWS), Google Cloud Platform (GCP), Microsoft Azure, and Red Hat OpenStack Platform (RHOSP), the Proxy object status.noProxy field is also populated with the instance metadata endpoint (169.254.169.254).
----

1. Edit your install-config.yaml file and add the proxy settings. For example:

```yaml
apiVersion: v1
baseDomain: my.domain.com
proxy:
  httpProxy: http://<username>:<pswd>@<ip>:<port> 1
  httpsProxy: https://<username>:<pswd>@<ip>:<port> 2
  noProxy: example.com 3
additionalTrustBundle: | 4
    -----BEGIN CERTIFICATE-----
    <MY_TRUSTED_CA_CERT>
    -----END CERTIFICATE-----
additionalTrustBundlePolicy: <policy_to_add_additionalTrustBundle> 5
```

A proxy URL to use for creating HTTP connections outside the cluster. The
URL scheme must be http.
A proxy URL to use for creating HTTPS connections outside the cluster.
A comma-separated list of destination domain names, IP addresses, or other network CIDRs to exclude from proxying. Preface a domain with . to match subdomains only. For example, .y.com matches x.y.com, but not y.com. Use * to bypass the proxy for all destinations.
If provided, the installation program generates a config map that is named user-ca-bundle in
the openshift-config namespace that contains one or more additional CA
certificates that are required for proxying HTTPS connections. The Cluster Network
Operator then creates a trusted-ca-bundle config map that merges these contents
with the Red Hat Enterprise Linux CoreOS (RHCOS) trust bundle, and this config map is referenced in the trustedCA field of the Proxy object. The additionalTrustBundle field is required unless
the proxy's identity certificate is signed by an authority from the RHCOS trust
bundle.
Optional: The policy to determine the configuration of the Proxy object to reference the user-ca-bundle config map in the trustedCA field. The allowed values are Proxyonly and Always. Use Proxyonly to reference the user-ca-bundle config map only when http/https proxy is configured. Use Always to always reference the user-ca-bundle config map. The default value is Proxyonly.

[NOTE]
----
The installation program does not support the proxy readinessEndpoints field.
----

[NOTE]
----
If the installer times out, restart and then complete the deployment by using the wait-for command of the installer. For example:

```terminal
$ ./openshift-install wait-for install-complete --log-level debug
```

----
2. Save the file and reference it when installing Red Hat OpenShift Container Platform.

The installation program creates a cluster-wide proxy that is named cluster that uses the proxy
settings in the provided install-config.yaml file. If no proxy settings are
provided, a cluster Proxy object is still created, but it will have a nil
spec.


[NOTE]
----
Only the Proxy object named cluster is supported, and no additional
proxies can be created.
----

## Exporting common variables for ARM templates

You must export a common set of variables that are used with the provided Azure
Resource Manager (ARM) templates used to assist in completing a user-provided
infrastructure install on Microsoft {cp}.


[NOTE]
----
Specific ARM templates can also require additional exported variables, which are
detailed in their related procedures.
----

* Obtain the Red Hat OpenShift Container Platform installation program and the pull secret for your cluster.

1. Export common variables found in the install-config.yaml to be used by the
provided ARM templates:

```terminal
$ export CLUSTER_NAME=<cluster_name>1
$ export AZURE_REGION=<azure_region>2
$ export SSH_KEY=<ssh_key>3
$ export BASE_DOMAIN=<base_domain>4
$ export BASE_DOMAIN_RESOURCE_GROUP=<base_domain_resource_group>5
```

The value of the .metadata.name attribute from the install-config.yaml file.
The region to deploy the cluster into, for example centralus. This is the value of the .platform.azure.region attribute from the install-config.yaml file.
The SSH RSA public key file as a string. You must enclose the SSH key in quotes since it contains spaces. This is the value of the .sshKey attribute from the install-config.yaml file.
The base domain to deploy the cluster to. The base domain corresponds to the public DNS zone that you created for your cluster. This is the value of the .baseDomain attribute from the install-config.yaml file.
The resource group where the public DNS zone exists. This is the value of the .platform.azure.baseDomainResourceGroupName attribute from the install-config.yaml file.

For example:

```terminal
$ export CLUSTER_NAME=test-cluster
$ export AZURE_REGION=centralus
$ export SSH_KEY="ssh-rsa xxx/xxx/xxx= user@email.com"
$ export BASE_DOMAIN=example.com
$ export BASE_DOMAIN_RESOURCE_GROUP=ocp-cluster
```

2. Export the kubeadmin credentials:

```terminal
$ export KUBECONFIG=<installation_directory>/auth/kubeconfig 1
```

For <installation_directory>, specify the path to the directory that you stored the installation files in.

## Creating the Kubernetes manifest and Ignition config files

Because you must modify some cluster definition files and manually start the cluster machines, you must generate the Kubernetes manifest and Ignition config files that the cluster needs to configure the machines.

The installation configuration file transforms into the Kubernetes manifests. The manifests wrap into the Ignition configuration files, which are later used to configure the cluster machines.


[IMPORTANT]
----
* The Ignition config files that the Red Hat OpenShift Container Platform installation program generates contain certificates that expire after 24 hours, which are then renewed at that time. If the cluster is shut down before renewing the certificates and the cluster is later restarted after the 24 hours have elapsed, the cluster automatically recovers the expired certificates. The exception is that you must manually approve the pending node-bootstrapper certificate signing requests (CSRs) to recover kubelet certificates. See the documentation for Recovering from expired control plane certificates for more information.
* It is recommended that you use Ignition config files within 12 hours after they are generated because the 24-hour certificate rotates from 16 to 22 hours after the cluster is installed. By using the Ignition config files within 12 hours, you can avoid installation failure if the certificate update runs during installation.
----

* You obtained the Red Hat OpenShift Container Platform installation program.
* You created the install-config.yaml installation configuration file.

1. Change to the directory that contains the Red Hat OpenShift Container Platform installation program and generate the Kubernetes manifests for the cluster:

```terminal
$ ./openshift-install create manifests --dir <installation_directory> 1
```

For <installation_directory>, specify the installation directory that
contains the install-config.yaml file you created.
2. Remove the Kubernetes manifest files that define the control plane machines:

```terminal
$ rm -f <installation_directory>/openshift/99_openshift-cluster-api_master-machines-*.yaml
```


By removing these files, you prevent the cluster from automatically generating control plane machines.
3. Remove the Kubernetes manifest files that define the control plane machine set:

```terminal
$ rm -f <installation_directory>/openshift/99_openshift-machine-api_master-control-plane-machine-set.yaml
```

4. Remove the Kubernetes manifest files that define the worker machines:

```terminal
$ rm -f <installation_directory>/openshift/99_openshift-cluster-api_worker-machineset-*.yaml
```


[IMPORTANT]
----
If you disabled the MachineAPI capability when installing a cluster on user-provisioned infrastructure, you must remove the Kubernetes manifest files that define the worker machines. Otherwise, your cluster fails to install.
----

Because you create and manage the worker machines yourself, you do not need to initialize these machines.

[WARNING]
----
If you are installing a three-node cluster, skip the following step to allow the control plane nodes to be schedulable.
----

[IMPORTANT]
----
When you configure control plane nodes from the default unschedulable to schedulable, additional subscriptions are required. This is because control plane nodes then become compute nodes.
----
5. Check that the mastersSchedulable parameter in the <installation_directory>/manifests/cluster-scheduler-02-config.yml Kubernetes manifest file is set to false. This setting prevents pods from being scheduled on the control plane machines:
1. Open the <installation_directory>/manifests/cluster-scheduler-02-config.yml file.
2. Locate the mastersSchedulable parameter and ensure that it is set to false.
3. Save and exit the file.
6. Optional: If you do not want
the Ingress Operator
to create DNS records on your behalf, remove the privateZone and publicZone
sections from the <installation_directory>/manifests/cluster-dns-02-config.yml DNS configuration file:

```yaml
apiVersion: config.openshift.io/v1
kind: DNS
metadata:
  creationTimestamp: null
  name: cluster
spec:
  baseDomain: example.openshift.com
  privateZone: 1
    id: mycluster-100419-private-zone
  publicZone: 1
    id: example.openshift.com
status: {}
```

Remove this section completely.

If you do so, you must add ingress DNS records manually in a later step.
7. When configuring Azure on user-provisioned infrastructure, you must export
some common variables defined in the manifest files to use later in the Azure
Resource Manager (ARM) templates:
1. Export the infrastructure ID by using the following command:

```terminal
$ export INFRA_ID=<infra_id> 1
```

The Red Hat OpenShift Container Platform cluster has been assigned an identifier (INFRA_ID) in the form of <cluster_name>-<random_string>. This will be used as the base name for most resources created using the provided ARM templates. This is the value of the .status.infrastructureName attribute from the manifests/cluster-infrastructure-02-config.yml file.
2. Export the resource group by using the following command:

```terminal
$ export RESOURCE_GROUP=<resource_group> 1
```

All resources created in this Azure deployment exists as part of a resource group. The resource group name is also based on the INFRA_ID, in the form of <cluster_name>-<random_string>-rg. This is the value of the .status.platformStatus.azure.resourceGroupName attribute from the manifests/cluster-infrastructure-02-config.yml file.
8. To create the Ignition configuration files, run the following command from the directory that contains the installation program:

```terminal
$ ./openshift-install create ignition-configs --dir <installation_directory> 1
```

For <installation_directory>, specify the same installation directory.

Ignition config files are created for the bootstrap, control plane, and compute nodes in the installation directory. The kubeadmin-password and kubeconfig files are created in the ./<installation_directory>/auth directory:

```
.
├── auth
│   ├── kubeadmin-password
│   └── kubeconfig
├── bootstrap.ign
├── master.ign
├── metadata.json
└── worker.ign
```


# Creating the Azure resource group

You must create a Microsoft Azure resource group and an identity for that resource group. These are both used during the installation of your Red Hat OpenShift Container Platform cluster on Azure.

* Configure an Azure account.
* Generate the Ignition config files for your cluster.

1. Create the resource group in a supported Azure region:

```terminal
$ az group create --name ${RESOURCE_GROUP} --location ${AZURE_REGION}
```

2. Create an Azure identity for the resource group:

```terminal
$ az identity create -g ${RESOURCE_GROUP} -n ${INFRA_ID}-identity
```


This is used to grant the required access to Operators in your cluster. For
example, this allows the Ingress Operator to create a public IP and its load
balancer. You must assign the Azure identity to a role.
3. Grant the Contributor role to the Azure identity:
1. Export the following variables required by the Azure role assignment:

```terminal
$ export PRINCIPAL_ID=`az identity show -g ${RESOURCE_GROUP} -n ${INFRA_ID}-identity --query principalId --out tsv`
```


```terminal
$ export RESOURCE_GROUP_ID=`az group show -g ${RESOURCE_GROUP} --query id --out tsv`
```

2. Assign the Contributor role to the identity:

```terminal
$ az role assignment create --assignee "${PRINCIPAL_ID}" --role 'Contributor' --scope "${RESOURCE_GROUP_ID}"
```


[NOTE]
----
If you want to assign a custom role with all the required permissions to the identity, run the following command:

```terminal
$ az role assignment create --assignee "${PRINCIPAL_ID}" --role <custom_role> \ 1
--scope "${RESOURCE_GROUP_ID}"
```

Specifies the custom role name.
----

# Uploading the RHCOS cluster image and bootstrap Ignition config file

The Azure client does not support deployments based on files existing locally. You
must copy and store the RHCOS virtual hard disk (VHD) cluster image and bootstrap Ignition config file in a storage container so they are accessible during deployment.

* Configure an Azure account.
* Generate the Ignition config files for your cluster.

1. Create an Azure storage account to store the VHD cluster image:

```terminal
$ az storage account create -g ${RESOURCE_GROUP} --location ${AZURE_REGION} --name ${CLUSTER_NAME}sa --kind Storage --sku Standard_LRS
```


[WARNING]
----
The Azure storage account name must be between 3 and 24 characters in length and
use numbers and lower-case letters only. If your CLUSTER_NAME variable does
not follow these restrictions, you must manually define the Azure storage
account name. For more information on Azure storage account name restrictions,
see Resolve errors for storage account names
in the Azure documentation.
----
2. Export the storage account key as an environment variable:

```terminal
$ export ACCOUNT_KEY=`az storage account keys list -g ${RESOURCE_GROUP} --account-name ${CLUSTER_NAME}sa --query "[0].value" -o tsv`
```

3. Export the URL of the RHCOS VHD to an environment variable:

```terminal
$ export VHD_URL=`openshift-install coreos print-stream-json | jq -r '.architectures.<architecture>."rhel-coreos-extensions"."azure-disk".url'`
```


where:
<architecture>:: Specifies the architecture, valid values include x86_64 or aarch64.

[IMPORTANT]
----
The RHCOS images might not change with every release of Red Hat OpenShift Container Platform.
You must specify an image with the highest version that is
less than or equal to the Red Hat OpenShift Container Platform version that you install. Use the image version
that matches your Red Hat OpenShift Container Platform version if it is available.
----
4. Create the storage container for the VHD:

```terminal
$ az storage container create --name vhd --account-name ${CLUSTER_NAME}sa --account-key ${ACCOUNT_KEY}
```

5. Copy the local VHD to a blob:

```terminal
$ az storage blob copy start --account-name ${CLUSTER_NAME}sa --account-key ${ACCOUNT_KEY} --destination-blob "rhcos.vhd" --destination-container vhd --source-uri "${VHD_URL}"
```

6. Create a blob storage container and upload the generated bootstrap.ign file:

```terminal
$ az storage container create --name files --account-name ${CLUSTER_NAME}sa --account-key ${ACCOUNT_KEY}
```


```terminal
$ az storage blob upload --account-name ${CLUSTER_NAME}sa --account-key ${ACCOUNT_KEY} -c "files" -f "<installation_directory>/bootstrap.ign" -n "bootstrap.ign"
```


# Example for creating DNS zones

DNS records are required for clusters that use user-provisioned infrastructure.
You should choose the DNS strategy that fits your scenario.

For this example, Azure's DNS solution
is used, so you will create a new public DNS zone for external (internet)
visibility and a private DNS zone for internal cluster resolution.


[NOTE]
----
The public DNS zone is not required to exist in the same resource group as the
cluster deployment and might already exist in your organization for the desired base domain. If that is the case, you can skip creating the public DNS zone; be sure the installation config you generated earlier reflects that scenario.
----

* Configure an Azure account.
* Generate the Ignition config files for your cluster.

1. Create the new public DNS zone in the resource group exported in the
BASE_DOMAIN_RESOURCE_GROUP environment variable:

```terminal
$ az network dns zone create -g ${BASE_DOMAIN_RESOURCE_GROUP} -n ${CLUSTER_NAME}.${BASE_DOMAIN}
```


You can skip this step if you are using a public DNS zone that already exists.
2. Create the private DNS zone in the same resource group as the rest of this
deployment:

```terminal
$ az network private-dns zone create -g ${RESOURCE_GROUP} -n ${CLUSTER_NAME}.${BASE_DOMAIN}
```


You can learn more about configuring a public DNS zone in Azure by visiting that section.

# Creating a VNet in Azure

You must create a virtual network (VNet) in Microsoft {cp} for your
Red Hat OpenShift Container Platform cluster to use. You can customize the VNet to meet your
requirements. One way to create the VNet is to modify the provided Azure
Resource Manager (ARM) template.


[NOTE]
----
If you do not use the provided ARM template to create your {cp} infrastructure,
you must review the provided information and manually create the infrastructure.
If your cluster does not initialize correctly, you might have to contact Red Hat
support with your installation logs.
----

* Configure an Azure account.
* Generate the Ignition config files for your cluster.

1. Copy the template from the ARM template for the VNet section of this topic
and save it as 01_vnet.json in your cluster's installation directory. This template describes the
VNet that your cluster requires.
2. Create the deployment by using the az CLI:

```terminal
$ az deployment group create -g ${RESOURCE_GROUP} \
  --template-file "<installation_directory>/01_vnet.json" \
  --parameters baseName="${INFRA_ID}"1
```

The base name to be used in resource names; this is usually the cluster's infrastructure ID.
3. Link the VNet template to the private DNS zone:

```terminal
$ az network private-dns link vnet create -g ${RESOURCE_GROUP} -z ${CLUSTER_NAME}.${BASE_DOMAIN} -n ${INFRA_ID}-network-link -v "${INFRA_ID}-vnet" -e false
```


## ARM template for the VNet

You can use the following Azure Resource Manager (ARM) template to deploy the
VNet that you need for your Red Hat OpenShift Container Platform cluster:


```json
link:https://raw.githubusercontent.com/openshift/installer/release-4.15/upi/azure/01_vnet.json[role=include]
```

# Deploying the RHCOS cluster image for the Azure infrastructure

You must use a valid Red Hat Enterprise Linux CoreOS (RHCOS) image for Microsoft {cp} for your
Red Hat OpenShift Container Platform nodes.

* Configure an Azure account.
* Generate the Ignition config files for your cluster.
* Store the RHCOS virtual hard disk (VHD) cluster image in an Azure storage container.
* Store the bootstrap Ignition config file in an Azure storage container.

1. Copy the template from the ARM template for image storage section of
this topic and save it as 02_storage.json in your cluster's installation directory. This template
describes the image storage that your cluster requires.
2. Export the RHCOS VHD blob URL as a variable:

```terminal
$ export VHD_BLOB_URL=`az storage blob url --account-name ${CLUSTER_NAME}sa --account-key ${ACCOUNT_KEY} -c vhd -n "rhcos.vhd" -o tsv`
```

3. Deploy the cluster image:

```terminal
$ az deployment group create -g ${RESOURCE_GROUP} \
  --template-file "<installation_directory>/02_storage.json" \
  --parameters vhdBlobURL="${VHD_BLOB_URL}" \ 1
  --parameters baseName="${INFRA_ID}" \ 2
  --parameters storageAccount="${CLUSTER_NAME}sa" \ 3
  --parameters architecture="<architecture>" 4
```

The blob URL of the RHCOS VHD to be used to create master and worker machines.
The base name to be used in resource names; this is usually the cluster's infrastructure ID.
The name of your Azure storage account.
Specify the system architecture. Valid values are x64 (default) or Arm64.

## ARM template for image storage

You can use the following Azure Resource Manager (ARM) template to deploy the
stored Red Hat Enterprise Linux CoreOS (RHCOS) image that you need for your Red Hat OpenShift Container Platform cluster:


```json
link:https://raw.githubusercontent.com/openshift/installer/release-4.15/upi/azure/02_storage.json[role=include]
```

# Networking requirements for user-provisioned infrastructure

All the Red Hat Enterprise Linux CoreOS (RHCOS) machines require networking to be configured in initramfs during boot
to fetch their Ignition config files.

## Network connectivity requirements

You must configure the network connectivity between machines to allow Red Hat OpenShift Container Platform cluster
components to communicate. Each machine must be able to resolve the hostnames
of all other machines in the cluster.

This section provides details about the ports that are required.


[IMPORTANT]
----
In connected Red Hat OpenShift Container Platform environments, all nodes are required to have internet access to pull images
for platform containers and provide telemetry data to Red Hat.
----







# Creating networking and load balancing components in Azure

You must configure networking and load balancing in Microsoft {cp} for your
Red Hat OpenShift Container Platform cluster to use. One way to create these components is
to modify the provided Azure Resource Manager (ARM) template.


[NOTE]
----
If you do not use the provided ARM template to create your {cp} infrastructure,
you must review the provided information and manually create the infrastructure.
If your cluster does not initialize correctly, you might have to contact Red Hat
support with your installation logs.
----

* Configure an Azure account.
* Generate the Ignition config files for your cluster.
* Create and configure a VNet and associated subnets in {cp}.

1. Copy the template from the ARM template for the network and load balancers
section of this topic and save it as 03_infra.json in your cluster's installation directory. This
template describes the networking and load balancing objects that your cluster
requires.
2. Create the deployment by using the az CLI:

```terminal
$ az deployment group create -g ${RESOURCE_GROUP} \
  --template-file "<installation_directory>/03_infra.json" \
  --parameters privateDNSZoneName="${CLUSTER_NAME}.${BASE_DOMAIN}" \ 1
  --parameters baseName="${INFRA_ID}"2
```

The name of the private DNS zone.
The base name to be used in resource names; this is usually the cluster's infrastructure ID.
3. Create an api DNS record in the public zone for the API public load
balancer. The ${BASE_DOMAIN_RESOURCE_GROUP} variable must point to the
resource group where the public DNS zone exists.
1. Export the following variable:

```terminal
$ export PUBLIC_IP=`az network public-ip list -g ${RESOURCE_GROUP} --query "[?name=='${INFRA_ID}-master-pip'] | [0].ipAddress" -o tsv`
```

2. Create the api DNS record in a new public zone:

```terminal
$ az network dns record-set a add-record -g ${BASE_DOMAIN_RESOURCE_GROUP} -z ${CLUSTER_NAME}.${BASE_DOMAIN} -n api -a ${PUBLIC_IP} --ttl 60
```


If you are adding the cluster to an existing public zone, you can create the api DNS record in it instead:

```terminal
$ az network dns record-set a add-record -g ${BASE_DOMAIN_RESOURCE_GROUP} -z ${BASE_DOMAIN} -n api.${CLUSTER_NAME} -a ${PUBLIC_IP} --ttl 60
```


## ARM template for the network and load balancers

You can use the following Azure Resource Manager (ARM) template to deploy the
networking objects and load balancers that you need for your Red Hat OpenShift Container Platform
cluster:


```json
link:https://raw.githubusercontent.com/openshift/installer/release-4.15/upi/azure/03_infra.json[role=include]
```

# Creating the bootstrap machine in Azure

You must create the bootstrap machine in Microsoft {cp} to use during
Red Hat OpenShift Container Platform cluster initialization. One way to create this machine is to
modify the provided Azure Resource Manager (ARM) template.


[NOTE]
----
If you do not use the provided ARM template to create your bootstrap machine,
you must review the provided information and manually create the infrastructure.
If your cluster does not initialize correctly, you might have to contact Red Hat
support with your installation logs.
----

* Configure an Azure account.
* Generate the Ignition config files for your cluster.
* Create and configure a VNet and associated subnets in {cp}.
* Create and configure networking and load balancers in {cp}.
* Create control plane and compute roles.

1. Copy the template from the ARM template for the bootstrap machine section of
this topic and save it as 04_bootstrap.json in your cluster's installation directory. This template
describes the bootstrap machine that your cluster requires.
2. Export the bootstrap URL variable:

```terminal
$ bootstrap_url_expiry=`date -u -d "10 hours" '+%Y-%m-%dT%H:%MZ'`
```


```terminal
$ export BOOTSTRAP_URL=`az storage blob generate-sas -c 'files' -n 'bootstrap.ign' --https-only --full-uri --permissions r --expiry $bootstrap_url_expiry --account-name ${CLUSTER_NAME}sa --account-key ${ACCOUNT_KEY} -o tsv`
```

3. Export the bootstrap ignition variable:

```terminal
$ export BOOTSTRAP_IGNITION=`jq -rcnM --arg v "3.2.0" --arg url ${BOOTSTRAP_URL} '{ignition:{version:$v,config:{replace:{source:$url}}}}' | base64 | tr -d '\n'`
```

4. Create the deployment by using the az CLI:

```terminal
$ az deployment group create -g ${RESOURCE_GROUP} \
  --template-file "<installation_directory>/04_bootstrap.json" \
  --parameters bootstrapIgnition="${BOOTSTRAP_IGNITION}" \ 1
  --parameters baseName="${INFRA_ID}" \ 2
  --parameter bootstrapVMSize="Standard_D4s_v3" 3
```

The bootstrap Ignition content for the bootstrap cluster.
The base name to be used in resource names; this is usually the cluster's infrastructure ID.
Optional: Specify the size of the bootstrap VM. Use a VM size compatible with your specified architecture. If this value is not defined, the default value from the template is set.

## ARM template for the bootstrap machine

You can use the following Azure Resource Manager (ARM) template to deploy the
bootstrap machine that you need for your Red Hat OpenShift Container Platform cluster:


```json
link:https://raw.githubusercontent.com/openshift/installer/release-4.15/upi/azure/04_bootstrap.json[role=include]
```

# Creating the control plane machines in Azure

You must create the control plane machines in Microsoft {cp} for your cluster
to use. One way to create these machines is to modify the provided Azure
Resource Manager (ARM) template.


[NOTE]
----
By default, Microsoft {cp} places control plane machines and compute machines in a pre-set availability zone. You can manually set an availability zone for a compute node or control plane node. To do this, modify a vendor's Azure Resource Manager (ARM) template by specifying each of your availability zones in the zones parameter of the virtual machine resource.
----

If you do not use the provided ARM template to create your control plane machines, you must review the provided information and manually create the infrastructure. If your cluster does not initialize correctly, consider contacting Red Hat support with your installation logs.

* Configure an Azure account.
* Generate the Ignition config files for your cluster.
* Create and configure a VNet and associated subnets in {cp}.
* Create and configure networking and load balancers in {cp}.
* Create control plane and compute roles.
* Create the bootstrap machine.

1. Copy the template from the ARM template for control plane machines
section of this topic and save it as 05_masters.json in your cluster's installation directory.
This template describes the control plane machines that your cluster requires.
2. Export the following variable needed by the control plane machine deployment:

```terminal
$ export MASTER_IGNITION=`cat <installation_directory>/master.ign | base64 | tr -d '\n'`
```

3. Create the deployment by using the az CLI:

```terminal
$ az deployment group create -g ${RESOURCE_GROUP} \
  --template-file "<installation_directory>/05_masters.json" \
  --parameters masterIgnition="${MASTER_IGNITION}" \ 1
  --parameters baseName="${INFRA_ID}" \ 2
  --parameters masterVMSize="Standard_D8s_v3" 3
```

The Ignition content for the control plane nodes.
The base name to be used in resource names; this is usually the cluster's infrastructure ID.
Optional: Specify the size of the Control Plane VM. Use a VM size compatible with your specified architecture. If this value is not defined, the default value from the template is set.

## ARM template for control plane machines

You can use the following Azure Resource Manager (ARM) template to deploy the
control plane machines that you need for your Red Hat OpenShift Container Platform cluster:


```json
link:https://raw.githubusercontent.com/openshift/installer/release-4.15/upi/azure/05_masters.json[role=include]
```

# Wait for bootstrap completion and remove bootstrap resources in Azure

After you create all of the required infrastructure in Microsoft {cp}, wait for
the bootstrap process to complete on the machines that you provisioned by using
the Ignition config files that you generated with the installation program.

* Configure an Azure account.
* Generate the Ignition config files for your cluster.
* Create and configure a VNet and associated subnets in {cp}.
* Create and configure networking and load balancers in {cp}.
* Create control plane and compute roles.
* Create the bootstrap machine.
* Create the control plane machines.

1. Change to the directory that contains the installation program and run the
following command:

```terminal
$ ./openshift-install wait-for bootstrap-complete --dir <installation_directory> \ 1
    --log-level info 2
```

For <installation_directory>, specify the path to the directory that you
stored the installation files in.
To view different installation details, specify warn, debug, or
error instead of info.

If the command exits without a FATAL warning, your production control plane
has initialized.
2. Delete the bootstrap resources:

```terminal
$ az network nsg rule delete -g ${RESOURCE_GROUP} --nsg-name ${INFRA_ID}-nsg --name bootstrap_ssh_in
$ az vm stop -g ${RESOURCE_GROUP} --name ${INFRA_ID}-bootstrap
$ az vm deallocate -g ${RESOURCE_GROUP} --name ${INFRA_ID}-bootstrap
$ az vm delete -g ${RESOURCE_GROUP} --name ${INFRA_ID}-bootstrap --yes
$ az disk delete -g ${RESOURCE_GROUP} --name ${INFRA_ID}-bootstrap_OSDisk --no-wait --yes
$ az network nic delete -g ${RESOURCE_GROUP} --name ${INFRA_ID}-bootstrap-nic --no-wait
$ az storage blob delete --account-key ${ACCOUNT_KEY} --account-name ${CLUSTER_NAME}sa --container-name files --name bootstrap.ign
$ az network public-ip delete -g ${RESOURCE_GROUP} --name ${INFRA_ID}-bootstrap-ssh-pip
```



[NOTE]
----
If you do not delete the bootstrap server, installation may not succeed due to API traffic being routed to the bootstrap server.
----

# Creating additional worker machines in Azure

You can create worker machines in Microsoft {cp} for your cluster
to use by launching individual instances discretely or by automated processes
outside the cluster, such as auto scaling groups. You can also take advantage of
the built-in cluster scaling mechanisms and the machine API in Red Hat OpenShift Container Platform.


[NOTE]
----
If you are installing a three-node cluster, skip this step. A three-node cluster consists of three control plane machines, which also act as compute machines.
----

In this example, you manually launch one instance by using the Azure Resource
Manager (ARM) template. Additional instances can be launched by including
additional resources of type 06_workers.json in the file.


[NOTE]
----
By default, Microsoft {cp} places control plane machines and compute machines in a pre-set availability zone. You can manually set an availability zone for a compute node or control plane node. To do this, modify a vendor's ARM template by specifying each of your availability zones in the zones parameter of the virtual machine resource.
----

If you do not use the provided ARM template to create your control plane machines, you must review the provided information and manually create the infrastructure. If your cluster does not initialize correctly, consider contacting Red Hat support with your installation logs.

* Configure an Azure account.
* Generate the Ignition config files for your cluster.
* Create and configure a VNet and associated subnets in {cp}.
* Create and configure networking and load balancers in {cp}.
* Create control plane and compute roles.
* Create the bootstrap machine.
* Create the control plane machines.

1. Copy the template from the ARM template for worker machines
section of this topic and save it as 06_workers.json in your cluster's installation directory. This
template describes the worker machines that your cluster requires.
2. Export the following variable needed by the worker machine deployment:

```terminal
$ export WORKER_IGNITION=`cat <installation_directory>/worker.ign | base64 | tr -d '\n'`
```

3. Create the deployment by using the az CLI:

```terminal
$ az deployment group create -g ${RESOURCE_GROUP} \
  --template-file "<installation_directory>/06_workers.json" \
  --parameters workerIgnition="${WORKER_IGNITION}" \ 1
  --parameters baseName="${INFRA_ID}" \ 2
  --parameters nodeVMSize="Standard_D4s_v3" 3
```

The Ignition content for the worker nodes.
The base name to be used in resource names; this is usually the cluster's infrastructure ID.
Optional: Specify the size of the compute node VM. Use a VM size compatible with your specified architecture. If this value is not defined, the default value from the template is set.

## ARM template for worker machines

You can use the following Azure Resource Manager (ARM) template to deploy the
worker machines that you need for your Red Hat OpenShift Container Platform cluster:


```json
link:https://raw.githubusercontent.com/openshift/installer/release-4.15/upi/azure/06_workers.json[role=include]
```

# Installing the OpenShift CLI by downloading the binary

You can install the OpenShift CLI (`oc`) to interact with
Red Hat OpenShift Container Platform
from a command-line interface. You can install oc on Linux, Windows, or macOS.


[IMPORTANT]
----
If you installed an earlier version of oc, you cannot use it to complete all of the commands in
Red Hat OpenShift Container Platform 4.15.
Download and install the new version of oc.
----

## Installing the OpenShift CLI on Linux

You can install the OpenShift CLI (oc) binary on Linux by using the following procedure.

1. Navigate to the Red Hat OpenShift Container Platform downloads page on the Red Hat Customer Portal.
2. Select the architecture from the Product Variant drop-down list.
3. Select the appropriate version from the Version drop-down list.
4. Click Download Now next to the OpenShift v4.15 Linux Clients entry and save the file.
5. Unpack the archive:

```terminal
$ tar xvf <file>
```

6. Place the oc binary in a directory that is on your PATH.

To check your PATH, execute the following command:

```terminal
$ echo $PATH
```


* After you install the OpenShift CLI, it is available using the oc command:

```terminal
$ oc <command>
```


## Installing the OpenShift CLI on Windows

You can install the OpenShift CLI (oc) binary on Windows by using the following procedure.

1. Navigate to the Red Hat OpenShift Container Platform downloads page on the Red Hat Customer Portal.
2. Select the appropriate version from the Version drop-down list.
3. Click Download Now next to the OpenShift v4.15 Windows Client entry and save the file.
4. Unzip the archive with a ZIP program.
5. Move the oc binary to a directory that is on your PATH.

To check your PATH, open the command prompt and execute the following command:

```terminal
C:\> path
```


* After you install the OpenShift CLI, it is available using the oc command:

```terminal
C:\> oc <command>
```


## Installing the OpenShift CLI on macOS

You can install the OpenShift CLI (oc) binary on macOS by using the following procedure.

1. Navigate to the Red Hat OpenShift Container Platform downloads page on the Red Hat Customer Portal.
2. Select the appropriate version from the Version drop-down list.
3. Click Download Now next to the OpenShift v4.15 macOS Clients entry and save the file.

[NOTE]
----
For macOS arm64, choose the OpenShift v4.15 macOS arm64 Client entry.
----
4. Unpack and unzip the archive.
5. Move the oc binary to a directory on your PATH.

To check your PATH, open a terminal and execute the following command:

```terminal
$ echo $PATH
```


* Verify your installation by using an oc command:

```terminal
$ oc <command>
```


# Logging in to the cluster by using the CLI

You can log in to your cluster as a default system user by exporting the cluster kubeconfig file.
The kubeconfig file contains information about the cluster that is used by the CLI to connect a client to the correct cluster and API server.
The file is specific to a cluster and is created during Red Hat OpenShift Container Platform installation.

* You deployed an Red Hat OpenShift Container Platform cluster.
* You installed the oc CLI.

1. Export the kubeadmin credentials:

```terminal
$ export KUBECONFIG=<installation_directory>/auth/kubeconfig 1
```

For <installation_directory>, specify the path to the directory that you stored
the installation files in.
2. Verify you can run oc commands successfully using the exported configuration:

```terminal
$ oc whoami
```

Example output

```terminal
system:admin
```


# Approving the certificate signing requests for your machines

When you add machines to a cluster, two pending certificate signing requests (CSRs) are generated for each machine that you added. You must confirm that these CSRs are approved or, if necessary, approve them yourself. The client requests must be approved first, followed by the server requests.

* You added machines to your cluster.

1. Confirm that the cluster recognizes the machines:

```terminal
$ oc get nodes
```

Example output

```terminal
NAME      STATUS    ROLES   AGE  VERSION
master-0  Ready     master  63m  v1.28.5
master-1  Ready     master  63m  v1.28.5
master-2  Ready     master  64m  v1.28.5
```


The output lists all of the machines that you created.

[NOTE]
----
The preceding output might not include the compute nodes, also known as worker nodes, until some CSRs are approved.
----
2. Review the pending CSRs and ensure that you see the client requests with the Pending or Approved status for each machine that you added to the cluster:

```terminal
$ oc get csr
```

Example output

```terminal
NAME        AGE     REQUESTOR                                                                   CONDITION
csr-8b2br   15m     system:serviceaccount:openshift-machine-config-operator:node-bootstrapper   Pending
csr-8vnps   15m     system:serviceaccount:openshift-machine-config-operator:node-bootstrapper   Pending
...
```


In this example, two machines are joining the cluster. You might see more approved CSRs in the list.
3. If the CSRs were not approved, after all of the pending CSRs for the machines you added are in Pending status, approve the CSRs for your cluster machines:

[NOTE]
----
Because the CSRs rotate automatically, approve your CSRs within an hour of adding the machines to the cluster. If you do not approve them within an hour, the certificates will rotate, and more than two certificates will be present for each node. You must approve all of these certificates. After the client CSR is approved, the Kubelet creates a secondary CSR for the serving certificate, which requires manual approval. Then, subsequent serving certificate renewal requests are automatically approved by the machine-approver if the Kubelet requests a new certificate with identical parameters.
----

[NOTE]
----
For clusters running on platforms that are not machine API enabled, such as bare metal and other user-provisioned infrastructure, you must implement a method of automatically approving the kubelet serving certificate requests (CSRs). If a request is not approved, then the oc exec, oc rsh, and oc logs commands cannot succeed, because a serving certificate is required when the API server connects to the kubelet. Any operation that contacts the Kubelet endpoint requires this certificate approval to be in place. The method must watch for new CSRs, confirm that the CSR was submitted by the node-bootstrapper service account in the system:node or system:admin groups, and confirm the identity of the node.
----
* To approve them individually, run the following command for each valid CSR:

```terminal
$ oc adm certificate approve <csr_name> 1
```

<csr_name> is the name of a CSR from the list of current CSRs.
* To approve all pending CSRs, run the following command:

```terminal
$ oc get csr -o go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}' | xargs --no-run-if-empty oc adm certificate approve
```


[NOTE]
----
Some Operators might not become available until some CSRs are approved.
----
4. Now that your client requests are approved, you must review the server requests for each machine that you added to the cluster:

```terminal
$ oc get csr
```

Example output

```terminal
NAME        AGE     REQUESTOR                                                                   CONDITION
csr-bfd72   5m26s   system:node:ip-10-0-50-126.us-east-2.compute.internal                       Pending
csr-c57lv   5m26s   system:node:ip-10-0-95-157.us-east-2.compute.internal                       Pending
...
```

5. If the remaining CSRs are not approved, and are in the Pending status, approve the CSRs for your cluster machines:
* To approve them individually, run the following command for each valid CSR:

```terminal
$ oc adm certificate approve <csr_name> 1
```

<csr_name> is the name of a CSR from the list of current CSRs.
* To approve all pending CSRs, run the following command:

```terminal
$ oc get csr -o go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}' | xargs oc adm certificate approve
```

6. After all client and server CSRs have been approved, the machines have the Ready status. Verify this by running the following command:

```terminal
$ oc get nodes
```

Example output

```terminal
NAME      STATUS    ROLES   AGE  VERSION
master-0  Ready     master  73m  v1.28.5
master-1  Ready     master  73m  v1.28.5
master-2  Ready     master  74m  v1.28.5
worker-0  Ready     worker  11m  v1.28.5
worker-1  Ready     worker  11m  v1.28.5
```


[NOTE]
----
It can take a few minutes after approval of the server CSRs for the machines to transition to the Ready status.
----

* For more information on CSRs, see Certificate Signing Requests.

# Adding the Ingress DNS records

If you removed the DNS Zone configuration when creating Kubernetes manifests and
generating Ignition configs, you must manually create DNS records that point at
the Ingress load balancer. You can create either a wildcard
*.apps.{baseDomain}. or specific records. You can use A, CNAME, and other
records per your requirements.

* You deployed an Red Hat OpenShift Container Platform cluster on Microsoft {cp} by using infrastructure that you provisioned.
* Install the OpenShift CLI (oc).
* Install or update the Azure CLI.

1. Confirm the Ingress router has created a load balancer and populated the
EXTERNAL-IP field:

```terminal
$ oc -n openshift-ingress get service router-default
```

Example output

```terminal
NAME             TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                      AGE
router-default   LoadBalancer   172.30.20.10   35.130.120.110   80:32288/TCP,443:31215/TCP   20
```

2. Export the Ingress router IP as a variable:

```terminal
$ export PUBLIC_IP_ROUTER=`oc -n openshift-ingress get service router-default --no-headers | awk '{print $4}'`
```

3. Add a *.apps record to the public DNS zone.
1. If you are adding this cluster to a new public zone, run:

```terminal
$ az network dns record-set a add-record -g ${BASE_DOMAIN_RESOURCE_GROUP} -z ${CLUSTER_NAME}.${BASE_DOMAIN} -n *.apps -a ${PUBLIC_IP_ROUTER} --ttl 300
```

2. If you are adding this cluster to an already existing public zone, run:

```terminal
$ az network dns record-set a add-record -g ${BASE_DOMAIN_RESOURCE_GROUP} -z ${BASE_DOMAIN} -n *.apps.${CLUSTER_NAME} -a ${PUBLIC_IP_ROUTER} --ttl 300
```

4. Add a *.apps record to the private DNS zone:
1. Create a *.apps record by using the following command:

```terminal
$ az network private-dns record-set a create -g ${RESOURCE_GROUP} -z ${CLUSTER_NAME}.${BASE_DOMAIN} -n *.apps --ttl 300
```

2. Add the *.apps record to the private DNS zone by using the following command:

```terminal
$ az network private-dns record-set a add-record -g ${RESOURCE_GROUP} -z ${CLUSTER_NAME}.${BASE_DOMAIN} -n *.apps -a ${PUBLIC_IP_ROUTER}
```


If you prefer to add explicit domains instead of using a wildcard, you can
create entries for each of the cluster&#8217;s current routes:


```terminal
$ oc get --all-namespaces -o jsonpath='{range .items[*]}{range .status.ingress[*]}{.host}{"\n"}{end}{end}' routes
```



```terminal
oauth-openshift.apps.cluster.basedomain.com
console-openshift-console.apps.cluster.basedomain.com
downloads-openshift-console.apps.cluster.basedomain.com
alertmanager-main-openshift-monitoring.apps.cluster.basedomain.com
prometheus-k8s-openshift-monitoring.apps.cluster.basedomain.com
```


# Completing an Azure installation on user-provisioned infrastructure

After you start the Red Hat OpenShift Container Platform installation on Microsoft {cp}
user-provisioned infrastructure, you can monitor the cluster events until the
cluster is ready.

* Deploy the bootstrap machine for an Red Hat OpenShift Container Platform cluster on user-provisioned {cp} infrastructure.
* Install the oc CLI and log in.

* Complete the cluster installation:

```terminal
$ ./openshift-install --dir <installation_directory> wait-for install-complete 1
```

Example output

```terminal
INFO Waiting up to 30m0s for the cluster to initialize...
```

For <installation_directory>, specify the path to the directory that you
stored the installation files in.

[IMPORTANT]
----
* The Ignition config files that the installation program generates contain certificates that expire after 24 hours, which are then renewed at that time. If the cluster is shut down before renewing the certificates and the cluster is later restarted after the 24 hours have elapsed, the cluster automatically recovers the expired certificates. The exception is that you must manually approve the pending node-bootstrapper certificate signing requests (CSRs) to recover kubelet certificates. See the documentation for Recovering from expired control plane certificates for more information.
* It is recommended that you use Ignition config files within 12 hours after they are generated because the 24-hour certificate rotates from 16 to 22 hours after the cluster is installed. By using the Ignition config files within 12 hours, you can avoid installation failure if the certificate update runs during installation.
----

# Telemetry access for Red Hat OpenShift Container Platform

In Red Hat OpenShift Container Platform 4.15, the Telemetry service, which runs by default to provide metrics about cluster health and the success of updates, requires internet access. If your cluster is connected to the internet, Telemetry runs automatically, and your cluster is registered to https://console.redhat.com/openshift [OpenShift Cluster Manager].

After you confirm that your https://console.redhat.com/openshift [OpenShift Cluster Manager] inventory is correct, either maintained automatically by Telemetry or manually by using OpenShift Cluster Manager, use subscription watch to track your Red Hat OpenShift Container Platform subscriptions at the account or multi-cluster level.

* See About remote health monitoring for more information about the Telemetry service