Installing an Red Hat OpenShift Container Platform cluster with the Agent-based Installer

Use the following procedures to install an Red Hat OpenShift Container Platform cluster using the Agent-based Installer.
Prerequisites
You reviewed details about the Red Hat OpenShift Container Platform installation and update processes.

You read the documentation on selecting a cluster installation method and preparing it for users.

If you use a firewall or proxy, you configured it to allow the sites that your cluster requires access to.
Installing Red Hat OpenShift Container Platform with the Agent-based Installer
The following procedures deploy a single-node Red Hat OpenShift Container Platform in a disconnected environment. You can use these procedures as a basis and modify according to your requirements.

Downloading the Agent-based Installer
Use this procedure to download the Agent-based Installer and the CLI needed for your installation.

Currently, downloading the Agent-based Installer is not supported on the IBM Z(R) (s390x) architecture. The recommended method is by creating PXE assets.
Log in to the Red Hat OpenShift Container Platform web console using your login credentials.

Navigate to Datacenter.

Click Run Agent-based Installer locally.

Select the operating system and architecture for the OpenShift Installer and Command line interface.

Click Download Installer to download and extract the install program.

You can either download or copy the pull secret by clicking on Download pull secret or Copy pull secret.

Click Download command-line tools and place the openshift-install binary in a directory that is on your PATH.
Creating the preferred configuration inputs
Use this procedure to create the preferred configuration inputs used to create the agent image.

Install nmstate dependency by running the following command:

Place the openshift-install binary in a directory that is on your PATH.

Create a directory to store the install configuration by running the following command:

Create the install-config.yaml file:

Create the agent-config.yaml file:


Configuring regions and zones for a VMware vCenter
Optional: Creating additional manifest files
You can create additional manifests to further configure your cluster beyond the configurations available in the install-config.yaml and agent-config.yaml files.

Creating a directory to contain additional manifests
If you create additional manifests to configure your Agent-based installation beyond the install-config.yaml and agent-config.yaml files, you must create an openshift subdirectory within your installation directory. All of your additional machine configurations must be located within this subdirectory.

The most common type of additional manifest you can add is a MachineConfig object. For examples of MachineConfig objects you can add during the Agent-based installation, see "Using MachineConfig objects to configure nodes" in the "Additional resources" section.
On your installation host, create an openshift subdirectory within the installation directory by running the following command:


Using MachineConfig objects to configure nodes
Disk partitioning
In general, you should use the default disk partitioning that is created during the RHCOS installation. However, there are cases where you might want to create a separate partition for a directory that you expect to grow.

Red Hat OpenShift Container Platform supports the addition of a single partition to attach storage to either the /var directory or a subdirectory of /var. For example:

/var/lib/containers: Holds container-related content that can grow
as more images and containers are added to a system.

/var/lib/etcd: Holds data that you might want to keep separate for purposes such as performance optimization of etcd storage.

/var: Holds data that you might want to keep separate for purposes such as auditing.


Storing the contents of a /var directory separately makes it easier to grow storage for those areas as needed and reinstall Red Hat OpenShift Container Platform at a later date and keep that data intact. With this method, you will not have to pull all your containers again, nor will you have to copy massive log files when you update systems.

The use of a separate partition for the /var directory or a subdirectory of /var also prevents data growth in the partitioned directory from filling up the root file system.

The following procedure sets up a separate /var partition by adding a machine config manifest that is wrapped into the Ignition config file for a node type during the preparation phase of an installation.

You have created an openshift subdirectory within your installation directory.


Create a Butane config that configures the additional partition. For example, name the file $HOME/clusterconfig/98-var-partition.bu, change the disk device name to the name of the storage device on the worker systems, and set the storage size as appropriate. This example places the /var directory on a separate partition:

Create a manifest from the Butane config and save it to the clusterconfig/openshift directory. For example, run the following command:
Optional: Using ZTP manifests
You can use GitOps Zero Touch Provisioning (ZTP) manifests to configure your installation beyond the options available through the install-config.yaml and agent-config.yaml files.

GitOps ZTP manifests can be generated with or without configuring the install-config.yaml and agent-config.yaml files beforehand. If you chose to configure the install-config.yaml and agent-config.yaml files, the configurations will be imported to the ZTP cluster manifests when they are generated.
You have placed the openshift-install binary in a directory that is on your PATH.

Optional: You have created and configured the install-config.yaml and agent-config.yaml files.


Use the following command to generate ZTP cluster manifests:

Navigate to the cluster-manifests directory:

Configure the manifest files in the cluster-manifests directory.
For sample files, see the "Sample GitOps ZTP custom resources" section.

Disconnected clusters: If you did not define mirror configuration in the install-config.yaml file before generating the ZTP manifests, perform the following steps:


Sample GitOps ZTP custom resources.

See Challenges of the network far edge to learn more about GitOps Zero Touch Provisioning (ZTP).
Optional: Encrypting the disk
Use this procedure to encrypt your disk or partition while installing Red Hat OpenShift Container Platform with the Agent-based Installer.

You have created and configured the install-config.yaml and agent-config.yaml files, unless you are using ZTP manifests.

You have placed the openshift-install binary in a directory that is on your PATH.


Use the following command to generate ZTP cluster manifests:

Navigate to the cluster-manifests directory:

Add the following section to the agent-cluster-install.yaml file:


About disk encryption
Creating and booting the agent image
Use this procedure to boot the agent image on your machines.

Create the agent image by running the following command:

Boot the agent.x86_64.iso or agent.aarch64.iso image on the bare metal machines.
Verifying that the current installation host can pull release images
After you boot the agent image and network services are made available to the host, the agent console application performs a pull check to verify that the current host can retrieve release images.

If the primary pull check passes, you can quit the application to continue with the installation. If the pull check fails, the application performs additional checks, as seen in the Additional checks section of the TUI, to help you troubleshoot the problem. A failure for any of the additional checks is not necessarily critical as long as the primary pull check succeeds.

If there are host network configuration issues that might cause an installation to fail, you can use the console application to make adjustments to your network configurations.

If the agent console application detects host network configuration issues, the installation workflow will be halted until the user manually stops the console application and signals the intention to proceed.
Wait for the agent console application to check whether or not the configured release image can be pulled from a registry.

If the agent console application states that the installer connectivity checks have passed, wait for the prompt to time out to continue with the installation.

If the agent console application checks have failed, which is indicated by a red icon beside the Release image URL pull check, use the following steps to reconfigure the host's network settings:
Tracking and verifying installation progress
Use the following procedure to track installation progress and to verify a successful installation.

You have configured a DNS record for the Kubernetes API server.


Optional: To know when the bootstrap host (rendezvous host) reboots, run the following command:

To track the progress and verify successful installation, run the following command:


If you are using the optional method of GitOps ZTP manifests, you can configure IP address endpoints for cluster nodes through the AgentClusterInstall.yaml file in three ways:

IPv4

IPv6

IPv4 and IPv6 in parallel (dual-stack)


IPv6 is supported only on bare metal platforms.
apiVIP: 192.168.11.3
ingressVIP: 192.168.11.4
clusterDeploymentRef:
  name: mycluster
imageSetRef:
  name: openshift-4.15
networking:
  clusterNetwork:
  - cidr: 172.21.0.0/16
    hostPrefix: 23
  - cidr: fd02::/48
    hostPrefix: 64
  machineNetwork:
  - cidr: 192.168.11.0/16
  - cidr: 2001:DB8::/32
  serviceNetwork:
  - 172.22.0.0/16
  - fd03::/112
  networkType: OVNKubernetes
See Deploying with dual-stack networking.

See Configuring the install-config yaml file.

See Configuring a three-node cluster to deploy three-node clusters in bare metal environments.

See About root device hints.

See NMState state examples.
Sample GitOps ZTP custom resources
Optional: You can use GitOps Zero Touch Provisioning (ZTP) custom resource (CR) objects to install an Red Hat OpenShift Container Platform cluster with the Agent-based Installer.

You can customize the following GitOps ZTP custom resources to specify more details about your Red Hat OpenShift Container Platform cluster. The following sample GitOps ZTP custom resources are for a single-node cluster.

agent-cluster-install.yaml

  apiVersion: extensions.hive.openshift.io/v1beta1
  kind: AgentClusterInstall
  metadata:
    name: test-agent-cluster-install
    namespace: cluster0
  spec:
    clusterDeploymentRef:
      name: ostest
    imageSetRef:
      name: openshift-4.15
    networking:
      clusterNetwork:
      - cidr: 10.128.0.0/14
        hostPrefix: 23
      serviceNetwork:
      - 172.30.0.0/16
    provisionRequirements:
      controlPlaneAgents: 1
      workerAgents: 0
    sshPublicKey: <YOUR_SSH_PUBLIC_KEY>
cluster-deployment.yaml

apiVersion: hive.openshift.io/v1
kind: ClusterDeployment
metadata:
  name: ostest
  namespace: cluster0
spec:
  baseDomain: test.metalkube.org
  clusterInstallRef:
    group: extensions.hive.openshift.io
    kind: AgentClusterInstall
    name: test-agent-cluster-install
    version: v1beta1
  clusterName: ostest
  controlPlaneConfig:
    servingCertificates: {}
  platform:
    agentBareMetal:
      agentSelector:
        matchLabels:
          bla: aaa
  pullSecretRef:
    name: pull-secret
cluster-image-set.yaml

apiVersion: hive.openshift.io/v1
kind: ClusterImageSet
metadata:
  name: openshift-4.15
spec:
  releaseImage: registry.ci.openshift.org/ocp/release:4.15.0-0.nightly-2022-06-06-025509
infra-env.yaml

apiVersion: agent-install.openshift.io/v1beta1
kind: InfraEnv
metadata:
  name: myinfraenv
  namespace: cluster0
spec:
  clusterRef:
    name: ostest
    namespace: cluster0
  cpuArchitecture: aarch64
  pullSecretRef:
    name: pull-secret
  sshAuthorizedKey: <YOUR_SSH_PUBLIC_KEY>
  nmStateConfigLabelSelector:
    matchLabels:
      cluster0-nmstate-label-name: cluster0-nmstate-label-value
nmstateconfig.yaml

apiVersion: agent-install.openshift.io/v1beta1
kind: NMStateConfig
metadata:
  name: master-0
  namespace: openshift-machine-api
  labels:
    cluster0-nmstate-label-name: cluster0-nmstate-label-value
spec:
  config:
    interfaces:
      - name: eth0
        type: ethernet
        state: up
        mac-address: 52:54:01:aa:aa:a1
        ipv4:
          enabled: true
          address:
            - ip: 192.168.122.2
              prefix-length: 23
          dhcp: false
    dns-resolver:
      config:
        server:
          - 192.168.122.1
    routes:
      config:
        - destination: 0.0.0.0/0
          next-hop-address: 192.168.122.1
          next-hop-interface: eth0
          table-id: 254
  interfaces:
    - name: "eth0"
      macAddress: 52:54:01:aa:aa:a1
pull-secret.yaml

apiVersion: v1
kind: Secret
type: kubernetes.io/dockerconfigjson
metadata:
  name: pull-secret
  namespace: cluster0
stringData:
  .dockerconfigjson: 'YOUR_PULL_SECRET'
See Challenges of the network far edge to learn more about GitOps Zero Touch Provisioning (ZTP).
Gathering log data from a failed Agent-based installation
Use the following procedure to gather log data about a failed Agent-based installation to provide for a support case.

You have configured a DNS record for the Kubernetes API server.


Run the following command and collect the output:

If the output from the previous command indicates a failure, or if the bootstrap is not progressing, run the following command to connect to the rendezvous host and collect the output:

If the bootstrap completes and the cluster nodes reboot, run the following command and collect the output:

If the output from the previous command indicates a failure, perform the following steps:

Excluding the /auth subdirectory, attach the installation directory used during the deployment to your support case on the Red Hat Customer Portal.

Attach all other data gathered from this procedure to your support case.