Customizing the web console in Red Hat OpenShift Container Platform

You can customize the Red Hat OpenShift Container Platform web console to set a custom logo, product name, links, notifications, and command line downloads. This is especially helpful if you need to tailor the web console to meet specific corporate or government requirements.
Adding a custom logo and product name
You can create custom branding by adding a custom logo or custom product name. You can set both or one without the other, as these settings are independent of each other.

You must have administrator privileges.

Create a file of the logo that you want to use. The logo can be a file in any common image format, including GIF, JPG, PNG, or SVG, and is constrained to a max-height of 60px. Image size must not exceed 1 MB due to constraints on the ConfigMap object size.


Import your logo file into a config map in the openshift-config namespace:

Edit the web console's Operator configuration to include customLogoFile and customProductName:

Check for success. If there are any issues, the console cluster Operator will report a Degraded status, and the console Operator configuration will also report a CustomLogoDegraded status, but with reasons like KeyOrFilenameInvalid or NoImageProvided.
Creating custom links in the web console
You must have administrator privileges.


From Administration -> Custom Resource Definitions, click on
ConsoleLink.

Select Instances tab

Click Create Console Link and edit the file:

Click Save to apply your changes.
Customizing console routes
For console and downloads routes, custom routes functionality uses the ingress config route configuration API. If the console custom route is set up in both the ingress config and console-operator config, then the new ingress config custom route configuration takes precedent. The route configuration with the console-operator config is deprecated.

Customizing the console route
You can customize the console route by setting the custom hostname and TLS certificate in the spec.componentRoutes field of the cluster Ingress configuration.

You have logged in to the cluster as a user with administrative privileges.

You have created a secret in the openshift-config namespace containing the TLS certificate and key. This is required if the domain for the custom hostname suffix does not match the cluster domain suffix. The secret is optional if the suffix matches.


Edit the cluster Ingress configuration:

Set the custom hostname and optionally the serving certificate and key:

Save the file to apply the changes.
Customizing the download route
You can customize the download route by setting the custom hostname and TLS certificate in the spec.componentRoutes field of the cluster Ingress configuration.

You have logged in to the cluster as a user with administrative privileges.

You have created a secret in the openshift-config namespace containing the TLS certificate and key. This is required if the domain for the custom hostname suffix does not match the cluster domain suffix. The secret is optional if the suffix matches.


Edit the cluster Ingress configuration:

Set the custom hostname and optionally the serving certificate and key:

Save the file to apply the changes.
Customizing the login page
Create Terms of Service information with custom login pages. Custom login pages can also be helpful if you use a third-party login provider, such as GitHub or Google, to show users a branded page that they trust and expect before being redirected to the authentication provider. You can also render custom error pages during the authentication process.

Customizing the error template is limited to identity providers (IDPs) that use redirects, such as request header and OIDC-based IDPs. It does not have an effect on IDPs that use direct password authentication, such as LDAP and htpasswd.
You must have administrator privileges.


Run the following commands to create templates you can modify:

Create the secrets:

Run:

Update the specification:
Defining a template for an external log link
If you are connected to a service that helps you browse your logs, but you need to generate URLs in a particular way, then you can define a template for your link.

You must have administrator privileges.


From Administration -> Custom Resource Definitions, click on
ConsoleExternalLogLink.

Select Instances tab

Click Create Console External Log Link and edit the file:
Creating custom notification banners
You must have administrator privileges.


From Administration -> Custom Resource Definitions, click on
ConsoleNotification.

Select Instances tab

Click Create Console Notification and edit the file:

Click Create to apply your changes.
Customizing CLI downloads
You can configure links for downloading the CLI with custom link text and URLs, which can point directly to file packages or to an external page that provides the packages.

You must have administrator privileges.


Navigate to Administration -> Custom Resource Definitions.

Select ConsoleCLIDownload from the list of Custom Resource Definitions (CRDs).

Click the YAML tab, and then make your edits:

Click the Save button.
Adding YAML examples to Kubernetes resources
You can dynamically add YAML examples to any Kubernetes resources at any time.

You must have cluster administrator privileges.


From Administration -> Custom Resource Definitions, click on ConsoleYAMLSample.

Click YAML and edit the file:

Click Save.
Customizing user perspectives
The Red Hat OpenShift Container Platform web console provides two perspectives by default, Administrator and Developer. You might have more perspectives available depending on installed console plugins. As a cluster administrator, you can show or hide a perspective for all users or for a specific user role. Customizing  perspectives ensures that users can view only the perspectives that are applicable to their role and tasks. For example, you can hide the Administrator perspective from unprivileged users so that they cannot manage cluster resources, users, and projects. Similarly, you can show the Developer perspective to users with the developer role so that they can create, deploy, and monitor applications.

You can also customize the perspective visibility for users based on role-based access control (RBAC). For example, if you customize a perspective for monitoring purposes, which requires specific permissions, you can define that the perspective is visible only to users with required permissions.

Each perspective includes the following mandatory parameters, which you can edit in the YAML view:

id: Defines the ID of the perspective to show or hide

visibility: Defines the state of the perspective along with access review checks, if needed

state: Defines whether the perspective is enabled, disabled, or needs an access review check


By default, all perspectives are enabled. When you customize the user perspective, your changes are applicable to the entire cluster.
Customizing a perspective using YAML view
You must have administrator privileges.


In the Administrator perspective, navigate to Administration -> Cluster Settings.

Select the Configuration tab and click the Console (operator.openshift.io) resource.

Click the YAML tab and make your customization:

Click Save.
Customizing a perspective using form view
You must have administrator privileges.


In the Administrator perspective, navigate to Administration -> Cluster Settings.

Select the Configuration tab and click the Console (operator.openshift.io) resource.

Click Actions -> Customize on the right side of the page.

In the General settings, customize the perspective by selecting one of the following options from the dropdown list:
Developer catalog and sub-catalog customization
As a cluster administrator, you have the ability to organize and manage the Developer catalog or its sub-catalogs. You can enable or disable the sub-catalog types or disable the entire developer catalog.

The developerCatalog.types object includes the following parameters that you must define in a snippet to use them in the YAML view:

state: Defines if a list of developer catalog types should be enabled or disabled.

enabled: Defines a list of developer catalog types (sub-catalogs) that are visible to users.

disabled: Defines a list of developer catalog types (sub-catalogs) that are not visible to users.


You can enable or disable the following developer catalog types (sub-catalogs) using the YAML view or the form view.

Builder Images

Templates

Devfiles

Samples

Helm Charts

Event Sources

Event Sinks

Operator Backed


Customizing a developer catalog or its sub-catalogs using the YAML view
You can customize a developer catalog by editing the YAML content in the YAML view.

An OpenShift web console session with cluster administrator privileges.


In the Administrator perspective of the web console, navigate to Administration -> Cluster Settings.

Select the Configuration tab, click the Console (operator.openshift.io) resource and view the Details page.

Click the YAML tab to open the editor and edit the YAML content as needed.

Click Save.


By default, the developer catalog types are enabled in the Administrator view of the Web Console.
Customizing a developer catalog or its sub-catalogs using the form view
You can customize a developer catalog by using the form view in the Web Console.

An OpenShift web console session with cluster administrator privileges.

The Developer perspective is enabled.


In the Administrator perspective, navigate to Administration -> Cluster Settings.

Select the Configuration tab and click the Console (operator.openshift.io) resource.

Click Actions -> Customize.

Enable or disable items in the Pre-pinned navigation items, Add page, and Developer Catalog sections.


As an administrator, you can define the navigation items that appear by default for all users. You can also reorder the navigation items.
You can use a similar procedure to customize Web UI items such as Quick starts, Cluster roles, and Actions.
Example YAML file changes
You can dynamically add the following snippets in the YAML editor for customizing a developer catalog.

Use the following snippet to display all the sub-catalogs by setting the state type to Enabled.

apiVersion: operator.openshift.io/v1
kind: Console
metadata:
  name: cluster
...
spec:
  customization:
    developerCatalog:
      categories:
      types:
        state: Enabled
Use the following snippet to disable all sub-catalogs by setting the state type to Disabled:

apiVersion: operator.openshift.io/v1
kind: Console
metadata:
  name: cluster
...
spec:
  customization:
    developerCatalog:
      categories:
      types:
        state: Disabled
Use the following snippet when a cluster administrator defines a list of sub-catalogs, which are enabled in the Web Console.

apiVersion: operator.openshift.io/v1
kind: Console
metadata:
  name: cluster
...
spec:
  customization:
    developerCatalog:
      categories:
      types:
        state: Enabled
        enabled:
          - BuilderImage
          - Devfile
          - HelmChart
          - ...