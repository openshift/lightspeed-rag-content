Dynamic plugin reference

You can add extensions that allow you to customize your plugin. Those extensions are then loaded to the console at run-time.
Dynamic plugin extension types

ActionFilter can be used to filter an action.



ActionGroup contributes an action group that can also be a submenu.



ActionProvider contributes a hook that returns list of actions for specific context.



ResourceActionProvider contributes a hook that returns list of actions for specific resource model.



This extension can be used to trigger a specific action when a specific Prometheus alert is observed by the Console based on its rule.name value.



This extension can be used for plugins to contribute a handler that can filter specific catalog items. For example, the plugin can contribute a filter that filters helm charts from specific provider.



This extension can be used to contribute a provider that adds extra metadata to specific catalog items.



This extension allows plugins to contribute a provider for a catalog item type. For example, a Helm Plugin can add a provider that fetches all the Helm Charts. This extension can also be used by other plugins to add more items to a specific catalog item type.



This extension allows plugins to contribute a new type of catalog item. For example, a Helm plugin can define a new catalog item type as HelmCharts that it wants to contribute to the Developer Catalog.



This extension allows plugins to contribute extra metadata like custom filters or groupings for any catalog item type. For example, a plugin can attach a custom filter for HelmCharts that can filter based on chart provider.



Adds a new inventory item into cluster overview page.



Adds a new cluster overview multi-line utilization item.



Adds a new cluster overview utilization item.



Adds a new React context provider to the web console application root.



Adds a new dashboard card.



Adds an item to the Details card of Overview Dashboard.



Adds an activity to the Activity Card of Overview Dashboard where the triggering of activity is based on watching a Kubernetes resource.



Adds a health subsystem to the status card of the Overview dashboard, where the source of status is a Kubernetes REST API.



Adds a health subsystem to the status card of Overview dashboard where the source of status is Prometheus.



Adds a health subsystem to the status card of Overview dashboard where the source of status is a Kubernetes Resource.



Adds a health subsystem to the status card of Overview dashboard where the source of status is a Kubernetes REST API.



Adds a resource tile to the overview inventory card.



Adds an inventory status group.



Replaces an overview inventory card.



Adds an activity to the Activity Card of Prometheus Overview Dashboard where the triggering of activity is based on watching a Kubernetes resource.



Adds a resource tile to the project overview inventory card.



Adds a new dashboard tab, placed after the Overview tab.



This extension can be used to provide a handler for the file drop action on specific file extensions.



Gives full control over the web console feature flags.



Gives full control over the web console feature flags with hook handlers.



Adds a new web console feature flag driven by the presence of a CustomResourceDefinition (CRD) object on the cluster.



This extension identifies a resource used to manage the configuration of the cluster. A link to the resource will be added to the Administration -> Cluster Settings -> Configuration page.



Customize the display of models by overriding values retrieved and generated through API discovery.



This extension can be used to contribute a navigation item that points to a specific link in the UI.



This extension can be used to contribute a navigation item that points to a cluster resource details page. The K8s model of that resource can be used to define the navigation item.



This extension can be used to contribute a navigation item that points to a namespaced resource details page. The K8s model of that resource can be used to define the navigation item.



This extension can be used to define a new section of navigation items in the navigation tab.



This extension can be used to add a separator between navigation items in the navigation.





Adds new resource list page to Console router.



Adds a new page to the web console router. See React Router.



Adds a new standalone page, rendered outside the common page layout, to the web console router. See React Router.



This extension contributes a new perspective to the console, which enables customization of the navigation menu.



Adds a new inventory item into the Project Overview page.



Adds a new project overview utilization item.



This extension can be used to contribute custom alerts on the PVC details page.



This extension can be used to specify additional properties that will be used when creating PVC resources on the PVC list page.



This extension allows hooking into deleting PVC resources. It can provide an alert with additional information and custom PVC delete logic.





Adds new reducer to Console Redux store which operates on plugins.<scope> substate.



This extension allows plugins to provide a custom component (i.e., wizard or form) for specific resources, which will be rendered, when users try to create a new resource instance.



Adds a new details item to the default resource summary on the details page.



Adds a new storage class provisioner as an option during storage class creation.



This extension can be used to contribute a new storage provider to select, when attaching storage and a provider specific component.



Adds a tab to a horizontal nav matching the contextId.



This extension can be used to add a tab on the resource details page.



This component can be used to register a listener function receiving telemetry events. These events include user identification, page navigation, and other application specific events. The listener may use this data for reporting and analytics purposes.



BuildAdapter contributes an adapter to adapt element to data that can be used by the Build component.



NetworkAdapater contributes an adapter to adapt element to data that can be used by the Networking component.



PodAdapter contributes an adapter to adapt element to data that can be used by the Pod component.



Getter for a ViewComponentFactory.



Getter for the create connector function.



Topology Data Model Factory Extension



Topology Decorator Provider Extension



DetailsResourceAlert contributes an alert for specific topology context or graph element.



DetailsResourceLink contributes a link for specific topology context or graph element.



DetailsTab contributes a tab for the topology details panel.



DetailsTabSection contributes a section for a specific tab in the topology details panel.



Topology Display Filters Extension



Topology relationship provider connector extension



This extension can be used to add a group on the console user-preferences page. It will appear as a vertical tab option on the console user-preferences page.



This extension can be used to add an item to the user preferences group on the console user preferences page.



YAML templates for editing resources via the yaml editor.



This extension allows plugins to contribute an add action item to the add page of developer perspective. For example, a Serverless plugin can add a new action item for adding serverless functions to the add page of developer console.



This extension allows plugins to contibute a group in the add page of developer console. Groups can be referenced by actions, which will be grouped together in the add action page based on their extension definition. For example, a Serverless plugin can contribute a Serverless group and together with multiple add actions.



This extension can be used to specify extra build environment variable fields under the builder image selector in the developer console git import form. When set, the fields will override environment variables of the same name in the build section.



Deprecated. use CustomOverviewDetailItem type instead



Deprecated. Use console.tab/horizontalNav instead. Adds a new resource tab page to Console router.
Dynamic plugin API

Hook that provides the currently active perspective and a callback for setting the active perspective. It returns a tuple containing the current active perspective and setter callback.

const Component: React.FC = (props) => {
   const [activePerspective, setActivePerspective] = useActivePerspective();
   return <select
     value={activePerspective}
     onChange={(e) => setActivePerspective(e.target.value)}
   >
     {
       // ...perspective options
     }
   </select>
}

Component for displaying a green check mark circle icon.

<GreenCheckCircleIcon title="Healthy" />


Component for displaying a red exclamation mark circle icon.

<RedExclamationCircleIcon title="Failed" />


Component for displaying a yellow triangle exclamation icon.

<YellowExclamationTriangleIcon title="Warning" />


Component for displaying a blue info circle icon.

<BlueInfoCircleIcon title="Info" />


Component for displaying an error status popover.

<ErrorStatus title={errorMsg} />


Component for displaying an information status popover.

<InfoStatus title={infoMsg} />


Component for displaying a progressing status popover.

<ProgressStatus title={progressMsg} />


Component for displaying a success status popover.

<SuccessStatus title={successMsg} />


Provides information about user access to a given resource. It returns an object with resource access information.



Hook that provides information about user access to a given resource. It returns an array with isAllowed and loading values.



React hook for consuming Console extensions with resolved CodeRef properties. This hook accepts the same argument(s) as useExtensions hook and returns an adapted list of extension instances, resolving all code references within each extension's properties.

Initially, the hook returns an empty array. After the resolution is complete, the React component is re-rendered with the hook returning an adapted list of extensions. When the list of matching extensions changes, the resolution is restarted. The hook will continue to return the previous result until the resolution completes.

The hook's result elements are guaranteed to be referentially stable across re-renders. It returns a tuple containing a list of adapted extension instances with resolved code references, a boolean flag indicating whether the resolution is complete, and a list of errors detected during the resolution.

const [navItemExtensions, navItemsResolved] = useResolvedExtensions<NavItem>(isNavItem);
// process adapted extensions and render your component


A component that creates a Navigation bar for a page. Routing is handled as part of the component. console.tab/horizontalNav can be used to add additional content to any horizontal navigation.

const HomePage: React.FC = (props) => {
    const page = {
      href: '/home',
      name: 'Home',
      component: () => <>Home</>
    }
    return <HorizontalNav match={props.match} pages={[page]} />
}


A component for making virtualized tables.

const MachineList: React.FC<MachineListProps> = (props) => {
  return (
    <VirtualizedTable<MachineKind>
     {...props}
     aria-label='Machines'
     columns={getMachineColumns}
     Row={getMachineTableRow}
    />
  );
}


Component for displaying table data within a table row.

const PodRow: React.FC<RowProps<K8sResourceCommon>> = ({ obj, activeColumnIDs }) => {
  return (
    <>
      <TableData id={columns[0].id} activeColumnIDs={activeColumnIDs}>
        <ResourceLink kind="Pod" name={obj.metadata.name} namespace={obj.metadata.namespace} />
      </TableData>
      <TableData id={columns[1].id} activeColumnIDs={activeColumnIDs}>
        <ResourceLink kind="Namespace" name={obj.metadata.namespace} />
      </TableData>
    </>
  );
};


A hook that provides a list of user-selected active TableColumns.

// See implementation for more details on TableColumn type
  const [activeColumns, userSettingsLoaded] = useActiveColumns({
    columns,
    showNamespaceOverride: false,
    columnManagementID,
  });
  return userSettingsAreLoaded ? <VirtualizedTable columns={activeColumns} {...otherProps} /> : null

A tuple containing the current user selected active columns (a subset of options.columns), and a boolean flag indicating whether user settings have been loaded.


Component for generating a page header.

const exampleList: React.FC = () => {
  return (
    <>
      <ListPageHeader title="Example List Page"/>
    </>
  );
};


Component for adding a create button for a specific resource kind that automatically generates a link to the create YAML for this resource.

const exampleList: React.FC<MyProps> = () => {
  return (
    <>
      <ListPageHeader title="Example Pod List Page"/>
        <ListPageCreate groupVersionKind="Pod">Create Pod</ListPageCreate>
      </ListPageHeader>
    </>
  );
};


Component for creating a stylized link.

const exampleList: React.FC<MyProps> = () => {
 return (
  <>
   <ListPageHeader title="Example Pod List Page"/>
      <ListPageCreateLink to={'/link/to/my/page'}>Create Item</ListPageCreateLink>
   </ListPageHeader>
  </>
 );
};


Component for creating button.

const exampleList: React.FC<MyProps> = () => {
  return (
    <>
      <ListPageHeader title="Example Pod List Page"/>
        <ListPageCreateButton createAccessReview={access}>Create Pod</ListPageCreateButton>
      </ListPageHeader>
    </>
  );
};


Component for creating a dropdown wrapped with permissions check.

const exampleList: React.FC<MyProps> = () => {
  const items = {
    SAVE: 'Save',
    DELETE: 'Delete',
  }
  return (
    <>
     <ListPageHeader title="Example Pod List Page"/>
       <ListPageCreateDropdown createAccessReview={access} items={items}>Actions</ListPageCreateDropdown>
     </ListPageHeader>
    </>
  );
};


Component that generates filter for list page.

  // See implementation for more details on RowFilter and FilterValue types
  const [staticData, filteredData, onFilterChange] = useListPageFilter(
    data,
    rowFilters,
    staticFilters,
  );
  // ListPageFilter updates filter state based on user interaction and resulting filtered data can be rendered in an independent component.
  return (
    <>
      <ListPageHeader .../>
      <ListPagBody>
        <ListPageFilter data={staticData} onFilterChange={onFilterChange} />
        <List data={filteredData} />
      </ListPageBody>
    </>
  )


A hook that manages filter state for the ListPageFilter component. It returns a tuple containing the data filtered by all static filters, the data filtered by all static and row filters, and a callback that updates rowFilters.

  // See implementation for more details on RowFilter and FilterValue types
  const [staticData, filteredData, onFilterChange] = useListPageFilter(
    data,
    rowFilters,
    staticFilters,
  );
  // ListPageFilter updates filter state based on user interaction and resulting filtered data can be rendered in an independent component.
  return (
    <>
      <ListPageHeader .../>
      <ListPagBody>
        <ListPageFilter data={staticData} onFilterChange={onFilterChange} />
        <List data={filteredData} />
      </ListPageBody>
    </>
  )


Component that creates a link to a specific resource type with an icon badge.

  <ResourceLink
      kind="Pod"
      name="testPod"
      title={metadata.uid}
  />


Component that creates an icon badge for a specific resource type.

<ResourceIcon kind="Pod"/>


Hook that retrieves the k8s model for provided K8sGroupVersionKind from redux. It returns an array with the first item as k8s model and second item as inFlight status.

const Component: React.FC = () => {
  const [model, inFlight] = useK8sModel({ group: 'app'; version: 'v1'; kind: 'Deployment' });
  return ...
}


Hook that retrieves all current k8s models from redux. It returns an array with the first item as the list of k8s model and second item as inFlight status.

const Component: React.FC = () => {
  const [models, inFlight] = UseK8sModels();
  return ...
}

Hook that retrieves the k8s resource along with status for loaded and error. It returns an array with first item as resource(s), second item as loaded status and third item as error state if any.

const Component: React.FC = () => {
  const watchRes = {
        ...
      }
  const [data, loaded, error] = useK8sWatchResource(watchRes)
  return ...
}


Hook that retrieves the k8s resources along with their respective status for loaded and error. It returns a map where keys are as provided in initResouces and value has three properties data, loaded and error.

const Component: React.FC = () => {
  const watchResources = {
        'deployment': {...},
        'pod': {...}
        ...
      }
  const {deployment, pod} = useK8sWatchResources(watchResources)
  return ...
}


A custom wrapper around fetch that adds console specific headers and allows for retries and timeouts.It also validates the response status code and throws appropriate error or logs out the user if required. It returns a promise that resolves to the response.



A custom wrapper around fetch that adds console specific headers and allows for retries and timeouts. It also validates the response status code and throws appropriate error or logs out the user if required. It returns the response as a JSON object. Uses consoleFetch internally. It returns a promise that resolves to the response as JSON object.



A custom wrapper around fetch that adds console specific headers and allows for retries and timeouts. It also validates the response status code and throws appropriate error or logs out the user if required. It returns the response as a text. Uses consoleFetch internally. It returns a promise that resolves to the response as text.



A function that creates impersonation and multicluster related headers for API requests using current redux state. It returns an object containing the appropriate impersonation and clustr requst headers, based on redux state.



It fetches a resource from the cluster, based on the provided options. If the name is provided it returns one resource else it returns all the resources matching the model. It returns a promise that resolves to the response as JSON object with a resource if the name is providedelse it returns all the resources matching the model. In case of failure, the promise gets rejected with HTTP error response.



It creates a resource in the cluster, based on the provided options. It returns a promise that resolves to the response of the resource created. In case of failure promise gets rejected with HTTP error response.



It updates the entire resource in the cluster, based on providedoptions. When a client needs to replace an existing resource entirely, they can use k8sUpdate. Alternatively can use k8sPatch to perform the partial update. It returns a promise that resolves to the response of the resource updated. In case of failure promise gets rejected with HTTP error response.



It patches any resource in the cluster, based on provided options. When a client needs to perform the partial update, they can use k8sPatch. Alternatively can use k8sUpdate to replace an existing resource entirely. See Data Tracker for more. It returns a promise that resolves to the response of the resource patched. In case of failure promise gets rejected with HTTP error response.



It deletes resources from the cluster, based on the provided model, resource. The garbage collection works based on Foreground|Background can be configured with propagationPolicy property in provided model or passed in json. It returns a promise that resolves to the response of kind Status. In case of failure promise gets rejected with HTTP error response.

kind: 'DeleteOptions', apiVersion: 'v1', propagationPolicy



Lists the resources as an array in the cluster, based on provided options. It returns a promise that resolves to the response.



Same interface as k8sListResource but returns the sub items. It returns the apiVersion for the model, i.e., group/version.


Provides apiVersion for a k8s model.



Provides a group, version, and kind for a resource. It returns the group, version, kind for the provided resource. If the resource does not have an API group, group "core" will be returned. If the resource has an invalid apiVersion, then it will throw an Error.



Provides a group, version, and kind for a k8s model. This returns the group, version, kind for the provided model. If the model does not have an apiGroup, group "core" will be returned.



Component that shows the status in a popup window. Helpful component for building console.dashboards/overview/health/resource extensions.

  <StatusPopupSection
    firstColumn={
      <>
        <span>{title}</span>
        <span className="text-secondary">
          My Example Item
        </span>
      </>
    }
    secondColumn='Status'
  >


Status element used in status popup; used in StatusPopupSection.

<StatusPopupSection
   firstColumn='Example'
   secondColumn='Status'
>
   <StatusPopupItem icon={healthStateMapping[MCGMetrics.state]?.icon}>
      Complete
   </StatusPopupItem>
   <StatusPopupItem icon={healthStateMapping[RGWMetrics.state]?.icon}>
       Pending
   </StatusPopupItem>
</StatusPopupSection>


Creates a wrapper component for a dashboard.

    <Overview>
      <OverviewGrid mainCards={mainCards} leftCards={leftCards} rightCards={rightCards} />
    </Overview>


Creates a grid of card elements for a dashboard; used within Overview.

    <Overview>
      <OverviewGrid mainCards={mainCards} leftCards={leftCards} rightCards={rightCards} />
    </Overview>


Creates an inventory card item.

  return (
    <InventoryItem>
      <InventoryItemTitle>{title}</InventoryItemTitle>
      <InventoryItemBody error={loadError}>
        {loaded && <InventoryItemStatus count={workerNodes.length} icon={<MonitoringIcon />} />}
      </InventoryItemBody>
    </InventoryItem>
  )


Creates a title for an inventory card item; used within InventoryItem.

 return (
   <InventoryItem>
     <InventoryItemTitle>{title}</InventoryItemTitle>
     <InventoryItemBody error={loadError}>
       {loaded && <InventoryItemStatus count={workerNodes.length} icon={<MonitoringIcon />} />}
     </InventoryItemBody>
   </InventoryItem>
 )


Creates the body of an inventory card; used within InventoryCard and can be used with InventoryTitle.

 return (
   <InventoryItem>
     <InventoryItemTitle>{title}</InventoryItemTitle>
     <InventoryItemBody error={loadError}>
       {loaded && <InventoryItemStatus count={workerNodes.length} icon={<MonitoringIcon />} />}
     </InventoryItemBody>
   </InventoryItem>
 )


Creates a count and icon for an inventory card with optional link address; used within InventoryItemBody

 return (
   <InventoryItem>
     <InventoryItemTitle>{title}</InventoryItemTitle>
     <InventoryItemBody error={loadError}>
       {loaded && <InventoryItemStatus count={workerNodes.length} icon={<MonitoringIcon />} />}
     </InventoryItemBody>
   </InventoryItem>
 )


Creates a skeleton container for when an inventory card is loading; used with InventoryItem and related components

if (loadError) {
   title = <Link to={workerNodesLink}>{t('Worker Nodes')}</Link>;
} else if (!loaded) {
  title = <><InventoryItemLoading /><Link to={workerNodesLink}>{t('Worker Nodes')}</Link></>;
}
return (
  <InventoryItem>
    <InventoryItemTitle>{title}</InventoryItemTitle>
  </InventoryItem>
)

Hook that returns the given feature flag from FLAGS redux state. It returns the boolean value of the requested feature flag or undefined.



A basic lazy loaded Code editor with hover help and completion.

<React.Suspense fallback={<LoadingBox />}>
  <CodeEditor
    value={code}
    language="yaml"
  />
</React.Suspense>


A lazy loaded YAML editor for Kubernetes resources with hover help and completion. The component use the YAMLEditor and add on top of it more functionality likeresource update handling, alerts, save, cancel and reload buttons, accessibility and more. Unless onSave callback is provided, the resource update is automatically handled.It should be wrapped in a React.Suspense component.

<React.Suspense fallback={<LoadingBox />}>
  <ResourceYAMLEditor
    initialResource={resource}
    header="Create resource"
    onSave={(content) => updateResource(content)}
  />
</React.Suspense>


A component to show events related to a particular resource.

const [resource, loaded, loadError] = useK8sWatchResource(clusterResource);
return <ResourceEventStream resource={resource} />


Sets up a poll to Prometheus for a single query. It returns a tuple containing the query response, a boolean flag indicating whether the response has completed, and any errors encountered during the request or post-processing of the request.



A component to render timestamp. The timestamps are synchronized between invidual instances of the Timestamp component. The provided timestamp is formatted according to user locale.



A hook to launch Modals.

const context: AppPage: React.FC = () => {<br/> const [launchModal] = useModal();<br/> const onClick = () => launchModal(ModalComponent);<br/> return (<br/>   <Button onClick={onClick}>Launch a Modal</Button><br/> )<br/>}<br/>`

Component that allows to receive contributions from other plugins for the console.action/provider extension type.

   const context: ActionContext = { 'a-context-id': { dataFromDynamicPlugin } };

   ...

   <ActionServiceProvider context={context}>
       {({ actions, options, loaded }) =>
         loaded && (
           <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />
         )
       }
   </ActionServiceProvider>


A component that renders a horizontal toolbar with a namespace dropdown menu in the leftmost position. Additional components can be passed in as children and will be rendered to the right of the namespace dropdown. This component is designed to be used at the top of the page. It should be used on pages where the user needs to be able to change the active namespace, such as on pages with k8s resources.

   const logNamespaceChange = (namespace) => console.log(`New namespace: ${namespace}`);

   ...

   <NamespaceBar onNamespaceChange={logNamespaceChange}>
     <NamespaceBarApplicationSelector />
   </NamespaceBar>
   <Page>

     ...


Creates full page ErrorBoundaryFallbackPage component to display the "Oh no! Something went wrong." message along with the stack trace and other helpful debugging information. This is to be used inconjunction with an component.

//in ErrorBoundary component
 return (
   if (this.state.hasError) {
     return <ErrorBoundaryFallbackPage errorMessage={errorString} componentStack={componentStackString}
      stack={stackTraceString} title={errorString}/>;
   }

   return this.props.children;
)


A component that renders a graph of the results from a Prometheus PromQL query along with controls for interacting with the graph.

<QueryBrowser
  defaultTimespan={15 * 60 * 1000}
  namespace={namespace}
  pollInterval={30 * 1000}
  queries={[
    'process_resident_memory_bytes{job="console"}',
    'sum(irate(container_network_receive_bytes_total[6h:5m])) by (pod)',
  ]}
/>


A hook that provides a callback to launch a modal for editing Kubernetes resource annotations.

const PodAnnotationsButton = ({ pod }) => {
  const { t } = useTranslation();
  const launchAnnotationsModal = useAnnotationsModal<PodKind>(pod);
  return <button onClick={launchAnnotationsModal}>{t('Edit Pod Annotations')}</button>
}

A function which will launch a modal for editing a resource's annotations.


A hook that provides a callback to launch a modal for deleting a resource.

const DeletePodButton = ({ pod }) => {
  const { t } = useTranslation();
  const launchDeleteModal = useDeleteModal<PodKind>(pod);
  return <button onClick={launchDeleteModal}>{t('Delete Pod')}</button>
}

A function which will launch a modal for deleting a resource.


A hook that provides a callback to launch a modal for editing Kubernetes resource labels.

const PodLabelsButton = ({ pod }) => {
  const { t } = useTranslation();
  const launchLabelsModal = useLabelsModal<PodKind>(pod);
  return <button onClick={launchLabelsModal}>{t('Edit Pod Labels')}</button>
}

A function which will launch a modal for editing a resource's labels.


Hook that provides the currently active namespace and a callback for setting the active namespace.

const Component: React.FC = (props) => {
   const [activeNamespace, setActiveNamespace] = useActiveNamespace();
   return <select
     value={activeNamespace}
     onChange={(e) => setActiveNamespace(e.target.value)}
   >
     {
       // ...namespace options
     }
   </select>
}
A tuple containing the current active namespace and setter callback.


Deprecated: Use the provided usePerspectiveContext instead. Creates the perspective context.



Deprecated: Use useAccessReview from @console/dynamic-plugin-sdk instead. Hook that provides allowed status about user access to a given resource. It returns the isAllowed boolean value.



Deprecated: This hook is not related to console functionality. Hook that ensures a safe asynchronnous setting of React state in case a given component could be unmounted. It returns an array with a pair of state value and its set function.



Deprecated: A basic lazy loaded YAML editor with hover help and completion.

<React.Suspense fallback={<LoadingBox />}>
  <YAMLEditor
    value={code}
  />
</React.Suspense>
Troubleshooting your dynamic plugin
Refer to this list of troubleshooting tips if you run into issues loading your plugin.

Verify that you have enabled your plugin in the console Operator configuration and your plugin name is the output by running the following command:

Verify your plugin service is healthy by:

Verify your ConsolePlugin resource name (consolePlugin.name) matches the plugin name used in package.json.

Verify your service name, namespace, port, and path are declared correctly in the ConsolePlugin resource.

Verify your plugin service uses HTTPS and service serving certificates.

Verify any certificates or connection errors in the console pod logs.

Verify the feature flag your plugin relys on is not disabled.

Verify your plugin does not have any consolePlugin.dependencies in package.json that are not met.

Verify there are no typos in the nav extension perspective or section IDs.

Verify there are no network policies that are blocking traffic from the console pod to your plugin service.

Verify the list of dynamic plugins to be loaded in your browser in the Console tab of the developer tools browser.


Understanding service serving certificates