Monitoring application health by using health checks

In software systems, components can become unhealthy due to transient issues such as temporary connectivity loss, configuration errors, or problems with external dependencies. Red Hat OpenShift Container Platform applications have a number of options to detect and handle unhealthy containers.
Understanding health checks
A health check periodically performs diagnostics on a running container using any combination of the readiness, liveness, and startup health checks.

You can include one or more probes in the specification for the pod that contains the container which you want to perform the health checks.

If you want to add or edit health checks in an existing pod, you must edit the pod DeploymentConfig object or use the Developer perspective in the web console. You cannot use the CLI to add or edit health checks for an existing pod.

Readiness probe
A readiness probe determines if a container is ready to accept service requests. If
the readiness probe fails for a container, the kubelet removes the pod from the list of available service endpoints.
Liveness health check
A liveness probe determines if a container is still
running. If the liveness probe fails due to a condition such as a deadlock, the kubelet kills the container. The pod then
responds based on its restart policy.
Startup probe
A startup probe indicates whether the application within a container is started. All other probes are disabled until the startup succeeds. If the startup probe does not succeed within a specified time period, the kubelet kills the container, and the container is subject to the pod restartPolicy.


You can configure liveness, readiness, and startup probes with any of the following types of tests:

HTTP GET: When using an HTTP GET test, the test determines the healthiness of the container by using a web hook. The test is successful if the HTTP response code is between 200 and 399.

Container Command: When using a container command test, the probe executes a command inside the container. The probe is successful if the test exits with a 0 status.

TCP socket: When using a TCP socket test, the probe attempts to open a socket to the container. The container is only
considered healthy if the probe can establish a connection. You can use a TCP socket test with applications that do not start listening until
initialization is complete.


You can configure several fields to control the behavior of a probe:

initialDelaySeconds: The time, in seconds, after the container starts before the probe can be scheduled. The default is 0.

periodSeconds: The delay, in seconds, between performing probes. The default is 10. This value must be greater than timeoutSeconds.

timeoutSeconds: The number of seconds of inactivity after which the probe times out and the container is assumed to have failed. The default is 1. This value must be lower than periodSeconds.

successThreshold: The number of times that the probe must report success after a failure to reset the container status to successful. The value must be 1 for a liveness probe. The default is 1.

failureThreshold: The number of times that the probe is allowed to fail. The default is 3. After the specified attempts:



The following are samples of different probes as they would appear in an object specification.

apiVersion: v1
kind: Pod
metadata:
  labels:
    test: health-check
  name: my-application
# ...
spec:
  containers:
  - name: goproxy-app 1
    args:
    image: registry.k8s.io/goproxy:0.1 2
    readinessProbe: 3
      exec: 4
        command: 5
        - cat
        - /tmp/healthy
# ...
The container name.

The container image to deploy.

A readiness probe.

A container command test.

The commands to execute on the container.


apiVersion: v1
kind: Pod
metadata:
  labels:
    test: health-check
  name: my-application
# ...
spec:
  containers:
  - name: goproxy-app 1
    args:
    image: registry.k8s.io/goproxy:0.1 2
    livenessProbe: 3
      httpGet: 4
        scheme: HTTPS 5
        path: /healthz
        port: 8080 6
        httpHeaders:
        - name: X-Custom-Header
          value: Awesome
    startupProbe: 7
      httpGet: 8
        path: /healthz
        port: 8080 9
      failureThreshold: 30 10
      periodSeconds: 10 11
# ...
The container name.

Specify the container image to deploy.

A liveness probe.

An HTTP GET test.

The internet scheme: HTTP or HTTPS. The default value is HTTP.

The port on which the container is listening.

A startup probe.

An HTTP GET test.

The port on which the container is listening.

The number of times to try the probe after a failure.

The number of seconds to perform the probe.


apiVersion: v1
kind: Pod
metadata:
  labels:
    test: health-check
  name: my-application
# ...
spec:
  containers:
  - name: goproxy-app 1
    args:
    image: registry.k8s.io/goproxy:0.1 2
    livenessProbe: 3
      exec: 4
        command: 5
        - /bin/bash
        - '-c'
        - timeout 60 /opt/eap/bin/livenessProbe.sh
      periodSeconds: 10 6
      successThreshold: 1 7
      failureThreshold: 3 8
# ...
The container name.

Specify the container image to deploy.

The liveness probe.

The type of probe, here a container command probe.

The command line to execute inside the container.

How often in seconds to perform the probe.

The number of consecutive successes needed to show success after a failure.

The number of times to try the probe after a failure.


kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    test: health-check
  name: my-application
spec:
# ...
  template:
    spec:
      containers:
        - resources: {}
          readinessProbe: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          name: ruby-ex
          livenessProbe: 2
            tcpSocket:
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
# ...
The readiness probe.

The liveness probe.
Configuring health checks using the CLI
To configure readiness, liveness, and startup probes, add one or more probes to the specification for the pod that contains the container which you want to perform the health checks

If you want to add or edit health checks in an existing pod, you must edit the pod DeploymentConfig object or use the Developer perspective in the web console. You cannot use the CLI to add or edit health checks for an existing pod.
To add probes for a container:

Create a Pod object to add one or more probes:

Create the Pod object:

Verify the state of the health check pod:
Monitoring application health using the Developer perspective
You can use the Developer perspective to add three types of health probes to your container to ensure that your application is healthy:

Use the Readiness probe to check if the container is ready to handle requests.

Use the Liveness probe to check if the container is running.

Use the Startup probe to check if the application within the container has started.


You can add health checks either while creating and deploying an application, or after you have deployed an application.
Editing health checks using the Developer perspective
You can use the Topology view to edit health checks added to your application, modify them, or add more health checks.

You have switched to the Developer perspective in the web console.

You have created and deployed an application on Red Hat OpenShift Container Platform using the Developer perspective.

You have added health checks to your application.


In the Topology view, right-click your application and select Edit Health Checks. Alternatively, in the side panel, click the Actions drop-down list and select Edit Health Checks.

In the Edit Health Checks page:

Click Save to save your modifications and add the additional probes to your container. You are redirected to the Topology view.

In the side panel, verify that the probes have been added by clicking on the deployed pod under the Pods section.

In the Pod Details page, click the listed container in the Containers section.

In the Container Details page, verify that the Liveness probe - HTTP Get 10.129.4.65:8080/ has been added to the container, in addition to the earlier existing probes.
Monitoring health check failures using the Developer perspective
In case an application health check fails, you can use the Topology view to monitor these health check violations.

You have switched to the Developer perspective in the web console.

You have created and deployed an application on Red Hat OpenShift Container Platform using the Developer perspective.

You have added health checks to your application.


In the Topology view, click on the application node to see the side panel.

Click the Observe tab to see the health check failures in the Events (Warning) section.

Click the down arrow adjoining Events (Warning) to see the details of the health check failure.


For details on switching to the Developer perspective in the web console, see About the Developer perspective.

For details on adding health checks while creating and deploying an application, see Advanced Options in the Creating applications using the Developer perspective section.