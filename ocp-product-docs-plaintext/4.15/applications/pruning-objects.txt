Pruning objects to reclaim resources

Over time, API objects created in Red Hat OpenShift Container Platform can accumulate in the cluster's etcd data store through normal user operations, such as when building and deploying applications.

Cluster administrators can periodically prune older versions of objects from the cluster that are no longer required. For example, by pruning images you can delete older images and layers that are no longer in use, but are still taking up disk space.
Basic pruning operations
The CLI groups prune operations under a common parent command:

$ oc adm prune <object_type> <options>
This specifies:

The <object_type> to perform the action on, such as groups, builds,
deployments, or images.

The <options> supported to prune that object type.
Pruning groups
To prune groups records from an external provider, administrators can run the following command:

$ oc adm prune groups \
    --sync-config=path/to/sync/config [<options>]

To see the groups that the prune command deletes, run the following command:

To perform the prune operation, add the --confirm flag:
Pruning deployment resources
You can prune resources associated with deployments that are no longer required by the system, due to age and status.

The following command prunes replication controllers associated with DeploymentConfig objects:

$ oc adm prune deployments [<options>]
To also prune replica sets associated with Deployment objects, use the --replica-sets flag. This flag is currently a Technology Preview feature.

To see what a pruning operation would delete, run the following command:

To actually perform the prune operation, add the --confirm flag:
Pruning builds
To prune builds that are no longer required by the system due to age and status, administrators can run the following command:

$ oc adm prune builds [<options>]

To see what a pruning operation would delete, run the following command:

To actually perform the prune operation, add the --confirm flag:


Developers can enable automatic build pruning by modifying their build configuration.
Performing advanced builds -> Pruning builds
Automatically pruning images
Images from the OpenShift image registry that are no longer required by the system due to age, status, or exceed limits are automatically pruned. Cluster administrators can configure the Pruning Custom Resource, or suspend it.

You have access to an Red Hat OpenShift Container Platform cluster using an account with cluster administrator permissions.

Install the oc CLI.


Verify that the object named imagepruners.imageregistry.operator.openshift.io/cluster contains the following spec and status fields:


spec:
  schedule: 0 0 * * * 1
  suspend: false 2
  keepTagRevisions: 3 3
  keepYoungerThanDuration: 60m 4
  keepYoungerThan: 3600000000000 5
  resources: {} 6
  affinity: {} 7
  nodeSelector: {} 8
  tolerations: [] 9
  successfulJobsHistoryLimit: 3 10
  failedJobsHistoryLimit: 3 11
status:
  observedGeneration: 2 12
  conditions: 13
  - type: Available
    status: "True"
    lastTransitionTime: 2019-10-09T03:13:45
    reason: Ready
    message: "Periodic image pruner has been created."
  - type: Scheduled
    status: "True"
    lastTransitionTime: 2019-10-09T03:13:45
    reason: Scheduled
    message: "Image pruner job has been scheduled."
  - type: Failed
    staus: "False"
    lastTransitionTime: 2019-10-09T03:13:45
    reason: Succeeded
    message: "Most recent image pruning job succeeded."
schedule: CronJob formatted schedule. This is an optional field, default is daily at midnight.

suspend: If set to true, the CronJob running pruning is suspended. This is an optional field, default is false. The initial value on new clusters is false.

keepTagRevisions: The number of revisions per tag to keep. This is an optional field, default is 3. The initial value is 3.

keepYoungerThanDuration: Retain images younger than this duration. This is an optional field. If a value is not specified, either keepYoungerThan or the default value 60m (60 minutes) is used.

keepYoungerThan: Deprecated. The same as keepYoungerThanDuration, but the duration is specified as an integer in nanoseconds. This is an optional field. When keepYoungerThanDuration is set, this field is ignored.

resources: Standard pod resource requests and limits. This is an optional field.

affinity: Standard pod affinity. This is an optional field.

nodeSelector: Standard pod node selector. This is an optional field.

tolerations: Standard pod tolerations. This is an optional field.

successfulJobsHistoryLimit: The maximum number of successful jobs to retain. Must be >= 1 to ensure metrics are reported. This is an optional field, default is 3. The initial value is 3.

failedJobsHistoryLimit: The maximum number of failed jobs to retain. Must be >= 1 to ensure metrics are reported. This is an optional field, default is 3. The initial value is 3.

observedGeneration: The generation observed by the Operator.

conditions: The standard condition objects with the following types:


The Image Registry Operator's behavior for managing the pruner is orthogonal to the managementState specified on the Image Registry Operator's ClusterOperator object. If the Image Registry Operator is not in the Managed state, the image pruner can still be configured and managed by the Pruning Custom Resource.

However, the managementState of the Image Registry Operator alters the behavior of the deployed image pruner job:

Managed: the --prune-registry flag for the image pruner is set to true.

Removed: the --prune-registry flag for the image pruner is set to false, meaning it only prunes image metadata in etcd.
Manually pruning images
The pruning custom resource enables automatic image pruning for the images from the OpenShift image registry. However, administrators can manually prune images that are no longer required by the system due to age, status, or exceed limits. There are two methods to manually prune images:

Running image pruning as a Job or CronJob on the cluster.

Running the oc adm prune images command.


To prune images, you must first log in to the CLI as a user with an access token. The user must also have the system:image-pruner cluster role or greater (for example, cluster-admin).

Expose the image registry.


To manually prune images that are no longer required by the system due to age, status, or exceed limits, use one of the following methods:

Run image pruning as a Job or CronJob on the cluster by creating a YAML file for the pruner service account, for example:

Run the oc adm prune images [<options>] command:


Image prune conditions
You can apply conditions to your manually pruned images.

To remove any image managed by Red Hat OpenShift Container Platform, or images with the annotation openshift.io/image.managed:

There is no support for pruning from external registries.

When an image is pruned, all references to the image are removed from all
image streams that have a reference to the image in status.tags.

Image layers that are no longer referenced by any images are removed.


The --prune-over-size-limit flag cannot be combined with the --keep-tag-revisions flag nor the --keep-younger-than flags. Doing so returns information that this operation is not allowed.
Separating the removal of Red Hat OpenShift Container Platform image API objects and image data from the registry by using --prune-registry=false, followed by hard pruning the registry, can narrow timing windows and is safer when compared to trying to prune both through one command. However, timing windows are not completely removed.

For example, you can still create a pod referencing an image as pruning identifies that image for pruning. You should still keep track of an API object created during the pruning operations that might reference images so that you can mitigate any references to deleted content.

Re-doing the pruning without the --prune-registry option or with --prune-registry=true does not lead to pruning the associated storage in the image registry for images previously pruned by --prune-registry=false. Any images that were pruned with --prune-registry=false can only be deleted from registry storage by hard pruning the registry.
Running the image prune operation
To see what a pruning operation would delete:

To perform the prune operation with the options from the previous step:
Using secure or insecure connections
The secure connection is the preferred and recommended approach. It is done over HTTPS protocol with a mandatory certificate verification. The prune command always attempts to use it if possible. If it is not possible, in some cases it can fall-back to insecure connection, which is dangerous. In this case, either certificate verification is skipped or plain HTTP protocol is used.

The fall-back to insecure connection is allowed in the following cases unless --certificate-authority is specified:

The prune command is run with the --force-insecure option.

The provided registry-url is prefixed with the http:// scheme.

The provided registry-url is a local-link address or localhost.

The configuration of the current user allows for an insecure connection. This
can be caused by the user either logging in using --insecure-skip-tls-verify
or choosing the insecure connection when prompted.


If the registry is secured by a certificate authority different from the one used by Red Hat OpenShift Container Platform, it must be specified using the --certificate-authority flag. Otherwise, the prune command fails with an error.
Image pruning problems

If your images keep accumulating and the prune command removes just a small portion of what you expect, ensure that you understand the image prune conditions that must apply for an image to be considered a candidate for pruning.

Ensure that images you want removed occur at higher positions in each tag history than your chosen tag revisions threshold. For example, consider an old and obsolete image named sha256:abz. By running the following command in your namespace, where the image is tagged, the image is tagged three times in a single image stream named myapp:

$ oc get is -n <namespace> -o go-template='{{range $isi, $is := .items}}{{range $ti, $tag := $is.status.tags}}'\
'{{range $ii, $item := $tag.items}}{{if eq $item.image "sha256:<hash>"}}{{$is.metadata.name}}:{{$tag.tag}} at position {{$ii}} out of {{len $tag.items}}\n'\
'{{end}}{{end}}{{end}}{{end}}'
myapp:v2 at position 4 out of 5
myapp:v2.1 at position 2 out of 2
myapp:v2.1-may-2016 at position 0 out of 1
When default options are used, the image is never pruned because it occurs at position 0 in a history of myapp:v2.1-may-2016 tag. For an image to be considered for pruning, the administrator must either:

Specify --keep-tag-revisions=0 with the oc adm prune images command.

Delete all the istags where the position is below the revision threshold,
which means myapp:v2.1 and myapp:v2.1-may-2016.

Move the image further in the history, either by running new builds pushing to
the same istag, or by tagging other image. This is not always
desirable for old release tags.


Tags having a date or time of a particular image's build in their names should be avoided, unless the image must be preserved for an undefined amount of time. Such tags tend to have just one image in their history, which prevents them from ever being pruned.


If you see a message similar to the following in the output of the oc adm prune images command, then your registry is not secured and the oc adm prune images client attempts to use a secure connection:

error: error communicating with registry: Get https://172.30.30.30:5000/healthz: http: server gave HTTP response to HTTPS client
The recommended solution is to secure the registry. Otherwise, you can force the
client to use an insecure connection by appending --force-insecure  to the
command; however, this is not recommended.



If you see one of the following errors in the output of the oc adm prune images command, it means that your registry is secured using a certificate signed by a certificate authority other than the one used by oc adm prune images client for connection verification:

error: error communicating with registry: Get http://172.30.30.30:5000/healthz: malformed HTTP response "\x15\x03\x01\x00\x02\x02"
error: error communicating with registry: [Get https://172.30.30.30:5000/healthz: x509: certificate signed by unknown authority, Get http://172.30.30.30:5000/healthz: malformed HTTP response "\x15\x03\x01\x00\x02\x02"]
By default, the certificate authority data stored in the user's configuration files is used; the same is true for communication with the master API.

Use the --certificate-authority option to provide the right certificate authority for the container image registry server.


The following error means that the certificate authority used to sign the certificate of the secured container image registry is different from the authority used by the client:

error: error communicating with registry: Get https://172.30.30.30:5000/: x509: certificate signed by unknown authority
Make sure to provide the right one with the flag --certificate-authority.

As a workaround, the --force-insecure flag can be added instead. However, this is not recommended.

Accessing the registry

Exposing the registry

See
Image
Registry Operator in Red Hat OpenShift Container Platform for information on how to create a
registry route.
Hard pruning the registry
The OpenShift Container Registry can accumulate blobs that are not referenced by the Red Hat OpenShift Container Platform cluster's etcd. The basic pruning images procedure, therefore, is unable to operate on them. These are called orphaned blobs.

Orphaned blobs can occur from the following scenarios:

Manually deleting an image with oc delete image <sha256:image-id> command,
which only removes the image from etcd, but not from the registry's storage.

Pushing to the registry initiated by daemon failures, which causes some blobs to
get uploaded, but the image manifest (which is uploaded as the very last
component) does not. All unique image blobs become orphans.

Red Hat OpenShift Container Platform refusing an image because of quota restrictions.

The standard image pruner deleting an image manifest, but is interrupted before
it deletes the related blobs.

A bug in the registry pruner, which fails to remove the intended blobs, causing
the image objects referencing them to be removed and the blobs becoming orphans.


Hard pruning the registry, a separate procedure from basic image pruning, allows cluster administrators to remove orphaned blobs. You should hard prune if you are running out of storage space in your OpenShift Container Registry and believe you have orphaned blobs.

This should be an infrequent operation and is necessary only when you have evidence that significant numbers of new orphans have been created. Otherwise, you can perform standard image pruning at regular intervals, for example, once a day (depending on the number of images being created).

To hard prune orphaned blobs from the registry:

Log in.

Run a basic image prune.

Switch the registry to read-only mode.

Add the system:image-pruner role.

Optional: Run the pruner in dry-run mode.

Run the hard prune.

Switch the registry back to read-write mode.
Pruning cron jobs
Cron jobs can perform pruning of successful jobs, but might not properly handle failed jobs. Therefore, the cluster administrator should perform regular cleanup of jobs manually. They should also restrict the access to cron jobs to a small group of trusted users and set appropriate quota to prevent the cron job from creating too many jobs and pods.

Running tasks in pods using jobs

Resource quotas across multiple projects

Using RBAC to define and apply permissions