Getting started with service binding on IBM Power, IBM Z, and IBM LinuxONE

The Service Binding Operator manages the data plane for workloads and backing services. This guide provides instructions with examples to help you create a database instance, deploy an application, and use the Service Binding Operator to create a binding connection between the application and the database service.


You have access to an Red Hat OpenShift Container Platform cluster using an account with cluster-admin permissions.

You have installed the oc CLI.

You have installed the Service Binding Operator from OperatorHub.
Deploying a PostgreSQL Operator
To deploy the Dev4Devs PostgreSQL Operator in the my-petclinic namespace run the following command in shell:


$ oc apply -f - << EOD
---
apiVersion: v1
kind: Namespace
metadata:
  name: my-petclinic
---
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: postgres-operator-group
  namespace: my-petclinic
---
apiVersion: operators.coreos.com/v1alpha1
kind: CatalogSource
metadata:
  name: ibm-multiarch-catalog
  namespace: openshift-marketplace
spec:
  sourceType: grpc
  image: quay.io/ibm/operator-registry-<architecture> 1
  imagePullPolicy: IfNotPresent
  displayName: ibm-multiarch-catalog
  updateStrategy:
    registryPoll:
      interval: 30m
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: postgresql-operator-dev4devs-com
  namespace: openshift-operators
spec:
  channel: alpha
  installPlanApproval: Automatic
  name: postgresql-operator-dev4devs-com
  source: ibm-multiarch-catalog
  sourceNamespace: openshift-marketplace
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: database-view
  labels:
    servicebinding.io/controller: "true"
rules:
  - apiGroups:
      - postgresql.dev4devs.com
    resources:
      - databases
    verbs:
      - get
      - list
EOD
The Operator image.


After the operator is installed, list the operator subscriptions in the openshift-operators namespace:
Creating a PostgreSQL database instance
To create a PostgreSQL database instance, you must create a Database custom resource (CR) and configure the database.

Create the Database CR in the my-petclinic namespace by running the following command in shell:

After you have created the database instance, ensure that all the pods in the my-petclinic namespace are running:


After the database is configured, you can deploy the sample application and connect it to the database service.
Deploying the Spring PetClinic sample application
To deploy the Spring PetClinic sample application on an Red Hat OpenShift Container Platform cluster, you must use a deployment configuration and configure your local environment to be able to test the application.

Deploy the spring-petclinic application with the PostgresCluster custom resource (CR) by running the following command in shell:

Verify that the application is not yet connected to the database service by running the following command:


You can now use the Service Binding Operator to connect the application to the database service.
Connecting the Spring PetClinic sample application to the PostgreSQL database service
To connect the sample application to the database service, you must create a ServiceBinding custom resource (CR) that triggers the Service Binding Operator to project the binding data into the application.

Create a ServiceBinding CR to project the binding data:

Verify that the request for service binding is successful:

Once this is created, you can go to the topology to see the visual connection.

Set up the port forwarding from the application port to access the sample application from your local environment:

Access http://localhost:8080.
Additional resources
Installing Service Binding Operator

Creating applications using the Developer perspective

Managing resources from custom resource definitions