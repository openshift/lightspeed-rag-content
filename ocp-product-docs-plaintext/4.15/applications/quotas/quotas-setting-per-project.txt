Resource quotas per project

A resource quota, defined by a ResourceQuota object, provides constraints that limit aggregate resource consumption per project. It can limit the quantity of objects that can be created in a project by type, as well as the total amount of compute resources and storage that might be consumed by resources in that project.

This guide describes how resource quotas work, how cluster administrators can set and manage resource quotas on a per project basis, and how developers and cluster administrators can view them.
Resources managed by quotas
The following describes the set of compute resources and object types that can be managed by a quota.

A pod is in a terminal state if status.phase in (Failed, Succeeded) is true.
Quota scopes
Each quota can have an associated set of scopes. A quota only measures usage for a resource if it matches the intersection of enumerated scopes.

Adding a scope to a quota restricts the set of resources to which that quota can apply. Specifying a resource outside of the allowed set results in a validation error.


A BestEffort scope restricts a quota to limiting the following resources:

pods


A NotBestEffort scope restricts a quota to tracking the following resources:

pods

memory

requests.memory

limits.memory

cpu

requests.cpu

limits.cpu
Quota enforcement
After a resource quota for a project is first created, the project restricts the ability to create any new resources that may violate a quota constraint until it has calculated updated usage statistics.

After a quota is created and usage statistics are updated, the project accepts the creation of new content. When you create or modify resources, your quota usage is incremented immediately upon the request to create or modify the resource.

When you delete a resource, your quota use is decremented during the next full recalculation of quota statistics for the project. A configurable amount of time determines how long it takes to reduce quota usage statistics to their current observed system value.

If project modifications exceed a quota usage limit, the server denies the action, and an appropriate error message is returned to the user explaining the quota constraint violated, and what their currently observed usage statistics are in the system.
Requests versus limits
When allocating compute resources, each container might specify a request and a limit value each for CPU, memory, and ephemeral storage. Quotas can restrict any of these values.

If the quota has a value specified for requests.cpu or requests.memory, then it requires that every incoming container make an explicit request for those resources. If the quota has a value specified for limits.cpu or limits.memory, then it requires that every incoming container specify an explicit limit for those resources.
Sample resource quota definitions
apiVersion: v1
kind: ResourceQuota
metadata:
  name: core-object-counts
spec:
  hard:
    configmaps: "10" 1
    persistentvolumeclaims: "4" 2
    replicationcontrollers: "20" 3
    secrets: "10" 4
    services: "10" 5
    services.loadbalancers: "2" 6
The total number of ConfigMap objects that can exist in the project.

The total number of persistent volume claims (PVCs) that can exist in the
project.

The total number of replication controllers that can exist in the project.

The total number of secrets that can exist in the project.

The total number of services that can exist in the project.

The total number of services of type LoadBalancer that can exist in the project.


apiVersion: v1
kind: ResourceQuota
metadata:
  name: openshift-object-counts
spec:
  hard:
    openshift.io/imagestreams: "10" 1
The total number of image streams that can exist in the project.


apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-resources
spec:
  hard:
    pods: "4" 1
    requests.cpu: "1" 2
    requests.memory: 1Gi 3
    limits.cpu: "2" 4
    limits.memory: 2Gi 5
The total number of pods in a non-terminal state that can exist in the project.

Across all pods in a non-terminal state, the sum of CPU requests cannot exceed 1 core.

Across all pods in a non-terminal state, the sum of memory requests cannot exceed 1Gi.

Across all pods in a non-terminal state, the sum of CPU limits cannot exceed 2 cores.

Across all pods in a non-terminal state, the sum of memory limits cannot exceed 2Gi.


apiVersion: v1
kind: ResourceQuota
metadata:
  name: besteffort
spec:
  hard:
    pods: "1" 1
  scopes:
  - BestEffort 2
The total number of pods in a non-terminal state with BestEffort quality of service that can exist in the project.

Restricts the quota to only matching pods that have BestEffort quality of service for either memory or CPU.


apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-resources-long-running
spec:
  hard:
    pods: "4" 1
    limits.cpu: "4" 2
    limits.memory: "2Gi" 3
  scopes:
  - NotTerminating 4
The total number of pods in a non-terminal state.

Across all pods in a non-terminal state, the sum of CPU limits cannot exceed this value.

Across all pods in a non-terminal state, the sum of memory limits cannot exceed this value.

Restricts the quota to only matching pods where spec.activeDeadlineSeconds is set to nil. Build pods fall under NotTerminating unless the RestartNever policy is applied.


apiVersion: v1
kind: ResourceQuota
metadata:
  name: compute-resources-time-bound
spec:
  hard:
    pods: "2" 1
    limits.cpu: "1" 2
    limits.memory: "1Gi" 3
  scopes:
  - Terminating 4
The total number of pods in a terminating state.

Across all pods in a terminating state, the sum of CPU limits cannot exceed this value.

Across all pods in a terminating state, the sum of memory limits cannot exceed this value.

Restricts the quota to only matching pods where spec.activeDeadlineSeconds >=0. For example, this quota charges for build or deployer pods, but not long running pods like a web server or database.


apiVersion: v1
kind: ResourceQuota
metadata:
  name: storage-consumption
spec:
  hard:
    persistentvolumeclaims: "10" 1
    requests.storage: "50Gi" 2
    gold.storageclass.storage.k8s.io/requests.storage: "10Gi" 3
    silver.storageclass.storage.k8s.io/requests.storage: "20Gi" 4
    silver.storageclass.storage.k8s.io/persistentvolumeclaims: "5" 5
    bronze.storageclass.storage.k8s.io/requests.storage: "0" 6
    bronze.storageclass.storage.k8s.io/persistentvolumeclaims: "0" 7
    requests.ephemeral-storage: 2Gi 8
    limits.ephemeral-storage: 4Gi 9
The total number of persistent volume claims in a project

Across all persistent volume claims in a project, the sum of storage requested cannot exceed this value.

Across all persistent volume claims in a project, the sum of storage requested in the gold storage class cannot exceed this value.

Across all persistent volume claims in a project, the sum of storage requested in the silver storage class cannot exceed this value.

Across all persistent volume claims in a project, the total number of claims in the silver storage class cannot exceed this value.

Across all persistent volume claims in a project, the sum of storage requested in the bronze storage class cannot exceed this value. When this is set to 0, it means bronze storage class cannot request storage.

Across all persistent volume claims in a project, the sum of storage requested in the bronze storage class cannot exceed this value. When this is set to 0, it means bronze storage class cannot create claims.

Across all pods in a non-terminal state, the sum of ephemeral storage requests cannot exceed 2Gi.

Across all pods in a non-terminal state, the sum of ephemeral storage limits cannot exceed 4Gi.
Creating a quota
You can create a quota to constrain resource usage in a given project.

Define the quota in a file.

Use the file to create the quota and apply it to a project:


Creating object count quotas
You can create an object count quota for all standard namespaced resource types on Red Hat OpenShift Container Platform, such as BuildConfig and DeploymentConfig objects. An object quota count places a defined quota on all standard namespaced resource types.

When using a resource quota, an object is charged against the quota upon creation. These types of quotas are useful to protect against exhaustion of resources. The quota can only be created if there are enough spare resources within the project.

To configure an object count quota for a resource:

Run the following command:

Verify that the quota was created:
Setting resource quota for extended resources
Overcommitment of resources is not allowed for extended resources, so you must specify requests and limits for the same extended resource in a quota. Currently, only quota items with the prefix requests. is allowed for extended resources. The following is an example scenario of how to set resource quota for the GPU resource nvidia.com/gpu.

Determine how many GPUs are available on a node in your cluster. For example:

Create a ResourceQuota object to set a quota in the namespace nvidia. In this example, the quota is 1:

Create the quota:

Verify that the namespace has the correct quota set:

Define a pod that asks for a single GPU. The following example definition file is called gpu-pod.yaml:

Create the pod:

Verify that the pod is running:

Verify that the quota Used counter is correct:

Attempt to create a second GPU pod in the nvidia namespace. This is technically available on the node because it has 2 GPUs:
Viewing a quota
You can view usage statistics related to any hard limits defined in a project's quota by navigating in the web console to the project's Quota page.

You can also use the CLI to view quota details.

Get the list of quotas defined in the project. For example, for a project called
demoproject:

Describe the quota you are interested in, for example the core-object-counts
quota:
Configuring explicit resource quotas
Configure explicit resource quotas in a project request template to apply specific resource quotas in new projects.

Access to the cluster as a user with the cluster-admin role.

Install the OpenShift CLI (oc).


Add a resource quota definition to a project request template:

If you created a project request template, reference it in the cluster's project configuration resource:

Verify that the resource quota is applied when projects are created: