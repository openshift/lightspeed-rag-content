Configuring SSH access to virtual machines

You can configure SSH access to virtual machines (VMs) by using the following methods:

virtctl ssh command

virtctl port-forward command

Service

Secondary network
Access configuration considerations
Each method for configuring access to a virtual machine (VM) has advantages and limitations, depending on the traffic load and client requirements.

Services provide excellent performance and are recommended for applications that are accessed from outside the cluster.

If the internal cluster network cannot handle the traffic load, you can configure a secondary network.


virtctl ssh and virtctl port-forwarding commands

Cluster IP service

Node port service

Load balancer service

Secondary network
Using virtctl ssh
You can add a public SSH key to a virtual machine (VM) and connect to the VM by running the virtctl ssh command.

This method is simple to configure. However, it is not recommended for high traffic loads because it places a burden on the API server.

About static and dynamic SSH key management
You can add public SSH keys to virtual machines (VMs) statically at first boot or dynamically at runtime.

Only Red Hat Enterprise Linux (RHEL) 9 supports dynamic key injection.

You can add a statically managed SSH key to a VM with a guest operating system that supports configuration by using a cloud-init data source. The key is added to the virtual machine (VM) at first boot.

You can add the key by using one of the following methods:

Add a key to a single VM when you create it by using the web console or the command line.

Add a key to a project by using the web console. Afterwards, the key is automatically added to the VMs that you create in this project.


As a VM owner, you can provision all your newly created VMs with a single key.



You can enable dynamic SSH key management for a VM with Red Hat Enterprise Linux (RHEL) 9 installed. Afterwards, you can update the key during runtime. The key is added by the QEMU guest agent, which is installed with Red Hat boot sources.

You can disable dynamic key management for security reasons. Then, the VM inherits the key management setting of the image from which it was created.

Granting or revoking access to VMs: As a cluster administrator, you can grant or revoke remote VM access by adding or removing the keys of individual users from a Secret object that is applied to all VMs in a namespace.

User access: You can add your access credentials to all VMs that you create and manage.

Ansible provisioning:

Key rotation:
Static key management
You can add a statically managed public SSH key when you create a virtual machine (VM) by using the "Red Hat OpenShift Container Platform" web console or the command line. The key is added as a cloud-init data source when the VM boots for the first time.

You can also add the key to a project by using the "Red Hat OpenShift Container Platform" web console. Afterwards, this key is added automatically to VMs that you create in the project.
Adding a key when creating a VM from a template
You can add a statically managed public SSH key when you create a virtual machine (VM) by using the "Red Hat OpenShift Container Platform" web console. The key is added to the VM as a cloud-init data source at first boot. This method does not affect cloud-init user data.

Optional: You can add a key to a project. Afterwards, this key is added automatically to VMs that you create in the project.

You generated an SSH key pair by running the ssh-keygen command.


Navigate to Virtualization -> Catalog in the web console.

Click a template tile.

Click Customize VirtualMachine.

Click Next.

Click the Scripts tab.

If you have not already added a public SSH key to your project, click the edit icon beside Authorized SSH key and select one of the following options:

Click Save.

Click Create VirtualMachine.


Click the Scripts tab on the Configuration tab.
Adding a key when creating a VM from an instance type by using the web console
You can add a statically managed SSH key when you create a virtual machine (VM) from an instance type by using the "Red Hat OpenShift Container Platform" web console. The key is added to the VM as a cloud-init data source at first boot. This method does not affect cloud-init user data.

In the web console, navigate to Virtualization -> Catalog and click the InstanceTypes tab.

Select either of the following options:

If you have not already added a public SSH key to your project, click the edit icon beside Authorized SSH key in the VirtualMachine details section.

Select one of the following options:

Optional: Click View YAML & CLI to view the YAML file. Click CLI to view the CLI commands. You can also download or copy either the YAML file contents or the CLI commands.

Click Create VirtualMachine.


After the VM is created, you can monitor the status on the VirtualMachine details page.
Adding a key when creating a VM by using the command line
You can add a statically managed public SSH key when you create a virtual machine (VM) by using the command line. The key is added to the VM at first boot.

The key is added to the VM as a cloud-init data source. This method separates the access credentials from the application data in the cloud-init user data. This method does not affect cloud-init user data.

You generated an SSH key pair by running the ssh-keygen command.


Create a manifest file for a VirtualMachine object and a Secret object:

Create the VirtualMachine and Secret objects by running the following command:

Start the VM by running the following command:


Get the VM configuration:
Dynamic key management
You can enable dynamic key injection for a virtual machine (VM) by using the "Red Hat OpenShift Container Platform" web console or the command line. Then, you can update the key at runtime.

Only Red Hat Enterprise Linux (RHEL) 9 supports dynamic key injection.
If you disable dynamic key injection, the VM inherits the key management method of the image from which it was created.

Enabling dynamic key injection when creating a VM from a template
You can enable dynamic public SSH key injection when you create a virtual machine (VM) from a template by using the "Red Hat OpenShift Container Platform" web console. Then, you can update the key at runtime.

Only Red Hat Enterprise Linux (RHEL) 9 supports dynamic key injection.
The key is added to the VM by the QEMU guest agent, which is installed with RHEL 9.

You generated an SSH key pair by running the ssh-keygen command.


Navigate to Virtualization -> Catalog in the web console.

Click the Red Hat Enterprise Linux 9 VM tile.

Click Customize VirtualMachine.

Click Next.

Click the Scripts tab.

If you have not already added a public SSH key to your project, click the edit icon beside Authorized SSH key and select one of the following options:

Set Dynamic SSH key injection to on.

Click Save.

Click Create VirtualMachine.


Click the Scripts tab on the Configuration tab.
Enabling dynamic key injection when creating a VM from an instance type by using the web console
You can enable dynamic SSH key injection when you create a virtual machine (VM) from an instance type by using the "Red Hat OpenShift Container Platform" web console. Then, you can add or revoke the key at runtime.

Only Red Hat Enterprise Linux (RHEL) 9 supports dynamic key injection.
The key is added to the VM by the QEMU guest agent, which is installed with RHEL 9.

In the web console, navigate to Virtualization -> Catalog and click the InstanceTypes tab.

Select either of the following options:

Click the Red Hat Enterprise Linux 9 VM tile.

If you have not already added a public SSH key to your project, click the edit icon beside Authorized SSH key in the VirtualMachine details section.

Select one of the following options:

Set Dynamic SSH key injection in the VirtualMachine details section to on.

Optional: Click View YAML & CLI to view the YAML file. Click CLI to view the CLI commands. You can also download or copy either the YAML file contents or the CLI commands.

Click Create VirtualMachine.


After the VM is created, you can monitor the status on the VirtualMachine details page.
Enabling dynamic SSH key injection by using the web console
You can enable dynamic key injection for a virtual machine (VM) by using the "Red Hat OpenShift Container Platform" web console. Then, you can update the public SSH key at runtime.

The key is added to the VM by the QEMU guest agent, which is installed with Red Hat Enterprise Linux (RHEL) 9.

The guest operating system is RHEL 9.


Navigate to Virtualization -> VirtualMachines in the web console.

Select a VM to open the VirtualMachine details page.

On the Configuration tab, click Scripts.

If you have not already added a public SSH key to your project, click the edit icon beside Authorized SSH key and select one of the following options:

Set Dynamic SSH key injection to on.

Click Save.
Enabling dynamic key injection by using the command line
You can enable dynamic key injection for a virtual machine (VM) by using the command line. Then, you can update the public SSH key at runtime.

Only Red Hat Enterprise Linux (RHEL) 9 supports dynamic key injection.
The key is added to the VM by the QEMU guest agent, which is installed automatically with RHEL 9.

You generated an SSH key pair by running the ssh-keygen command.


Create a manifest file for a VirtualMachine object and a Secret object:

Create the VirtualMachine and Secret objects by running the following command:

Start the VM by running the following command:


Get the VM configuration:
Using the virtctl ssh command
You can access a running virtual machine (VM) by using the virtcl ssh command.

You installed the virtctl command line tool.

You added a public SSH key to the VM.

You have an SSH client installed.

The environment where you installed the virtctl tool has the cluster permissions required to access the VM. For example, you ran oc login or you set the KUBECONFIG environment variable.


Run the virtctl ssh command:


You can copy the virtctl ssh command in the web console by selecting Copy SSH command from the options  menu beside a VM on the VirtualMachines page.
Using the virtctl port-forward command
You can use your local OpenSSH client and the virtctl port-forward command to connect to a running virtual machine (VM). You can use this method with Ansible to automate the configuration of VMs.

This method is recommended for low-traffic applications because port-forwarding traffic is sent over the control plane. This method is not recommended for high-traffic applications such as Rsync or Remote Desktop Protocol because it places a heavy burden on the API server.

You have installed the virtctl client.

The virtual machine you want to access is running.

The environment where you installed the virtctl tool has the cluster permissions required to access the VM. For example, you ran oc login or you set the KUBECONFIG environment variable.


Add the following text to the ~/.ssh/config file on your client machine:

Connect to the VM by running the following command:
Using a service for SSH access
You can create a service for a virtual machine (VM) and connect to the IP address and port exposed by the service.

Services provide excellent performance and are recommended for applications that are accessed from outside the cluster or within the cluster. Ingress traffic is protected by firewalls.

If the cluster network cannot handle the traffic load, consider using a secondary network for VM access.

About services
A Kubernetes service exposes network access for clients to an application running on a set of pods. Services offer abstraction, load balancing, and, in the case of the NodePort and LoadBalancer types, exposure to the outside world.


ClusterIP
Exposes the service on an internal IP address and as a DNS name to other applications within the cluster. A single service can map to multiple virtual machines. When a client tries to connect to the service, the client's request is load balanced among available backends. ClusterIP is the default service type.
NodePort
Exposes the service on the same port of each selected node in the cluster. NodePort makes a port accessible from outside the cluster, as long as the node itself is externally accessible to the client.
LoadBalancer
Creates an external load balancer in the current cloud (if supported) and assigns a fixed, external IP address to the service.


For on-premise clusters, you can configure a load-balancing service by deploying the MetalLB Operator.
Creating a service
You can create a service to expose a virtual machine (VM) by using the "Red Hat OpenShift Container Platform" web console, virtctl command line tool, or a YAML file.

Enabling load balancer service creation by using the web console
You can enable the creation of load balancer services for a virtual machine (VM) by using the "Red Hat OpenShift Container Platform" web console.

You have configured a load balancer for the cluster.

You are logged in as a user with the cluster-admin role.


Navigate to Virtualization -> Overview.

On the Settings tab, click Cluster.

Expand General settings and SSH configuration.

Set SSH over LoadBalancer service to on.
Creating a service by using the web console
You can create a node port or load balancer service for a virtual machine (VM) by using the "Red Hat OpenShift Container Platform" web console.

You configured the cluster network to support either a load balancer or a node port.

To create a load balancer service, you enabled the creation of load balancer services.


Navigate to VirtualMachines and select a virtual machine to view the VirtualMachine details page.

On the Details tab, select SSH over LoadBalancer from the SSH service type list.

Optional: Click the copy icon to copy the SSH command to your clipboard.


Check the Services pane on the Details tab to view the new service.
Creating a service by using virtctl
You can create a service for a virtual machine (VM) by using the virtctl command line tool.

You installed the virtctl command line tool.

You configured the cluster network to support the service.

The environment where you installed virtctl has the cluster permissions required to access the VM. For example, you ran oc login or you set the KUBECONFIG environment variable.


Create a service by running the following command:


Verify the service by running the following command:


After you create a service with virtctl, you must add special: key to the spec.template.metadata.labels stanza of the VirtualMachine manifest. See Creating a service by using the command line.
Creating a service by using the command line
You can create a service and associate it with a virtual machine (VM) by using the command line.

You configured the cluster network to support the service.


Edit the VirtualMachine manifest to add the label for service creation:

Save the VirtualMachine manifest file to apply your changes.

Create a Service manifest to expose the VM:

Save the Service manifest file.

Create the service by running the following command:

Restart the VM to apply the changes.


Query the Service object to verify that it is available:
Connecting to a VM exposed by a service by using SSH
You can connect to a virtual machine (VM) that is exposed by a service by using SSH.

You created a service to expose the VM.

You have an SSH client installed.

You are logged in to the cluster.


Run the following command to access the VM:
Using a secondary network for SSH access
You can configure a secondary network, attach a virtual machine (VM) to the secondary network interface, and connect to the DHCP-allocated IP address by using SSH.

Secondary networks provide excellent performance because the traffic is not handled by the cluster network stack. However, the VMs are exposed directly to the secondary network and are not protected by firewalls. If a VM is compromised, an intruder could gain access to the secondary network. You must configure appropriate security within the operating system of the VM if you use this method.
See the Multus and SR-IOV documentation in the OpenShift Virtualization Tuning & Scaling Guide for additional information about networking options.

You configured a secondary network such as Linux bridge or SR-IOV.

You created a network attachment definition for a Linux bridge network or the SR-IOV Network Operator created a network attachment definition when you created an SriovNetwork object.


Configuring a VM network interface by using the web console
You can configure a network interface for a virtual machine (VM) by using the "Red Hat OpenShift Container Platform" web console.

You created a network attachment definition for the network.


Navigate to Virtualization -> VirtualMachines.

Click a VM to view the VirtualMachine details page.

On the Configuration tab, click the Network interfaces tab.

Click Add network interface.

Enter the interface name and select the network attachment definition from the Network list.

Click Save.

Restart the VM to apply the changes.
Connecting to a VM attached to a secondary network by using SSH
You can connect to a virtual machine (VM) attached to a secondary network by using SSH.

You attached a VM to a secondary network with a DHCP server.

You have an SSH client installed.


Obtain the IP address of the VM by running the following command:

Connect to the VM by running the following command:


You can also access a VM attached to a secondary network interface by using the cluster FQDN.