Creating VMs by using container disks

You can create virtual machines (VMs) by using container disks built from operating system images.

You can enable auto updates for your container disks. See Managing automatic boot source updates for details.

If the container disks are large, the I/O traffic might increase and cause worker nodes to be unavailable. You can perform the following tasks to resolve this issue:

Pruning DeploymentConfig objects.

Configuring garbage collection.
You create a VM from a container disk by performing the following steps:

Build an operating system image into a container disk and upload it to your container registry.

If your container registry does not have TLS, configure your environment to disable TLS for your registry.

Create a VM with the container disk as the disk source by using the web console or the command line.


You must install the QEMU guest agent on VMs created from operating system images that are not provided by Red Hat.
Building and uploading a container disk
You can build a virtual machine (VM) image into a container disk and upload it to a registry.

The size of a container disk is limited by the maximum layer size of the registry where the container disk is hosted.

For Red Hat Quay, you can change the maximum layer size by editing the YAML configuration file that is created when Red Hat Quay is first deployed.
You must have podman installed.

You must have a QCOW2 or RAW image file.


Create a Dockerfile to build the VM image into a container image. The VM image must be owned by QEMU, which has a UID of 107, and placed in the /disk/ directory inside the container. Permissions for the /disk/ directory must then be set to 0440.

Build and tag the container:

Push the container image to the registry:
Disabling TLS for a container registry
You can disable TLS (transport layer security) for one or more container registries by editing the insecureRegistries field of the HyperConverged custom resource.

Open the HyperConverged CR in your default editor by running the following command:

Add a list of insecure registries to the spec.storageImport.insecureRegistries field.
Creating a VM from a container disk by using the web console
You can create a virtual machine (VM) by importing a container disk from a container registry by using the Red Hat OpenShift Container Platform web console.

Navigate to Virtualization -> Catalog in the web console.

Click a template tile without an available boot source.

Click Customize VirtualMachine.

On the Customize template parameters page, expand Storage and select Registry (creates PVC) from the Disk source list.

Enter the container image URL. Example: https://mirror.arizona.edu/fedora/linux/releases/38/Cloud/x86_64/images/Fedora-Cloud-Base-38-1.6.x86_64.qcow2

Set the disk size.

Click Next.

Click Create VirtualMachine.
Creating a VM from a container disk by using the command line
You can create a virtual machine (VM) from a container disk by using the command line.

When the virtual machine (VM) is created, the data volume with the container disk is imported into persistent storage.

You must have access credentials for the container registry that contains the container disk.


If the container registry requires authentication, create a Secret manifest, specifying the credentials, and save it as a data-source-secret.yaml file:

Apply the Secret manifest by running the following command:

If the VM must communicate with servers that use self-signed certificates or certificates that are not signed by the system CA bundle, create a config map in the same namespace as the VM:

Edit the VirtualMachine manifest and save it as a vm-fedora-datavolume.yaml file:

Create the VM by running the following command:


The importer pod downloads the container disk from the specified URL and stores it on the provisioned persistent volume. View the status of the importer pod by running the following command:

Monitor the data volume until its status is Succeeded by running the following command:

Verify that provisioning is complete and that the VM has started by accessing its serial console: