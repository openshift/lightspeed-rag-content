Using DPDK with SR-IOV

The Data Plane Development Kit (DPDK) provides a set of libraries and drivers for fast packet processing.

You can configure clusters and virtual machines (VMs) to run DPDK workloads over SR-IOV networks.
Configuring a cluster for DPDK workloads
You can configure an Red Hat OpenShift Container Platform cluster to run Data Plane Development Kit (DPDK) workloads for improved network performance.

You have access to the cluster as a user with cluster-admin permissions.

You have installed the OpenShift CLI (oc).

You have installed the SR-IOV Network Operator.

You have installed the Node Tuning Operator.


Map your compute nodes topology to determine which Non-Uniform Memory Access (NUMA) CPUs are isolated for DPDK applications and which ones are reserved for the operating system (OS).

Label a subset of the compute nodes with a custom role; for example, worker-dpdk:

Create a new MachineConfigPool manifest that contains the worker-dpdk label in the spec.machineConfigSelector object:

Create a PerformanceProfile manifest that applies to the labeled nodes and the machine config pool that you created in the previous steps. The performance profile specifies the CPUs that are isolated for DPDK applications and the CPUs that are reserved for house keeping.

Retrieve the name of the generated RuntimeClass resource from the status.runtimeClass field of the PerformanceProfile object:

Set the previously obtained RuntimeClass name as the default container runtime class for the virt-launcher pods by editing the HyperConverged custom resource (CR):

If your DPDK-enabled compute nodes use Simultaneous multithreading (SMT), enable the AlignCPUs enabler by editing the HyperConverged CR:

Create an SriovNetworkNodePolicy object with the spec.deviceType field set to vfio-pci:


Using CPU Manager and Topology Manager

Configuring huge pages

Creating a custom machine config pool
Configuring a project for DPDK workloads
You can configure the project to run DPDK workloads on SR-IOV hardware.

Your cluster is configured to run DPDK workloads.


Create a namespace for your DPDK applications:

Create an SriovNetwork object that references the SriovNetworkNodePolicy object. When you create an SriovNetwork object, the SR-IOV Network Operator automatically creates a NetworkAttachmentDefinition object.

Optional: Run the virtual machine latency checkup to verify that the network is properly configured.

Optional: Run the DPDK checkup to verify that the namespace is ready for DPDK workloads.


Working with projects

Virtual machine latency checkup

DPDK checkup
Configuring a virtual machine for DPDK workloads
You can run Data Packet Development Kit (DPDK) workloads on virtual machines (VMs) to achieve lower latency and higher throughput for faster packet processing in the user space. DPDK uses the SR-IOV network for hardware-based I/O sharing.

Your cluster is configured to run DPDK workloads.

You have created and configured the project in which the VM will run.


Edit the VirtualMachine manifest to include information about the SR-IOV network interface, CPU topology, CRI-O annotations, and huge pages:

Save and exit the editor.

Apply the VirtualMachine manifest:

Configure the guest operating system. The following example shows the configuration steps for RHEL 8 OS:

Restart the VM to apply the changes.