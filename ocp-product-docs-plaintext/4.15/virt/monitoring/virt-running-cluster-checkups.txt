OpenShift Virtualization cluster checkup framework

OpenShift Virtualization includes the following predefined checkups that can be used for cluster maintenance and troubleshooting:


Latency checkup
Verifies network connectivity and measures latency between two virtual machines (VMs) that are attached to a secondary network interface.
DPDK checkup
Verifies that a node can run a VM with a Data Plane Development Kit (DPDK) workload with zero packet loss.


The OpenShift Virtualization cluster checkup framework is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.

For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
About the OpenShift Virtualization cluster checkup framework
A checkup is an automated test workload that allows you to verify if a specific cluster functionality works as expected. The cluster checkup framework uses native Kubernetes resources to configure and execute the checkup.

By using predefined checkups, cluster administrators and developers can improve cluster maintainability, troubleshoot unexpected behavior, minimize errors, and save time. They can also review the results of the checkup and share them with experts for further analysis. Vendors can write and publish checkups for features or services that they provide and verify that their customer environments are configured correctly.

Running a predefined checkup in an existing namespace involves setting up a service account for the checkup, creating the Role and RoleBinding objects for the service account, enabling permissions for the checkup, and creating the input config map and the checkup job. You can run a checkup multiple times.

You must always:

Verify that the checkup image is from a trustworthy source before applying it.

Review the checkup permissions before creating the Role and RoleBinding objects.
Running a latency checkup
You use a predefined checkup to verify network connectivity and measure latency between two virtual machines (VMs) that are attached to a secondary network interface. The latency checkup uses the ping utility.

You run a latency checkup by performing the following steps:

Create a service account, roles, and rolebindings to provide cluster access permissions to the latency checkup.

Create a config map to provide the input to run the checkup and to store the results.

Create a job to run the checkup.

Review the results in the config map.

Optional: To rerun the checkup, delete the existing config map and job and then create a new config map and job.

When you are finished, delete the latency checkup resources.


You installed the OpenShift CLI (oc).

The cluster has at least two worker nodes.

You configured a network attachment definition for a namespace.


Create a ServiceAccount, Role, and RoleBinding manifest for the latency checkup:

Apply the ServiceAccount, Role, and RoleBinding manifest:

Create a ConfigMap manifest that contains the input parameters for the checkup:

Apply the config map manifest in the target namespace:

Create a Job manifest to run the checkup:

Apply the Job manifest:

Wait for the job to complete:

Review the results of the latency checkup by running the following command. If the maximum measured latency is greater than the value of the spec.param.maxDesiredLatencyMilliseconds attribute, the checkup fails and returns an error.

Optional: To view the detailed job log in case of checkup failure, use the following command:

Delete the job and config map that you previously created by running the following commands:

Optional: If you do not plan to run another checkup, delete the roles manifest:
DPDK checkup
Use a predefined checkup to verify that your Red Hat OpenShift Container Platform cluster node can run a virtual machine (VM) with a Data Plane Development Kit (DPDK) workload with zero packet loss. The DPDK checkup runs traffic between a traffic generator and a VM running a test DPDK application.

You run a DPDK checkup by performing the following steps:

Create a service account, role, and role bindings for the DPDK checkup.

Create a config map to provide the input to run the checkup and to store the results.

Create a job to run the checkup.

Review the results in the config map.

Optional: To rerun the checkup, delete the existing config map and job and then create a new config map and job.

When you are finished, delete the DPDK checkup resources.


You have installed the OpenShift CLI (oc).

The cluster is configured to run DPDK applications.

The project is configured to run DPDK applications.


Create a ServiceAccount, Role, and RoleBinding manifest for the DPDK checkup:

Apply the ServiceAccount, Role, and RoleBinding manifest:

Create a ConfigMap manifest that contains the input parameters for the checkup:

Apply the ConfigMap manifest in the target namespace:

Create a Job manifest to run the checkup:

Apply the Job manifest:

Wait for the job to complete:

Review the results of the checkup by running the following command:

Delete the job and config map that you previously created by running the following commands:

Optional: If you do not plan to run another checkup, delete the ServiceAccount, Role, and RoleBinding manifest:


DPDK checkup config map parameters
The following table shows the mandatory and optional parameters that you can set in the data stanza of the input ConfigMap manifest when you run a cluster DPDK readiness checkup:
Building a container disk image for RHEL virtual machines
You can build a custom Red Hat Enterprise Linux (RHEL) 8 OS image in qcow2 format and use it to create a container disk image. You can store the container disk image in a registry that is accessible from your cluster and specify the image location in the spec.param.vmContainerDiskImage attribute of the DPDK checkup config map.

To build a container disk image, you must create an image builder virtual machine (VM). The image builder VM is a RHEL 8 VM that can be used to build custom RHEL images.

The image builder VM must run RHEL 8.7 and must have a minimum of 2 CPU cores, 4 GiB RAM, and 20 GB of free space in the /var directory.

You have installed the image builder tool and its CLI (composer-cli) on the VM.

You have installed the virt-customize tool:

You have installed the Podman CLI tool (podman).


Verify that you can build a RHEL 8.7 image:

Enter the following command to create an image blueprint file in TOML format that contains the packages to be installed, kernel customizations, and the services to be disabled during boot time:

Push the blueprint file to the image builder tool by running the following command:

Generate the system image by specifying the blueprint name and output file format. The Universally Unique Identifier (UUID) of the image is displayed when you start the compose process.

Wait for the compose process to complete. The compose status must show FINISHED before you can continue to the next step.

Enter the following command to download the qcow2 image file by specifying its UUID:

Create the customization scripts by running the following commands:

Use the virt-customize tool to customize the image generated by the image builder tool:

To create a Dockerfile that contains all the commands to build the container disk image, enter the following command:

Build and tag the container by running the following command:

Push the container disk image to a registry that is accessible from your cluster by running the following command:

Provide a link to the container disk image in the spec.param.vmUnderTestContainerDiskImage attribute in the DPDK checkup config map.
Additional resources
Attaching a virtual machine to multiple networks

Using a virtual function in DPDK mode with an Intel NIC

Using SR-IOV and the Node Tuning Operator to achieve a DPDK line rate

Installing image builder

How to register and subscribe a RHEL system to the Red Hat Customer Portal using Red Hat Subscription Manager