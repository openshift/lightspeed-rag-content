Encrypting etcd data

About etcd encryption
By default, etcd data is not encrypted in Red Hat OpenShift Container Platform. You can enable etcd encryption for your cluster to provide an additional layer of data security. For example, it can help protect the loss of sensitive data if an etcd backup is exposed to the incorrect parties.

When you enable etcd encryption, the following OpenShift API server and Kubernetes API server resources are encrypted:

Secrets

Config maps

Routes

OAuth access tokens

OAuth authorize tokens


When you enable etcd encryption, encryption keys are created. You must have these keys to restore from an etcd backup.

Etcd encryption only encrypts values, not keys. Resource types, namespaces, and object names are unencrypted.

If etcd encryption is enabled during a backup, the static_kuberesources_<datetimestamp>.tar.gz file contains the encryption keys for the etcd snapshot. For security reasons, store this file separately from the etcd snapshot. However, this file is required to restore a previous state of etcd from the respective etcd snapshot.
Supported encryption types
The following encryption types are supported for encrypting etcd data in Red Hat OpenShift Container Platform:


AES-CBC
Uses AES-CBC with PKCS#7 padding and a 32 byte key to perform the encryption. The encryption keys are rotated weekly.
AES-GCM
Uses AES-GCM with a random nonce and a 32 byte key to perform the encryption. The encryption keys are rotated weekly.
Enabling etcd encryption
You can enable etcd encryption to encrypt sensitive resources in your cluster.

Do not back up etcd resources until the initial encryption process is completed. If the encryption process is not completed, the backup might be only partially encrypted.

After you enable etcd encryption, several changes can occur:

The etcd encryption might affect the memory consumption of a few resources.

You might notice a transient affect on backup performance because the leader must serve the backup.

A disk I/O can affect the node that receives the backup state.
You can encrypt the etcd database in either AES-GCM or AES-CBC encryption.

To migrate your etcd database from one encryption type to the other, you can modify the API server's spec.encryption.type field. Migration of the etcd data to the new encryption type occurs automatically.
Access to the cluster as a user with the cluster-admin role.


Modify the APIServer object:

Set the spec.encryption.type field to aesgcm or aescbc:

Save the file to apply the changes.

Verify that etcd encryption was successful.
Disabling etcd encryption
You can disable encryption of etcd data in your cluster.

Access to the cluster as a user with the cluster-admin role.


Modify the APIServer object:

Set the encryption field type to identity:

Save the file to apply the changes.

Verify that etcd decryption was successful.