Configuring TLS security profiles

TLS security profiles provide a way for servers to regulate which ciphers a client can use when connecting to the server. This ensures that Red Hat OpenShift Container Platform components use cryptographic libraries that do not allow known insecure protocols, ciphers, or algorithms.

Cluster administrators can choose which TLS security profile to use for each of the following components:

the Ingress Controller

the control plane

the kubelet, when it acts as an HTTP server for the Kubernetes API server
Understanding TLS security profiles
You can use a TLS (Transport Layer Security) security profile to define which TLS ciphers are required by various Red Hat OpenShift Container Platform components. The Red Hat OpenShift Container Platform TLS security profiles are based on Mozilla recommended configurations.

You can specify one of the following TLS security profiles for each component:


When using one of the predefined profile types, the effective profile configuration is subject to change between releases. For example, given a specification to use the Intermediate profile deployed on release X.Y.Z, an upgrade to release X.Y.Z+1 might cause a new profile configuration to be applied, resulting in a rollout.
Viewing TLS security profile details
You can view the minimum TLS version and ciphers for the predefined TLS security profiles for each of the following components: Ingress Controller, control plane, and kubelet.

The effective configuration of minimum TLS version and list of ciphers for a profile might differ between components.
View details for a specific TLS security profile:

View all details for the tlsSecurityProfile field of a component:
Configuring the TLS security profile for the Ingress Controller
To configure a TLS security profile for an Ingress Controller, edit the IngressController custom resource (CR) to specify a predefined or custom TLS security profile. If a TLS security profile is not configured, the default value is based on the TLS security profile set for the API server.

apiVersion: operator.openshift.io/v1
kind: IngressController
 ...
spec:
  tlsSecurityProfile:
    old: {}
    type: Old
 ...
The TLS security profile defines the minimum TLS version and the TLS ciphers for TLS connections for Ingress Controllers.

You can see the ciphers and the minimum TLS version of the configured TLS security profile in the IngressController custom resource (CR) under Status.Tls Profile and the configured TLS security profile under Spec.Tls Security Profile. For the Custom TLS security profile, the specific ciphers and minimum TLS version are listed under both parameters.

The HAProxy Ingress Controller image supports TLS 1.3 and the Modern profile.

The Ingress Operator also converts the TLS 1.0 of an Old or Custom profile to 1.1.
You have access to the cluster as a user with the cluster-admin role.


Edit the IngressController CR in the openshift-ingress-operator project to configure the TLS security profile:

Add the spec.tlsSecurityProfile field:

Save the file to apply the changes.


Verify that the profile is set in the IngressController CR:
Configuring the TLS security profile for the control plane
To configure a TLS security profile for the control plane, edit the APIServer custom resource (CR) to specify a predefined or custom TLS security profile. Setting the TLS security profile in the APIServer CR propagates the setting to the following control plane components:

Kubernetes API server

Kubernetes controller manager

Kubernetes scheduler

OpenShift API server

OpenShift OAuth API server

OpenShift OAuth server

etcd


If a TLS security profile is not configured, the default TLS security profile is Intermediate.

The default TLS security profile for the Ingress Controller is based on the TLS security profile set for the API server.
apiVersion: config.openshift.io/v1
kind: APIServer
 ...
spec:
  tlsSecurityProfile:
    old: {}
    type: Old
 ...
The TLS security profile defines the minimum TLS version and the TLS ciphers required to communicate with the control plane components.

You can see the configured TLS security profile in the APIServer custom resource (CR) under Spec.Tls Security Profile. For the Custom TLS security profile, the specific ciphers and minimum TLS version are listed.

The control plane does not support TLS 1.3 as the minimum TLS version; the Modern profile is not supported because it requires TLS 1.3.
You have access to the cluster as a user with the cluster-admin role.


Edit the default APIServer CR to configure the TLS security profile:

Add the spec.tlsSecurityProfile field:

Save the file to apply the changes.


Verify that the TLS security profile is set in the APIServer CR:

Verify that the TLS security profile is set in the etcd CR:
Configuring the TLS security profile for the kubelet
To configure a TLS security profile for the kubelet when it is acting as an HTTP server, create a KubeletConfig custom resource (CR) to specify a predefined or custom TLS security profile for specific nodes. If a TLS security profile is not configured, the default TLS security profile is Intermediate.

The kubelet uses its HTTP/GRPC server to communicate with the Kubernetes API server, which sends commands to pods, gathers logs, and run exec commands on pods through the kubelet.

apiVersion: config.openshift.io/v1
kind: KubeletConfig
 ...
spec:
  tlsSecurityProfile:
    old: {}
    type: Old
  machineConfigPoolSelector:
    matchLabels:
      pools.operator.machineconfiguration.openshift.io/worker: ""
#...
You can see the ciphers and the minimum TLS version of the configured TLS security profile in the kubelet.conf file on a configured node.

You are logged in to Red Hat OpenShift Container Platform as a user with the cluster-admin role.


Create a KubeletConfig CR to configure the TLS security profile:

Create the KubeletConfig object:


To verify that the profile is set,  perform the following steps after the nodes are in the Ready state:

Start a debug session for a configured node:

Set /host as the root directory within the debug shell:

View the kubelet.conf file: