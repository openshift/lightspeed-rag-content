About Logging

As a cluster administrator, you can deploy logging subsystem on an Red Hat OpenShift Container Platform cluster, and use it to collect and aggregate node system audit logs, application container logs, and infrastructure logs. You can forward logs to your chosen log outputs, including on-cluster, Red Hat managed log storage. You can also visualize your log data in the Red Hat OpenShift Container Platform web console, or the Kibana web console, depending on your deployed log storage solution.

The Kibana web console is now deprecated is planned to be removed in a future logging release.
Red Hat OpenShift Container Platform cluster administrators can deploy logging subsystem by using Operators. For information, see Installing logging subsystem.

The Operators are responsible for deploying, upgrading, and maintaining logging subsystem. After the Operators are installed, you can create a ClusterLogging custom resource (CR) to schedule logging subsystem pods and other resources necessary to support logging subsystem. You can also create a ClusterLogForwarder CR to specify which logs are collected, how they are transformed, and where they are forwarded to.

Because the internal Red Hat OpenShift Container Platform Elasticsearch log store does not provide secure storage for audit logs, audit logs are not stored in the internal Elasticsearch instance by default. If you want to send the audit logs to the default internal Elasticsearch log store, for example to view the audit logs in Kibana, you must use the Log Forwarding API as described in Forward audit logs to the log store.
Logging architecture
The major components of the logging subsystem are:


Collector
The collector is a daemonset that deploys pods to each Red Hat OpenShift Container Platform node. It collects log data from each node, transforms the data, and forwards it to configured outputs. You can use the Vector collector or the legacy Fluentd collector.
Log store
The log store stores log data for analysis and is the default output for the log forwarder. You can use the default LokiStack log store, the legacy Elasticsearch log store, or forward logs to additional external log stores.
Visualization
You can use a UI component to view a visual representation of your log data. The UI provides a graphical interface to search, query, and view stored logs. The Red Hat OpenShift Container Platform web console UI is provided by enabling the Red Hat OpenShift Container Platform console plugin.


Logging subsystem collects container logs and node logs. These are categorized into types:


Application logs
Container logs generated by user applications running in the cluster, except infrastructure container applications.
Infrastructure logs
Container logs generated by infrastructure namespaces: openshift*, kube*, or default, as well as journald messages from nodes.
Audit logs
Logs generated by auditd, the node audit system, which are stored in the /var/log/audit/audit.log file, and logs from the auditd, kube-apiserver, openshift-apiserver services, as well as the ovn project if enabled.


Log visualization with the web console
About deploying logging subsystem
Administrators can deploy the logging subsystem by using the Red Hat OpenShift Container Platform web console or the OpenShift CLI (`oc`) to install the logging subsystem Operators. The Operators are responsible for deploying, upgrading, and maintaining the logging subsystem.

Administrators and application developers can view the logs of the projects for which they have view access.

Logging custom resources
You can configure your logging subsystem deployment with custom resource (CR) YAML files implemented by each Operator.

Red Hat OpenShift Logging Operator:

ClusterLogging (CL) - After the Operators are installed, you create a ClusterLogging custom resource (CR) to schedule logging subsystem pods and other resources necessary to support the logging subsystem. The ClusterLogging CR deploys the collector and forwarder, which currently are both implemented by a daemonset running on each node. The Red Hat OpenShift Logging Operator watches the ClusterLogging CR and adjusts the logging deployment accordingly.

ClusterLogForwarder (CLF) - Generates collector configuration to forward logs per user configuration.


Loki Operator:

LokiStack - Controls the Loki cluster as log store and the web proxy with Red Hat OpenShift Container Platform authentication integration to enforce multi-tenancy.


Elasticsearch Operator:

These CRs are generated and managed by the Elasticsearch Operator. Manual changes cannot be made without being overwritten by the Operator.
ElasticSearch - Configure and deploy an Elasticsearch instance as the default log store.

Kibana - Configure and deploy Kibana instance to search, query and view logs.
About JSON Red Hat OpenShift Container Platform Logging
You can use JSON logging to configure the Log Forwarding API to parse JSON strings into a structured object. You can perform the following tasks:

Parse JSON logs

Configure JSON log data for Elasticsearch

Forward JSON logs to the Elasticsearch log store
About collecting and storing Kubernetes events
The Red Hat OpenShift Container Platform Event Router is a pod that watches Kubernetes events and logs them for collection by Red Hat OpenShift Container Platform Logging. You must manually deploy the Event Router.

For information, see About collecting and storing Kubernetes events.
About troubleshooting Red Hat OpenShift Container Platform Logging
You can troubleshoot the logging issues by performing the following tasks:

Viewing logging status

Viewing the status of the log store

Understanding logging alerts

Collecting logging data for Red Hat Support

Troubleshooting for critical alerts
About exporting fields
The logging system exports fields. Exported fields are present in the log records and are available for searching from Elasticsearch and Kibana.

For information, see About exporting fields.
About event routing
The Event Router is a pod that watches Red Hat OpenShift Container Platform events so they can be collected by logging subsystem. The Event Router collects events from all projects and writes them to STDOUT. Fluentd collects those events and forwards them into the Red Hat OpenShift Container Platform Elasticsearch instance. Elasticsearch indexes the events to the infra index.

You must manually deploy the Event Router.

For information, see Collecting and storing Kubernetes events.