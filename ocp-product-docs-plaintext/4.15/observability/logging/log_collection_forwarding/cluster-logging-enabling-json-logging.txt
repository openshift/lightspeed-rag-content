Enabling JSON log forwarding

You can configure the Log Forwarding API to parse JSON strings into a structured object.
Parsing JSON logs
You can use a ClusterLogForwarder object to parse JSON logs into a structured object and forward them to a supported output.

To illustrate how this works, suppose that you have the following structured JSON log entry:

{"level":"info","name":"fred","home":"bedrock"}
To enable parsing JSON log, you add parse: json to a pipeline in the ClusterLogForwarder CR, as shown in the following example:

pipelines:
- inputRefs: [ application ]
  outputRefs: myFluentd
  parse: json
When you enable parsing JSON logs by using parse: json, the CR copies the JSON-structured log entry in a structured field, as shown in the following example:

{"structured": { "level": "info", "name": "fred", "home": "bedrock" },
 "more fields..."}
If the log entry does not contain valid structured JSON, the structured field is absent.
Configuring JSON log data for Elasticsearch
If your JSON logs follow more than one schema, storing them in a single index might cause type conflicts and cardinality problems. To avoid that, you must configure the ClusterLogForwarder custom resource (CR) to group each schema into a single output definition. This way, each schema is forwarded to a separate index.

If you forward JSON logs to the default Elasticsearch instance managed by OpenShift Logging, it generates new indices based on your configuration. To avoid performance issues associated with having too many indices, consider keeping the number of possible schemas low by standardizing to common schemas.
You can use the following structure types in the ClusterLogForwarder CR to construct index names for the Elasticsearch log store:

structuredTypeKey is the name of a message field. The value of that field is used to construct the index name.

structuredTypeName: If the structuredTypeKey field is not set or its key is not present, the structuredTypeName value is used as the structured type. When you use both the structuredTypeKey field and the structuredTypeName field together, the structuredTypeName value provides a fallback index name if the key in the structuredTypeKey field is missing from the JSON log data.


Although you can set the value of structuredTypeKey to any field shown in the "Log Record Fields" topic, the most useful fields are shown in the preceding list of structure types.
Suppose the following:

Your cluster is running application pods that produce JSON logs in two different formats, "apache" and "google".

The user labels these application pods with logFormat=apache and logFormat=google.

You use the following snippet in your ClusterLogForwarder CR YAML file.


apiVersion: logging.openshift.io/v1
kind: ClusterLogForwarder
metadata:
# ...
spec:
# ...
  outputDefaults:
    elasticsearch:
      structuredTypeKey: kubernetes.labels.logFormat 1
      structuredTypeName: nologformat
  pipelines:
  - inputRefs:
    - application
    outputRefs:
    - default
    parse: json 2
Uses the value of the key-value pair that is formed by the Kubernetes logFormat label.

Enables parsing JSON logs.


In that case, the following structured log record goes to the app-apache-write index:

{
  "structured":{"name":"fred","home":"bedrock"},
  "kubernetes":{"labels":{"logFormat": "apache", ...}}
}
And the following structured log record goes to the app-google-write index:

{
  "structured":{"name":"wilma","home":"bedrock"},
  "kubernetes":{"labels":{"logFormat": "google", ...}}
}
Suppose that you use the following snippet in your ClusterLogForwarder CR YAML file.

outputDefaults:
 elasticsearch:
    structuredTypeKey: openshift.labels.myLabel 1
    structuredTypeName: nologformat
pipelines:
 - name: application-logs
   inputRefs:
   - application
   - audit
   outputRefs:
   - elasticsearch-secure
   - default
   parse: json
   labels:
     myLabel: myValue 2
Uses the value of the key-value pair that is formed by the OpenShift myLabel label.

The myLabel element gives its string value, myValue, to the structured log record.


In that case, the following structured log record goes to the app-myValue-write index:

{
  "structured":{"name":"fred","home":"bedrock"},
  "openshift":{"labels":{"myLabel": "myValue", ...}}
}
The Elasticsearch index for structured records is formed by prepending "app-" to the structured type and appending "-write".

Unstructured records are not sent to the structured index. They are indexed as usual in the application, infrastructure, or audit indices.

If there is no non-empty structured type, forward an unstructured record with no structured field.


It is important not to overload Elasticsearch with too many indices. Only use distinct structured types for distinct log formats, not for each application or namespace. For example, most Apache applications use the same JSON log format and structured type, such as LogApache.
Forwarding JSON logs to the Elasticsearch log store
For an Elasticsearch log store, if your JSON log entries follow different schemas, configure the ClusterLogForwarder custom resource (CR) to group each JSON schema into a single output definition. This way, Elasticsearch uses a separate index for each schema.

Because forwarding different schemas to the same index can cause type conflicts and cardinality problems, you must perform this configuration before you forward data to the Elasticsearch store.

To avoid performance issues associated with having too many indices, consider keeping the number of possible schemas low by standardizing to common schemas.
Add the following snippet to your ClusterLogForwarder CR YAML file.

Use structuredTypeKey field to specify one of the log record fields.

Use structuredTypeName field to specify a name.

For inputRefs, specify which log types to forward by using that pipeline, such as application, infrastructure, or audit.

Add the parse: json element to pipelines.

Create the CR object:
Forwarding JSON logs from containers in the same pod to separate indices
You can forward structured logs from different containers within the same pod to different indices. To use this feature, you must configure the pipeline with multi-container support and annotate the pods. Logs are written to indices with a prefix of app-. It is recommended that Elasticsearch be configured with aliases to accommodate this.

JSON formatting of logs varies by application. Because creating too many indices impacts performance, limit your use of this feature to creating indices for logs that have incompatible JSON formats. Use queries to separate logs from different namespaces, or applications with compatible JSON formats.
Logging subsystem for Red Hat OpenShift: 5.5


Create or edit a YAML file that defines the ClusterLogForwarder CR object:

Create or edit a YAML file that defines the Pod CR object:


This configuration might significantly increase the number of shards on the cluster.
Kubernetes Annotations


About log forwarding