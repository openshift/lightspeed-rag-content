DNS Operator in Red Hat OpenShift Container Platform

The DNS Operator deploys and manages CoreDNS to provide a name resolution service to pods, enabling DNS-based Kubernetes Service discovery in Red Hat OpenShift Container Platform.
DNS Operator
The DNS Operator implements the dns API from the operator.openshift.io API group. The Operator deploys CoreDNS using a daemon set, creates a service for the daemon set, and configures the kubelet to instruct pods to use the CoreDNS service IP address for name resolution.

The DNS Operator is deployed during installation with a Deployment object.

Use the oc get command to view the deployment status:

Use the oc get command to view the state of the DNS Operator:
Changing the DNS Operator managementState
DNS manages the CoreDNS component to provide a name resolution service for pods and services in the cluster. The managementState of the DNS Operator is set to Managed by default, which means that the DNS Operator is actively managing its resources. You can change it to Unmanaged, which means the DNS Operator is not managing its resources.

The following are use cases for changing the DNS Operator managementState:

You are a developer and want to test a configuration change to see if it fixes an issue in CoreDNS. You can stop the DNS Operator from overwriting the fix by setting the managementState to Unmanaged.

You are a cluster administrator and have reported an issue with CoreDNS, but need to apply a workaround until the issue is fixed. You can set the managementState field of the DNS Operator to Unmanaged to apply the workaround.


Change managementState DNS Operator:
Controlling DNS pod placement
The DNS Operator has two daemon sets: one for CoreDNS and one for managing the /etc/hosts file. The daemon set for /etc/hosts must run on every node host to add an entry for the cluster image registry to support pulling images. Security policies can prohibit communication between pairs of nodes, which prevents the daemon set for CoreDNS from running on every node.

As a cluster administrator, you can use a custom node selector to configure the daemon set for CoreDNS to run or not run on certain nodes.

You installed the oc CLI.

You are logged in to the cluster with a user with cluster-admin privileges.


To prevent communication between certain nodes, configure the spec.nodePlacement.nodeSelector API field:

To allow the daemon set for CoreDNS to run on nodes, configure a taint and toleration:
View the default DNS
Every new Red Hat OpenShift Container Platform installation has a dns.operator named default.

Use the oc describe command to view the default dns:
Using DNS forwarding
You can use DNS forwarding to override the default forwarding configuration in the /etc/resolv.conf file in the following ways:

Specify name servers for every zone. If the forwarded zone is the Ingress domain managed by Red Hat OpenShift Container Platform, then the upstream name server must be authorized for the domain.

Provide a list of upstream DNS servers.

Change the default forwarding policy.


A DNS forwarding configuration for the default domain can have both the default servers specified in the /etc/resolv.conf file and the upstream DNS servers.
Modify the DNS Operator object named default:

Optional: When working in a highly regulated environment, you might need the ability to secure DNS traffic when forwarding requests to upstream resolvers so that you can ensure additional DNS traffic and data privacy.
Cluster administrators can configure transport layer security (TLS) for forwarded DNS queries.


View the config map:


For more information on DNS forwarding, see the CoreDNS forward documentation.
DNS Operator status
You can inspect the status and view the details of the DNS Operator using the oc describe command.

View the status of the DNS Operator:

$ oc describe clusteroperators/dns
DNS Operator logs
You can view DNS Operator logs by using the oc logs command.

View the logs of the DNS Operator:

$ oc logs -n openshift-dns-operator deployment/dns-operator -c dns-operator
Setting the CoreDNS log level
You can configure the CoreDNS log level to determine the amount of detail in logged error messages. The valid values for CoreDNS log level are Normal, Debug, and Trace. The default logLevel is Normal.

The errors plugin is always enabled. The following logLevel settings report different error responses:

logLevel: Normal enables the "errors" class: log . { class error }.

logLevel: Debug enables the "denial" class: log . { class denial error }.

logLevel: Trace enables the "all" class: log . { class all }.
To set logLevel to Debug, enter the following command:

To set logLevel to Trace, enter the following command:


To ensure the desired log level was set, check the config map:
Setting the CoreDNS Operator log level
Cluster administrators can configure the Operator log level to more quickly track down OpenShift DNS issues. The valid values for operatorLogLevel are Normal, Debug, and Trace. Trace has the most detailed information. The default operatorlogLevel is Normal. There are seven logging levels for issues: Trace, Debug, Info, Warning, Error, Fatal and Panic. After the logging level is set, log entries with that severity or anything above it will be logged.

operatorLogLevel: "Normal" sets logrus.SetLogLevel("Info").

operatorLogLevel: "Debug" sets logrus.SetLogLevel("Debug").

operatorLogLevel: "Trace" sets  logrus.SetLogLevel("Trace").


To set operatorLogLevel to Debug, enter the following command:

To set operatorLogLevel to Trace, enter the following command:
Tuning the CoreDNS cache
You can configure the maximum duration of both successful or unsuccessful caching, also known as positive or negative caching respectively, done by CoreDNS. Tuning the duration of caching of DNS query responses can reduce the load for any upstream DNS resolvers.

Edit the DNS Operator object named default by running the following command:

Modify the time-to-live (TTL) caching values: