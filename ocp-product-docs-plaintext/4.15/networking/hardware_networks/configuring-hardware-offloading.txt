Configuring hardware offloading

As a cluster administrator, you can configure hardware offloading on compatible nodes to increase data processing performance and reduce load on host CPUs.
About hardware offloading
Open vSwitch hardware offloading is a method of processing network tasks by diverting them away from the CPU and offloading them to a dedicated processor on a network interface controller. As a result, clusters can benefit from faster data transfer speeds, reduced CPU workloads, and lower computing costs.

The key element for this feature is a modern class of network interface controllers known as SmartNICs. A SmartNIC is a network interface controller that is able to handle computationally-heavy network processing tasks. In the same way that a dedicated graphics card can improve graphics performance, a SmartNIC can improve network performance. In each case, a dedicated processor improves performance for a specific type of processing task.

In Red Hat OpenShift Container Platform, you can configure hardware offloading for bare metal nodes that have a compatible SmartNIC. Hardware offloading is configured and enabled by the SR-IOV Network Operator.

Hardware offloading is not compatible with all workloads or application types. Only the following two communication types are supported:

pod-to-pod

pod-to-service, where the service is a ClusterIP service backed by a regular pod


In all cases, hardware offloading takes place only when those pods and services are assigned to nodes that have a compatible SmartNIC. Suppose, for example, that a pod on a node with hardware offloading tries to communicate with a service on a regular node. On the regular node, all the processing takes place in the kernel, so the overall performance of the pod-to-service communication is limited to the maximum performance of that regular node. Hardware offloading is not compatible with DPDK applications.

Enabling hardware offloading on a node, but not configuring pods to use, it can result in decreased throughput performance for pod traffic. You cannot configure hardware offloading for pods that are managed by Red Hat OpenShift Container Platform.
Supported devices
Hardware offloading is supported on the following network interface controllers:
Prerequisites
Your cluster has at least one bare metal machine with a network interface controller that is supported for hardware offloading.

You installed the SR-IOV Network Operator.

Your cluster uses the OVN-Kubernetes network plugin.

In your OVN-Kubernetes network plugin configuration, the gatewayConfig.routingViaHost field is set to false.
Configuring a machine config pool for hardware offloading
To enable hardware offloading, you must first create a dedicated machine config pool and configure it to work with the SR-IOV Network Operator.

You installed the OpenShift CLI (oc).

You have access to the cluster as a user with the cluster-admin role.


Create a machine config pool for machines you want to use hardware offloading on.

Add nodes to the machine config pool. Label each node with the node role label of your pool:

Optional: To verify that the new pool is created, run the following command:

Add this machine config pool to the SriovNetworkPoolConfig custom resource:
Configuring the SR-IOV network node policy
You can create an SR-IOV network device configuration for a node by creating an SR-IOV network node policy. To enable hardware offloading, you must define the .spec.eSwitchMode field with the value "switchdev".

The following procedure creates an SR-IOV interface for a network interface controller with hardware offloading.

You installed the OpenShift CLI (oc).

You have access to the cluster as a user with the cluster-admin role.


Create a file, such as sriov-node-policy.yaml, with content like the following example:

Apply the configuration for the policy:


An example SR-IOV network node policy for OpenStack
The following example describes an SR-IOV interface for a network interface controller (NIC) with hardware offloading on OpenStack.

apiVersion: sriovnetwork.openshift.io/v1
kind: SriovNetworkNodePolicy
metadata:
  name: ${name}
  namespace: openshift-sriov-network-operator
spec:
  deviceType: switchdev
  isRdma: true
  nicSelector:
    netFilter: openstack/NetworkID:${net_id}
  nodeSelector:
    feature.node.kubernetes.io/network-sriov.capable: 'true'
  numVfs: 1
  priority: 99
  resourceName: ${name}
Improving network traffic performance using a virtual function
Follow this procedure to assign a virtual function to the OVN-Kubernetes management port and increase its network traffic performance.

This procedure results in the creation of two pools: the first has a virtual function used by OVN-Kubernetes, and the second comprises the remaining virtual functions.

You installed the OpenShift CLI (oc).

You have access to the cluster as a user with the cluster-admin role.


Add the network.operator.openshift.io/smart-nic label to each worker node with a SmartNIC present by running the following command:

Create a policy named sriov-node-mgmt-vf-policy.yaml for the management port with content such as the following example:

Create a policy named sriov-node-policy.yaml with content such as the following example:

Apply the configuration for both policies:

Create a Cluster Network Operator (CNO) ConfigMap in the cluster for the management configuration:


SR-IOV network node configuration object
Creating a network attachment definition
After you define the machine config pool and the SR-IOV network node policy, you can create a network attachment definition for the network interface card you specified.

You installed the OpenShift CLI (oc).

You have access to the cluster as a user with the cluster-admin role.


Create a file, such as net-attach-def.yaml, with content like the following example:

Apply the configuration for the network attachment definition:


Run the following command to see whether the new definition is present:
Adding the network attachment definition to your pods
After you create the machine config pool, the SriovNetworkPoolConfig and SriovNetworkNodePolicy custom resources, and the network attachment definition, you can apply these configurations to your pods by adding the network attachment definition to your pod specifications.

In the pod specification, add the .metadata.annotations.k8s.v1.cni.cncf.io/networks field and specify the network attachment definition you created for hardware offloading: