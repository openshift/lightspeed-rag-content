Admission plugins

Admission plugins are used to help regulate how Red Hat OpenShift Container Platform functions.
About admission plugins
Admission plugins intercept requests to the master API to validate resource requests. After a request is authenticated and authorized, the admission plugins ensure that any associated policies are followed. For example, they are commonly used to enforce security policy, resource limitations or configuration requirements.

Admission plugins run in sequence as an admission chain. If any admission plugin in the sequence rejects a request, the whole chain is aborted and an error is returned.

Red Hat OpenShift Container Platform has a default set of admission plugins enabled for each resource type. These are required for proper functioning of the cluster. Admission plugins ignore resources that they are not responsible for.

In addition to the defaults, the admission chain can be extended dynamically through webhook admission plugins that call out to custom webhook servers. There are two types of webhook admission plugins: a mutating admission plugin and a validating admission plugin. The mutating admission plugin runs first and can both modify resources and validate requests. The validating admission plugin validates requests and runs after the mutating admission plugin so that modifications triggered by the mutating admission plugin can also be validated.

Calling webhook servers through a mutating admission plugin can produce side effects on resources related to the target object. In such situations, you must take steps to validate that the end result is as expected.

Dynamic admission should be used cautiously because it impacts cluster control plane operations. When calling webhook servers through webhook admission plugins in Red Hat OpenShift Container Platform 4.15, ensure that you have read the documentation fully and tested for side effects of mutations. Include steps to restore resources back to their original state prior to mutation, in the event that a request does not pass through the entire admission chain.
Default admission plugins
Default validating and admission plugins are enabled in Red Hat OpenShift Container Platform 4.15. These default plugins contribute to fundamental control plane functionality, such as ingress policy, cluster resource limit override and quota policy.

Do not run workloads in or share access to default projects. Default projects are reserved for running core cluster components.

The following default projects are considered highly privileged: default, kube-public, kube-system, openshift, openshift-infra, openshift-node, and other system-created projects that have the openshift.io/run-level label set to 0 or 1. Functionality that relies on admission plugins, such as pod security admission, security context constraints, cluster resource quotas, and image reference resolution, does not work in highly privileged projects.
The following lists contain the default admission plugins:

LimitRanger

ServiceAccount

PodNodeSelector

Priority

PodTolerationRestriction

OwnerReferencesPermissionEnforcement

PersistentVolumeClaimResize

RuntimeClass

CertificateApproval

CertificateSigning

CertificateSubjectRestriction

autoscaling.openshift.io/ManagementCPUsOverride

authorization.openshift.io/RestrictSubjectBindings

scheduling.openshift.io/OriginPodNodeEnvironment

network.openshift.io/ExternalIPRanger

network.openshift.io/RestrictedEndpointsAdmission

image.openshift.io/ImagePolicy

security.openshift.io/SecurityContextConstraint

security.openshift.io/SCCExecRestrictions

route.openshift.io/IngressAdmission

config.openshift.io/ValidateAPIServer

config.openshift.io/ValidateAuthentication

config.openshift.io/ValidateFeatureGate

config.openshift.io/ValidateConsole

operator.openshift.io/ValidateDNS

config.openshift.io/ValidateImage

config.openshift.io/ValidateOAuth

config.openshift.io/ValidateProject

config.openshift.io/DenyDeleteClusterConfiguration

config.openshift.io/ValidateScheduler

quota.openshift.io/ValidateClusterResourceQuota

security.openshift.io/ValidateSecurityContextConstraints

authorization.openshift.io/ValidateRoleBindingRestriction

config.openshift.io/ValidateNetwork

operator.openshift.io/ValidateKubeControllerManager

ValidatingAdmissionWebhook

ResourceQuota

quota.openshift.io/ClusterResourceQuota
NamespaceLifecycle

LimitRanger

ServiceAccount

NodeRestriction

TaintNodesByCondition

PodNodeSelector

Priority

DefaultTolerationSeconds

PodTolerationRestriction

DefaultStorageClass

StorageObjectInUseProtection

RuntimeClass

DefaultIngressClass

autoscaling.openshift.io/ManagementCPUsOverride

scheduling.openshift.io/OriginPodNodeEnvironment

image.openshift.io/ImagePolicy

security.openshift.io/SecurityContextConstraint

security.openshift.io/DefaultSecurityContextConstraints

MutatingAdmissionWebhook
Webhook admission plugins
In addition to Red Hat OpenShift Container Platform default admission plugins, dynamic admission can be implemented through webhook admission plugins that call webhook servers, to extend the functionality of the admission chain. Webhook servers are called over HTTP at defined endpoints.

There are two types of webhook admission plugins in Red Hat OpenShift Container Platform:

During the admission process, the mutating admission plugin can perform tasks, such as injecting affinity labels.


At the end of the admission process, the validating admission plugin can be used to make sure an object is configured properly, for example ensuring affinity labels are as expected. If the validation passes, Red Hat OpenShift Container Platform schedules the object as configured.


When an API request comes in, mutating or validating admission plugins use the list of external webhooks in the configuration and call them in parallel:

If all of the webhooks approve the request, the admission chain continues.

If any of the webhooks deny the request, the admission request is denied and the reason for doing so is based on the first denial.

If more than one webhook denies the admission request, only the first denial reason is returned to the user.

If an error is encountered when calling a webhook, the request is either denied or the webhook is ignored depending on the error policy set. If the error policy is set to Ignore, the request is unconditionally accepted in the event of a failure. If the policy is set to Fail, failed requests are denied. Using Ignore can result in unpredictable behavior for all clients.


Communication between the webhook admission plugin and the webhook server must use TLS. Generate a CA certificate and use the certificate to sign the server certificate that is used by your webhook admission server. The PEM-encoded CA certificate is supplied to the webhook admission plugin using a mechanism, such as service serving certificate secrets.

The following diagram illustrates the sequential admission chain process within which multiple webhook servers are called.


An example webhook admission plugin use case is where all pods must have a common set of labels. In this example, the mutating admission plugin can inject labels and the validating admission plugin can check that labels are as expected. Red Hat OpenShift Container Platform would subsequently schedule pods that include required labels and reject those that do not.

Some common webhook admission plugin use cases include:

Namespace reservation.

Limiting custom network resources managed by the SR-IOV network device plugin.

Defining tolerations that enable taints to qualify which pods should be scheduled on a node.

Pod priority class validation.


The maximum default webhook timeout value in Red Hat OpenShift Container Platform is 13 seconds, and it cannot be changed.
Types of webhook admission plugins
Cluster administrators can call out to webhook servers through the mutating admission plugin or the validating admission plugin in the API server admission chain.

Mutating admission plugin
The mutating admission plugin is invoked during the mutation phase of the admission process, which allows modification of resource content before it is persisted. One example webhook that can be called through the mutating admission plugin is the Pod Node Selector feature, which uses an annotation on a namespace to find a label selector and add it to the pod specification.

apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration 1
metadata:
  name: <webhook_name> 2
webhooks:
- name: <webhook_name> 3
  clientConfig: 4
    service:
      namespace: default 5
      name: kubernetes 6
      path: <webhook_url> 7
    caBundle: <ca_signing_certificate> 8
  rules: 9
  - operations: 10
    - <operation>
    apiGroups:
    - ""
    apiVersions:
    - "*"
    resources:
    - <resource>
  failurePolicy: <policy> 11
  sideEffects: None
Specifies a mutating admission plugin configuration.

The name for the MutatingWebhookConfiguration object. Replace <webhook_name> with the appropriate value.

The name of the webhook to call. Replace <webhook_name> with the appropriate value.

Information about how to connect to, trust, and send data to the webhook server.

The namespace where the front-end service is created.

The name of the front-end service.

The webhook URL used for admission requests. Replace <webhook_url> with the appropriate value.

A PEM-encoded CA certificate that signs the server certificate that is used by the webhook server.  Replace <ca_signing_certificate> with the appropriate certificate in base64 format.

Rules that define when the API server should use this webhook admission plugin.

One or more operations that trigger the API server to call this webhook admission plugin. Possible values are create, update, delete or connect. Replace <operation> and <resource> with the appropriate values.

Specifies how the policy should proceed if the webhook server is unavailable.
Replace <policy> with either Ignore (to unconditionally accept the request in the event of a failure) or Fail (to deny the failed request). Using Ignore can result in unpredictable behavior for all clients.


In Red Hat OpenShift Container Platform 4.15, objects created by users or control loops through a mutating admission plugin might return unexpected results, especially if values set in an initial request are overwritten, which is not recommended.
Validating admission plugin
A validating admission plugin is invoked during the validation phase of the admission process. This phase allows the enforcement of invariants on particular API resources to ensure that the resource does not change again. The Pod Node Selector is also an example of a webhook which is called by the validating admission plugin, to ensure that all nodeSelector fields are constrained by the node selector restrictions on the namespace.

apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration 1
metadata:
  name: <webhook_name> 2
webhooks:
- name: <webhook_name> 3
  clientConfig: 4
    service:
      namespace: default  5
      name: kubernetes 6
      path: <webhook_url> 7
    caBundle: <ca_signing_certificate> 8
  rules: 9
  - operations: 10
    - <operation>
    apiGroups:
    - ""
    apiVersions:
    - "*"
    resources:
    - <resource>
  failurePolicy: <policy> 11
  sideEffects: Unknown
Specifies a validating admission plugin configuration.

The name for the ValidatingWebhookConfiguration object. Replace <webhook_name> with the appropriate value.

The name of the webhook to call. Replace <webhook_name> with the appropriate value.

Information about how to connect to, trust, and send data to the webhook server.

The namespace where the front-end service is created.

The name of the front-end service.

The webhook URL used for admission requests. Replace <webhook_url> with the appropriate value.

A PEM-encoded CA certificate that signs the server certificate that is used by the webhook server.  Replace <ca_signing_certificate> with the appropriate certificate in base64 format.

Rules that define when the API server should use this webhook admission plugin.

One or more operations that trigger the API server to call this webhook admission plugin. Possible values are create, update, delete or connect. Replace <operation> and <resource> with the appropriate values.

Specifies how the policy should proceed if the webhook server is unavailable.
Replace <policy> with either Ignore (to unconditionally accept the request in the event of a failure) or Fail (to deny the failed request). Using Ignore can result in unpredictable behavior for all clients.
Configuring dynamic admission
This procedure outlines high-level steps to configure dynamic admission. The functionality of the admission chain is extended by configuring a webhook admission plugin to call out to a webhook server.

The webhook server is also configured as an aggregated API server. This allows other Red Hat OpenShift Container Platform components to communicate with the webhook using internal credentials and facilitates testing using the oc command. Additionally, this enables role based access control (RBAC) into the webhook and prevents token information from other API servers from being disclosed to the webhook.

An Red Hat OpenShift Container Platform account with cluster administrator access.

The Red Hat OpenShift Container Platform CLI (oc) installed.

A published webhook server container image.


Build a webhook server container image and make it available to the cluster using an image registry.

Create a local CA key and certificate and use them to sign the webhook server's certificate signing request (CSR).

Create a new project for webhook resources:

Define RBAC rules for the aggregated API service in a file called rbac.yaml:

Apply those RBAC rules to the cluster:

Create a YAML file called webhook-daemonset.yaml that is used to deploy a webhook as a daemon set server in a namespace:

Deploy the daemon set:

Define a secret for the service serving certificate signer, within a YAML file called webhook-secret.yaml:

Create the secret:

Define a service account and service, within a YAML file called webhook-service.yaml:

Expose the webhook server within the cluster:

Define a custom resource definition for the webhook server, in a file called webhook-crd.yaml:

Apply the custom resource definition:

Configure the webhook server also as an aggregated API server, within a file called webhook-api-service.yaml:

Deploy the aggregated API service:

Define the webhook admission plugin configuration within a file called webhook-config.yaml. This example uses the validating admission plugin:

Deploy the webhook:

Verify that the webhook is functioning as expected. For example, if you have configured dynamic admission to reserve specific namespaces, confirm that requests to create those namespaces are rejected and that requests to create non-reserved namespaces succeed.
Additional resources
Configuring the SR-IOV Network Operator

Controlling pod placement using node taints

Pod priority names