Using Red Hat subscriptions in builds

Use the following sections to install Red Hat subscription content within Red Hat OpenShift Container Platform builds.
Creating an image stream tag for the Red Hat Universal Base Image
To install Red Hat Enterprise Linux (RHEL) packages within a build, you can create an image stream tag to reference the Red Hat Universal Base Image (UBI).

To make the UBI available in every project in the cluster, add the image stream tag to the openshift namespace. Otherwise, to make it available in a specific project, add the image stream tag to that project.

Image stream tags grant access to the UBI by using the registry.redhat.io credentials that are present in the install pull secret, without exposing the pull secret to other users. This method is more convenient than requiring each developer to install pull secrets with registry.redhat.io credentials in each project.

To create an ImageStreamTag in the openshift namespace, so it is available to developers in all projects, enter:

To create an ImageStreamTag in a single project, enter:
Adding subscription entitlements as a build secret
Builds that use Red Hat subscriptions to install content must include the entitlement keys as a build secret.

You must have access to Red Hat Enterprise Linux (RHEL) package repositories through your subscription.

The entitlement secret to access these repositories is automatically created by the Insights Operator when your cluster is subscribed.

You must be a cluster administrator or have permission to access secrets in the openshift-config-managed project.
Copy the entitlement secret from the openshift-config-managed namespace to the build's namespace:

Add the etc-pki-entitlement secret as a build volume in the build configurationâ€™s Docker strategy:
Running builds with Subscription Manager
Docker builds using Subscription Manager
Docker strategy builds can use yum or dnf to install additional Red Hat Enterprise Linux (RHEL) packages.

The entitlement keys must be added as build strategy volumes.

Use the following as an example Dockerfile to install content with the Subscription Manager:

FROM registry.redhat.io/ubi9/ubi:latest
RUN rm -rf /etc/rhsm-host 1
RUN yum --enablerepo=codeready-builder-for-rhel-9-x86_64-rpms install \ 2
    nss_wrapper \
    uid_wrapper -y && \
    yum clean all -y
RUN ln -s /run/secrets/rhsm /etc/rhsm-host 3
You must include the command to remove the /etc/rhsm-host directory and all its contents in your Dockerfile before executing any yum or dnf commands.

Use the Red Hat Package Browser to find the correct repositories for your installed packages.

You must restore the /etc/rhsm-host symbolic link to keep your image compatible with other Red Hat container images.
Running builds with Red Hat Satellite subscriptions
Adding Red Hat Satellite configurations to builds
Builds that use Red Hat Satellite to install content must provide appropriate configurations to obtain content from Satellite repositories.

You must provide or create a yum-compatible repository configuration file that downloads content from your Satellite instance.


Create a ConfigMap containing the Satellite repository configuration file:

Add the Satellite repository configuration and entitlement key as a build volumes:
Docker builds using Red Hat Satellite subscriptions
Docker strategy builds can use Red Hat Satellite repositories to install subscription content.

You have added the entitlement keys and Satellite repository configurations as build volumes.


Use the following as an example Dockerfile to install content with Satellite:

FROM registry.redhat.io/ubi9/ubi:latest
RUN rm -rf /etc/rhsm-host 1
RUN yum --enablerepo=codeready-builder-for-rhel-9-x86_64-rpms install \ 2
    nss_wrapper \
    uid_wrapper -y && \
    yum clean all -y
RUN ln -s /run/secrets/rhsm /etc/rhsm-host 3
You must include the command to remove the /etc/rhsm-host directory and all its contents in your Dockerfile before executing any yum or dnf commands.

Contact your Satellite system administrator to find the correct repositories for the build's installed packages.

You must restore the /etc/rhsm-host symbolic link to keep your image compatible with other Red Hat container images.


How to use builds with Red Hat Satellite subscriptions and which certificate to use
Running builds using SharedSecret objects
You can use a SharedSecret object to securely access the entitlement keys of a cluster in builds.

The SharedSecret object allows you to share and synchronize secrets across namespaces.

Shared Resource CSI Driver is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.

For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
You have enabled the TechPreviewNoUpgrade feature set by using the feature gates. For more information, see Enabling features using feature gates.

You must have permission to perform the following actions:


If neither of the last two prerequisites in this list are met, establish, or ask someone to establish, the necessary role-based access control (RBAC) so that you can discover SharedSecret CR instances and enable service accounts to use SharedSecret CR instances.
Use oc apply to create a SharedSecret object instance with the cluster's entitlement secret.

Create a role to grant the builder service account permission to access the SharedSecret object:

Create a RoleBinding object that grants the builder service account permission to access the SharedSecret object by running the following command:

Add the entitlement secret to your BuildConfig object by using a CSI volume mount:

Start a build from the BuildConfig object and follow the logs using the oc command.
Additional resources
Importing simple content access certificates with Insights Operator

Enabling features using feature gates

Managing image streams

build strategy