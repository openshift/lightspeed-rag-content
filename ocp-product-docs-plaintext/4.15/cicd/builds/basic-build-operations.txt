Performing and configuring basic builds

The following sections provide instructions for basic build operations, including starting and canceling builds, editing BuildConfigs, deleting BuildConfigs, viewing build details, and accessing build logs.
Starting a build
You can manually start a new build from an existing build configuration in your current project.

To manually start a build, enter the following command:

$ oc start-build <buildconfig_name>
Re-running a build
You can manually re-run a build using the --from-build flag.

To manually re-run a build, enter the following command:
Streaming build logs
You can specify the --follow flag to stream the build's logs in stdout.

To manually stream a build's logs in stdout, enter the following command:
Setting environment variables when starting a build
You can specify the --env flag to set any desired environment variable for the build.

To specify a desired environment variable, enter the following command:
Starting a build with source
Rather than relying on a Git source pull for a build, you can also start a build by directly pushing your source, which could be the contents of a Git or SVN working directory, a set of pre-built binary artifacts you want to deploy, or a single file. This can be done by specifying one of the following options for the start-build command:


When passing any of these options directly to the build, the contents are streamed to the build and override the current build source settings.

Builds triggered from binary input will not preserve the source on the server, so rebuilds triggered by base image changes will use the source specified in the build configuration.
Start a build from a source using the following command to send the contents of a local Git repository as an archive from the tag v2:
Canceling a build
You can cancel a build using the web console, or with the following CLI command.

To manually cancel a build, enter the following command:


Canceling multiple builds
You can cancel multiple builds with the following CLI command.

To manually cancel multiple builds, enter the following command:
Canceling all builds
You can cancel all builds from the build configuration with the following CLI command.

To cancel all builds, enter the following command:
Canceling all builds in a given state
You can cancel all builds in a given state, such as new or pending, while ignoring the builds in other states.

To cancel all in a given state, enter the following command:
Editing a BuildConfig
To edit your build configurations, you use the Edit BuildConfig option in the Builds view of the Developer perspective.

You can use either of the following views to edit a BuildConfig:

The Form view enables you to edit your BuildConfig using the standard form fields and checkboxes.

The YAML view enables you to edit your BuildConfig with full control over the operations.


You can switch between the Form view and YAML view without losing any data. The data in the Form view is transferred to the YAML view and vice versa.

In the Builds view of the Developer perspective, click the menu . to see the Edit BuildConfig option.

Click Edit BuildConfig to see the Form view option.

In the Git section, enter the Git repository URL for the codebase you want to use to create an application. The URL is then validated.

In the Build from section, select the option that you would like to build from. You can use the following options:

Optional: In the Environment Variables section, add the environment variables associated with the project by using the Name and Value fields. To add more environment variables, use Add Value, or Add from ConfigMap and Secret .

Optional: To further customize your application, use the following advanced options:

Click Save to save the BuildConfig.
Deleting a BuildConfig
You can delete a BuildConfig using the following command.

To delete a BuildConfig, enter the following command:

To delete a BuildConfig and keep the builds instatiated from the BuildConfig, specify the --cascade=false flag when you enter the following command:
Viewing build details
You can view build details with the web console or by using the oc describe CLI command.

This displays information including:

The build source.

The build strategy.

The output destination.

Digest of the image in the destination registry.

How the build was created.


If the build uses the Source strategy, the oc describe output also includes information about the source revision used for the build, including the commit ID, author, committer, and message.

To view build details, enter the following command:
Accessing build logs
You can access build logs using the web console or the CLI.

To stream the logs using the build directly, enter the following command:


Accessing BuildConfig logs
You can access BuildConfig logs using the web console or the CLI.

To stream the logs of the latest build for a BuildConfig, enter the following command:
Accessing BuildConfig logs for a given version build
You can access logs for a given version build for a BuildConfig using the web console or the CLI.

To stream the logs for a given version build for a BuildConfig, enter the following command:
Enabling log verbosity
You can enable a more verbose output by passing the BUILD_LOGLEVEL environment variable as part of the sourceStrategy in a BuildConfig.

An administrator can set the default build verbosity for the entire Red Hat OpenShift Container Platform instance by configuring env/BUILD_LOGLEVEL. This default can be overridden by specifying BUILD_LOGLEVEL in a given BuildConfig. You can specify a higher priority override on the command line for non-binary builds by passing --build-loglevel to oc start-build.
Available log levels for source builds are as follows:


Level 0
Produces output from containers running the assemble script and all encountered errors. This is the default.
Level 1
Produces basic information about the executed process.
Level 2
Produces very detailed information about the executed process.
Level 3
Produces very detailed information about the executed process, and a listing of the archive contents.
Level 4
Currently produces the same information as level 3.
Level 5
Produces everything mentioned on previous levels and additionally provides docker push messages.


To enable more verbose output, pass the BUILD_LOGLEVEL environment variable as part of the sourceStrategy
or dockerStrategy
in a BuildConfig: