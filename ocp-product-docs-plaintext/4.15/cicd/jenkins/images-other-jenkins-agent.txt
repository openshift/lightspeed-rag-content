Jenkins agent

Red Hat OpenShift Container Platform provides a base image for use as a Jenkins agent.

The Base image for Jenkins agents does the following:

Pulls in both the required tools, headless Java, the Jenkins JNLP client, and the useful ones, including git, tar, zip, and nss, among others.

Establishes the JNLP agent as the entry point.

Includes the oc client tool for invoking command line operations from within Jenkins jobs.

Provides Dockerfiles for both Red Hat Enterprise Linux (RHEL) and localdev images.


Use a version of the agent image that is appropriate for your Red Hat OpenShift Container Platform release version. Embedding an oc client version that is not compatible with the Red Hat OpenShift Container Platform version can cause unexpected behavior.
The Red Hat OpenShift Container Platform Jenkins image also defines the following sample java-builder pod template to illustrate how you can use the agent image with the Jenkins Kubernetes plugin.

The java-builder pod template employs two containers: * A jnlp container that uses the Red Hat OpenShift Container Platform Base agent image and handles the JNLP contract for starting and stopping Jenkins agents. * A java container that uses the java Red Hat OpenShift Container Platform Sample ImageStream, which contains the various Java binaries, including the Maven binary mvn, for building code.
Jenkins agent images
The Red Hat OpenShift Container Platform Jenkins agent images are available on Quay.io or registry.redhat.io.

Jenkins images are available through the Red Hat Registry:

$ docker pull registry.redhat.io/ocp-tools-4/jenkins-rhel8:<image_tag>
$ docker pull registry.redhat.io/ocp-tools-4/jenkins-agent-base-rhel8:<image_tag>
To use these images, you can either access them directly from Quay.io or registry.redhat.io or push them into your Red Hat OpenShift Container Platform container image registry.
Jenkins agent environment variables
Each Jenkins agent container can be configured with the following environment variables.
Jenkins agent memory requirements
A JVM is used in all Jenkins agents to host the Jenkins JNLP agent as well as to run any Java applications such as javac, Maven, or Gradle.

By default, the Jenkins JNLP agent JVM uses 50% of the container memory limit for its heap. This value can be modified by the CONTAINER_HEAP_PERCENT environment variable. It can also be capped at an upper limit or overridden entirely.

By default, any other processes run in the Jenkins agent container, such as shell scripts or oc commands run from pipelines, cannot use more than the remaining 50% memory limit without provoking an OOM kill.

By default, each further JVM process that runs in a Jenkins agent container uses up to 25% of the container memory limit for its heap. It might be necessary to tune this limit for many build workloads.
Jenkins agent Gradle builds
Hosting Gradle builds in the Jenkins agent on Red Hat OpenShift Container Platform presents additional complications because in addition to the Jenkins JNLP agent and Gradle JVMs, Gradle spawns a third JVM to run tests if they are specified.

The following settings are suggested as a starting point for running Gradle builds in a memory constrained Jenkins agent on Red Hat OpenShift Container Platform. You can modify these settings as required.

Ensure the long-lived Gradle daemon is disabled by adding org.gradle.daemon=false to the gradle.properties file.

Disable parallel build execution by ensuring org.gradle.parallel=true is not set in the gradle.properties file and that --parallel is not set as a command line argument.

To prevent Java compilations running out-of-process, set java { options.fork = false } in the build.gradle file.

Disable multiple additional test processes by ensuring test { maxParallelForks = 1 } is set in the build.gradle file.

Override the Gradle JVM memory parameters by the GRADLE_OPTS, JAVA_OPTS or JAVA_TOOL_OPTIONS environment variables.

Set the maximum heap size and JVM arguments for any Gradle test JVM by defining the maxHeapSize and jvmArgs settings in build.gradle, or through the -Dorg.gradle.jvmargs command line argument.
Jenkins agent pod retention
Jenkins agent pods, are deleted by default after the build completes or is stopped. This behavior can be changed by the Kubernetes plugin pod retention setting. Pod retention can be set for all Jenkins builds, with overrides for each pod template. The following behaviors are supported:

Always keeps the build pod regardless of build result.

Default uses the plugin value, which is the pod template only.

Never always deletes the pod.

On Failure keeps the pod if it fails during the build.


You can override pod retention in the pipeline Jenkinsfile:

podTemplate(label: "mypod",
  cloud: "openshift",
  inheritFrom: "maven",
  podRetention: onFailure(), 1
  containers: [
    ...
  ]) {
  node("mypod") {
    ...
  }
}
Allowed values for podRetention are never(), onFailure(), always(), and default().


Pods that are kept might continue to run and count against resource quotas.