Metrics, logs, and traces

Once you have added your application to the mesh, you can observe the data flow through your application. If you do not have your own application installed, you can see how observability works in Red Hat OpenShift Service Mesh by installing the Bookinfo sample application.
Discovering console addresses
Red Hat OpenShift Service Mesh provides the following consoles to view your service mesh data:

Kiali console - Kiali is the management console for Red Hat OpenShift Service Mesh.

Jaeger console - Jaeger is the management console for Red Hat OpenShift distributed tracing platform.

Grafana console - Grafana provides mesh administrators with advanced query and metrics analysis and dashboards for Istio data. Optionally, Grafana can be used to analyze service mesh metrics.

Prometheus console - Red Hat OpenShift Service Mesh uses Prometheus to store telemetry information from services.


When you install the Service Mesh control plane, it automatically generates routes for each of the installed components. Once you have the route address, you can access the Kiali, Jaeger, Prometheus, or Grafana console to view and manage your service mesh data.

The component must be enabled and installed.  For example, if you did not install distributed tracing, you will not be able to access the Jaeger console.


Log in to the Red Hat OpenShift Container Platform web console as a user with cluster-admin rights. If you use Red Hat OpenShift Dedicated, you must have an account with the dedicated-admin role.

Navigate to Networking -> Routes.

On the Routes page, select the Service Mesh control plane project, for example istio-system, from the Namespace menu.

If necessary, use the filter to find the component console whose route you want to access.  Click the route Location to launch the console.

Click Log In With OpenShift.


Log in to the Red Hat OpenShift Container Platform CLI as a user with the cluster-admin role. If you use Red Hat OpenShift Dedicated, you must have an account with the dedicated-admin role.

Switch to the Service Mesh control plane project. In this example, istio-system is the Service Mesh control plane project.  Run the following command:

To get the routes for the various Red Hat OpenShift Service Mesh consoles, run the folowing command:

Copy the URL for the console you want to access from the HOST/PORT column into a browser to open the console.

Click Log In With OpenShift.
Accessing the Kiali console
You can view your application's topology, health, and metrics in the Kiali console. If your service is experiencing problems, the Kiali console lets you view the data flow through your service. You can view insights about the mesh components at different levels, including abstract applications, services, and workloads. Kiali also provides an interactive graph view of your namespace in real time.

To access the Kiali console you must have Red Hat OpenShift Service Mesh installed, Kiali installed and configured.

The installation process creates a route to access the Kiali console.

If you know the URL for the Kiali console, you can access it directly.  If you do not know the URL, use the following directions.

Log in to the Red Hat OpenShift Container Platform web console with an administrator role.

Click Home -> Projects.

On the Projects page, if necessary, use the filter to find the name of your project.

Click the name of your project, for example, bookinfo.

On the Project details page, in the Launcher section, click the Kiali link.

Log in to the Kiali console with the same user name and password that you use to access the Red Hat OpenShift Container Platform console.


Log in to the Red Hat OpenShift Container Platform web console with a developer role.

Click Project.

On the Project Details page, if necessary, use the filter to find the name of your project.

Click the name of your project, for example, bookinfo.

On the Project page, in the Launcher section, click the Kiali link.

Click Log In With OpenShift.
Viewing service mesh data in the Kiali console
The Kiali Graph offers a powerful visualization of your mesh traffic. The topology combines real-time request traffic with your Istio configuration information to present immediate insight into the behavior of your service mesh, letting you quickly pinpoint issues. Multiple Graph Types let you visualize traffic as a high-level service topology, a low-level workload topology, or as an application-level topology.

There are several graphs to choose from:

The App graph shows an aggregate workload for all applications that are labeled the same.

The Service graph shows a node for each service in your mesh but excludes all applications and workloads from the graph. It provides a high level view and aggregates all traffic for defined services.

The Versioned App graph shows a node for each version of an application. All versions of an application are grouped together.

The Workload graph shows a node for each workload in your service mesh. This graph does not require you to use the application and version labels. If your application does not use version labels, use this the graph.


Graph nodes are decorated with a variety of information, pointing out various route routing options like virtual services and service entries, as well as special configuration like fault-injection and circuit breakers. It can identify mTLS issues, latency issues, error traffic and more. The Graph is highly configurable, can show traffic animation, and has powerful Find and Hide abilities.

Click the Legend button to view information about the shapes, colors, arrows, and badges displayed in the graph.

To view a summary of metrics, select any node or edge in the graph to display its metric details in the summary details panel.

Changing graph layouts in Kiali
The layout for the Kiali graph can render differently depending on your application architecture and the data to display. For example, the number of graph nodes and their interactions can determine how the Kiali graph is rendered. Because it is not possible to create a single layout that renders nicely for every situation, Kiali offers a choice of several different layouts.

If you do not have your own application installed, install the Bookinfo sample application.  Then generate traffic for the Bookinfo application by entering the following command several times.


Launch the Kiali console.

Click Log In With OpenShift.

In Kiali console, click Graph to view a namespace graph.

From the Namespace menu, select your application namespace, for example, bookinfo.

To choose a different graph layout, do either or both of the following:
Viewing logs in the Kiali console
You can view logs for your workloads in the Kiali console.  The Workload Detail page includes a Logs tab which displays a unified logs view that displays both application and proxy logs. You can select how often you want the log display in Kiali to be refreshed.

To change the logging level on the logs displayed in Kiali, you change the logging configuration for the workload or the proxy.

Service Mesh installed and configured.

Kiali installed and configured.

The address for the Kiali console.

Application or Bookinfo sample application added to the mesh.


Launch the Kiali console.

Click Log In With OpenShift.

Click Workloads.

On the Workloads page, select the project from the Namespace menu.

If necessary, use the filter to find the workload whose logs you want to view.  Click the workload Name.  For example, click ratings-v1.

On the Workload Details page, click the Logs tab to view the logs for the workload.


If you do not see any log entries, you may need to adjust either the Time Range or the Refresh interval.
Viewing metrics in the Kiali console
You can view inbound and outbound metrics for your applications, workloads, and services in the Kiali console.  The Detail pages include the following tabs:

inbound Application metrics

outbound Application metrics

inbound Workload metrics

outbound Workload metrics

inbound Service metrics


These tabs display predefined metrics dashboards, tailored to the relevant application, workload or service level. The application and workload detail views show request and response metrics such as volume, duration, size, or TCP traffic. The service detail view shows request and response metrics for inbound traffic only.

Kiali lets you customize the charts by choosing the charted dimensions. Kiali can also present metrics reported by either source or destination proxy metrics. And for troubleshooting, Kiali can overlay trace spans on the metrics.

Service Mesh installed and configured.

Kiali installed and configured.

The address for the Kiali console.

(Optional) Distributed tracing installed and configured.


Launch the Kiali console.

Click Log In With OpenShift.

Click either Applications, Workloads, or Services.

On the Applications, Workloads, or Services page, select the project from the Namespace menu.

If necessary, use the filter to find the application, workload, or service whose logs you want to view.  Click the Name.

On the Application Detail, Workload Details, or Service Details page, click either the Inbound Metrics or Outbound Metrics tab to view the metrics.
Distributed tracing
Distributed tracing is the process of tracking the performance of individual services in an application by tracing the path of the service calls in the application. Each time a user takes action in an application, a request is executed that might require many services to interact to produce a response. The path of this request is called a distributed transaction.

Red Hat OpenShift Service Mesh uses Red Hat OpenShift distributed tracing platform to allow developers to view call flows in a microservice application.

Configuring the distributed tracing platform (Tempo)
You can expose tracing data to the Red Hat OpenShift distributed tracing platform (Tempo) stack by appending a named element and the zipkin provider to the spec.meshConfig.extensionProviders specification in the ServiceMehControlPlane, as shown in the following example. Then, a telemetry custom resource configures Istio proxies to collect trace spans and send them to the Tempo distributor service endpoint.

You can create a TempoStack instance in the tracing-system namespace after creating the ServiceMeshControlPlane and the ServiceMeshMemberRoll resources.

You have installed the Tempo Operator and Red Hat OpenShift Service Mesh Operator in the openshift-operators namespace.

You have created namespaces such as istio-system and tracing-system.


Configure the ServiceMeshControlPlane resource to define an extension provider:

Configure the Kiali resource specification to enable a Kiali workload traces dashboard. You can use the dashboard to view tracing query results.

Create a TempoStack instance using the Red Hat Tempo Operator in the tracing-system namespace. For more information, see "Installing the distributed tracing platform (Tempo)" in the "Additional resources" section.

Apply a Telemetry custom resource for Service Mesh to start the Tempo provider setting.


You can also create an Istio gateway and virtual service resources to expose an Red Hat OpenShift Container Platform route for accessing the Tempo Jaeger Query console.

Installing the distributed tracing platform (Tempo).
Connecting an existing distributed tracing Jaeger instance
If you already have an existing Red Hat OpenShift distributed tracing platform (Jaeger) instance in Red Hat OpenShift Container Platform, you can configure your ServiceMeshControlPlane resource to use that instance for distributed tracing platform.

Red Hat OpenShift distributed tracing platform instance installed and configured.


In the Red Hat OpenShift Container Platform web console, click Operators -> Installed Operators.

Click the Project menu and select the project where you installed the Service Mesh control plane, for example istio-system.

Click the Red Hat OpenShift Service Mesh Operator. In the Istio Service Mesh Control Plane column, click the name of your ServiceMeshControlPlane resource, for example basic.

Add the name of your distributed tracing platform (Jaeger) instance to the ServiceMeshControlPlane.

Click Reload to verify the ServiceMeshControlPlane resource was configured correctly.
Adjusting the sampling rate
A trace is an execution path between services in the service mesh. A trace is comprised of one or more spans. A span is a logical unit of work that has a name, start time, and duration. The sampling rate determines how often a trace is persisted.

The Envoy proxy sampling rate is set to sample 100% of traces in your service mesh by default. A high sampling rate consumes cluster resources and performance but is useful when debugging issues. Before you deploy Red Hat OpenShift Service Mesh in production, set the value to a smaller proportion of traces. For example, set spec.tracing.sampling to 100 to sample 1% of traces.

Configure the Envoy proxy sampling rate as a scaled integer representing 0.01% increments.

In a basic installation, spec.tracing.sampling is set to 10000, which samples 100% of traces. For example:

Setting the value to 10 samples 0.1% of traces.

Setting the value to 500 samples 5% of traces.


The Envoy proxy sampling rate applies for applications that are available to a Service Mesh, and use the Envoy proxy. This sampling rate determines how much data the Envoy proxy collects and tracks.

The Jaeger remote sampling rate applies to applications that are external to the Service Mesh, and do not use the Envoy proxy, such as a database. This sampling rate determines how much data the distributed tracing system collects and stores.
In the Red Hat OpenShift Container Platform web console, click Operators -> Installed Operators.

Click the Project menu and select the project where you installed the control plane, for example istio-system.

Click the Red Hat OpenShift Service Mesh Operator. In the Istio Service Mesh Control Plane column, click the name of your ServiceMeshControlPlane resource, for example basic.

To adjust the sampling rate, set a different value for spec.tracing.sampling.

Click Reload to verify the ServiceMeshControlPlane resource was configured correctly.
Accessing the Jaeger console
To access the Jaeger console you must have Red Hat OpenShift Service Mesh installed, Red Hat OpenShift distributed tracing platform (Jaeger) installed and configured.

The installation process creates a route to access the Jaeger console.

If you know the URL for the Jaeger console, you can access it directly.  If you do not know the URL, use the following directions.

Log in to the Red Hat OpenShift Container Platform web console as a user with cluster-admin rights. If you use Red Hat OpenShift Dedicated, you must have an account with the dedicated-admin role.

Navigate to Networking -> Routes.

On the Routes page, select the Service Mesh control plane project, for example istio-system, from the Namespace menu.

If necessary, use the filter to find the jaeger route.  Click the route Location to launch the console.

Click Log In With OpenShift.


Launch the Kiali console.

Click Distributed Tracing in the left navigation pane.

Click Log In With OpenShift.


Log in to the Red Hat OpenShift Container Platform CLI as a user with the cluster-admin role. If you use Red Hat OpenShift Dedicated, you must have an account with the dedicated-admin role.

To query for details of the route using the command line, enter the following command. In this example, istio-system is the Service Mesh control plane namespace.

Launch a browser and navigate to \https://<JAEGER_URL>, where <JAEGER_URL> is the route that you discovered in the previous step.

Log in using the same user name and password that you use to access the Red Hat OpenShift Container Platform console.

If you have added services to the service mesh and have generated traces, you can use the filters and Find Traces button to search your trace data.
Accessing the Grafana console
Grafana is an analytics tool you can use to view, query, and analyze your service mesh metrics. In this example, istio-system is the Service Mesh control plane namespace. To access Grafana, do the following:

Log in to the Red Hat OpenShift Container Platform web console.

Click the Project menu and select the project where you installed the Service Mesh control plane, for example istio-system.

Click Routes.

Click the link in the Location column for the Grafana row.

Log in to the Grafana console with your Red Hat OpenShift Container Platform credentials.
Accessing the Prometheus console
Prometheus is a monitoring and alerting tool that you can use to collect multi-dimensional data about your microservices. In this example, istio-system is the Service Mesh control plane namespace.

Log in to the Red Hat OpenShift Container Platform web console.

Click the Project menu and select the project where you installed the Service Mesh control plane, for example istio-system.

Click Routes.

Click the link in the Location column for the Prometheus row.

Log in to the Prometheus console with your Red Hat OpenShift Container Platform credentials.
Integrating with user-workload monitoring
By default, Red Hat OpenShift Service Mesh (OSSM) installs the Service Mesh control plane (SMCP) with a dedicated instance of Prometheus for collecting metrics from a mesh. However, production systems need more advanced monitoring systems, like Red Hat OpenShift Container Platform monitoring for user-defined projects.

The following steps show how to integrate Service Mesh with user-workload monitoring.

User-workload monitoring is enabled.

Red Hat OpenShift Service Mesh Operator 2.4 is installed.

Kiali Operator 1.65 is installed.


Grant the cluster-monitoring-view role to the Kiali Service Account:

Configure Kiali for user-workload monitoring:

Configure the SMCP for external Prometheus:

Apply a custom network policy to allow ingress traffic from the monitoring namespace:

Apply a Telemetry object to enable traffic metrics in Istio proxies:

Apply a ServiceMonitor object to monitor the Istio control plane:

Apply a PodMonitor object to collect metrics from Istio proxies:

Open the Red Hat OpenShift Container Platform web console, and check that metrics are visible.
Additional resources
Enabling monitoring for user-defined projects

Installing the distributed tracing platform (Tempo)

Installing the Red Hat build of OpenTelemetry