Deploying applications on Service Mesh

You are viewing documentation for a Red Hat OpenShift Service Mesh release that is no longer supported.

Service Mesh version 1.0 and 1.1 control planes are no longer supported. For information about upgrading your service mesh control plane, see Upgrading Service Mesh.

For information about the support status of a particular Red Hat OpenShift Service Mesh release, see the Product lifecycle page.
When you deploy an application into the Service Mesh, there are several differences between the behavior of applications in the upstream community version of Istio and the behavior of applications within a Red Hat OpenShift Service Mesh installation.
Prerequisites
Review Comparing Red Hat OpenShift Service Mesh and upstream Istio community installations

Review Installing Red Hat OpenShift Service Mesh
Creating control plane templates
You can create reusable configurations with ServiceMeshControlPlane templates. Individual users can extend the templates they create with their own configurations. Templates can also inherit configuration information from other templates. For example, you can create an accounting control plane for the accounting team and a marketing control plane for the marketing team. If you create a development template and a production template, members of the marketing team and the accounting team can extend the development and production templates with team specific customization.

When you configure control plane templates, which follow the same syntax as the ServiceMeshControlPlane, users inherit settings in a hierarchical fashion. The Operator is delivered with a default template with default settings for Red Hat OpenShift Service Mesh. To add custom templates you must create a ConfigMap named smcp-templates in the openshift-operators project and mount the ConfigMap in the Operator container at /usr/local/share/istio-operator/templates.

Creating the ConfigMap
Follow this procedure to create the ConfigMap.

An installed, verified Service Mesh Operator.

An account with the cluster-admin role.

Location of the Operator deployment.

Access to the OpenShift CLI (oc).


Log in to the Red Hat OpenShift Container Platform CLI as a cluster administrator.

From the CLI, run this command to create the ConfigMap named smcp-templates in the openshift-operators project and replace <templates-directory> with the location of the ServiceMeshControlPlane files on your local disk:

Locate the Operator ClusterServiceVersion name.

Edit the Operator cluster service version to instruct the Operator to use the smcp-templates ConfigMap.

Add a volume mount and volume to the Operator deployment.

Save your changes and exit the editor.

You can now use the template parameter in the ServiceMeshControlPlane to specify a template.
Enabling automatic sidecar injection
When deploying an application, you must opt-in to injection by configuring the label sidecar.istio.io/inject in spec.template.metadata.labels to true in the deployment object. Opting in ensures that the sidecar injection does not interfere with other Red Hat OpenShift Container Platform features such as builder pods used by numerous frameworks within the Red Hat OpenShift Container Platform ecosystem.

Identify the namespaces that are part of your service mesh and the deployments that need automatic sidecar injection.


To find your deployments use the oc get command.

Open the application's Deployment YAML file in an editor.

Add spec.template.metadata.labels.sidecar.istio/inject to your Deployment YAML file and set sidecar.istio.io/inject to true as shown in the following example.

Save the Deployment YAML file.

Add the file back to the project that contains your app.

To verify that the resource uploaded successfully, run the following command.
Setting proxy environment variables through annotations
Configuration for the Envoy sidecar proxies is managed by the ServiceMeshControlPlane.

You can set environment variables for the sidecar proxy for applications by adding pod annotations to the deployment in the injection-template.yaml file. The environment variables are injected to the sidecar.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: resource
spec:
  replicas: 7
  selector:
    matchLabels:
      app: resource
  template:
    metadata:
      annotations:
        sidecar.maistra.io/proxyEnv: "{ \"maistra_test_env\": \"env_value\", \"maistra_test_env_2\": \"env_value_2\" }"
You should never include maistra.io/ labels and annotations when creating your own custom resources.  These labels and annotations indicate that the resources are generated and managed by the Operator. If you are copying content from an Operator-generated resource when creating your own resources, do not include labels or annotations that start with maistra.io/.  Resources that include these labels or annotations will be overwritten or deleted by the Operator during the next reconciliation.
Updating Mixer policy enforcement
In previous versions of Red Hat OpenShift Service Mesh, Mixer's policy enforcement was enabled by default. Mixer policy enforcement is now disabled by default. You must enable it before running policy tasks.

Access to the OpenShift CLI (oc).


The examples use istio-system as the control plane namespace. Replace this value with the namespace where you deployed the Service Mesh Control Plane (SMCP).
Log in to the Red Hat OpenShift Container Platform CLI.

Run this command to check the current Mixer policy enforcement status:

If disablePolicyChecks: true, edit the Service Mesh ConfigMap:

Locate disablePolicyChecks: true within the ConfigMap and change the value to false.

Save the configuration and exit the editor.

Re-check the Mixer policy enforcement status to ensure it is set to false.


Setting the correct network policy
Service Mesh creates network policies in the Service Mesh control plane and member namespaces to allow traffic between them. Before you deploy, consider the following conditions to ensure the services in your service mesh that were previously exposed through an Red Hat OpenShift Container Platform route.

Traffic into the service mesh must always go through the ingress-gateway for Istio to work properly.

Deploy services external to the service mesh in separate namespaces that are not in any service mesh.

Non-mesh services that need to be deployed within a service mesh enlisted namespace should label their deployments maistra.io/expose-route: "true", which ensures Red Hat OpenShift Container Platform routes to these services still work.
Bookinfo example application
The Bookinfo example application allows you to test your Red Hat OpenShift Service Mesh 2.4.4 installation on Red Hat OpenShift Container Platform.

The Bookinfo application displays information about a book, similar to a single catalog entry of an online book store. The application displays a page that describes the book, book details (ISBN, number of pages, and other information), and book reviews.

The Bookinfo application consists of these microservices:

The productpage microservice calls the details and reviews microservices to populate the page.

The details microservice contains book information.

The reviews microservice contains book reviews. It also calls the ratings microservice.

The ratings microservice contains book ranking information that accompanies a book review.


There are three versions of the reviews microservice:

Version v1 does not call the ratings Service.

Version v2 calls the ratings Service and displays each rating as one to five black stars.

Version v3 calls the ratings Service and displays each rating as one to five red stars.


Installing the Bookinfo application
This tutorial walks you through how to create a sample application by creating a project, deploying the Bookinfo application to that project, and viewing the running application in Service Mesh.

Red Hat OpenShift Container Platform 4.1 or higher installed.

Red Hat OpenShift Service Mesh 2.4.4 installed.

Access to the OpenShift CLI (oc).

You are logged in to Red Hat OpenShift Container Platform as`cluster-admin`.


The Bookinfo sample application cannot be installed on IBM Z(R) and IBM Power(R).
The commands in this section assume the Service Mesh control plane project is istio-system.  If you installed the control plane in another namespace, edit each command before you run it.
Click Home -> Projects.

Click Create Project.

Enter bookinfo as the Project Name, enter a Display Name, and enter a Description, then click Create.

Click Operators -> Installed Operators.

Click the Project menu and use the Service Mesh control plane namespace. In this example, use istio-system.

Click the Red Hat OpenShift Service Mesh Operator.

Click the Istio Service Mesh Member Roll tab.

Click Members, then enter the name of your project in the Value field.

Click Create to save the updated Service Mesh Member Roll.

Run the following command to verify the ServiceMeshMemberRoll was created successfully.

From the CLI, deploy the Bookinfo application in the `bookinfo` project by applying the bookinfo.yaml file:

Create the ingress gateway by applying the bookinfo-gateway.yaml file:

Set the value for the GATEWAY_URL parameter:
Adding default destination rules
Before you can use the Bookinfo application, you must first add default destination rules. There are two preconfigured YAML files, depending on whether or not you enabled mutual transport layer security (TLS) authentication.

To add destination rules, run one of the following commands:
Verifying the Bookinfo installation
To confirm that the sample Bookinfo application was successfully deployed, perform the following steps.

Red Hat OpenShift Service Mesh installed.

Complete the steps for installing the Bookinfo sample app.

You are logged in to Red Hat OpenShift Container Platform as`cluster-admin`.


Verify that all pods are ready with this command:

Run the following command to retrieve the URL for the product page:

Copy and paste the output in a web browser to verify the Bookinfo product page is deployed.


Obtain the address for the Kiali web console.

In Kiali, click Graph.

Select bookinfo from the Namespace list, and App graph from the Graph Type list.

Click Display idle nodes from the Display menu.

Click Services, Workloads or Istio Config to see list views of bookinfo components, and confirm that they are healthy.
Removing the Bookinfo application
Follow these steps to remove the Bookinfo application.

Red Hat OpenShift Container Platform 4.1 or higher installed.

Red Hat OpenShift Service Mesh 2.4.4 installed.

Access to the OpenShift CLI (oc).


Delete the Bookinfo project
Log in to the Red Hat OpenShift Container Platform web console.

Click to Home -> Projects.

Click the bookinfo menu ., and then click Delete Project.

Type bookinfo in the confirmation dialog box, and then click Delete.
Remove the Bookinfo project from the Service Mesh member roll
Log in to the Red Hat OpenShift Container Platform web console.

Click Operators -> Installed Operators.

Click the Project menu and choose istio-system from the list.

Click the Istio Service Mesh Member Roll link under Provided APIS for the Red Hat OpenShift Service Mesh Operator.

Click the ServiceMeshMemberRoll menu . and select Edit Service Mesh Member Roll.

Edit the default Service Mesh Member Roll YAML and remove bookinfo from the members list.

Click Save to update Service Mesh Member Roll.
Generating example traces and analyzing trace data
Jaeger is an open source distributed tracing system. With Jaeger, you can perform a trace that follows the path of a request through various microservices which make up an application. Jaeger is installed by default as part of the Service Mesh.

This tutorial uses Service Mesh and the Bookinfo sample application to demonstrate how you can use Jaeger to perform distributed tracing.

Red Hat OpenShift Container Platform 4.1 or higher installed.

Red Hat OpenShift Service Mesh 2.4.4 installed.

Jaeger enabled during the installation.

Bookinfo example application installed.


After installing the Bookinfo sample application, send traffic to the mesh. Enter the following command several times.

In the Red Hat OpenShift Container Platform console, navigate to Networking -> Routes and search for the Jaeger route, which is the URL listed under Location.

Log in using the same user name and password as you use to access the Red Hat OpenShift Container Platform console.

In the left pane of the Jaeger dashboard, from the Service menu, select productpage.bookinfo and click Find Traces at the bottom of the pane. A list of traces is displayed.

Click one of the traces in the list to open a detailed view of that trace.  If you click the first one in the list, which is the most recent trace, you see the details that correspond to the latest refresh of the /productpage.