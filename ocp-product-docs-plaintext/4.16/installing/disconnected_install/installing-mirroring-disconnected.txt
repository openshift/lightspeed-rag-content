# Mirroring images for a disconnected installation using the oc-mirror plugin


Running your cluster in a restricted network without direct internet connectivity is possible by installing the cluster from a mirrored set of Red Hat OpenShift Container Platform container images in a private registry. This registry must be running at all times as long as the cluster is running. See the Prerequisites section for more information.
You can use the oc-mirror OpenShift CLI (oc) plugin to mirror images to a mirror registry in your fully or partially disconnected environments. You must run oc-mirror from a system with internet connectivity in order to download the required images from the official Red Hat registries.

# About the oc-mirror plugin

You can use the oc-mirror OpenShift CLI (oc) plugin to mirror all required Red Hat OpenShift Container Platform content and other images to your mirror registry by using a single tool. It provides the following features:

* Provides a centralized method to mirror Red Hat OpenShift Container Platform releases, Operators, helm charts, and other images.
* Maintains update paths for Red Hat OpenShift Container Platform and Operators.
* Uses a declarative image set configuration file to include only the Red Hat OpenShift Container Platform releases, Operators, and images that your cluster needs.
* Performs incremental mirroring, which reduces the size of future image sets.
* Prunes images from the target mirror registry that were excluded from the image set configuration since the previous execution.
* Optionally generates supporting artifacts for OpenShift Update Service (OSUS) usage.

When using the oc-mirror plugin, you specify which content to mirror in an image set configuration file. In this YAML file, you can fine-tune the configuration to only include the Red Hat OpenShift Container Platform releases and Operators that your cluster needs. This reduces the amount of data that you need to download and transfer. The oc-mirror plugin can also mirror arbitrary helm charts and additional container images to assist users in seamlessly synchronizing their workloads onto mirror registries.

The first time you run the oc-mirror plugin, it populates your mirror registry with the required content to perform your disconnected cluster installation or update. In order for your disconnected cluster to continue receiving updates, you must keep your mirror registry updated. To update your mirror registry, you run the oc-mirror plugin using the same configuration as the first time you ran it. The oc-mirror plugin references the metadata from the storage backend and only downloads what has been released since the last time you ran the tool. This provides update paths for Red Hat OpenShift Container Platform and Operators and performs dependency resolution as required.

## High level workflow

The following steps outline the high-level workflow on how to use the oc-mirror plugin to mirror images to a mirror registry:

1. Create an image set configuration file.
2. Mirror the image set to the target mirror registry by using one of the following methods:
* Mirror an image set directly to the target mirror registry.
* Mirror an image set to disk, transfer the image set to the target environment, then upload the image set to the target mirror registry.
3. Configure your cluster to use the resources generated by the oc-mirror plugin.
4. Repeat these steps to update your target mirror registry as necessary.


[IMPORTANT]
----
When using the oc-mirror CLI plugin to populate a mirror registry, any further updates to the target mirror registry must be made by using the oc-mirror plugin.
----

# oc-mirror plugin compatibility and support

The oc-mirror plugin supports mirroring Red Hat OpenShift Container Platform payload images and Operator catalogs for Red Hat OpenShift Container Platform versions 4.12 and later.


[NOTE]
----
On aarch64, ppc64le, and s390x architectures the oc-mirror plugin is only supported for Red Hat OpenShift Container Platform versions 4.14 and later.
----

Use the latest available version of the oc-mirror plugin regardless of which versions of Red Hat OpenShift Container Platform you need to mirror.

* For information on updating oc-mirror, see Viewing the image pull source.

# About the mirror registry

You can mirror the images that are required for Red Hat OpenShift Container Platform installation and subsequent product updates to a container mirror registry that supports Docker v2-2, such as Red Hat Quay. If you do not have access to a large-scale container registry, you can use the mirror registry for Red Hat OpenShift, which is a small-scale container registry included with Red Hat OpenShift Container Platform subscriptions.

Regardless of your chosen registry, the procedure to mirror content from Red Hat hosted sites on the internet to an isolated image registry is the same. After you mirror the content, you configure each cluster to retrieve this content from your mirror registry.


[IMPORTANT]
----
The OpenShift image registry cannot be used as the target registry because it does not support pushing without a tag, which is required during the mirroring process.
----

If choosing a container registry that is not the mirror registry for Red Hat OpenShift, it must be reachable by every machine in the clusters that you provision. If the registry is unreachable, installation, updating, or normal operations such as workload relocation might fail. For that reason, you must run mirror registries in a highly available way, and the mirror registries must at least match the production availability of your Red Hat OpenShift Container Platform clusters.

When you populate your mirror registry with Red Hat OpenShift Container Platform images, you can follow two scenarios. If you have a host that can access both the internet and your mirror registry, but not your cluster nodes, you can directly mirror the content from that machine. This process is referred to as connected mirroring. If you have no such host, you must mirror the images to a file system and then bring that host or removable media into your restricted environment. This process is referred to as disconnected mirroring.

For mirrored registries, to view the source of pulled images, you must review the Trying to access log entry in the CRI-O logs. Other methods to view the image pull source, such as using the crictl images command on a node, show the non-mirrored image name, even though the image is pulled from the mirrored location.


[NOTE]
----
Red Hat does not test third party registries with Red Hat OpenShift Container Platform.
----

* For information about viewing the CRI-O logs to view the image source, see Viewing the image pull source.

# Prerequisites

* You must have a container image registry that supports Docker v2-2 in the location that will host the Red Hat OpenShift Container Platform cluster, such as Red Hat Quay.

[NOTE]
----
If you use Red Hat Quay, you must use version 3.6 or later with the oc-mirror plugin. If you have an entitlement to Red Hat Quay, see the documentation on deploying Red Hat Quay for proof-of-concept purposes or by using the Red Hat Quay Operator. If you need additional assistance selecting and installing a registry, contact your sales representative or Red Hat Support.
----

If you do not already have an existing solution for a container image registry, subscribers of Red Hat OpenShift Container Platform are provided a mirror registry for Red Hat OpenShift. The mirror registry for Red Hat OpenShift is included with your subscription and is a small-scale container registry that can be used to mirror the required container images of Red Hat OpenShift Container Platform in disconnected installations.

# Preparing your mirror hosts

Before you can use the oc-mirror plugin to mirror images, you must install the plugin and create a container image registry credentials file to allow the mirroring from Red Hat to your mirror.

## Installing the oc-mirror OpenShift CLI plugin

Install the oc-mirror OpenShift CLI plugin to manage image sets in disconnected environments.

* You have installed the OpenShift CLI (oc). If you are mirroring image sets in a fully disconnected environment, ensure the following:
* You have installed the oc-mirror plugin on the host that has internet access.
* The host in the disconnected environment has access to the target mirror registry.
* You have set the umask parameter to 0022 on the operating system that uses oc-mirror.
* You have installed the correct binary for the RHEL version that you are using.

1. Download the oc-mirror CLI plugin.
1. Navigate to the Downloads page of the https://console.redhat.com/openshift [OpenShift Cluster Manager].
2. Under the OpenShift disconnected installation tools section, click Download for OpenShift Client (oc) mirror plugin and save the file.
2. Extract the archive:

```terminal
$ tar xvzf oc-mirror.tar.gz
```

3. If necessary, update the plugin file to be executable:

```terminal
$ chmod +x oc-mirror
```


[NOTE]
----
Do not rename the oc-mirror file.
----
4. Install the oc-mirror CLI plugin by placing the file in your PATH, for example, /usr/local/bin:

```terminal
$ sudo mv oc-mirror /usr/local/bin/.
```


* Verify that the plugin for oc-mirror v1 is successfully installed by running the following command:

```terminal
$ oc mirror help
```


* Installing and using CLI plugins

## Configuring credentials that allow images to be mirrored

Create a container image registry credentials file that enables you to mirror images from Red Hat to your mirror.


[WARNING]
----
Do not use this image registry credentials file as the pull secret when you install a cluster. If you provide this file when you install cluster, all of the machines in the cluster will have write access to your mirror registry.
----


[WARNING]
----
This process requires that you have write access to a container image registry on the mirror registry and adds the credentials to a registry pull secret.
----

* You configured a mirror registry to use in your disconnected environment.
* You identified an image repository location on your mirror registry to mirror images into.
* You provisioned a mirror registry account that allows images to be uploaded to that image repository.

Complete the following steps on the installation host:

1. Download your registry.redhat.io https://console.redhat.com/openshift/install/pull-secret [pull secret from Red Hat OpenShift Cluster Manager].
2. Make a copy of your pull secret in JSON format:

```terminal
$ cat ./pull-secret | jq . > <path>/<pull_secret_file_in_json> 1
```

Specify the path to the folder to store the pull secret in and a name for the JSON file that you create.

The contents of the file resemble the following example:

```json
{
  "auths": {
    "cloud.openshift.com": {
      "auth": "b3BlbnNo...",
      "email": "you@example.com"
    },
    "quay.io": {
      "auth": "b3BlbnNo...",
      "email": "you@example.com"
    },
    "registry.connect.redhat.com": {
      "auth": "NTE3Njg5Nj...",
      "email": "you@example.com"
    },
    "registry.redhat.io": {
      "auth": "NTE3Njg5Nj...",
      "email": "you@example.com"
    }
  }
}
```

3. Save the file as either ~/.docker/config.json or $XDG_RUNTIME_DIR/containers/auth.json:
1. If the .docker or $XDG_RUNTIME_DIR/containers directories do not exist, create one by entering the following command:

```terminal
$ mkdir -p <directory_name>
```


Where <directory_name> is either ~/.docker or $XDG_RUNTIME_DIR/containers.
2. Copy the pull secret to the appropriate directory by entering the following command:

```terminal
$ cp <path>/<pull_secret_file_in_json> <directory_name>/<auth_file>
```


Where <directory_name> is either ~/.docker or $XDG_RUNTIME_DIR/containers, and <auth_file> is either config.json or auth.json.
4. Generate the base64-encoded user name and password or token for your mirror registry:

```terminal
$ echo -n '<user_name>:<password>' | base64 -w0 1
BGVtbYk3ZHAtqXs=
```

For <user_name> and <password>, specify the user name and password that you configured for your registry.
5. Edit the JSON
file and add a section that describes your registry to it:

```json
  "auths": {
    "<mirror_registry>": { 1
      "auth": "<credentials>", 2
      "email": "you@example.com"
    }
  },
```

Specify the registry domain name, and optionally the port, that your mirror registry uses to serve content. For example,
registry.example.com or registry.example.com:8443
Specify the base64-encoded user name and password for
the mirror registry.

The file resembles the following example:

```json
{
  "auths": {
    "registry.example.com": {
      "auth": "BGVtbYk3ZHAtqXs=",
      "email": "you@example.com"
    },
    "cloud.openshift.com": {
      "auth": "b3BlbnNo...",
      "email": "you@example.com"
    },
    "quay.io": {
      "auth": "b3BlbnNo...",
      "email": "you@example.com"
    },
    "registry.connect.redhat.com": {
      "auth": "NTE3Njg5Nj...",
      "email": "you@example.com"
    },
    "registry.redhat.io": {
      "auth": "NTE3Njg5Nj...",
      "email": "you@example.com"
    }
  }
}
```


# Creating the image set configuration

Before you can use the oc-mirror plugin to mirror image sets, you must create an image set configuration file. This image set configuration file defines which Red Hat OpenShift Container Platform releases, Operators, and other images to mirror, along with other configuration settings for the oc-mirror plugin.

You must specify a storage backend in the image set configuration file. This storage backend can be a local directory or a registry that supports Docker v2-2. The oc-mirror plugin stores metadata in this storage backend during image set creation.


[IMPORTANT]
----
Do not delete or modify the metadata that is generated by the oc-mirror plugin. You must use the same storage backend every time you run the oc-mirror plugin for the same mirror registry.
----

* You have created a container image registry credentials file. For instructions, see "Configuring credentials that allow images to be mirrored".

1. Use the oc mirror init command to create a template for the image set configuration and save it to a file called imageset-config.yaml:

```terminal
$ oc mirror init <--registry <storage_backend> > imageset-config.yaml 1
```

Specifies the location of your storage backend, such as example.com/mirror/oc-mirror-metadata.
2. Edit the file and adjust the settings as necessary:

```yaml
kind: ImageSetConfiguration
apiVersion: mirror.openshift.io/v1alpha2
archiveSize: 4                                                      1
storageConfig:                                                      2
  registry:
    imageURL: example.com/mirror/oc-mirror-metadata                 3
    skipTLS: false
mirror:
  platform:
    channels:
    - name: stable-4.16                                             4
      type: ocp
    graph: true                                                     5
  operators:
  - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.16  6
    packages:
    - name: serverless-operator                                     7
      channels:
      - name: stable                                                8
  additionalImages:
  - name: registry.redhat.io/ubi9/ubi:latest                        9
  helm: {}
```

Add archiveSize to set the maximum size, in GiB, of each file within the image set.
Set the back-end location to save the image set metadata to. This location can be a registry or local directory. It is required to specify storageConfig values.
Set the registry URL for the storage backend.
Set the channel to retrieve the Red Hat OpenShift Container Platform images from.
Add graph: true to build and push the graph-data image to the mirror registry. The graph-data image is required to create OpenShift Update Service (OSUS). The graph: true field also generates the UpdateService custom resource manifest. The oc command-line interface (CLI) can use the UpdateService custom resource manifest to create OSUS. For more information, see About the OpenShift Update Service.
Set the Operator catalog to retrieve the Red Hat OpenShift Container Platform images from.
Specify only certain Operator packages to include in the image set. Remove this field to retrieve all packages in the catalog.
Specify only certain channels of the Operator packages to include in the image set. You must always include the default channel for the Operator package even if you do not use the bundles in that channel. You can find the default channel by running the following command: oc mirror list operators --catalog=<catalog_name> --package=<package_name>.
Specify any additional images to include in image set.

[NOTE]
----
The graph: true field also mirrors the ubi-micro image along with other mirrored images.
----

See "Image set configuration parameters" for the full list of parameters and "Image set configuration examples" for various mirroring use cases.
3. Save the updated file.

This image set configuration file is required by the oc mirror command when mirroring content.

* Image set configuration parameters
* Image set configuration examples
* Using the OpenShift Update Service in a disconnected environment

# Mirroring an image set to a mirror registry

You can use the oc-mirror CLI plugin to mirror images to a mirror registry in a partially disconnected environment or in a fully disconnected environment.

These procedures assume that you already have your mirror registry set up.

## Mirroring an image set in a partially disconnected environment

In a partially disconnected environment, you can mirror an image set directly to the target mirror registry.

### Mirroring from mirror to mirror

You can use the oc-mirror plugin to mirror an image set directly to a target mirror registry that is accessible during image set creation.

You are required to specify a storage backend in the image set configuration file. This storage backend can be a local directory or a Docker v2 registry. The oc-mirror plugin stores metadata in this storage backend during image set creation.


[IMPORTANT]
----
Do not delete or modify the metadata that is generated by the oc-mirror plugin. You must use the same storage backend every time you run the oc-mirror plugin for the same mirror registry.
----

* You have access to the internet to get the necessary container images.
* You have installed the OpenShift CLI (oc).
* You have installed the oc-mirror CLI plugin.
* You have created the image set configuration file.

* Run the oc mirror command to mirror the images from the specified image set configuration to a specified registry:

```terminal
$ oc mirror --config=./<imageset-config.yaml> \1
  docker://registry.example:5000             2
```

Specify the image set configuration file that you created. For example, imageset-config.yaml.
Specify the registry to mirror the image set file to. The registry must start with docker://. If you specify a top-level namespace for the mirror registry, you must also use this same namespace on subsequent executions.

1. Navigate into the oc-mirror-workspace/ directory that was generated.
2. Navigate into the results directory, for example, results-1639608409/.
3. Verify that YAML files are present for the ImageContentSourcePolicy and CatalogSource resources.


[NOTE]
----
The repositoryDigestMirrors section of the ImageContentSourcePolicy YAML file is used for the install-config.yaml file during installation.
----

* Configure your cluster to use the resources generated by oc-mirror.

* Unable to retrieve source image.

## Mirroring an image set in a fully disconnected environment

To mirror an image set in a fully disconnected environment, you must first mirror the image set to disk, then mirror the image set file on disk to a mirror.

### Mirroring from mirror to disk

You can use the oc-mirror plugin to generate an image set and save the contents to disk. The generated image set can then be transferred to the disconnected environment and mirrored to the target registry.


[IMPORTANT]
----
Depending on the configuration specified in the image set configuration file, using oc-mirror to mirror images might download several hundreds of gigabytes of data to disk.
The initial image set download when you populate the mirror registry is often the largest. Because you only download the images that changed since the last time you ran the command, when you run the oc-mirror plugin again, the generated image set is often smaller.
----

You are required to specify a storage backend in the image set configuration file. This storage backend can be a local directory or a docker v2 registry. The oc-mirror plugin stores metadata in this storage backend during image set creation.


[IMPORTANT]
----
Do not delete or modify the metadata that is generated by the oc-mirror plugin. You must use the same storage backend every time you run the oc-mirror plugin for the same mirror registry.
----

* You have access to the internet to obtain the necessary container images.
* You have installed the OpenShift CLI (oc).
* You have installed the oc-mirror CLI plugin.
* You have created the image set configuration file.

* Run the oc mirror command to mirror the images from the specified image set configuration to disk:

```terminal
$ oc mirror --config=./imageset-config.yaml \1
  file://<path_to_output_directory>          2
```

Pass in the image set configuration file that was created. This procedure assumes that it is named imageset-config.yaml.
Specify the target directory where you want to output the image set file. The target directory path must start with file://.

1. Navigate to your output directory:

```terminal
$ cd <path_to_output_directory>
```

2. Verify that an image set .tar file was created:

```terminal
$ ls
```

Example output

```text
mirror_seq1_000000.tar
```


* Transfer the image set .tar file to the disconnected environment.

* Unable to retrieve source image.

### Mirroring from disk to mirror

You can use the oc-mirror plugin to mirror the contents of a generated image set to the target mirror registry.

* You have installed the OpenShift CLI (oc) in the disconnected environment.
* You have installed the oc-mirror CLI plugin in the disconnected environment.
* You have generated the image set file by using the oc mirror command.
* You have transferred the image set file to the disconnected environment.

* Run the oc mirror command to process the image set file on disk and mirror the contents to a target mirror registry:

```terminal
$ oc mirror --from=./mirror_seq1_000000.tar \1
  docker://registry.example:5000             2
```

Pass in the image set .tar file to mirror, named mirror_seq1_000000.tar in this example. If an archiveSize value was specified in the image set configuration file, the image set might be broken up into multiple .tar files. In this situation, you can pass in a directory that contains the image set .tar files.
Specify the registry to mirror the image set file to. The registry must start with docker://. If you specify a top-level namespace for the mirror registry, you must also use this same namespace on subsequent executions.

This command updates the mirror registry with the image set and generates the ImageContentSourcePolicy and CatalogSource resources.

1. Navigate into the oc-mirror-workspace/ directory that was generated.
2. Navigate into the results directory, for example, results-1639608409/.
3. Verify that YAML files are present for the ImageContentSourcePolicy and CatalogSource resources.

* Configure your cluster to use the resources generated by oc-mirror.

* Unable to retrieve source image.

# Configuring your cluster to use the resources generated by oc-mirror

After you have mirrored your image set to the mirror registry, you must apply the generated ImageContentSourcePolicy, CatalogSource, and release image signature resources into the cluster.

The ImageContentSourcePolicy resource associates the mirror registry with the source registry and redirects image pull requests from the online registries to the mirror registry. The CatalogSource resource is used by Operator Lifecycle Manager (OLM) to retrieve information about the available Operators in the mirror registry. The release image signatures are used to verify the mirrored release images.

* You have mirrored the image set to the registry mirror in the disconnected environment.
* You have access to the cluster as a user with the cluster-admin role.

1. Log in to the OpenShift CLI as a user with the cluster-admin role.
2. Apply the YAML files from the results directory to the cluster by running the following command:

```terminal
$ oc apply -f ./oc-mirror-workspace/results-1639608409/
```

3. If you mirrored release images, apply the release image signatures to the cluster by running the following command:

```terminal
$ oc apply -f ./oc-mirror-workspace/results-1639608409/release-signatures/
```


[NOTE]
----
If you are mirroring Operators instead of clusters, you do not need to run $ oc apply -f ./oc-mirror-workspace/results-1639608409/release-signatures/. Running that command will return an error, as there are no release image signatures to apply.
----

1. Verify that the ImageContentSourcePolicy resources were successfully installed by running the following command:

```terminal
$ oc get imagecontentsourcepolicy
```

2. Verify that the CatalogSource resources were successfully installed by running the following command:

```terminal
$ oc get catalogsource -n openshift-marketplace
```


# Updating your mirror registry content

You can update your mirror registry content by updating the image set configuration file and mirroring the image set to the mirror registry. The next time that you run the oc-mirror plugin, an image set is generated that only contains new and updated images since the previous execution.

While updating the mirror registry, you must take into account the following considerations:

* Images are pruned from the target mirror registry if they are no longer included in the latest image set that was generated and mirrored. Therefore, ensure that you are updating images for the same combination of the following key components so that only a differential image set is created and mirrored:
* Image set configuration
* Destination registry
* Storage configuration
* The images can be pruned in case of disk to mirror or mirror to mirror workflow.
* The generated image sets must be pushed to the target mirror registry in sequence. You can derive the sequence number from the file name of the generated image set archive file.
* Do not delete or modify the metadata image that is generated by the oc-mirror plugin.
* If you specified a top-level namespace for the mirror registry during the initial image set creation, then you must use this same namespace every time you run the oc-mirror plugin for the same mirror registry.

For more information about the workflow to update the mirror registry content, see the "High level workflow" section.

## Mirror registry update examples

This section covers the use cases for updating the mirror registry from disk to mirror.


```yaml
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
storageConfig:
  local:
    path: /home/user/metadata
mirror:
  platform:
    channels:
      - name: stable-4.12
        minVersion: 4.12.1
        maxVersion: 4.12.1
  operators:
    - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.14
      packages:
        - name: rhacs-operator
          channels:
          - name: stable
```


## Mirroring a specific Red Hat OpenShift Container Platform version by pruning the existing images


```yaml
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
storageConfig:
  local:
    path: /home/user/metadata
mirror:
  platform:
    channels:
      - name: stable-4.13 1
  operators:
    - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.14
      packages:
        - name: rhacs-operator
          channels:
          - name: stable
```


Replacing by stable-4.13 prunes all the images of stable-4.12.

## Updating to the latest version of an Operator by pruning the existing images


```yaml
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
storageConfig:
  local:
    path: /home/user/metadata
mirror:
  platform:
    channels:
      - name: stable-4.12
        minVersion: 4.12.1
        maxVersion: 4.12.1
  operators:
    - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.14
      packages:
        - name: rhacs-operator
          channels:
          - name: stable 1
```


Using the same channel without specifying a version prunes the existing images and updates with the latest version of images.

## Mirroring a new Operator by pruning the existing Operator


```yaml
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
storageConfig:
  local:
    path: /home/user/metadata
mirror:
  platform:
    channels:
      - name: stable-4.12
        minVersion: 4.12.1
        maxVersion: 4.12.1
  operators:
    - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.14
      packages:
        - name: <new_operator_name> 1
          channels:
          - name: stable
```


Replacing rhacs-operator with new_operator_name prunes the Red Hat Advanced Cluster Security for Kubernetes Operator.

## Pruning all the Red Hat OpenShift Container Platform images


```yaml
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
storageConfig:
  local:
    path: /home/user/metadata
mirror:
  platform:
    channels:
  operators:
    - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.14
      packages:
```


* Image set configuration examples
* Mirroring an image set in a partially disconnected environment
* Mirroring an image set in a fully disconnected environment
* Configuring your cluster to use the resources generated by oc-mirror

# Performing a dry run

You can use oc-mirror to perform a dry run, without actually mirroring any images. This allows you to review the list of images that would be mirrored, as well as any images that would be pruned from the mirror registry. A dry run also allows you to catch any errors with your image set configuration early or use the generated list of images with other tools to carry out the mirroring operation.

* You have access to the internet to obtain the necessary container images.
* You have installed the OpenShift CLI (oc).
* You have installed the oc-mirror CLI plugin.
* You have created the image set configuration file.

1. Run the oc mirror command with the --dry-run flag to perform a dry run:

```terminal
$ oc mirror --config=./imageset-config.yaml \1
  docker://registry.example:5000            \2
  --dry-run                                  3
```

Pass in the image set configuration file that was created. This procedure assumes that it is named imageset-config.yaml.
Specify the mirror registry. Nothing is mirrored to this registry as long as you use the --dry-run flag.
Use the --dry-run flag to generate the dry run artifacts and not an actual image set file.
Example output

```terminal
Checking push permissions for registry.example:5000
Creating directory: oc-mirror-workspace/src/publish
Creating directory: oc-mirror-workspace/src/v2
Creating directory: oc-mirror-workspace/src/charts
Creating directory: oc-mirror-workspace/src/release-signatures
No metadata detected, creating new workspace
wrote mirroring manifests to oc-mirror-workspace/operators.1658342351/manifests-redhat-operator-index

...

info: Planning completed in 31.48s
info: Dry run complete
Writing image mapping to oc-mirror-workspace/mapping.txt
```

2. Navigate into the workspace directory that was generated:

```terminal
$ cd oc-mirror-workspace/
```

3. Review the mapping.txt file that was generated.

This file contains a list of all images that would be mirrored.
4. Review the pruning-plan.json file that was generated.

This file contains a list of all images that would be pruned from the mirror registry when the image set is published.

[NOTE]
----
The pruning-plan.json file is only generated if your oc-mirror command points to your mirror registry and there are images to be pruned.
----

# Including local OCI Operator catalogs

While mirroring Red Hat OpenShift Container Platform releases, Operator catalogs, and additional images from a registry to a partially disconnected cluster, you can include Operator catalog images from a local file-based catalog on disk. The local catalog must be in the Open Container Initiative (OCI) format.

The local catalog and its contents are mirrored to your target mirror registry based on the filtering information in the image set configuration file.


[IMPORTANT]
----
When mirroring local OCI catalogs, any Red Hat OpenShift Container Platform releases or additional images that you want to mirror along with the local OCI-formatted catalog must be pulled from a registry.
You cannot mirror OCI catalogs along with an oc-mirror image set file on disk.
----

One example use case for using the OCI feature is if you have a CI/CD system building an OCI catalog to a location on disk, and you want to mirror that OCI catalog along with an Red Hat OpenShift Container Platform release to your mirror registry.


[NOTE]
----
If you used the Technology Preview OCI local catalogs feature for the oc-mirror plugin for Red Hat OpenShift Container Platform 4.12, you can no longer use the OCI local catalogs feature of the oc-mirror plugin to copy a catalog locally and convert it to OCI format as a first step to mirroring to a fully disconnected cluster.
----

* You have access to the internet to obtain the necessary container images.
* You have installed the OpenShift CLI (oc).
* You have installed the oc-mirror CLI plugin.

1. Create the image set configuration file and adjust the settings as necessary.

The following example image set configuration mirrors an OCI catalog on disk along with an Red Hat OpenShift Container Platform release and a UBI image from registry.redhat.io.

```yaml
kind: ImageSetConfiguration
apiVersion: mirror.openshift.io/v1alpha2
storageConfig:
  local:
    path: /home/user/metadata                                                1
mirror:
  platform:
    channels:
    - name: stable-4.16                                                      2
      type: ocp
    graph: false
  operators:
  - catalog: oci:///home/user/oc-mirror/my-oci-catalog                       3
    targetCatalog: my-namespace/redhat-operator-index                        4
    packages:
    - name: aws-load-balancer-operator
  - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.16           5
    packages:
    - name: rhacs-operator
  additionalImages:
  - name: registry.redhat.io/ubi9/ubi:latest                                 6
```

Set the back-end location to save the image set metadata to. This location can be a registry or local directory. It is required to specify storageConfig values.
Optionally, include an Red Hat OpenShift Container Platform release to mirror from registry.redhat.io.
Specify the absolute path to the location of the OCI catalog on disk. The path must start with oci:// when using the OCI feature.
Optionally, specify an alternative namespace and name to mirror the catalog as.
Optionally, specify additional Operator catalogs to pull from a registry.
Optionally, specify additional images to pull from a registry.
2. Run the oc mirror command to mirror the OCI catalog to a target mirror registry:

```terminal
$ oc mirror --config=./imageset-config.yaml \ 1
  docker://registry.example:5000              2
```

Pass in the image set configuration file. This procedure assumes that it is named imageset-config.yaml.
Specify the registry to mirror the content to. The registry must start with docker://. If you specify a top-level namespace for the mirror registry, you must also use this same namespace on subsequent executions.

Optionally, you can specify other flags to adjust the behavior of the OCI feature:
--oci-insecure-signature-policy:: Do not push signatures to the target mirror registry.
--oci-registries-config:: Specify the path to a TOML-formatted registries.conf file. You can use this to mirror from a different registry, such as a pre-production location for testing, without having to change the image set configuration file. This flag only affects local OCI catalogs, not any other mirrored content.
Example registries.conf file

```toml
[[registry]]
 location = "registry.redhat.io:5000"
 insecure = false
 blocked = false
 mirror-by-digest-only = true
 prefix = ""
 [[registry.mirror]]
    location = "preprod-registry.example.com"
    insecure = false
```


* Configure your cluster to use the resources generated by oc-mirror.

* Configuring your cluster to use the resources generated by oc-mirror

# Image set configuration parameters

The oc-mirror plugin requires an image set configuration file that defines what images to mirror. The following table lists the available parameters for the ImageSetConfiguration resource.




[NOTE]
----
Using the minVersion and maxVersion properties to filter for a specific Operator version range can result in a multiple channel heads error. The error message states that there are multiple channel heads. This is because when the filter is applied, the update graph of the Operator is truncated.
Operator Lifecycle Manager requires that every Operator channel contains versions that form an update graph with exactly one end point, that is, the latest version of the Operator. When the filter range is applied, that graph can turn into two or more separate graphs or a graph that has more than one end point.
To avoid this error, do not filter out the latest version of an Operator. If you still run into the error, depending on the Operator, either the maxVersion property must be increased or the minVersion property must be decreased. Because every Operator graph can be different, you might need to adjust these values until the error resolves.
----

# Image set configuration examples

The following ImageSetConfiguration file examples show the configuration for various mirroring use cases.

## Use case: Including the shortest Red Hat OpenShift Container Platform update path

The following ImageSetConfiguration file uses a local storage backend and includes all Red Hat OpenShift Container Platform versions along the shortest update path from the minimum version of 4.11.37 to the maximum version of 4.12.15.


```yaml
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
storageConfig:
  local:
    path: /home/user/metadata
mirror:
  platform:
    channels:
      - name: stable-4.12
        minVersion: 4.11.37
        maxVersion: 4.12.15
        shortestPath: true
```


## Use case: Including all versions of Red Hat OpenShift Container Platform from a minimum to the latest version for multi-architecture releases

The following ImageSetConfiguration file uses a registry storage backend and includes all Red Hat OpenShift Container Platform versions starting at a minimum version of 4.13.4 to the latest version in the channel. On every invocation of oc-mirror with this image set configuration, the latest release of the stable-4.13 channel is evaluated, so running oc-mirror at regular intervals ensures that you automatically receive the latest releases of Red Hat OpenShift Container Platform images.

By setting the value of platform.architectures to multi, you can ensure that the mirroring is supported for multi-architecture releases.


```yaml
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
storageConfig:
  registry:
    imageURL: example.com/mirror/oc-mirror-metadata
    skipTLS: false
mirror:
  platform:
    architectures:
      - "multi"
    channels:
      - name: stable-4.13
        minVersion: 4.13.4
        maxVersion: 4.13.6
```


## Use case: Including Operator versions from a minimum to the latest

The following ImageSetConfiguration file uses a local storage backend and includes only the Red Hat Advanced Cluster Security for Kubernetes Operator, versions starting at 4.0.1 and later in the stable channel.


[NOTE]
----
When you specify a minimum or maximum version range, you might not receive all Operator versions in that range.
By default, oc-mirror excludes any versions that are skipped or replaced by a newer version in the Operator Lifecycle Manager (OLM) specification. Operator versions that are skipped might be affected by a CVE or contain bugs. Use a newer version instead. For more information on skipped and replaced versions, see Creating an update graph with OLM.
To receive all Operator versions in a specified range, you can set the mirror.operators.full field to true.
----


```yaml
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
storageConfig:
  local:
    path: /home/user/metadata
mirror:
  operators:
    - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.16
      packages:
        - name: rhacs-operator
          channels:
          - name: stable
            minVersion: 4.0.1
```



[NOTE]
----
To specify a maximum version instead of the latest, set the mirror.operators.packages.channels.maxVersion field.
----

## Use case: Including the Nutanix CSI Operator

The following ImageSetConfiguration file uses a local storage backend and includes the Nutanix CSI Operator, the OpenShift Update Service (OSUS) graph image, and an additional Red Hat Universal Base Image (UBI).


```yaml
kind: ImageSetConfiguration
apiVersion: mirror.openshift.io/v1alpha2
storageConfig:
  registry:
    imageURL: mylocalregistry/ocp-mirror/openshift4
    skipTLS: false
mirror:
  platform:
    channels:
    - name: stable-4.11
      type: ocp
    graph: true
  operators:
  - catalog: registry.redhat.io/redhat/certified-operator-index:v4.16
    packages:
    - name: nutanixcsioperator
      channels:
      - name: stable
  additionalImages:
  - name: registry.redhat.io/ubi9/ubi:latest
```


## Use case: Including the default Operator channel

The following ImageSetConfiguration file includes the stable-5.7 and stable channels for the OpenShift Elasticsearch Operator. Even if only the packages from the stable-5.7 channel are needed, the stable channel must also be included in the ImageSetConfiguration file, because it is the default channel for the Operator. You must always include the default channel for the Operator package even if you do not use the bundles in that channel.


[TIP]
----
You can find the default channel by running the following command: oc mirror list operators --catalog=<catalog_name> --package=<package_name>.
----


```yaml
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
storageConfig:
  registry:
    imageURL: example.com/mirror/oc-mirror-metadata
    skipTLS: false
mirror:
  operators:
  - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.16
    packages:
    - name: elasticsearch-operator
      channels:
      - name: stable-5.7
      - name: stable
```


## Use case: Including an entire catalog (all versions)

The following ImageSetConfiguration file sets the mirror.operators.full field to true to include all versions for an entire Operator catalog.


```yaml
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
storageConfig:
  registry:
    imageURL: example.com/mirror/oc-mirror-metadata
    skipTLS: false
mirror:
  operators:
    - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.16
      full: true
```


## Use case: Including an entire catalog (channel heads only)

The following ImageSetConfiguration file includes the channel heads for an entire Operator catalog.

By default, for each Operator in the catalog, oc-mirror includes the latest Operator version (channel head) from the default channel. If you want to mirror all Operator versions, and not just the channel heads, you must set the mirror.operators.full field to true.

This example also uses the targetCatalog field to specify an alternative namespace and name to mirror the catalog as.


```yaml
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
storageConfig:
  registry:
    imageURL: example.com/mirror/oc-mirror-metadata
    skipTLS: false
mirror:
  operators:
  - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.16
    targetCatalog: my-namespace/my-operator-catalog
```


## Use case: Including arbitrary images and helm charts

The following ImageSetConfiguration file uses a registry storage backend and includes helm charts and an additional Red Hat Universal Base Image (UBI).


```yaml
apiVersion: mirror.openshift.io/v1alpha2
kind: ImageSetConfiguration
archiveSize: 4
storageConfig:
  registry:
    imageURL: example.com/mirror/oc-mirror-metadata
    skipTLS: false
mirror:
 platform:
   architectures:
     - "s390x"
   channels:
     - name: stable-4.16
 operators:
   - catalog: registry.redhat.io/redhat/redhat-operator-index:v4.16
 helm:
   repositories:
     - name: redhat-helm-charts
       url: https://raw.githubusercontent.com/redhat-developer/redhat-helm-charts/master
       charts:
         - name: ibm-mongodb-enterprise-helm
           version: 0.2.0
 additionalImages:
   - name: registry.redhat.io/ubi9/ubi:latest
```


# Command reference for oc-mirror

The following tables describe the oc mirror subcommands and flags:





# Additional resources

* About cluster updates in a disconnected environment