# Release notes for the Red Hat build of OpenTelemetry



# Red Hat build of OpenTelemetry overview

Red Hat build of OpenTelemetry is based on the open source OpenTelemetry project, which aims to provide unified, standardized, and vendor-neutral telemetry data collection for cloud-native software. Red Hat build of OpenTelemetry product provides support for deploying and managing the OpenTelemetry Collector and simplifying the workload instrumentation.

The OpenTelemetry Collector can receive, process, and forward telemetry data in multiple formats, making it the ideal component for telemetry processing and interoperability between telemetry systems. The Collector provides a unified solution for collecting and processing metrics, traces, and logs.

The OpenTelemetry Collector has a number of features including the following:

Data Collection and Processing Hub:: It acts as a central component that gathers telemetry data like metrics and traces from various sources. This data can be created from instrumented applications and infrastructure.
Customizable telemetry data pipeline:: The OpenTelemetry Collector is designed to be customizable. It supports various processors, exporters, and receivers.
Auto-instrumentation features:: Automatic instrumentation simplifies the process of adding observability to applications. Developers do not need to manually instrument their code for basic telemetry data.

Here are some of the use cases for the OpenTelemetry Collector:

Centralized data collection:: In a microservices architecture, the Collector can be deployed to aggregate data from multiple services.
Data enrichment and processing:: Before forwarding data to analysis tools, the Collector can enrich, filter, and process this data.
Multi-backend receiving and exporting:: The Collector can receive and send data to multiple monitoring and analysis platforms simultaneously.

You can use the Red Hat build of OpenTelemetry in combination with the Red Hat OpenShift distributed tracing platform (Tempo).


[NOTE]
----
Only supported features are documented. Undocumented features are currently unsupported. If you need assistance with a feature, contact Red Hat's support.
----

# Release notes for Red Hat build of OpenTelemetry 3.5

The Red Hat build of OpenTelemetry 3.5 is provided through the Red Hat build of OpenTelemetry Operator 0.119.0.


[NOTE]
----
The Red Hat build of OpenTelemetry 3.5 is based on the open source OpenTelemetry release 0.119.0.
----

## New features and enhancements

This update introduces the following enhancements:

* The following Technology Preview features reach General Availability:
* Host Metrics Receiver
* Kubelet Stats Receiver
* With this update, the OpenTelemetry Collector uses the OTLP HTTP Exporter to push logs to a LokiStack instance.
* With this update, the Operator automatically creates RBAC rules for the Kubernetes Events Receiver (k8sevents), Kubernetes Cluster Receiver (k8scluster), and Kubernetes Objects Receiver (k8sobjects) if the Operator has sufficient permissions. For more information, see "Creating the required RBAC resources automatically" in Configuring the Collector.

## Deprecated functionality

In the Red Hat build of OpenTelemetry 3.5, the Loki Exporter, which is a temporary Technology Preview feature, is deprecated. The Loki Exporter is planned to be removed in the Red Hat build of OpenTelemetry 3.6. If you currently use the Loki Exporter for the OpenShift Logging 6.1 or later, replace the Loki Exporter with the OTLP HTTP Exporter.


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

## Bug fixes

This update introduces the following bug fix:

* Before this update, manually created routes for the Collector services were unintentionally removed when the Operator pod was restarted. With this update, restarting the Operator pod does not result in the removal of the manually created routes.

# Release notes for Red Hat build of OpenTelemetry 3.4

The Red Hat build of OpenTelemetry 3.4 is provided through the Red Hat build of OpenTelemetry Operator 0.113.0.

The Red Hat build of OpenTelemetry 3.4 is based on the open source OpenTelemetry release 0.113.0.

## Technology Preview features

This update introduces the following Technology Preview features:

* OpenTelemetry Protocol (OTLP) JSON File Receiver
* Count Connector


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

## New features and enhancements

This update introduces the following enhancements:

* The following Technology Preview features reach General Availability:
* BearerTokenAuth Extension
* Kubernetes Attributes Processor
* Spanmetrics Connector
* You can use the instrumentation.opentelemetry.io/inject-sdk annotation with the Instrumentation custom resource to enable injection of the OpenTelemetry SDK environment variables into multi-container pods.

## Removal notice

* In the Red Hat build of OpenTelemetry 3.4, the Logging Exporter has been removed from the Collector. As an alternative, you must use the Debug Exporter instead.

[WARNING]
----
If you have the Logging Exporter configured, upgrading to the Red Hat build of OpenTelemetry 3.4 will cause crash loops. To avoid such issues, you must configure the Red Hat build of OpenTelemetry to use the Debug Exporter instead of the Logging Exporter before upgrading to the Red Hat build of OpenTelemetry 3.4.
----
* In the Red Hat build of OpenTelemetry 3.4, the Technology Preview Memory Ballast Extension has been removed. As an alternative, you can use the GOMEMLIMIT environment variable instead.

# Release notes for Red Hat build of OpenTelemetry 3.3.1

The Red Hat build of OpenTelemetry is provided through the Red Hat build of OpenTelemetry Operator.

The Red Hat build of OpenTelemetry 3.3.1 is based on the open source OpenTelemetry release 0.107.0.

## Bug fixes

This update introduces the following bug fix:

* Before this update, injection of the NGINX auto-instrumentation failed when copying the instrumentation libraries into the application container. With this update, the copy command is configured correctly, which fixes the issue. (TRACING-4673)

# Release notes for Red Hat build of OpenTelemetry 3.3

The Red Hat build of OpenTelemetry is provided through the Red Hat build of OpenTelemetry Operator.

The Red Hat build of OpenTelemetry 3.3 is based on the open source OpenTelemetry release 0.107.0.

## CVEs

This release fixes the following CVEs:

* CVE-2024-6104
* CVE-2024-42368

## Technology Preview features

This update introduces the following Technology Preview features:

* Group-by-Attributes Processor
* Transform Processor
* Routing Connector
* Prometheus Remote Write Exporter
* Exporting logs to the LokiStack log store


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

## New features and enhancements

This update introduces the following enhancements:

* Collector dashboard for the internal Collector metrics and analyzing Collector health and performance. (TRACING-3768)
* Support for automatically reloading certificates in both the OpenTelemetry Collector and instrumentation. (TRACING-4186)

## Bug fixes

This update introduces the following bug fixes:

* Before this update, the ServiceMonitor object was failing to scrape operator metrics due to missing permissions for accessing the metrics endpoint. With this update, this issue is fixed by creating the ServiceMonitor custom resource when operator monitoring is enabled. (TRACING-4288)
* Before this update, the Collector service and the headless service were both monitoring the same endpoints, which caused duplication of metrics collection and ServiceMonitor objects. With this update, this issue is fixed by not creating the headless service. (OBSDA-773)

# Release notes for Red Hat build of OpenTelemetry 3.2.2

The Red Hat build of OpenTelemetry is provided through the Red Hat build of OpenTelemetry Operator.

## CVEs

This release fixes the following CVEs:

* CVE-2023-2953
* CVE-2024-28182

## Bug fixes

This update introduces the following bug fix:

* Before this update, secrets were perpetually generated on Red Hat OpenShift Container Platform 4.16 because the operator tried to reconcile a new openshift.io/internal-registry-pull-secret-ref annotation for service accounts, causing a loop. With this update, the operator ignores this new annotation. (TRACING-4435)

# Release notes for Red Hat build of OpenTelemetry 3.2.1

The Red Hat build of OpenTelemetry is provided through the Red Hat build of OpenTelemetry Operator.

## CVEs

This release fixes the following CVEs:

* CVE-2024-25062
* Upstream CVE-2024-36129

## New features and enhancements

This update introduces the following enhancement:

* Red Hat build of OpenTelemetry 3.2.1 is based on the open source OpenTelemetry release 0.102.1.

# Release notes for Red Hat build of OpenTelemetry 3.2

The Red Hat build of OpenTelemetry is provided through the Red Hat build of OpenTelemetry Operator.

## Technology Preview features

This update introduces the following Technology Preview features:

* Host Metrics Receiver
* OIDC Auth Extension
* Kubernetes Cluster Receiver
* Kubernetes Events Receiver
* Kubernetes Objects Receiver
* Load-Balancing Exporter
* Kubelet Stats Receiver
* Cumulative to Delta Processor
* Forward Connector
* Journald Receiver
* Filelog Receiver
* File Storage Extension


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

## New features and enhancements

This update introduces the following enhancement:

* Red Hat build of OpenTelemetry 3.2 is based on the open source OpenTelemetry release 0.100.0.

## Deprecated functionality

In Red Hat build of OpenTelemetry 3.2, use of empty values and null keywords in the OpenTelemetry Collector custom resource is deprecated and planned to be unsupported in a future release. Red Hat will provide bug fixes and support for this syntax during the current release lifecycle, but this syntax will become unsupported. As an alternative to empty values and null keywords, you can update the OpenTelemetry Collector custom resource to contain empty JSON objects as open-closed braces {} instead.

## Bug fixes

This update introduces the following bug fix:

* Before this update, the checkbox to enable Operator monitoring was not available in the web console when installing the Red Hat build of OpenTelemetry Operator. As a result, a ServiceMonitor resource was not created in the openshift-opentelemetry-operator namespace. With this update, the checkbox appears for the Red Hat build of OpenTelemetry Operator in the web console so that Operator monitoring can be enabled during installation. (TRACING-3761)

# Release notes for Red Hat build of OpenTelemetry 3.1.1

The Red Hat build of OpenTelemetry is provided through the Red Hat build of OpenTelemetry Operator.

## CVEs

This release fixes CVE-2023-39326.

# Release notes for Red Hat build of OpenTelemetry 3.1

The Red Hat build of OpenTelemetry is provided through the Red Hat build of OpenTelemetry Operator.

## Technology Preview features

This update introduces the following Technology Preview feature:

* The target allocator is an optional component of the OpenTelemetry Operator that shards Prometheus receiver scrape targets across the deployed fleet of OpenTelemetry Collector instances. The target allocator provides integration with the Prometheus PodMonitor and ServiceMonitor custom resources.


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

## New features and enhancements

This update introduces the following enhancement:

* Red Hat build of OpenTelemetry 3.1 is based on the open source OpenTelemetry release 0.93.0.

# Release notes for Red Hat build of OpenTelemetry 3.0

## New features and enhancements

This update introduces the following enhancements:

* Red Hat build of OpenTelemetry 3.0 is based on the open source OpenTelemetry release 0.89.0.
* The OpenShift distributed tracing data collection Operator is renamed as the Red Hat build of OpenTelemetry Operator.
* Support for the ARM architecture.
* Support for the Prometheus receiver for metrics collection.
* Support for the Kafka receiver and exporter for sending traces and metrics to Kafka.
* Support for cluster-wide proxy environments.
* The Red Hat build of OpenTelemetry Operator creates the Prometheus ServiceMonitor custom resource if the Prometheus exporter is enabled.
* The Operator enables the Instrumentation custom resource that allows injecting upstream OpenTelemetry auto-instrumentation libraries.

## Removal notice

In Red Hat build of OpenTelemetry 3.0, the Jaeger exporter has been removed. Bug fixes and support are provided only through the end of the 2.9 lifecycle. As an alternative to the Jaeger exporter for sending data to the Jaeger collector, you can use the OTLP exporter instead.

## Bug fixes

This update introduces the following bug fixes:

* Fixed support for disconnected environments when using the oc adm catalog mirror CLI command.

## Known issues

There is currently a known issue:

* Currently, the cluster monitoring of the Red Hat build of OpenTelemetry Operator is disabled due to a bug (TRACING-3761). The bug is preventing the cluster monitoring from scraping metrics from the Red Hat build of OpenTelemetry Operator due to a missing label openshift.io/cluster-monitoring=true that is required for the cluster monitoring and service monitor object.
Workaround

You can enable the cluster monitoring as follows:
1. Add the following label in the Operator namespace: oc label namespace openshift-opentelemetry-operator openshift.io/cluster-monitoring=true
2. Create a service monitor, role, and role binding:

```yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: opentelemetry-operator-controller-manager-metrics-service
  namespace: openshift-opentelemetry-operator
spec:
  endpoints:
  - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
    path: /metrics
    port: https
    scheme: https
    tlsConfig:
      insecureSkipVerify: true
  selector:
    matchLabels:
      app.kubernetes.io/name: opentelemetry-operator
      control-plane: controller-manager
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: otel-operator-prometheus
  namespace: openshift-opentelemetry-operator
  annotations:
    include.release.openshift.io/self-managed-high-availability: "true"
    include.release.openshift.io/single-node-developer: "true"
rules:
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: otel-operator-prometheus
  namespace: openshift-opentelemetry-operator
  annotations:
    include.release.openshift.io/self-managed-high-availability: "true"
    include.release.openshift.io/single-node-developer: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: otel-operator-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus-k8s
  namespace: openshift-monitoring
```


# Release notes for Red Hat build of OpenTelemetry 2.9.2


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Red Hat build of OpenTelemetry 2.9.2 is based on the open source OpenTelemetry release 0.81.0.

## CVEs

* This release fixes CVE-2023-46234.

## Known issues

There is currently a known issue:

* Currently, you must manually set Operator maturity to Level IV, Deep Insights. (TRACING-3431)

# Release notes for Red Hat build of OpenTelemetry 2.9.1


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Red Hat build of OpenTelemetry 2.9.1 is based on the open source OpenTelemetry release 0.81.0.

## CVEs

* This release fixes CVE-2023-44487.

## Known issues

There is currently a known issue:

* Currently, you must manually set Operator maturity to Level IV, Deep Insights. (TRACING-3431)

# Release notes for Red Hat build of OpenTelemetry 2.9


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Red Hat build of OpenTelemetry 2.9 is based on the open source OpenTelemetry release 0.81.0.

## New features and enhancements

This release introduces the following enhancements for the Red Hat build of OpenTelemetry:

* Support OTLP metrics ingestion. The metrics can be forwarded and stored in the user-workload-monitoring via the Prometheus exporter.
* Support the Operator maturity Level IV, Deep Insights, which enables upgrading and monitoring of OpenTelemetry Collector instances and the Red Hat build of OpenTelemetry Operator.
* Report traces and metrics from remote clusters using OTLP or HTTP and HTTPS.
* Collect Red Hat OpenShift Container Platform resource attributes via the resourcedetection processor.
* Support the managed and unmanaged states in the OpenTelemetryCollector custom resouce.

## Known issues

There is currently a known issue:

* Currently, you must manually set Operator maturity to Level IV, Deep Insights. (TRACING-3431)

# Release notes for Red Hat build of OpenTelemetry 2.8


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Red Hat build of OpenTelemetry 2.8 is based on the open source OpenTelemetry release 0.74.0.

## Bug fixes

This release addresses Common Vulnerabilities and Exposures (CVEs) and bug fixes.

# Release notes for Red Hat build of OpenTelemetry 2.7


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Red Hat build of OpenTelemetry 2.7 is based on the open source OpenTelemetry release 0.63.1.

## Bug fixes

This release addresses Common Vulnerabilities and Exposures (CVEs) and bug fixes.

# Release notes for Red Hat build of OpenTelemetry 2.6


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Red Hat build of OpenTelemetry 2.6 is based on the open source OpenTelemetry release 0.60.

## Bug fixes

This release addresses Common Vulnerabilities and Exposures (CVEs) and bug fixes.

# Release notes for Red Hat build of OpenTelemetry 2.5


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Red Hat build of OpenTelemetry 2.5 is based on the open source OpenTelemetry release 0.56.

## New features and enhancements

This update introduces the following enhancement:

* Support for collecting Kubernetes resource attributes to the Red Hat build of OpenTelemetry Operator.

## Bug fixes

This release addresses Common Vulnerabilities and Exposures (CVEs) and bug fixes.

# Release notes for Red Hat build of OpenTelemetry 2.4


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Red Hat build of OpenTelemetry 2.4 is based on the open source OpenTelemetry release 0.49.

## Bug fixes

This release addresses Common Vulnerabilities and Exposures (CVEs) and bug fixes.

# Release notes for Red Hat build of OpenTelemetry 2.3


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Red Hat build of OpenTelemetry 2.3.1 is based on the open source OpenTelemetry release 0.44.1.

Red Hat build of OpenTelemetry 2.3.0 is based on the open source OpenTelemetry release 0.44.0.

## Bug fixes

This release addresses Common Vulnerabilities and Exposures (CVEs) and bug fixes.

# Release notes for Red Hat build of OpenTelemetry 2.2


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Red Hat build of OpenTelemetry 2.2 is based on the open source OpenTelemetry release 0.42.0.

## Technology Preview features

The unsupported OpenTelemetry Collector components included in the 2.1 release are removed.

## Bug fixes

This release addresses Common Vulnerabilities and Exposures (CVEs) and bug fixes.

# Release notes for Red Hat build of OpenTelemetry 2.1


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Red Hat build of OpenTelemetry 2.1 is based on the open source OpenTelemetry release 0.41.1.

## Technology Preview features

This release introduces a breaking change to how to configure certificates in the OpenTelemetry custom resource file. With this update, the ca_file moves under tls in the custom resource, as shown in the following examples.


```yaml
spec:
  mode: deployment
  config: |
    exporters:
      jaeger:
        endpoint: jaeger-production-collector-headless.tracing-system.svc:14250
        ca_file: "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
```



```yaml
spec:
  mode: deployment
  config: |
    exporters:
      jaeger:
        endpoint: jaeger-production-collector-headless.tracing-system.svc:14250
        tls:
          ca_file: "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
```


## Bug fixes

This release addresses Common Vulnerabilities and Exposures (CVEs) and bug fixes.

# Release notes for Red Hat build of OpenTelemetry 2.0


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

Red Hat build of OpenTelemetry 2.0 is based on the open source OpenTelemetry release 0.33.0.

This release adds the Red Hat build of OpenTelemetry as a Technology Preview, which you install using the Red Hat build of OpenTelemetry Operator. Red Hat build of OpenTelemetry is based on the OpenTelemetry APIs and instrumentation. The Red Hat build of OpenTelemetry includes the OpenTelemetry Operator and Collector. You can use the Collector to receive traces in the OpenTelemetry or Jaeger protocol and send the trace data to the Red Hat build of OpenTelemetry. Other capabilities of the Collector are not supported at this time. The OpenTelemetry Collector allows developers to instrument their code with vendor agnostic APIs, avoiding vendor lock-in and enabling a growing ecosystem of observability tooling.

# Getting support

If you experience difficulty with a procedure described in this documentation, or with Red Hat OpenShift Container Platform in general, visit the Red Hat Customer Portal.

From the Customer Portal, you can:

* Search or browse through the Red Hat Knowledgebase of articles and solutions relating to Red Hat products.
* Submit a support case to Red Hat Support.
* Access other product documentation.

To identify issues with your cluster, you can use Insights in https://console.redhat.com/openshift [OpenShift Cluster Manager]. Insights provides details about issues and, if available, information on how to solve a problem.

If you have a suggestion for improving this documentation or have found an
error, submit a Jira issue for the most relevant documentation component. Please provide specific details, such as the section name and Red Hat OpenShift Container Platform version.

# Making open source more inclusive

Red Hat is committed to replacing problematic language in our code, documentation, and web properties. We are beginning with these four terms: master, slave, blacklist, and whitelist. Because of the enormity of this endeavor, these changes will be implemented gradually over several upcoming releases. For more details, see our CTO Chris Wright's message.