# Configuring multi-network policy


As a cluster administrator, you can configure a multi-network policy for a Single-Root I/O Virtualization (SR-IOV), MAC Virtual Local Area Network (MacVLAN), or OVN-Kubernetes additional networks. MacVLAN additional networks are fully supported. Other types of additional networks, such as IP Virtual Local Area Network (IPVLAN), are not supported.

[NOTE]
----
Support for configuring multi-network policies for SR-IOV additional networks is only supported with kernel network interface controllers (NICs). SR-IOV is not supported for Data Plane Development Kit (DPDK) applications.
----

# Differences between multi-network policy and network policy

Although the MultiNetworkPolicy API implements the NetworkPolicy API, there are several important differences:

* You must use the MultiNetworkPolicy API:

```yaml
apiVersion: k8s.cni.cncf.io/v1beta1
kind: MultiNetworkPolicy
```

* You must use the multi-networkpolicy resource name when using the CLI to interact with multi-network policies. For example, you can view a multi-network policy object with the oc get multi-networkpolicy <name> command where <name> is the name of a multi-network policy.
* You can use the k8s.v1.cni.cncf.io/policy-for annotation on a MultiNetworkPolicy object to point to a NetworkAttachmentDefinition (NAD) custom resource (CR). The NAD CR defines the network to which the policy applies.
Example multi-network policy that includes the k8s.v1.cni.cncf.io/policy-for annotation

```yaml
apiVersion: k8s.cni.cncf.io/v1beta1
kind: MultiNetworkPolicy
metadata:
  annotations:
    k8s.v1.cni.cncf.io/policy-for:<namespace_name>/<network_name>
```

where:
<namespace_name>:: Specifies the namespace name.
<network_name>:: Specifies the name of a network attachment definition.

# Enabling multi-network policy for the cluster

As a cluster administrator, you can enable multi-network policy support on your cluster.

* Install the OpenShift CLI (oc).
* Log in to the cluster with a user with cluster-admin privileges.

1. Create the multinetwork-enable-patch.yaml file with the following YAML:

```yaml
apiVersion: operator.openshift.io/v1
kind: Network
metadata:
  name: cluster
spec:
  useMultiNetworkPolicy: true
```

2. Configure the cluster to enable multi-network policy:

```terminal
$ oc patch network.operator.openshift.io cluster --type=merge --patch-file=multinetwork-enable-patch.yaml
```

Example output

```text
network.operator.openshift.io/cluster patched
```


# Supporting multi-network policies in IPv6 networks

The ICMPv6 Neighbor Discovery Protocol (NDP) is a set of messages and processes that enable devices to discover and maintain information about neighboring nodes. NDP plays a crucial role in IPv6 networks, facilitating the interaction between devices on the same link.

The Cluster Network Operator (CNO) deploys the iptables implementation of multi-network policy when the useMultiNetworkPolicy parameter is set to true.

To support multi-network policies in IPv6 networks the Cluster Network Operator deploys the following set of rules in every pod affected by a multi-network policy:


```yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: multi-networkpolicy-custom-rules
  namespace: openshift-multus
data:

  custom-v6-rules.txt: |
    # accept NDP
    -p icmpv6 --icmpv6-type neighbor-solicitation -j ACCEPT 1
    -p icmpv6 --icmpv6-type neighbor-advertisement -j ACCEPT 2
    # accept RA/RS
    -p icmpv6 --icmpv6-type router-solicitation -j ACCEPT 3
    -p icmpv6 --icmpv6-type router-advertisement -j ACCEPT 4
```


This rule allows incoming ICMPv6 neighbor solicitation messages, which are part of the neighbor discovery protocol (NDP). These messages help determine the link-layer addresses of neighboring nodes.
This rule allows incoming ICMPv6 neighbor advertisement messages, which are part of NDP and provide information about the link-layer address of the sender.
This rule permits incoming ICMPv6 router solicitation messages. Hosts use these messages to request router configuration information.
This rule allows incoming ICMPv6 router advertisement messages, which give configuration information to hosts.


[NOTE]
----
You cannot edit these predefined rules.
----

These rules collectively enable essential ICMPv6 traffic for correct network functioning, including address resolution and router communication in an IPv6 environment. With these rules in place and a multi-network policy denying traffic, applications are not expected to experience connectivity issues.

# Working with multi-network policy

As a cluster administrator, you can create, edit, view, and delete multi-network policies.

## Prerequisites

* You have enabled multi-network policy support for your cluster.

## Creating a multi-network policy using the CLI

To define granular rules describing ingress or egress network traffic allowed for namespaces in your cluster, you can create a {name} policy.

* Your cluster uses a network plugin that supports NetworkPolicy objects, such as the OVN-Kubernetes network plugin or the OpenShift SDN network plugin with mode: NetworkPolicy set. This mode is the default for OpenShift SDN.
* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace that the {name} policy applies to.

1. Create a policy rule:
1. Create a <policy_name>.yaml file:

```terminal
$ touch <policy_name>.yaml
```

where:
<policy_name>:: Specifies the {name} policy file name.
2. Define a {name} policy in the file that you just created, such as in the following examples:
Deny ingress from all pods in all namespaces

This is a fundamental policy, blocking all cross-pod networking other than cross-pod traffic allowed by the configuration of other Network Policies.

```yaml
apiVersion: k8s.cni.cncf.io/v1beta1
kind: MultiNetworkPolicy
metadata:
  name: deny-by-default
  annotations:
    k8s.v1.cni.cncf.io/policy-for:<namespace_name>/<network_name>
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress: []
```

where:
<network_name>:: Specifies the name of a network attachment definition.
Allow ingress from all pods in the same namespace

```yaml
apiVersion: k8s.cni.cncf.io/v1beta1
kind: MultiNetworkPolicy
metadata:
  name: allow-same-namespace
  annotations:
    k8s.v1.cni.cncf.io/policy-for:<namespace_name>/<network_name>
spec:
  podSelector:
  ingress:
  - from:
    - podSelector: {}
```

where:
<network_name>:: Specifies the name of a network attachment definition.
Allow ingress traffic to one pod from a particular namespace

This policy allows traffic to pods labelled pod-a from pods running in namespace-y.

```yaml
apiVersion: k8s.cni.cncf.io/v1beta1
kind: MultiNetworkPolicy
metadata:
  name: allow-traffic-pod
  annotations:
    k8s.v1.cni.cncf.io/policy-for:<namespace_name>/<network_name>
spec:
  podSelector:
   matchLabels:
      pod: pod-a
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
           kubernetes.io/metadata.name: namespace-y
```

where:
<network_name>:: Specifies the name of a network attachment definition.
Restrict traffic to a service

This policy when applied ensures every pod with both labels app=bookstore and role=api can only be accessed by pods with label app=bookstore. In this example the application could be a REST API server, marked with labels app=bookstore and role=api.

This example addresses the following use cases:
* Restricting the traffic to a service to only the other microservices that need to use it.
* Restricting the connections to a database to only permit the application using it.

```yaml
apiVersion: k8s.cni.cncf.io/v1beta1
kind: MultiNetworkPolicy
metadata:
  name: api-allow
  annotations:
    k8s.v1.cni.cncf.io/policy-for:<namespace_name>/<network_name>
spec:
  podSelector:
    matchLabels:
      app: bookstore
      role: api
  ingress:
  - from:
      - podSelector:
          matchLabels:
            app: bookstore
```

where:
<network_name>:: Specifies the name of a network attachment definition.
2. To create the {name} policy object, enter the following command:

```terminal
$ oc apply -f <policy_name>.yaml -n <namespace>
```

where:
<policy_name>:: Specifies the {name} policy file name.
<namespace>:: Optional: Specifies the namespace if the object is defined in a different namespace than the current namespace.
Example output

```terminal
multinetworkpolicy.k8s.cni.cncf.io/deny-by-default created
```



[NOTE]
----
If you log in to the web console with cluster-admin privileges, you have a choice of creating a network policy in any namespace in the cluster directly in YAML or from a form in the web console.
----

## Editing a multi-network policy

You can edit a {name} policy in a namespace.

* Your cluster uses a network plugin that supports NetworkPolicy objects, such as the OVN-Kubernetes network plugin or the OpenShift SDN network plugin with mode: NetworkPolicy set. This mode is the default for OpenShift SDN.
* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace where the {name} policy exists.

1. Optional: To list the {name} policy objects in a namespace, enter the following command:

```terminal
$ oc get {name}policy
```

where:
<namespace>:: Optional: Specifies the namespace if the object is defined in a different namespace than the current namespace.
2. Edit the {name} policy object.
* If you saved the {name} policy definition in a file, edit the file and make any necessary changes, and then enter the following command.

```terminal
$ oc apply -n <namespace> -f <policy_file>.yaml
```

where:
<namespace>:: Optional: Specifies the namespace if the object is defined in a different namespace than the current namespace.
<policy_file>:: Specifies the name of the file containing the network policy.
* If you need to update the {name} policy object directly, enter the following command:

```terminal
$ oc edit {name}policy <policy_name> -n <namespace>
```

where:
<policy_name>:: Specifies the name of the network policy.
<namespace>:: Optional: Specifies the namespace if the object is defined in a different namespace than the current namespace.
3. Confirm that the {name} policy object is updated.

```terminal
$ oc describe {name}policy <policy_name> -n <namespace>
```

where:
<policy_name>:: Specifies the name of the {name} policy.
<namespace>:: Optional: Specifies the namespace if the object is defined in a different namespace than the current namespace.


[NOTE]
----
If you log in to the web console with cluster-admin privileges, you have a choice of editing a network policy in any namespace in the cluster directly in YAML or from the policy in the web console through the Actions menu.
----

## Viewing multi-network policies using the CLI

You can examine the {name} policies in a namespace.

* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace where the {name} policy exists.

* List {name} policies in a namespace:
* To view {name} policy objects defined in a namespace, enter the following
command:

```terminal
$ oc get {name}policy
```

* Optional: To examine a specific {name} policy, enter the following command:

```terminal
$ oc describe {name}policy <policy_name> -n <namespace>
```

where:
<policy_name>:: Specifies the name of the {name} policy to inspect.
<namespace>:: Optional: Specifies the namespace if the object is defined in a different namespace than the current namespace.


[NOTE]
----
If you log in to the web console with cluster-admin privileges, you have a choice of viewing a network policy in any namespace in the cluster directly in YAML or from a form in the web console.
----

## Deleting a multi-network policy using the CLI

You can delete a {name} policy in a namespace.

* Your cluster uses a network plugin that supports NetworkPolicy objects, such as the OVN-Kubernetes network plugin or the OpenShift SDN network plugin with mode: NetworkPolicy set. This mode is the default for OpenShift SDN.
* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace where the {name} policy exists.

* To delete a {name} policy object, enter the following command:

```terminal
$ oc delete {name}policy <policy_name> -n <namespace>
```

where:
<policy_name>:: Specifies the name of the {name} policy.
<namespace>:: Optional: Specifies the namespace if the object is defined in a different namespace than the current namespace.
Example output

```text
multinetworkpolicy.k8s.cni.cncf.io/default-deny deleted
```



[NOTE]
----
If you log in to the web console with cluster-admin privileges, you have a choice of deleting a network policy in any namespace in the cluster directly in YAML or from the policy in the web console through the Actions menu.
----

## Creating a default deny all multi-network policy

This policy blocks all cross-pod networking other than network traffic allowed by the configuration of other deployed network policies and traffic between host-networked pods. This procedure enforces a strong deny policy by applying a deny-by-default policy in the my-project namespace.


[WARNING]
----
Without configuring a NetworkPolicy custom resource (CR) that allows traffic communication, the following policy might cause communication problems across your cluster.
----

* Your cluster uses a network plugin that supports NetworkPolicy objects, such as the OVN-Kubernetes network plugin or the OpenShift SDN network plugin with mode: NetworkPolicy set. This mode is the default for OpenShift SDN.
* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace that the {name} policy applies to.

1. Create the following YAML that defines a deny-by-default policy to deny ingress from all pods in all namespaces. Save the YAML in the deny-by-default.yaml file:

```yaml
apiVersion: k8s.cni.cncf.io/v1beta1
kind: MultiNetworkPolicy
metadata:
  name: deny-by-default
  namespace: my-project 1
  annotations:
    k8s.v1.cni.cncf.io/policy-for:<namespace_name>/<network_name> 2
spec:
  podSelector: {} 3
  policyTypes: 4
  - Ingress 5
  ingress: [] 6
```

Specifies the namespace in which to deploy the policy. For example, the my-project namespace.
Specifies the name of namespace project followed by the network attachment definition name.
If this field is empty, the configuration matches all the pods. Therefore, the policy applies to all pods in the my-project namespace.
Specifies a list of rule types that the NetworkPolicy relates to.
Specifies Ingress only policyTypes.
Specifies ingress rules. If not specified, all incoming traffic is dropped to all pods.
2. Apply the policy by entering the following command:

```terminal
$ oc apply -f deny-by-default.yaml
```

Example output

```terminal
multinetworkpolicy.k8s.cni.cncf.io/deny-by-default created
```


## Creating a multi-network policy to allow traffic from external clients

With the deny-by-default policy in place you can proceed to configure a policy that allows traffic from external clients to a pod with the label app=web.


[NOTE]
----
If you log in with a user with the cluster-admin role, then you can create a network policy in any namespace in the cluster.
----

Follow this procedure to configure a policy that allows external service from the public Internet directly or by using a Load Balancer to access the pod. Traffic is only allowed to a pod with the label app=web.

* Your cluster uses a network plugin that supports NetworkPolicy objects, such as the OVN-Kubernetes network plugin or the OpenShift SDN network plugin with mode: NetworkPolicy set. This mode is the default for OpenShift SDN.
* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace that the {name} policy applies to.

1. Create a policy that allows traffic from the public Internet directly or by using a load balancer to access the pod. Save the YAML in the web-allow-external.yaml file:

```yaml
apiVersion: k8s.cni.cncf.io/v1beta1
kind: MultiNetworkPolicy
metadata:
  name: web-allow-external
  namespace: default
  annotations:
    k8s.v1.cni.cncf.io/policy-for:<namespace_name>/<network_name>
spec:
  policyTypes:
  - Ingress
  podSelector:
    matchLabels:
      app: web
  ingress:
    - {}
```

2. Apply the policy by entering the following command:

```terminal
$ oc apply -f web-allow-external.yaml
```

Example output

```terminal
multinetworkpolicy.k8s.cni.cncf.io/web-allow-external created
```


This policy allows traffic from all resources, including external traffic as illustrated in the following diagram:

![Allow traffic from external clients]

## Creating a multi-network policy allowing traffic to an application from all namespaces


[NOTE]
----
If you log in with a user with the cluster-admin role, then you can create a network policy in any namespace in the cluster.
----

Follow this procedure to configure a policy that allows traffic from all pods in all namespaces to a particular application.

* Your cluster uses a network plugin that supports NetworkPolicy objects, such as the OVN-Kubernetes network plugin or the OpenShift SDN network plugin with mode: NetworkPolicy set. This mode is the default for OpenShift SDN.
* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace that the {name} policy applies to.

1. Create a policy that allows traffic from all pods in all namespaces to a particular application. Save the YAML in the web-allow-all-namespaces.yaml file:

```yaml
apiVersion: k8s.cni.cncf.io/v1beta1
kind: MultiNetworkPolicy
metadata:
  name: web-allow-all-namespaces
  namespace: default
  annotations:
    k8s.v1.cni.cncf.io/policy-for:<namespace_name>/<network_name>
spec:
  podSelector:
    matchLabels:
      app: web 1
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector: {} 2
```

Applies the policy only to app:web pods in default namespace.
Selects all pods in all namespaces.

[NOTE]
----
By default, if you omit specifying a namespaceSelector it does not select any namespaces, which means the policy allows traffic only from the namespace the network policy is deployed to.
----
2. Apply the policy by entering the following command:

```terminal
$ oc apply -f web-allow-all-namespaces.yaml
```

Example output

```terminal
multinetworkpolicy.k8s.cni.cncf.io/web-allow-all-namespaces created
```


1. Start a web service in the default namespace by entering the following command:

```terminal
$ oc run web --namespace=default --image=nginx --labels="app=web" --expose --port=80
```

2. Run the following command to deploy an alpine image in the secondary namespace and to start a shell:

```terminal
$ oc run test-$RANDOM --namespace=secondary --rm -i -t --image=alpine -- sh
```

3. Run the following command in the shell and observe that the request is allowed:

```terminal
# wget -qO- --timeout=2 http://web.default
```

Expected output

```terminal
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
```


## Creating a multi-network policy allowing traffic to an application from a namespace


[NOTE]
----
If you log in with a user with the cluster-admin role, then you can create a network policy in any namespace in the cluster.
----

Follow this procedure to configure a policy that allows traffic to a pod with the label app=web from a particular namespace. You might want to do this to:

* Restrict traffic to a production database only to namespaces where production workloads are deployed.
* Enable monitoring tools deployed to a particular namespace to scrape metrics from the current namespace.

* Your cluster uses a network plugin that supports NetworkPolicy objects, such as the OVN-Kubernetes network plugin or the OpenShift SDN network plugin with mode: NetworkPolicy set. This mode is the default for OpenShift SDN.
* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace that the {name} policy applies to.

1. Create a policy that allows traffic from all pods in a particular namespaces with a label purpose=production. Save the YAML in the web-allow-prod.yaml file:

```yaml
apiVersion: k8s.cni.cncf.io/v1beta1
kind: MultiNetworkPolicy
metadata:
  name: web-allow-prod
  namespace: default
  annotations:
    k8s.v1.cni.cncf.io/policy-for:<namespace_name>/<network_name>
spec:
  podSelector:
    matchLabels:
      app: web 1
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          purpose: production 2
```

Applies the policy only to app:web pods in the default namespace.
Restricts traffic to only pods in namespaces that have the label purpose=production.
2. Apply the policy by entering the following command:

```terminal
$ oc apply -f web-allow-prod.yaml
```

Example output

```terminal
multinetworkpolicy.k8s.cni.cncf.io/web-allow-prod created
```


1. Start a web service in the default namespace by entering the following command:

```terminal
$ oc run web --namespace=default --image=nginx --labels="app=web" --expose --port=80
```

2. Run the following command to create the prod namespace:

```terminal
$ oc create namespace prod
```

3. Run the following command to label the prod namespace:

```terminal
$ oc label namespace/prod purpose=production
```

4. Run the following command to create the dev namespace:

```terminal
$ oc create namespace dev
```

5. Run the following command to label the dev namespace:

```terminal
$ oc label namespace/dev purpose=testing
```

6. Run the following command to deploy an alpine image in the dev namespace and to start a shell:

```terminal
$ oc run test-$RANDOM --namespace=dev --rm -i -t --image=alpine -- sh
```

7. Run the following command in the shell and observe that the request is blocked:

```terminal
# wget -qO- --timeout=2 http://web.default
```

Expected output

```terminal
wget: download timed out
```

8. Run the following command to deploy an alpine image in the prod namespace and start a shell:

```terminal
$ oc run test-$RANDOM --namespace=prod --rm -i -t --image=alpine -- sh
```

9. Run the following command in the shell and observe that the request is allowed:

```terminal
# wget -qO- --timeout=2 http://web.default
```

Expected output

```terminal
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
```


# Additional resources

* About network policy
* Understanding multiple networks
* Configuring a macvlan network
* Configuring an SR-IOV network device