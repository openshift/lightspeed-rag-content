# Installing a cluster on Azure with network customizations


In Red Hat OpenShift Container Platform version 4.19, you can install a cluster with a
customized network configuration on infrastructure that the installation program
provisions on Microsoft Azure. By customizing your network configuration, your
cluster can coexist with existing IP address allocations in your environment and
integrate with existing MTU and VXLAN configurations.
You must set most of the network configuration parameters during installation,
and you can modify only kubeProxy configuration parameters in a running
cluster.

# Creating the installation configuration file

You can customize the Red Hat OpenShift Container Platform cluster you install on
Microsoft Azure.

* You have the Red Hat OpenShift Container Platform installation program and the pull secret for your cluster.
* You have an Azure subscription ID and tenant ID.
* If you are installing the cluster using a service principal, you have its application ID and password.
* If you are installing the cluster using a system-assigned managed identity, you have enabled it on the virtual machine that you will run the installation program from.
* If you are installing the cluster using a user-assigned managed identity, you have met these prerequisites:
* You have its client ID.
* You have assigned it to the virtual machine that you will run the installation program from.

1. Optional: If you have run the installation program on this computer before, and want to use an alternative service principal or managed identity, go to the ~/.azure/ directory and delete the osServicePrincipal.json configuration file.

Deleting this file prevents the installation program from automatically reusing subscription and authentication values from a previous installation.
2. Create the install-config.yaml file.
1. Change to the directory that contains the installation program and run the following command:

```terminal
$ ./openshift-install create install-config --dir <installation_directory> 1
```

For <installation_directory>, specify the directory name to store the
files that the installation program creates.

When specifying the directory:
* Verify that the directory has the execute permission. This permission is required to run Terraform binaries under the installation directory.
* Use an empty directory. Some installation assets, such as bootstrap X.509 certificates, have short expiration intervals, therefore you must not reuse an installation directory. If you want to reuse individual files from another cluster installation, you can copy them into your directory. However, the file names for the installation assets might change between releases. Use caution when copying installation files from an earlier Red Hat OpenShift Container Platform version.
2. At the prompts, provide the configuration details for your cloud:
1. Optional: Select an SSH key to use to access your cluster machines.

[NOTE]
----
For production Red Hat OpenShift Container Platform clusters on which you want to perform installation debugging or disaster recovery, specify an SSH key that your ssh-agent process uses.
----
2. Select azure as the platform to target.

If the installation program cannot locate the osServicePrincipal.json configuration file from a previous installation, you are prompted for Azure subscription and authentication values.
3. Enter the following Azure parameter values for your subscription:
* azure subscription id: Enter the subscription ID to use for the cluster.
* azure tenant id: Enter the tenant ID.
4. Depending on the Azure identity you are using to deploy the cluster, do one of the following when prompted for the azure service principal client id:
* If you are using a service principal, enter its application ID.
* If you are using a system-assigned managed identity, leave this value blank.
* If you are using a user-assigned managed identity, specify its client ID.
5. Depending on the Azure identity you are using to deploy the cluster, do one of the following when prompted for the azure service principal client secret:
* If you are using a service principal, enter its password.
* If you are using a system-assigned managed identity, leave this value blank.
* If you are using a user-assigned managed identity, leave this value blank.
6. Select the region to deploy the cluster to.
7. Select the base domain to deploy the cluster to. The base domain corresponds
to the Azure DNS Zone that you created for your cluster.
8. Enter a descriptive name for your cluster.

[IMPORTANT]
----
All Azure resources that are available through public endpoints are subject to resource name restrictions, and you cannot create resources that use certain terms. For a list of terms that Azure restricts, see Resolve reserved resource name errors in the Azure documentation.
----
3. Modify the install-config.yaml file. You can find more information about the available parameters in the "Installation configuration parameters" section.
4. Back up the install-config.yaml file so that you can use
it to install multiple clusters.

[IMPORTANT]
----
The install-config.yaml file is consumed during the installation process. If
you want to reuse the file, you must back it up now.
----

If previously not detected, the installation program creates an osServicePrincipal.json configuration file and stores this file in the ~/.azure/ directory on your computer. This ensures that the installation program can load the profile when it is creating an Red Hat OpenShift Container Platform cluster on the target platform.

* Installation configuration parameters for Azure

## Minimum resource requirements for cluster installation

Each cluster machine must meet the following minimum requirements:



1. One vCPU is equivalent to one physical core when simultaneous multithreading (SMT), or Hyper-Threading, is not enabled. When enabled, use the following formula to calculate the corresponding ratio: (threads per core × cores) × sockets = vCPUs.
2. Red Hat OpenShift Container Platform and Kubernetes are sensitive to disk performance, and faster storage is recommended, particularly for etcd on the control plane nodes which require a 10 ms p99 fsync duration. Note that on many cloud platforms, storage size and IOPS scale together, so you might need to over-allocate storage volume to obtain sufficient performance.
3. As with all user-provisioned installations, if you choose to use RHEL compute machines in your cluster, you take responsibility for all operating system life cycle management and maintenance, including performing system updates, applying patches, and completing all other required tasks. Use of RHEL 7 compute machines is deprecated and has been removed in Red Hat OpenShift Container Platform 4.10 and later.


[NOTE]
----
For Red Hat OpenShift Container Platform version 4.19, RHCOS is based on RHEL version 9.6, which updates the micro-architecture requirements. The following list contains the minimum instruction set architectures (ISA) that each architecture requires:
* x86-64 architecture requires x86-64-v2 ISA
* ARM64 architecture requires ARMv8.0-A ISA
* IBM Power architecture requires Power 9 ISA
* s390x architecture requires z14 ISA
For more information, see Architectures (RHEL documentation).
----


[IMPORTANT]
----
You are required to use Azure virtual machines that have the premiumIO parameter set to true.
----

If an instance type for your platform meets the minimum requirements for cluster machines, it is supported to use in Red Hat OpenShift Container Platform.

* Optimizing storage

## Tested instance types for Azure

The following Microsoft Azure instance types have been tested with Red Hat OpenShift Container Platform.

https://raw.githubusercontent.com/openshift/installer/release-4.19/docs/user/azure/tested_instance_types_x86_64.md

## Tested instance types for Azure on 64-bit ARM infrastructures

The following Microsoft Azure ARM64 instance types have been tested with Red Hat OpenShift Container Platform.

https://raw.githubusercontent.com/openshift/installer/release-4.19/docs/user/azure/tested_instance_types_aarch64.md

## Enabling trusted launch for Azure VMs

You can enable two trusted launch features when installing your cluster on Azure: secure boot and virtualized Trusted Platform Modules.

For more information about the sizes of virtual machines that support the trusted launch features, see Virtual machine sizes.


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

* You have created an install-config.yaml file.

* Edit the install-config.yaml file before deploying your cluster:
* Enable trusted launch only on control plane by adding the following stanza:

```yaml
controlPlane:
  platform:
    azure:
      settings:
        securityType: TrustedLaunch
        trustedLaunch:
          uefiSettings:
            secureBoot: Enabled
            virtualizedTrustedPlatformModule: Enabled
```

* Enable trusted launch only on compute node by adding the following stanza:

```yaml
compute:
  platform:
    azure:
      settings:
        securityType: TrustedLaunch
        trustedLaunch:
          uefiSettings:
            secureBoot: Enabled
            virtualizedTrustedPlatformModule: Enabled
```

* Enable trusted launch on all nodes by adding the following stanza:

```yaml
platform:
  azure:
    settings:
      securityType: TrustedLaunch
      trustedLaunch:
        uefiSettings:
          secureBoot: Enabled
          virtualizedTrustedPlatformModule: Enabled
```


## Enabling confidential VMs

You can enable confidential VMs when installing your cluster. You can enable confidential VMs for compute nodes, control plane nodes, or all nodes.

You can use confidential VMs with the following VM sizes:

* DCasv5-series
* DCadsv5-series
* ECasv5-series
* ECadsv5-series


[IMPORTANT]
----
Confidential VMs are currently not supported on 64-bit ARM architectures.
----

* You have created an install-config.yaml file.

* Edit the install-config.yaml file before deploying your cluster:
* Enable confidential VMs only on control plane by adding the following stanza:

```yaml
controlPlane:
  platform:
    azure:
      settings:
        securityType: ConfidentialVM
        confidentialVM:
          uefiSettings:
            secureBoot: Enabled
            virtualizedTrustedPlatformModule: Enabled
      osDisk:
        securityProfile:
          securityEncryptionType: VMGuestStateOnly
```

* Enable confidential VMs only on compute nodes by adding the following stanza:

```yaml
compute:
  platform:
    azure:
      settings:
        securityType: ConfidentialVM
        confidentialVM:
          uefiSettings:
            secureBoot: Enabled
            virtualizedTrustedPlatformModule: Enabled
      osDisk:
        securityProfile:
          securityEncryptionType: VMGuestStateOnly
```

* Enable confidential VMs on all nodes by adding the following stanza:

```yaml
platform:
  azure:
    settings:
      securityType: ConfidentialVM
      confidentialVM:
        uefiSettings:
          secureBoot: Enabled
          virtualizedTrustedPlatformModule: Enabled
    osDisk:
      securityProfile:
        securityEncryptionType: VMGuestStateOnly
```


## Sample customized install-config.yaml file for Azure

You can customize the install-config.yaml file to specify more details about your Red Hat OpenShift Container Platform cluster&#8217;s platform or modify the values of the required parameters.


[IMPORTANT]
----
This sample YAML file is provided for reference only. You must obtain your install-config.yaml file by using the installation program and modify it.
----


```yaml
apiVersion: v1
baseDomain: example.com 1
controlPlane: 2
  hyperthreading: Enabled 3 4
  name: master
  platform:
    azure:
      encryptionAtHost: true
      ultraSSDCapability: Enabled
      osDisk:
        diskSizeGB: 1024 5
        diskType: Premium_LRS
        diskEncryptionSet:
          resourceGroup: disk_encryption_set_resource_group
          name: disk_encryption_set_name
          subscriptionId: secondary_subscription_id
      osImage:
        publisher: example_publisher_name
        offer: example_image_offer
        sku: example_offer_sku
        version: example_image_version
      type: Standard_D8s_v3
  replicas: 3
compute: 2
- hyperthreading: Enabled 3 4
  name: worker
  platform:
    azure:
      ultraSSDCapability: Enabled
      type: Standard_D2s_v3
      encryptionAtHost: true
      osDisk:
        diskSizeGB: 512 5
        diskType: Standard_LRS
        diskEncryptionSet:
          resourceGroup: disk_encryption_set_resource_group
          name: disk_encryption_set_name
          subscriptionId: secondary_subscription_id
      osImage:
        publisher: example_publisher_name
        offer: example_image_offer
        sku: example_offer_sku
        version: example_image_version
      zones: 6
      - "1"
      - "2"
      - "3"
  replicas: 5
metadata:
  name: test-cluster 1
networking: 2
  clusterNetwork:
  - cidr: 10.128.0.0/14
    hostPrefix: 23
  machineNetwork:
  - cidr: 10.0.0.0/16
  networkType: OVNKubernetes 7
  serviceNetwork:
  - 172.30.0.0/16
platform:
  azure:
    defaultMachinePlatform:
      osImage: 8
        publisher: example_publisher_name
        offer: example_image_offer
        sku: example_offer_sku
        version: example_image_version
      ultraSSDCapability: Enabled
    baseDomainResourceGroupName: resource_group 9
    region: centralus 1
    resourceGroupName: existing_resource_group 10
    outboundType: Loadbalancer
    cloudName: AzurePublicCloud
pullSecret: '{"auths": ...}' 1
fips: false 11
sshKey: ssh-ed25519 AAAA... 12
```


Required. The installation program prompts you for this value.
If you do not provide these parameters and values, the installation program provides the default value.
The controlPlane section is a single mapping, but the compute section is a sequence of mappings. To meet the requirements of the different data structures, the first line of the compute section must begin with a hyphen, -, and the first line of the controlPlane section must not. Only one control plane pool is used.
Whether to enable or disable simultaneous multithreading, or hyperthreading. By default, simultaneous multithreading is enabled to increase the performance of your machines' cores. You can disable it by setting the parameter value to Disabled. If you disable simultaneous multithreading in some cluster machines, you must disable it in all cluster machines.

[IMPORTANT]
----
If you disable simultaneous multithreading, ensure that your capacity planning accounts for the dramatically decreased machine performance. Use larger virtual machine types, such as Standard_D8s_v3, for your machines if you disable simultaneous multithreading.
----
You can specify the size of the disk to use in GB. Minimum recommendation for control plane nodes is 1024 GB.
Specify a list of zones to deploy your machines to. For high availability, specify at least two zones.
The cluster network plugin to install. The default value OVNKubernetes is the only supported value.
Optional: A custom Red Hat Enterprise Linux CoreOS (RHCOS) image that should be used to boot control plane and compute machines. The publisher, offer, sku, and version parameters under platform.azure.defaultMachinePlatform.osImage apply to both control plane and compute machines. If the parameters under controlPlane.platform.azure.osImage or compute.platform.azure.osImage are set, they override the platform.azure.defaultMachinePlatform.osImage parameters.
Specify the name of the resource group that contains the DNS zone for your base domain.
Specify the name of an already existing resource group to install your cluster to. If undefined, a new resource group is created for the cluster.
Whether to enable or disable FIPS mode. By default, FIPS mode is not enabled. If FIPS mode is enabled, the Red Hat Enterprise Linux CoreOS (RHCOS) machines that Red Hat OpenShift Container Platform runs on bypass the default Kubernetes cryptography suite and use the cryptography modules that are provided with RHCOS instead.

[IMPORTANT]
----
To enable FIPS mode for your cluster, you must run the installation program from a Red Hat Enterprise Linux (RHEL) computer configured to operate in FIPS mode. For more information about configuring FIPS mode on RHEL, see Switching RHEL to FIPS mode.
When running Red Hat Enterprise Linux (RHEL) or Red Hat Enterprise Linux CoreOS (RHCOS) booted in FIPS mode, Red Hat OpenShift Container Platform core components use the RHEL cryptographic libraries that have been submitted to NIST for FIPS 140-2/140-3 Validation on only the x86_64, ppc64le, and s390x architectures.
----
You can optionally provide the sshKey value that you use to access the machines in your cluster.

[NOTE]
----
For production Red Hat OpenShift Container Platform clusters on which you want to perform installation debugging or disaster recovery, specify an SSH key that your ssh-agent process uses.
----

## Configuring the cluster-wide proxy during installation

Production environments can deny direct access to the internet and instead have
an HTTP or HTTPS proxy available. You can configure a new Red Hat OpenShift Container Platform
cluster to use a proxy by configuring the proxy settings in the
install-config.yaml file.

* You have an existing install-config.yaml file.
* You reviewed the sites that your cluster requires access to and determined whether any of them need to bypass the proxy. By default, all cluster egress traffic is proxied, including calls to hosting cloud provider APIs. You added sites to the Proxy object's spec.noProxy field to bypass the proxy if necessary.

[NOTE]
----
The Proxy object status.noProxy field is populated with the values of the networking.machineNetwork[].cidr, networking.clusterNetwork[].cidr, and networking.serviceNetwork[] fields from your installation configuration.
For installations on Amazon Web Services (AWS), Google Cloud Platform (GCP), Microsoft Azure, and Red Hat OpenStack Platform (RHOSP), the Proxy object status.noProxy field is also populated with the instance metadata endpoint (169.254.169.254).
----

1. Edit your install-config.yaml file and add the proxy settings. For example:

```yaml
apiVersion: v1
baseDomain: my.domain.com
proxy:
  httpProxy: http://<username>:<pswd>@<ip>:<port> 1
  httpsProxy: https://<username>:<pswd>@<ip>:<port> 2
  noProxy: example.com 3
additionalTrustBundle: | 4
    -----BEGIN CERTIFICATE-----
    <MY_TRUSTED_CA_CERT>
    -----END CERTIFICATE-----
additionalTrustBundlePolicy: <policy_to_add_additionalTrustBundle> 5
```

A proxy URL to use for creating HTTP connections outside the cluster. The
URL scheme must be http.
A proxy URL to use for creating HTTPS connections outside the cluster.
A comma-separated list of destination domain names, IP addresses, or other network CIDRs to exclude from proxying. Preface a domain with . to match subdomains only. For example, .y.com matches x.y.com, but not y.com. Use * to bypass the proxy for all destinations.
If provided, the installation program generates a config map that is named user-ca-bundle in
the openshift-config namespace that contains one or more additional CA
certificates that are required for proxying HTTPS connections. The Cluster Network
Operator then creates a trusted-ca-bundle config map that merges these contents
with the Red Hat Enterprise Linux CoreOS (RHCOS) trust bundle, and this config map is referenced in the trustedCA field of the Proxy object. The additionalTrustBundle field is required unless
the proxy's identity certificate is signed by an authority from the RHCOS trust
bundle.
Optional: The policy to determine the configuration of the Proxy object to reference the user-ca-bundle config map in the trustedCA field. The allowed values are Proxyonly and Always. Use Proxyonly to reference the user-ca-bundle config map only when http/https proxy is configured. Use Always to always reference the user-ca-bundle config map. The default value is Proxyonly.

[NOTE]
----
The installation program does not support the proxy readinessEndpoints field.
----

[NOTE]
----
If the installer times out, restart and then complete the deployment by using the wait-for command of the installer. For example:

```terminal
$ ./openshift-install wait-for install-complete --log-level debug
```

----
2. Save the file and reference it when installing Red Hat OpenShift Container Platform.

The installation program creates a cluster-wide proxy that is named cluster that uses the proxy
settings in the provided install-config.yaml file. If no proxy settings are
provided, a cluster Proxy object is still created, but it will have a nil
spec.


[NOTE]
----
Only the Proxy object named cluster is supported, and no additional
proxies can be created.
----

# Network configuration phases

There are two phases prior to Red Hat OpenShift Container Platform installation where you can customize the network configuration.

Phase 1:: You can customize the following network-related fields in the install-config.yaml file before you create the manifest files:
* networking.networkType
* networking.clusterNetwork
* networking.serviceNetwork
* networking.machineNetwork
* nodeNetworking

For more information, see "Installation configuration parameters".

[NOTE]
----
Set the networking.machineNetwork to match the Classless Inter-Domain Routing (CIDR) where the preferred subnet is located.
----

[IMPORTANT]
----
The CIDR range 172.17.0.0/16 is reserved by libVirt. You cannot use any other CIDR range that overlaps with the 172.17.0.0/16 CIDR range for networks in your cluster.
----
Phase 2:: After creating the manifest files by running openshift-install create manifests, you can define a customized Cluster Network Operator manifest with only the fields you want to modify. You can use the manifest to specify an advanced network configuration.

During phase 2, you cannot override the values that you specified in phase 1 in the install-config.yaml file. However, you can customize the network plugin during phase 2.

# Specifying advanced network configuration

You can use advanced network configuration for your network plugin to integrate your cluster into your existing network environment.

You can specify advanced network configuration only before you install the cluster.


[IMPORTANT]
----
Customizing your network configuration by modifying the Red Hat OpenShift Container Platform manifest files created by the installation program is not supported. Applying a manifest file that you create, as in the following procedure, is supported.
----

* You have created the install-config.yaml file and completed any modifications to it.

1. Change to the directory that contains the installation program and create the manifests:

```terminal
$ ./openshift-install create manifests --dir <installation_directory> 1
```

<installation_directory> specifies the name of the directory that contains the install-config.yaml file for your cluster.
2. Create a stub manifest file for the advanced network configuration that is named cluster-network-03-config.yml in the <installation_directory>/manifests/ directory:

```yaml
apiVersion: operator.openshift.io/v1
kind: Network
metadata:
  name: cluster
spec:
```

3. Specify the advanced network configuration for your cluster in the cluster-network-03-config.yml file, such as in the following example:

```yaml
apiVersion: operator.openshift.io/v1
kind: Network
metadata:
  name: cluster
spec:
  defaultNetwork:
    ovnKubernetesConfig:
      ipsecConfig:
        mode: Full
```
4. Optional: Back up the manifests/cluster-network-03-config.yml file. The
installation program consumes the manifests/ directory when you create the
Ignition config files.
5. Remove the Kubernetes manifest files that define the control plane machines and compute MachineSets:

```terminal
$ rm -f openshift/99_openshift-cluster-api_master-machines-*.yaml openshift/99_openshift-cluster-api_worker-machineset-*.yaml
```


Because you create and manage these resources yourself, you do not have
to initialize them.
* You can preserve the MachineSet files to create compute machines by using the machine API, but you must update references to them to match your environment.

# Cluster Network Operator configuration

The configuration for the cluster network is specified as part of the Cluster Network Operator (CNO) configuration and stored in a custom resource (CR) object that is named cluster. The CR specifies the fields for the Network API in the operator.openshift.io API group.

The CNO configuration inherits the following fields during cluster installation from the Network API in the Network.config.openshift.io API group:

clusterNetwork:: IP address pools from which pod IP addresses are allocated.
serviceNetwork:: IP address pool for services.
defaultNetwork.type:: Cluster network plugin. OVNKubernetes is the only supported plugin during installation.

You can specify the cluster network plugin configuration for your cluster by setting the fields for the defaultNetwork object in the CNO object named cluster.

## Cluster Network Operator configuration object

The fields for the Cluster Network Operator (CNO) are described in the following table:




[IMPORTANT]
----
For a cluster that needs to deploy objects across multiple networks, ensure that you specify the same value for the clusterNetwork.hostPrefix parameter for each network type that is defined in the install-config.yaml file. Setting a different value for each clusterNetwork.hostPrefix parameter can impact the OVN-Kubernetes network plugin, where the plugin cannot effectively route object traffic among different nodes.
----

## defaultNetwork object configuration

The values for the defaultNetwork object are defined in the following table:



## Configuration for the OVN-Kubernetes network plugin

The following table describes the configuration fields for the OVN-Kubernetes network plugin:


















```yaml
defaultNetwork:
  type: OVNKubernetes
  ovnKubernetesConfig:
    mtu: 1400
    genevePort: 6081
    ipsecConfig:
      mode: Full
```


# Configuring hybrid networking with OVN-Kubernetes

You can configure your cluster to use hybrid networking with the OVN-Kubernetes network plugin. This allows a hybrid cluster that supports different node networking configurations.

* You defined OVNKubernetes for the networking.networkType parameter in the install-config.yaml file. See the installation documentation for configuring Red Hat OpenShift Container Platform network customizations on your chosen cloud provider for more information.

1. Change to the directory that contains the installation program and create the manifests:

```terminal
$ ./openshift-install create manifests --dir <installation_directory>
```

where:
<installation_directory>:: Specifies the name of the directory that contains the install-config.yaml file for your cluster.
2. Create a stub manifest file for the advanced network configuration that is named cluster-network-03-config.yml in the <installation_directory>/manifests/ directory:

```terminal
$ cat <<EOF > <installation_directory>/manifests/cluster-network-03-config.yml
apiVersion: operator.openshift.io/v1
kind: Network
metadata:
  name: cluster
spec:
EOF
```

where:
<installation_directory>:: Specifies the directory name that contains the
manifests/ directory for your cluster.
3. Open the cluster-network-03-config.yml file in an editor and configure OVN-Kubernetes with hybrid networking, as in the following example:

```yaml
apiVersion: operator.openshift.io/v1
kind: Network
metadata:
  name: cluster
spec:
  defaultNetwork:
    ovnKubernetesConfig:
      hybridOverlayConfig:
        hybridClusterNetwork: 1
        - cidr: 10.132.0.0/14
          hostPrefix: 23
```

Specify the CIDR configuration used for nodes on the additional overlay network. The hybridClusterNetwork CIDR must not overlap with the clusterNetwork CIDR.
4. Save the cluster-network-03-config.yml file and quit the text editor.
5. Optional: Back up the manifests/cluster-network-03-config.yml file. The
installation program deletes the manifests/ directory when creating the
cluster.

* For more details about Accelerated Networking, see Accelerated Networking for Microsoft Azure VMs.

# Alternatives to storing administrator-level secrets in the kube-system project

By default, administrator secrets are stored in the kube-system project. If you configured the credentialsMode parameter in the install-config.yaml file to Manual, you must use one of the following alternatives:

* To manage long-term cloud credentials manually, follow the procedure in Manually creating long-term credentials.
* To implement short-term credentials that are managed outside the cluster for individual components, follow the procedures in Configuring an Azure cluster to use short-term credentials.

## Manually creating long-term credentials

The Cloud Credential Operator (CCO) can be put into manual mode prior to installation in environments where the cloud identity and access management (IAM) APIs are not reachable, or the administrator prefers not to store an administrator-level credential secret in the cluster kube-system namespace.

1. If you did not set the credentialsMode parameter in the install-config.yaml configuration file to Manual, modify the value as shown:
Sample configuration file snippet

```yaml
apiVersion: v1
baseDomain: example.com
credentialsMode: Manual
# ...
```

2. If you have not previously created installation manifest files, do so by running the following command:

```terminal
$ openshift-install create manifests --dir <installation_directory>
```


where <installation_directory> is the directory in which the installation program creates files.
3. Set a $RELEASE_IMAGE variable with the release image from your installation file by running the following command:

```terminal
$ RELEASE_IMAGE=$(./openshift-install version | awk '/release image/ {print $3}')
```

4. Extract the list of CredentialsRequest custom resources (CRs) from the Red Hat OpenShift Container Platform release image by running the following command:

```terminal
$ oc adm release extract \
  --from=$RELEASE_IMAGE \
  --credentials-requests \
  --included \1
  --install-config=<path_to_directory_with_installation_configuration>/install-config.yaml \2
  --to=<path_to_directory_for_credentials_requests> 3
```

The --included parameter includes only the manifests that your specific cluster configuration requires.
Specify the location of the install-config.yaml file.
Specify the path to the directory where you want to store the CredentialsRequest objects. If the specified directory does not exist, this command creates it.

This command creates a YAML file for each CredentialsRequest object.
Sample CredentialsRequest object

```yaml
apiVersion: cloudcredential.openshift.io/v1
kind: CredentialsRequest
metadata:
  name: <component_credentials_request>
  namespace: openshift-cloud-credential-operator
  ...
spec:
  providerSpec:
    apiVersion: cloudcredential.openshift.io/v1
    kind: AzureProviderSpec
    roleBindings:
    - role: Contributor
  ...
```

5. Create YAML files for secrets in the openshift-install manifests directory that you generated previously. The secrets must be stored using the namespace and secret name defined in the spec.secretRef for each CredentialsRequest object.
Sample CredentialsRequest object with secrets

```yaml
apiVersion: cloudcredential.openshift.io/v1
kind: CredentialsRequest
metadata:
  name: <component_credentials_request>
  namespace: openshift-cloud-credential-operator
  ...
spec:
  providerSpec:
    apiVersion: cloudcredential.openshift.io/v1
    kind: AzureProviderSpec
    roleBindings:
    - role: Contributor
      ...
  secretRef:
    name: <component_secret>
    namespace: <component_namespace>
  ...
```

Sample Secret object

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: <component_secret>
  namespace: <component_namespace>
data:
  azure_subscription_id: <base64_encoded_azure_subscription_id>
  azure_client_id: <base64_encoded_azure_client_id>
  azure_client_secret: <base64_encoded_azure_client_secret>
  azure_tenant_id: <base64_encoded_azure_tenant_id>
  azure_resource_prefix: <base64_encoded_azure_resource_prefix>
  azure_resourcegroup: <base64_encoded_azure_resourcegroup>
  azure_region: <base64_encoded_azure_region>
```



[IMPORTANT]
----
Before upgrading a cluster that uses manually maintained credentials, you must ensure that the CCO is in an upgradeable state.
----

## Configuring an Azure cluster to use short-term credentials

To install a cluster that uses Microsoft Entra Workload ID, you must configure the Cloud Credential Operator utility and create the required Azure resources for your cluster.

### Configuring the Cloud Credential Operator utility

To create and manage cloud credentials from outside of the cluster when the Cloud Credential Operator (CCO) is operating in manual mode, extract and prepare the CCO utility (ccoctl) binary.


[NOTE]
----
The ccoctl utility is a Linux binary that must run in a Linux environment.
----

* You have access to an Red Hat OpenShift Container Platform account with cluster administrator access.
* You have installed the OpenShift CLI (`oc`).

* You have created a global Azure account for the ccoctl utility to use with the following permissions:
* Microsoft.Resources/subscriptions/resourceGroups/read
* Microsoft.Resources/subscriptions/resourceGroups/write
* Microsoft.Resources/subscriptions/resourceGroups/delete
* Microsoft.Authorization/roleAssignments/read
* Microsoft.Authorization/roleAssignments/delete
* Microsoft.Authorization/roleAssignments/write
* Microsoft.Authorization/roleDefinitions/read
* Microsoft.Authorization/roleDefinitions/write
* Microsoft.Authorization/roleDefinitions/delete
* Microsoft.Storage/storageAccounts/listkeys/action
* Microsoft.Storage/storageAccounts/delete
* Microsoft.Storage/storageAccounts/read
* Microsoft.Storage/storageAccounts/write
* Microsoft.Storage/storageAccounts/blobServices/containers/delete
* Microsoft.Storage/storageAccounts/blobServices/containers/read
* Microsoft.Storage/storageAccounts/blobServices/containers/write
* Microsoft.ManagedIdentity/userAssignedIdentities/delete
* Microsoft.ManagedIdentity/userAssignedIdentities/read
* Microsoft.ManagedIdentity/userAssignedIdentities/write
* Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials/read
* Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials/write
* Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials/delete
* Microsoft.Storage/register/action
* Microsoft.ManagedIdentity/register/action

1. Set a variable for the Red Hat OpenShift Container Platform release image by running the following command:

```terminal
$ RELEASE_IMAGE=$(./openshift-install version | awk '/release image/ {print $3}')
```

2. Obtain the CCO container image from the Red Hat OpenShift Container Platform release image by running the following command:

```terminal
$ CCO_IMAGE=$(oc adm release info --image-for='cloud-credential-operator' $RELEASE_IMAGE -a ~/.pull-secret)
```


[NOTE]
----
Ensure that the architecture of the $RELEASE_IMAGE matches the architecture of the environment in which you will use the ccoctl tool.
----
3. Extract the ccoctl binary from the CCO container image within the Red Hat OpenShift Container Platform release image by running the following command:

```terminal
$ oc image extract $CCO_IMAGE \
  --file="/usr/bin/ccoctl.<rhel_version>" \1
  -a ~/.pull-secret
```

For <rhel_version>, specify the value that corresponds to the version of Red Hat Enterprise Linux (RHEL) that the host uses.
If no value is specified, ccoctl.rhel8 is used by default.
The following values are valid:
* rhel8: Specify this value for hosts that use RHEL 8.
* rhel9: Specify this value for hosts that use RHEL 9.
4. Change the permissions to make ccoctl executable by running the following command:

```terminal
$ chmod 775 ccoctl.<rhel_version>
```


* To verify that ccoctl is ready to use, display the help file. Use a relative file name when you run the command, for example:

```terminal
$ ./ccoctl.rhel9
```

Example output

```terminal
OpenShift credentials provisioning tool

Usage:
  ccoctl [command]

Available Commands:
  aws          Manage credentials objects for AWS cloud
  azure        Manage credentials objects for Azure
  gcp          Manage credentials objects for Google cloud
  help         Help about any command
  ibmcloud     Manage credentials objects for {ibm-cloud-title}
  nutanix      Manage credentials objects for Nutanix

Flags:
  -h, --help   help for ccoctl

Use "ccoctl [command] --help" for more information about a command.
```


### Creating Azure resources with the Cloud Credential Operator utility

You can use the ccoctl azure create-all command to automate the creation of Azure resources.


[NOTE]
----
By default, ccoctl creates objects in the directory in which the commands are run. To create the objects in a different directory, use the --output-dir flag. This procedure uses <path_to_ccoctl_output_dir> to refer to this directory.
----

You must have:

* Extracted and prepared the ccoctl binary.
* Access to your Microsoft Azure account by using the Azure CLI.

1. Set a $RELEASE_IMAGE variable with the release image from your installation file by running the following command:

```terminal
$ RELEASE_IMAGE=$(./openshift-install version | awk '/release image/ {print $3}')
```

2. Extract the list of CredentialsRequest objects from the Red Hat OpenShift Container Platform release image by running the following command:

```terminal
$ oc adm release extract \
  --from=$RELEASE_IMAGE \
  --credentials-requests \
  --included \1
  --install-config=<path_to_directory_with_installation_configuration>/install-config.yaml \2
  --to=<path_to_directory_for_credentials_requests> 3
```

The --included parameter includes only the manifests that your specific cluster configuration requires.
Specify the location of the install-config.yaml file.
Specify the path to the directory where you want to store the CredentialsRequest objects. If the specified directory does not exist, this command creates it.

[NOTE]
----
This command might take a few moments to run.
----
3. To enable the ccoctl utility to detect your Azure credentials automatically, log in to the Azure CLI by running the following command:

```terminal
$ az login
```

4. Use the ccoctl tool to process all CredentialsRequest objects by running the following command:

```terminal
$ ccoctl azure create-all \
  --name=<azure_infra_name> \1
  --output-dir=<ccoctl_output_dir> \2
  --region=<azure_region> \3
  --subscription-id=<azure_subscription_id> \4
  --credentials-requests-dir=<path_to_credentials_requests_directory> \5
  --dnszone-resource-group-name=<azure_dns_zone_resource_group_name> \6
  --tenant-id=<azure_tenant_id> \7
  --network-resource-group-name <azure_resource_group> 8
```

Specify the user-defined name for all created Azure resources used for tracking.
Optional: Specify the directory in which you want the ccoctl utility to create objects. By default, the utility creates objects in the directory in which the commands are run.
Specify the Azure region in which cloud resources will be created.
Specify the Azure subscription ID to use.
Specify the directory containing the files for the component CredentialsRequest objects.
Specify the name of the resource group containing the cluster's base domain Azure DNS zone.
Specify the Azure tenant ID to use.
Optional: Specify the virtual network resource group if it is different from the cluster resource group.

[NOTE]
----
If your cluster uses Technology Preview features that are enabled by the TechPreviewNoUpgrade feature set, you must include the --enable-tech-preview parameter.
To see additional optional parameters and explanations of how to use them, run the azure create-all --help command.
----

* To verify that the Red Hat OpenShift Container Platform secrets are created, list the files in the <path_to_ccoctl_output_dir>/manifests directory:

```terminal
$ ls <path_to_ccoctl_output_dir>/manifests
```

Example output

```text
azure-ad-pod-identity-webhook-config.yaml
cluster-authentication-02-config.yaml
openshift-cloud-controller-manager-azure-cloud-credentials-credentials.yaml
openshift-cloud-network-config-controller-cloud-credentials-credentials.yaml
openshift-cluster-api-capz-manager-bootstrap-credentials-credentials.yaml
openshift-cluster-csi-drivers-azure-disk-credentials-credentials.yaml
openshift-cluster-csi-drivers-azure-file-credentials-credentials.yaml
openshift-image-registry-installer-cloud-credentials-credentials.yaml
openshift-ingress-operator-cloud-credentials-credentials.yaml
openshift-machine-api-azure-cloud-credentials-credentials.yaml
```


You can verify that the Microsoft Entra ID service accounts are created by querying Azure. For more information, refer to Azure documentation on listing Entra ID service accounts.

### Incorporating the Cloud Credential Operator utility manifests

To implement short-term security credentials managed outside the cluster for individual components, you must move the manifest files that the Cloud Credential Operator utility (ccoctl) created to the correct directories for the installation program.

* You have configured an account with the cloud platform that hosts your cluster.
* You have configured the Cloud Credential Operator utility (ccoctl).
* You have created the cloud provider resources that are required for your cluster with the ccoctl utility.

1. If you did not set the credentialsMode parameter in the install-config.yaml configuration file to Manual, modify the value as shown:
Sample configuration file snippet

```yaml
apiVersion: v1
baseDomain: example.com
credentialsMode: Manual
# ...
```

2. If you used the ccoctl utility to create a new Azure resource group instead of using an existing resource group, modify the resourceGroupName parameter in the install-config.yaml as shown:
Sample configuration file snippet

```yaml
apiVersion: v1
baseDomain: example.com
# ...
platform:
  azure:
    resourceGroupName: <azure_infra_name> 1
# ...
```

This value must match the user-defined name for Azure resources that was specified with the --name argument of the ccoctl azure create-all command.
3. If you have not previously created installation manifest files, do so by running the following command:

```terminal
$ openshift-install create manifests --dir <installation_directory>
```


where <installation_directory> is the directory in which the installation program creates files.
4. Copy the manifests that the ccoctl utility generated to the manifests directory that the installation program created by running the following command:

```terminal
$ cp /<path_to_ccoctl_output_dir>/manifests/* ./manifests/
```

5. Copy the tls directory that contains the private key to the installation directory:

```terminal
$ cp -a /<path_to_ccoctl_output_dir>/tls .
```


# Deploying the cluster

You can install Red Hat OpenShift Container Platform on a compatible cloud platform.


[IMPORTANT]
----
You can run the create cluster command of the installation program only once, during initial installation.
----

* You have configured an account with the cloud platform that hosts your cluster.
* You have the Red Hat OpenShift Container Platform installation program and the pull secret for your cluster.
* You have an Azure subscription ID and tenant ID.

* Change to the directory that contains the installation program and initialize the cluster deployment:

```terminal
$ ./openshift-install create cluster --dir <installation_directory> \ 1
    --log-level=info 2
```

For <installation_directory>, specify the
location of your customized ./install-config.yaml file.
To view different installation details, specify warn, debug, or
error instead of info.

When the cluster deployment completes successfully:

* The terminal displays directions for accessing your cluster, including a link to the web console and credentials for the kubeadmin user.
* Credential information also outputs to <installation_directory>/.openshift_install.log.


[IMPORTANT]
----
Do not delete the installation program or the files that the installation program creates. Both are required to delete the cluster.
----


```terminal
...
INFO Install complete!
INFO To access the cluster as the system:admin user when using 'oc', run 'export KUBECONFIG=/home/myuser/install_dir/auth/kubeconfig'
INFO Access the OpenShift web-console here: https://console-openshift-console.apps.mycluster.example.com
INFO Login to the console with user: "kubeadmin", and password: "password"
INFO Time elapsed: 36m22s
```



[IMPORTANT]
----
* The Ignition config files that the installation program generates contain certificates that expire after 24 hours, which are then renewed at that time. If the cluster is shut down before renewing the certificates and the cluster is later restarted after the 24 hours have elapsed, the cluster automatically recovers the expired certificates. The exception is that you must manually approve the pending node-bootstrapper certificate signing requests (CSRs) to recover kubelet certificates. See the documentation for Recovering from expired control plane certificates for more information.
* It is recommended that you use Ignition config files within 12 hours after they are generated because the 24-hour certificate rotates from 16 to 22 hours after the cluster is installed. By using the Ignition config files within 12 hours, you can avoid installation failure if the certificate update runs during installation.
----

# Logging in to the cluster by using the CLI

You can log in to your cluster as a default system user by exporting the cluster kubeconfig file.
The kubeconfig file contains information about the cluster that is used by the CLI to connect a client to the correct cluster and API server.
The file is specific to a cluster and is created during Red Hat OpenShift Container Platform installation.

* You deployed an Red Hat OpenShift Container Platform cluster.
* You installed the oc CLI.

1. Export the kubeadmin credentials:

```terminal
$ export KUBECONFIG=<installation_directory>/auth/kubeconfig 1
```

For <installation_directory>, specify the path to the directory that you stored
the installation files in.
2. Verify you can run oc commands successfully using the exported configuration:

```terminal
$ oc whoami
```

Example output

```terminal
system:admin
```


* See Accessing the web console for more details about accessing and understanding the Red Hat OpenShift Container Platform web console.

# Next steps

* Customize your cluster.
* If necessary, you can
opt out of remote health reporting.