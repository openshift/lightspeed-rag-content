# Getting started with the Cluster API



[IMPORTANT]
----
Managing machines with the Cluster API is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----
For the Cluster API Technology Preview, you must manually create some of the primary resources that the Cluster API requires.

# Creating the Cluster API primary resources

To create the Cluster API primary resources, you must obtain the cluster ID value, which you use for the <cluster_name> parameter in the cluster resource manifest.

## Obtaining the cluster ID value

You can find the cluster ID value by using the OpenShift CLI (`oc`).

* You have deployed an Red Hat OpenShift Container Platform cluster.
* You have access to the cluster using an account with cluster-admin permissions.
* You have installed the OpenShift CLI (`oc`).

* Obtain the value of the cluster ID by running the following command:

```terminal
$  oc get infrastructure cluster \
   -o jsonpath='{.status.infrastructureName}'
```


You can create the Cluster API primary resources manually by creating YAML manifest files and applying them with the OpenShift CLI (`oc`).

## Creating a Cluster API machine template

You can create a provider-specific machine template resource by creating a YAML manifest file and applying it with the OpenShift CLI (`oc`).

* You have deployed an Red Hat OpenShift Container Platform cluster.
* You have enabled the use of the Cluster API.
* You have access to the cluster using an account with cluster-admin permissions.
* You have installed the OpenShift CLI (`oc`).

1. Create a YAML file similar to the following. This procedure uses <machine_template_resource_file>.yaml as an example file name.

```yaml
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: <machine_template_kind> 1
metadata:
  name: <template_name> 2
  namespace: openshift-cluster-api
spec:
  template:
    spec: 3
```

Specify the machine template kind. This value must match the value for your platform.
The following values are valid:

Specify a name for the machine template.
Specify the details for your environment. These parameters are provider specific. For more information, see the sample Cluster API machine template YAML for your provider.
2. Create the machine template CR by running the following command:

```terminal
$ oc create -f <machine_template_resource_file>.yaml
```


* Confirm that the machine template CR is created by running the following command:

```terminal
$ oc get <machine_template_kind>
```


where <machine_template_kind> is the value that corresponds to your platform.
Example output

```text
NAME              AGE
<template_name>   77m
```


* Sample YAML for a Cluster API machine template resource on Amazon Web Services
* Sample YAML for a Cluster API machine template resource on Google Cloud Platform
* Sample YAML for a Cluster API machine template resource on Microsoft Azure
* Sample YAML for a Cluster API machine template resource on RHOSP
* Sample YAML for a Cluster API machine template resource on VMware vSphere

## Creating a Cluster API compute machine set

You can create compute machine sets that use the Cluster API to dynamically manage the machine compute resources for specific workloads of your choice.

* You have deployed an Red Hat OpenShift Container Platform cluster.
* You have enabled the use of the Cluster API.
* You have access to the cluster using an account with cluster-admin permissions.
* You have installed the OpenShift CLI (`oc`).
* You have created the machine template resource.

1. Create a YAML file similar to the following. This procedure uses <machine_set_resource_file>.yaml as an example file name.

```yaml
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineSet
metadata:
  name: <machine_set_name> 1
  namespace: openshift-cluster-api
spec:
  clusterName: <cluster_name> 2
  replicas: 1
  selector:
    matchLabels:
      test: example
  template:
    metadata:
      labels:
        test: example
    spec: 3
# ...
```

Specify a name for the compute machine set.
The cluster ID, machine role, and region form a typical pattern for this value in the following format: <cluster_name>-<role>-<region>.
Specify the name of the cluster.
Specify the details for your environment. These parameters are provider specific. For more information, see the sample Cluster API compute machine set YAML for your provider.
2. Create the compute machine set CR by running the following command:

```terminal
$ oc create -f <machine_set_resource_file>.yaml
```

3. Confirm that the compute machine set CR is created by running the following command:

```terminal
$ oc get machineset -n openshift-cluster-api 1
```

Specify the openshift-cluster-api namespace.
Example output

```text
NAME                 CLUSTER          REPLICAS   READY   AVAILABLE   AGE   VERSION
<machine_set_name>   <cluster_name>   1          1       1           17m
```


When the new compute machine set is available, the REPLICAS and AVAILABLE values match. If the compute machine set is not available, wait a few minutes and run the command again.

* To verify that the compute machine set is creating machines according to your required configuration, review the lists of machines and nodes in the cluster by running the following commands:
* View the list of Cluster API machines:

```terminal
$ oc get machine -n openshift-cluster-api 1
```

Specify the openshift-cluster-api namespace.
Example output

```text
NAME                             CLUSTER          NODENAME                                 PROVIDERID      PHASE     AGE     VERSION
<machine_set_name>-<string_id>   <cluster_name>   <ip_address>.<region>.compute.internal   <provider_id>   Running   8m23s
```

* View the list of nodes:

```terminal
$ oc get node
```

Example output

```text
NAME                                       STATUS   ROLES    AGE     VERSION
<ip_address_1>.<region>.compute.internal   Ready    worker   5h14m   v1.28.5
<ip_address_2>.<region>.compute.internal   Ready    master   5h19m   v1.28.5
<ip_address_3>.<region>.compute.internal   Ready    worker   7m      v1.28.5
```


* Sample YAML for a Cluster API compute machine set resource on Amazon Web Services
* Sample YAML for a Cluster API compute machine set resource on Google Cloud Platform
* Sample YAML for a Cluster API compute machine set resource on Microsoft Azure
* Sample YAML for a Cluster API compute machine set resource on RHOSP
* Sample YAML for a Cluster API compute machine set resource on VMware vSphere