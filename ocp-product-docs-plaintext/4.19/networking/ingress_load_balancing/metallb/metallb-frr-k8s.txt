# Configuring the integration of MetalLB and FRR-K8s


FRRouting (FRR) is a free, open source internet routing protocol suite for Linux and UNIX platforms.
FRR-K8s is a Kubernetes based DaemonSet that exposes a subset of the FRR API in a Kubernetes-compliant manner.
As a cluster administrator, you can use the FRRConfiguration custom resource (CR) to access some of the FRR services not provided by MetalLB, for example, receiving routes.
MetalLB generates the FRR-K8s configuration corresponding to the MetalLB configuration applied.
![MetalLB integration with FRR]

[WARNING]
----
When configuring Virtual Route Forwarding (VRF) users must change their VRFs to a table ID lower than 1000 as higher than 1000 is reserved for Red Hat OpenShift Container Platform.
----

# FRR configurations

You can create multiple FRRConfiguration CRs to use FRR services in MetalLB.
MetalLB generates an FRRConfiguration object which FRR-K8s merges with all other configurations that all users have created.

For example, you can configure FRR-K8s to receive all of the prefixes advertised by a given neighbor.
The following example configures FRR-K8s to receive all of the prefixes advertised by a BGPPeer with host 172.18.0.5:


```yaml
apiVersion: frrk8s.metallb.io/v1beta1
kind: FRRConfiguration
metadata:
 name: test
 namespace: metallb-system
spec:
 bgp:
   routers:
   - asn: 64512
     neighbors:
     - address: 172.18.0.5
       asn: 64512
       toReceive:
        allowed:
            mode: all
```


You can also configure FRR-K8s to always block a set of prefixes, regardless of the configuration applied.
This can be useful to avoid routes towards the pods or ClusterIPs CIDRs that might result in cluster malfunctions.
The following example blocks the set of prefixes 192.168.1.0/24:


```yaml
apiVersion: metallb.io/v1beta1
kind: MetalLB
metadata:
  name: metallb
  namespace: metallb-system
spec:
  bgpBackend: frr-k8s
  frrk8sConfig:
    alwaysBlock:
    - 192.168.1.0/24
```


You can set FRR-K8s to block the Cluster Network CIDR and Service Network CIDR.
You can view the values for these CIDR address specifications by running the following command:


```terminal
$ oc describe network.config/cluster
```


# Configuring the FRRConfiguration CRD

The following section provides reference examples that use the FRRConfiguration custom resource (CR).

## The routers field

You can use the routers field to configure multiple routers, one for each Virtual Routing and Forwarding (VRF) resource.
For each router, you must define the Autonomous System Number (ASN).

You can also define a list of Border Gateway Protocol (BGP) neighbors to connect to, as in the following example:


```yaml
apiVersion: frrk8s.metallb.io/v1beta1
kind: FRRConfiguration
metadata:
  name: test
  namespace: frr-k8s-system
spec:
  bgp:
    routers:
    - asn: 64512
      neighbors:
      - address: 172.30.0.3
        asn: 4200000000
        ebgpMultiHop: true
        port: 180
      - address: 172.18.0.6
        asn: 4200000000
        port: 179
```


## The toAdvertise field

By default, FRR-K8s does not advertise the prefixes configured as part of a router configuration.
In order to advertise them,  you use the toAdvertise field.

You can advertise a subset of the prefixes, as in the following example:


```yaml
apiVersion: frrk8s.metallb.io/v1beta1
kind: FRRConfiguration
metadata:
  name: test
  namespace: frr-k8s-system
spec:
  bgp:
    routers:
    - asn: 64512
      neighbors:
      - address: 172.30.0.3
        asn: 4200000000
        ebgpMultiHop: true
        port: 180
        toAdvertise:
          allowed:
            prefixes: 1
            - 192.168.2.0/24
      prefixes:
        - 192.168.2.0/24
        - 192.169.2.0/24
```


Advertises a subset of prefixes.

The following example shows you how to advertise all of the prefixes:


```yaml
apiVersion: frrk8s.metallb.io/v1beta1
kind: FRRConfiguration
metadata:
  name: test
  namespace: frr-k8s-system
spec:
  bgp:
    routers:
    - asn: 64512
      neighbors:
      - address: 172.30.0.3
        asn: 4200000000
        ebgpMultiHop: true
        port: 180
        toAdvertise:
          allowed:
            mode: all 1
      prefixes:
        - 192.168.2.0/24
        - 192.169.2.0/24
```


Advertises all prefixes.

## The toReceive field

By default, FRR-K8s does not process any prefixes advertised by a neighbor.
You can use the toReceive field  to process such addresses.

You can configure for a subset of the prefixes, as in this example:


```yaml
apiVersion: frrk8s.metallb.io/v1beta1
kind: FRRConfiguration
metadata:
  name: test
  namespace: frr-k8s-system
spec:
  bgp:
    routers:
    - asn: 64512
      neighbors:
      - address: 172.18.0.5
          asn: 64512
          port: 179
          toReceive:
            allowed:
              prefixes:
              - prefix: 192.168.1.0/24
              - prefix: 192.169.2.0/24
                ge: 25 1
                le: 28 1
```


The prefix is applied if the prefix length is less than or equal to the le prefix length and greater than or equal to the ge prefix length.

The following example configures FRR to handle all the prefixes announced:


```yaml
apiVersion: frrk8s.metallb.io/v1beta1
kind: FRRConfiguration
metadata:
  name: test
  namespace: frr-k8s-system
spec:
  bgp:
    routers:
    - asn: 64512
      neighbors:
      - address: 172.18.0.5
          asn: 64512
          port: 179
          toReceive:
            allowed:
              mode: all
```


## The bgp field

You can use the bgp field to define various BFD profiles and associate them with a neighbor.
In the following example, BFD backs up the BGP session and FRR can detect link failures:


```yaml
apiVersion: frrk8s.metallb.io/v1beta1
kind: FRRConfiguration
metadata:
  name: test
  namespace: frr-k8s-system
spec:
  bgp:
    routers:
    - asn: 64512
      neighbors:
      - address: 172.30.0.3
        asn: 64512
        port: 180
        bfdProfile: defaultprofile
    bfdProfiles:
      - name: defaultprofile
```


## The nodeSelector field

By default, FRR-K8s applies the configuration to all nodes where the daemon is running.
You can use the nodeSelector field to specify the nodes to which you want to apply the configuration. For example:


```yaml
apiVersion: frrk8s.metallb.io/v1beta1
kind: FRRConfiguration
metadata:
  name: test
  namespace: frr-k8s-system
spec:
  bgp:
    routers:
    - asn: 64512
  nodeSelector:
    labelSelector:
    foo: "bar"
```


## The interface field


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

You can use the interface field to configure unnumbered BGP peering by using the following example configuration:


```yaml
apiVersion: frrk8s.metallb.io/v1beta1
kind: FRRConfiguration
metadata:
  name: test
  namespace: frr-k8s-system
spec:
  bgp:
    bfdProfiles:
    - echoMode: false
      name: simple
      passiveMode: false
    routers:
    - asn: 64512
      neighbors:
      - asn: 64512
        bfdProfile: simple
        disableMP: false
        interface: net10 1
        port: 179
        toAdvertise:
          allowed:
            mode: filtered
            prefixes:
            - 5.5.5.5/32
        toReceive:
          allowed:
            mode: filtered
      prefixes:
      - 5.5.5.5/32
```


Activates unnumbered BGP peering.


[NOTE]
----
To use the interface field, you must establish a point-to-point, layer 2 connection between the two BGP peers.
You can use unnumbered BGP peering with IPv4, IPv6, or dual-stack, but you must enable IPv6 RAs (Router Advertisements).
Each interface is limited to one BGP connection.
If you use this field, you cannot specify a value in the spec.bgp.routers.neighbors.address field.
----

The fields for the FRRConfiguration custom resource are described in the following table:



# How FRR-K8s merges multiple configurations

In a case where multiple users add configurations that select the same node, FRR-K8s merges the configurations.
Each configuration can only extend others.
This means that it is possible to add a new neighbor to a router, or to advertise an additional prefix to a neighbor, but not possible to remove a component added by another configuration.

## Configuration conflicts

Certain configurations can cause conflicts, leading to errors, for example:

* different ASN for the same router (in the same VRF)
* different ASN for the same neighbor (with the same IP / port)
* multiple BFD profiles with the same name but different values

When the daemon finds an invalid configuration for a node, it reports the configuration as invalid and reverts to the previous valid FRR configuration.

## Merging

When merging, it is possible to do the following actions:

* Extend the set of IPs that you want to advertise to a neighbor.
* Add an extra neighbor with its set of IPs.
* Extend the set of IPs to which you want to associate a community.
* Allow incoming routes for a neighbor.

Each configuration must be self contained. This means, for example, that it is not possible to allow prefixes that are not defined in the router section by leveraging prefixes coming from another configuration.

If the configurations to be applied are compatible, merging works as follows:

* FRR-K8s combines all the routers.
* FRR-K8s merges all prefixes and neighbors for each router.
* FRR-K8s merges all filters for each neighbor.


[NOTE]
----
A less restrictive filter has precedence over a stricter one. For example, a filter accepting some prefixes has precedence over a filter not accepting any, and a filter accepting all prefixes has precedence over one that accepts some.
----