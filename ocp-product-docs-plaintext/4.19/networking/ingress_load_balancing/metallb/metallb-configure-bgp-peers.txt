# Configuring MetalLB BGP peers


As a cluster administrator, you can add, modify, and delete Border Gateway Protocol (BGP) peers.
The MetalLB Operator uses the BGP peer custom resources to identify which peers that MetalLB speaker pods contact to start BGP sessions.
The peers receive the route advertisements for the load-balancer IP addresses that MetalLB assigns to services.

# About the BGP peer custom resource

The fields for the BGP peer custom resource are described in the following table.




[NOTE]
----
The passwordSecret field is mutually exclusive with the password field, and contains a reference to a secret containing the password to use. Setting both fields results in a failure of the parsing.
----

# Configuring a BGP peer

As a cluster administrator, you can add a BGP peer custom resource to exchange routing information with network routers and advertise the IP addresses for services.

* Install the OpenShift CLI (oc).
* Log in as a user with cluster-admin privileges.
* Configure MetalLB with a BGP advertisement.

1. Create a file, such as bgppeer.yaml, with content like the following example:

```yaml
apiVersion: metallb.io/v1beta2
kind: BGPPeer
metadata:
  namespace: metallb-system
  name: doc-example-peer
spec:
  peerAddress: 10.0.0.1
  peerASN: 64501
  myASN: 64500
  routerID: 10.10.10.10
```

2. Apply the configuration for the BGP peer:

```terminal
$ oc apply -f bgppeer.yaml
```


# Configure a specific set of BGP peers for a given address pool

This procedure illustrates how to:

* Configure a set of address pools (pool1 and pool2).
* Configure a set of BGP peers (peer1 and peer2).
* Configure BGP advertisement to assign pool1 to peer1 and pool2 to peer2.

* Install the OpenShift CLI (oc).
* Log in as a user with cluster-admin privileges.

1. Create address pool pool1.
1. Create a file, such as ipaddresspool1.yaml, with content like the following example:

```yaml
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  namespace: metallb-system
  name: pool1
spec:
  addresses:
    - 4.4.4.100-4.4.4.200
    - 2001:100:4::200-2001:100:4::400
```

2. Apply the configuration for the IP address pool pool1:

```terminal
$ oc apply -f ipaddresspool1.yaml
```

2. Create address pool pool2.
1. Create a file, such as ipaddresspool2.yaml, with content like the following example:

```yaml
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  namespace: metallb-system
  name: pool2
spec:
  addresses:
    - 5.5.5.100-5.5.5.200
    - 2001:100:5::200-2001:100:5::400
```

2. Apply the configuration for the IP address pool pool2:

```terminal
$ oc apply -f ipaddresspool2.yaml
```

3. Create BGP peer1.
1. Create a file, such as bgppeer1.yaml, with content like the following example:

```yaml
apiVersion: metallb.io/v1beta2
kind: BGPPeer
metadata:
  namespace: metallb-system
  name: peer1
spec:
  peerAddress: 10.0.0.1
  peerASN: 64501
  myASN: 64500
  routerID: 10.10.10.10
```

2. Apply the configuration for the BGP peer:

```terminal
$ oc apply -f bgppeer1.yaml
```

4. Create BGP peer2.
1. Create a file, such as bgppeer2.yaml, with content like the following example:

```yaml
apiVersion: metallb.io/v1beta2
kind: BGPPeer
metadata:
  namespace: metallb-system
  name: peer2
spec:
  peerAddress: 10.0.0.2
  peerASN: 64501
  myASN: 64500
  routerID: 10.10.10.10
```

2. Apply the configuration for the BGP peer2:

```terminal
$ oc apply -f bgppeer2.yaml
```

5. Create BGP advertisement 1.
1. Create a file, such as bgpadvertisement1.yaml, with content like the following example:

```yaml
apiVersion: metallb.io/v1beta1
kind: BGPAdvertisement
metadata:
  name: bgpadvertisement-1
  namespace: metallb-system
spec:
  ipAddressPools:
    - pool1
  peers:
    - peer1
  communities:
    - 65535:65282
  aggregationLength: 32
  aggregationLengthV6: 128
  localPref: 100
```

2. Apply the configuration:

```terminal
$ oc apply -f bgpadvertisement1.yaml
```

6. Create BGP advertisement 2.
1. Create a file, such as bgpadvertisement2.yaml, with content like the following example:

```yaml
apiVersion: metallb.io/v1beta1
kind: BGPAdvertisement
metadata:
  name: bgpadvertisement-2
  namespace: metallb-system
spec:
  ipAddressPools:
    - pool2
  peers:
    - peer2
  communities:
    - 65535:65282
  aggregationLength: 32
  aggregationLengthV6: 128
  localPref: 100
```

2. Apply the configuration:

```terminal
$ oc apply -f bgpadvertisement2.yaml
```


# Exposing a service through a network VRF

You can expose a service through a virtual routing and forwarding (VRF) instance by associating a VRF on a network interface with a BGP peer.


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

By using a VRF on a network interface to expose a service through a BGP peer, you can segregate traffic to the service, configure independent routing decisions, and enable multi-tenancy support on a network interface.


[NOTE]
----
By establishing a BGP session through an interface belonging to a network VRF, MetalLB can advertise services through that interface and enable external traffic to reach the service through this interface. However, the network VRF routing table is different from the default VRF routing table used by OVN-Kubernetes. Therefore, the traffic cannot reach the OVN-Kubernetes network infrastructure.
To enable the traffic directed to the service to reach the OVN-Kubernetes network infrastructure, you must configure routing rules to define the next hops for network traffic. See the NodeNetworkConfigurationPolicy resource in "Managing symmetric routing with MetalLB" in the Additional resources section for more information.
----

These are the high-level steps to expose a service through a network VRF with a BGP peer:

1. Define a BGP peer and add a network VRF instance.
2. Specify an IP address pool for MetalLB.
3. Configure a BGP route advertisement for MetalLB to advertise a route using the specified IP address pool and the BGP peer associated with the VRF instance.
4. Deploy a service to test the configuration.

* You installed the OpenShift CLI (oc).
* You logged in as a user with cluster-admin privileges.
* You defined a NodeNetworkConfigurationPolicy to associate a Virtual Routing and Forwarding (VRF) instance with a network interface. For more information about completing this prerequisite, see the Additional resources section.
* You installed MetalLB on your cluster.

1. Create a BGPPeer custom resources (CR):
1. Create a file, such as frrviavrf.yaml, with content like the following example:

```yaml
apiVersion: metallb.io/v1beta2
kind: BGPPeer
metadata:
  name: frrviavrf
  namespace: metallb-system
spec:
  myASN: 100
  peerASN: 200
  peerAddress: 192.168.130.1
  vrf: ens4vrf 1
```

Specifies the network VRF instance to associate with the BGP peer. MetalLB can advertise services and make routing decisions based on the routing information in the VRF.

[NOTE]
----
You must configure this network VRF instance in a NodeNetworkConfigurationPolicy CR. See the Additional resources for more information.
----
2. Apply the configuration for the BGP peer by running the following command:

```terminal
$ oc apply -f frrviavrf.yaml
```

2. Create an IPAddressPool CR:
1. Create a file, such as first-pool.yaml, with content like the following example:

```yaml
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: first-pool
  namespace: metallb-system
spec:
  addresses:
  - 192.169.10.0/32
```

2. Apply the configuration for the IP address pool by running the following command:

```terminal
$ oc apply -f first-pool.yaml
```

3. Create a BGPAdvertisement CR:
1. Create a file, such as first-adv.yaml, with content like the following example:

```yaml
apiVersion: metallb.io/v1beta1
kind: BGPAdvertisement
metadata:
  name: first-adv
  namespace: metallb-system
spec:
  ipAddressPools:
    - first-pool
  peers:
    - frrviavrf 1
```

In this example, MetalLB advertises a range of IP addresses from the first-pool IP address pool to the frrviavrf BGP peer.
2. Apply the configuration for the BGP advertisement by running the following command:

```terminal
$ oc apply -f first-adv.yaml
```

4. Create a Namespace, Deployment, and Service CR:
1. Create a file, such as deploy-service.yaml, with content like the following example:

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: test
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  namespace: test
spec:
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      labels:
        app: server
    spec:
      containers:
      - name: server
        image: registry.redhat.io/ubi9/ubi
        ports:
        - name: http
          containerPort: 30100
        command: ["/bin/sh", "-c"]
        args: ["sleep INF"]
---
apiVersion: v1
kind: Service
metadata:
  name: server1
  namespace: test
spec:
  ports:
  - name: http
    port: 30100
    protocol: TCP
    targetPort: 30100
  selector:
    app: server
  type: LoadBalancer
```

2. Apply the configuration for the namespace, deployment, and service by running the following command:

```terminal
$ oc apply -f deploy-service.yaml
```


1. Identify a MetalLB speaker pod by running the following command:

```terminal
$ oc get -n metallb-system pods -l component=speaker
```

Example output

```terminal
NAME            READY   STATUS    RESTARTS   AGE
speaker-c6c5f   6/6     Running   0          69m
```

2. Verify that the state of the BGP session is Established in the speaker pod by running the following command, replacing the variables to match your configuration:

```terminal
$ oc exec -n metallb-system <speaker_pod> -c frr -- vtysh -c "show bgp vrf <vrf_name> neigh"
```

Example output

```terminal
BGP neighbor is 192.168.30.1, remote AS 200, local AS 100, external link
  BGP version 4, remote router ID 192.168.30.1, local router ID 192.168.30.71
  BGP state = Established, up for 04:20:09

...
```

3. Verify that the service is advertised correctly by running the following command:

```terminal
$ oc exec -n metallb-system <speaker_pod> -c frr -- vtysh -c "show bgp vrf <vrf_name> ipv4"
```


* About virtual routing and forwarding
* Example: Network interface with a VRF instance node network configuration policy
* Configuring an egress service
* Managing symmetric routing with MetalLB

# Example BGP peer configurations

## Example: Limit which nodes connect to a BGP peer

You can specify the node selectors field to control which nodes can connect to a BGP peer.


```yaml
apiVersion: metallb.io/v1beta2
kind: BGPPeer
metadata:
  name: doc-example-nodesel
  namespace: metallb-system
spec:
  peerAddress: 10.0.20.1
  peerASN: 64501
  myASN: 64500
  nodeSelectors:
  - matchExpressions:
    - key: kubernetes.io/hostname
      operator: In
      values: [compute-1.example.com, compute-2.example.com]
```


## Example: Specify a BFD profile for a BGP peer

You can specify a BFD profile to associate with BGP peers.
BFD compliments BGP by providing more rapid detection of communication failures between peers than BGP alone.


```yaml
apiVersion: metallb.io/v1beta2
kind: BGPPeer
metadata:
  name: doc-example-peer-bfd
  namespace: metallb-system
spec:
  peerAddress: 10.0.20.1
  peerASN: 64501
  myASN: 64500
  holdTime: "10s"
  bfdProfile: doc-example-bfd-profile-full
```



[NOTE]
----
Deleting the bidirectional forwarding detection (BFD) profile and removing the bfdProfile added to the border gateway protocol (BGP) peer resource does not disable the BFD. Instead, the BGP peer starts using the default BFD profile. To disable BFD from a BGP peer resource, delete the BGP peer configuration and recreate it without a BFD profile. For more information, see BZ#2050824.
----

## Example: Specify BGP peers for dual-stack networking

To support dual-stack networking, add one BGP peer custom resource for IPv4 and one BGP peer custom resource for IPv6.


```yaml
apiVersion: metallb.io/v1beta2
kind: BGPPeer
metadata:
  name: doc-example-dual-stack-ipv4
  namespace: metallb-system
spec:
  peerAddress: 10.0.20.1
  peerASN: 64500
  myASN: 64500
---
apiVersion: metallb.io/v1beta2
kind: BGPPeer
metadata:
  name: doc-example-dual-stack-ipv6
  namespace: metallb-system
spec:
  peerAddress: 2620:52:0:88::104
  peerASN: 64500
  myASN: 64500
```


## Example: Specify BGP peers for unnumbered BGP peering


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

To configure unnumbered BGP peering, specify the interface in the spec.interface field by using the following example configuration:


```yaml
apiVersion: metallb.io/v1beta2
kind: BGPPeer
metadata:
  name: peer-unnumber
  namespace: metallb-system
spec:
  myASN: 64512
  ASN: 645000
  interface: net0
```



[NOTE]
----
To use the interface field, you must establish a point-to-point, layer 2 connection between the two BGP peers.
You can use unnumbered BGP peering with IPv4, IPv6, or dual-stack, but you must enable IPv6 RAs (Router Advertisements).
Each interface is limited to one BGP connection.
If you use this field, you cannot specify a value in the spec.bgp.routers.neighbors.address field.
----

# Next steps

* Configuring services to use MetalLB