# Configuring ingress cluster traffic on AWS


Red Hat OpenShift Container Platform provides methods for communicating from outside the cluster with services running in the cluster. This method uses load balancers on AWS, specifically a Network Load Balancer (NLB) or a Classic Load Balancer (CLB). Both types of load balancers can forward the client's IP address to the node, but a CLB requires proxy protocol support, which Red Hat OpenShift Container Platform automatically enables.
There are two ways to configure an Ingress Controller to use an NLB:
1. By force replacing the Ingress Controller that is currently using a CLB. This deletes the IngressController object and an outage will occur while the new DNS records propagate and the NLB is being provisioned.
2. By editing an existing Ingress Controller that uses a CLB to use an NLB. This changes the load balancer without having to delete and recreate the IngressController object.
Both methods can be used to switch from an NLB to a CLB.
You can configure these load balancers on a new or existing AWS cluster.

# Configuring Classic Load Balancer timeouts on AWS

Red Hat OpenShift Container Platform provides a method for setting a custom timeout period for a specific route or Ingress Controller. Additionally, an AWS Classic Load Balancer (CLB) has its own timeout period with a default time of 60 seconds.

If the timeout period of the CLB is shorter than the route timeout or Ingress Controller timeout, the load balancer can prematurely terminate the connection. You can prevent this problem by increasing both the timeout period of the route and CLB.

## Configuring route timeouts

You can configure the default timeouts for an existing route when you have services in need of a low timeout, which is required for Service Level Availability (SLA) purposes, or a high timeout, for cases with a slow back end.


[IMPORTANT]
----
If you configured a user-managed external load balancer in front of your Red Hat OpenShift Container Platform cluster, ensure that the timeout value for the user-managed external load balancer is higher than the timeout value for the route. This configuration prevents network congestion issues over the network that your cluster uses.
----

* You need a deployed Ingress Controller on a running cluster.

1. Using the oc annotate command, add the timeout to the route:

```terminal
$ oc annotate route <route_name> \
    --overwrite haproxy.router.openshift.io/timeout=<timeout><time_unit> 1
```

Supported time units are microseconds (us), milliseconds (ms), seconds (s), minutes (m), hours (h), or days (d).

The following example sets a timeout of two seconds on a route named myroute:

```terminal
$ oc annotate route myroute --overwrite haproxy.router.openshift.io/timeout=2s
```


## Configuring Classic Load Balancer timeouts

You can configure the default timeouts for a Classic Load Balancer (CLB) to extend idle connections.

* You must have a deployed Ingress Controller on a running cluster.

1. Set an AWS connection idle timeout of five minutes for the default ingresscontroller by running the following command:

```terminal
$ oc -n openshift-ingress-operator patch ingresscontroller/default \
    --type=merge --patch='{"spec":{"endpointPublishingStrategy": \
    {"type":"LoadBalancerService", "loadBalancer": \
    {"scope":"External", "providerParameters":{"type":"AWS", "aws": \
    {"type":"Classic", "classicLoadBalancer": \
    {"connectionIdleTimeout":"5m"}}}}}}}'
```

2. Optional: Restore the default value of the timeout by running the following command:

```terminal
$ oc -n openshift-ingress-operator patch ingresscontroller/default \
    --type=merge --patch='{"spec":{"endpointPublishingStrategy": \
    {"loadBalancer":{"providerParameters":{"aws":{"classicLoadBalancer": \
    {"connectionIdleTimeout":null}}}}}}}'
```



[NOTE]
----
You must specify the scope field when you change the connection timeout value unless the current scope is already set. When you set the scope field, you do not need to do so again if you restore the default timeout value.
----

# Configuring ingress cluster traffic on AWS using a Network Load Balancer

Red Hat OpenShift Container Platform provides methods for communicating from outside the cluster with services that run in the cluster. One such method uses a Network Load Balancer (NLB). You can configure an NLB on a new or existing AWS cluster.

## Switching the Ingress Controller from using a Classic Load Balancer to a Network Load Balancer

You can switch the Ingress Controller that is using a Classic Load Balancer (CLB) to one that uses a Network Load Balancer (NLB) on AWS.

Switching between these load balancers will not delete the IngressController object.


[WARNING]
----
This procedure might cause the following issues:
* An outage that can last several minutes due to new DNS records propagation, new load balancers provisioning, and other factors. IP addresses and canonical names of the Ingress Controller load balancer might change after applying this procedure.
* Leaked load balancer resources due to a change in the annotation of the service.
----

1. Modify the existing Ingress Controller that you want to switch to using an NLB. This example assumes that your default Ingress Controller has an External scope and no other customizations:
Example ingresscontroller.yaml file

```yaml
apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  creationTimestamp: null
  name: default
  namespace: openshift-ingress-operator
spec:
  endpointPublishingStrategy:
    loadBalancer:
      scope: External
      providerParameters:
        type: AWS
        aws:
          type: NLB
    type: LoadBalancerService
```


[NOTE]
----
If you do not specify a value for the spec.endpointPublishingStrategy.loadBalancer.providerParameters.aws.type field, the Ingress Controller uses the spec.loadBalancer.platform.aws.type value from the cluster Ingress configuration that was set during installation.
----

[TIP]
----
If your Ingress Controller has other customizations that you want to update, such as changing the domain, consider force replacing the Ingress Controller definition file instead.
----
2. Apply the changes to the Ingress Controller YAML file by running the command:

```terminal
$ oc apply -f ingresscontroller.yaml
```


Expect several minutes of outages while the Ingress Controller updates.

## Switching the Ingress Controller from using a Network Load Balancer to a Classic Load Balancer

You can switch the Ingress Controller that is using a Network Load Balancer (NLB) to one that uses a Classic Load Balancer (CLB) on AWS.

Switching between these load balancers will not delete the IngressController object.


[WARNING]
----
This procedure might cause an outage that can last several minutes due to new DNS records propagation, new load balancers provisioning, and other factors. IP addresses and canonical names of the Ingress Controller load balancer might change after applying this procedure.
----

1. Modify the existing Ingress Controller that you want to switch to using a CLB. This example assumes that your default Ingress Controller has an External scope and no other customizations:
Example ingresscontroller.yaml file

```yaml
apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  creationTimestamp: null
  name: default
  namespace: openshift-ingress-operator
spec:
  endpointPublishingStrategy:
    loadBalancer:
      scope: External
      providerParameters:
        type: AWS
        aws:
          type: Classic
    type: LoadBalancerService
```


[NOTE]
----
If you do not specify a value for the spec.endpointPublishingStrategy.loadBalancer.providerParameters.aws.type field, the Ingress Controller uses the spec.loadBalancer.platform.aws.type value from the cluster Ingress configuration that was set during installation.
----

[TIP]
----
If your Ingress Controller has other customizations that you want to update, such as changing the domain, consider force replacing the Ingress Controller definition file instead.
----
2. Apply the changes to the Ingress Controller YAML file by running the command:

```terminal
$ oc apply -f ingresscontroller.yaml
```


Expect several minutes of outages while the Ingress Controller updates.

## Replacing Ingress Controller Classic Load Balancer with Network Load Balancer

You can replace an Ingress Controller that is using a Classic Load Balancer (CLB) with one that uses a Network Load Balancer (NLB) on AWS.


[WARNING]
----
This procedure might cause the following issues:
* An outage that can last several minutes due to new DNS records propagation, new load balancers provisioning, and other factors. IP addresses and canonical names of the Ingress Controller load balancer might change after applying this procedure.
* Leaked load balancer resources due to a change in the annotation of the service.
----

1. Create a file with a new default Ingress Controller. The following example assumes that your default Ingress Controller has an External scope and no other customizations:
Example ingresscontroller.yml file

```yaml
apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  creationTimestamp: null
  name: default
  namespace: openshift-ingress-operator
spec:
  endpointPublishingStrategy:
    loadBalancer:
      scope: External
      providerParameters:
        type: AWS
        aws:
          type: NLB
    type: LoadBalancerService
```


If your default Ingress Controller has other customizations, ensure that you modify the file accordingly.

[TIP]
----
If your Ingress Controller has no other customizations and you are only updating the load balancer type, consider following the procedure detailed in "Switching the Ingress Controller from using a Classic Load Balancer to a Network Load Balancer".
----
2. Force replace the Ingress Controller YAML file:

```terminal
$ oc replace --force --wait -f ingresscontroller.yml
```


Wait until the Ingress Controller is replaced. Expect several of minutes of outages.

## Configuring an Ingress Controller Network Load Balancer on an existing AWS cluster

You can create an Ingress Controller backed by an AWS Network Load Balancer (NLB) on an existing cluster.

* You must have an installed AWS cluster.
* PlatformStatus of the infrastructure resource must be AWS.
* To verify that the PlatformStatus is AWS, run:

```terminal
$ oc get infrastructure/cluster -o jsonpath='{.status.platformStatus.type}'
AWS
```


Create an Ingress Controller backed by an AWS NLB on an existing cluster.

1. Create the Ingress Controller manifest:

```terminal
 $ cat ingresscontroller-aws-nlb.yaml
```

Example output

```yaml
apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  name: $my_ingress_controller1
  namespace: openshift-ingress-operator
spec:
  domain: $my_unique_ingress_domain2
  endpointPublishingStrategy:
    type: LoadBalancerService
    loadBalancer:
      scope: External3
      providerParameters:
        type: AWS
        aws:
          type: NLB
```

Replace $my_ingress_controller with a unique name for the Ingress Controller.
Replace $my_unique_ingress_domain with a domain name that is unique among all Ingress Controllers in the cluster. This variable must be a subdomain of the DNS name <clustername>.<domain>.
You can replace External with Internal to use an internal NLB.
2. Create the resource in the cluster:

```terminal
$ oc create -f ingresscontroller-aws-nlb.yaml
```



[IMPORTANT]
----
Before you can configure an Ingress Controller NLB on a new AWS cluster, you must complete the Creating the installation configuration file procedure.
----

## Configuring an Ingress Controller Network Load Balancer on a new AWS cluster

You can create an Ingress Controller backed by an AWS Network Load Balancer (NLB) on a new cluster.

* Create the install-config.yaml file and complete any modifications to it.

Create an Ingress Controller backed by an AWS NLB on a new cluster.

1. Change to the directory that contains the installation program and create the manifests:

```terminal
$ ./openshift-install create manifests --dir <installation_directory> 1
```

For <installation_directory>, specify the name of the directory that
contains the install-config.yaml file for your cluster.
2. Create a file that is named cluster-ingress-default-ingresscontroller.yaml in the <installation_directory>/manifests/ directory:

```terminal
$ touch <installation_directory>/manifests/cluster-ingress-default-ingresscontroller.yaml 1
```

For <installation_directory>, specify the directory name that contains the
manifests/ directory for your cluster.

After creating the file, several network configuration files are in the
manifests/ directory, as shown:

```terminal
$ ls <installation_directory>/manifests/cluster-ingress-default-ingresscontroller.yaml
```

Example output

```terminal
cluster-ingress-default-ingresscontroller.yaml
```

3. Open the cluster-ingress-default-ingresscontroller.yaml file in an editor and enter a custom resource (CR) that describes the Operator configuration you want:

```yaml
apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  creationTimestamp: null
  name: default
  namespace: openshift-ingress-operator
spec:
  endpointPublishingStrategy:
    loadBalancer:
      scope: External
      providerParameters:
        type: AWS
        aws:
          type: NLB
    type: LoadBalancerService
```

4. Save the cluster-ingress-default-ingresscontroller.yaml file and quit the text editor.
5. Optional: Back up the manifests/cluster-ingress-default-ingresscontroller.yaml file. The installation program deletes the manifests/ directory when creating the cluster.

## Choosing subnets while creating a LoadBalancerService Ingress Controller

You can manually specify load balancer subnets for Ingress Controllers in an existing cluster. By default, the load balancer subnets are automatically discovered by AWS, but specifying them in the Ingress Controller overrides this, allowing for manual control.

* You must have an installed AWS cluster.
* You must know the names or IDs of the subnets to which you intend to map your IngressController.

1. Create a custom resource (CR) file.

Create a YAML file (e.g., sample-ingress.yaml) with the following content:

```yaml
apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  namespace: openshift-ingress-operator
  name: <name>
spec:
  domain: <domain>
  endpointPublishingStrategy:
    type: LoadBalancerService
    loadBalancer:
      scope: External
  dnsManagementPolicy: Managed
```

2. Create a custom resource (CR) file.

Add subnets to your YAML file:

```yaml
apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  name:  <name> 1
  namespace: openshift-ingress-operator
spec:
  domain: <domain> 2
  endpointPublishingStrategy:
    type: LoadBalancerService
    loadBalancer:
      scope: External
      providerParameters:
        type: AWS
        aws:
          type: Classic
          classicLoadBalancer: 3
            subnets:
              ids: 4
              - <subnet> 5
              - <subnet>
              - <subnet>
dnsManagementPolicy: Managed
```

Replace <name> with a name for the IngressController.
Replace <domain> with the DNS name serviced by the IngressController.
You can also use the networkLoadBalancer field if using an NLB.
You can optionally specify a subnet by name using the names field instead of specifying the subnet by ID.
Specify subnet IDs (or names if you using names).

[IMPORTANT]
----
You can specify a maximum of one subnet per availability zone. Only provide public subnets for external Ingress Controllers and private subnets for internal Ingress Controllers.
----
3. Apply the CR file.
1. Save the file and apply it using the OpenShift CLI (`oc`).

```terminal
$  oc apply -f sample-ingress.yaml
```

2. Confirm the load balancer was provisioned successfully by checking the IngressController conditions.

```terminal
$ oc get ingresscontroller -n openshift-ingress-operator <name> -o jsonpath="{.status.conditions}" | yq -PC
```


## Updating the subnets on an existing Ingress Controller

You can update an IngressController with manually specified load balancer subnets in Red Hat OpenShift Container Platform to avoid any disruptions, to maintain the stability of your services, and to ensure that your network configuration aligns with your specific requirements. The following procedures show you how to select and apply new subnets, verify the configuration changes, and confirm successful load balancer provisioning.


[WARNING]
----
This procedure may cause an outage that can last several minutes due to new DNS records propagation, new load balancers provisioning, and other factors. IP addresses and canonical names of the Ingress Controller load balancer might change after applying this procedure.
----

To update an IngressController with manually specified load balancer subnets, you can follow these steps:

1. Modify the existing IngressController to update to the new subnets.

```yaml
apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  name:  <name> 1
  namespace: openshift-ingress-operator
spec:
  domain: <domain> 2
  endpointPublishingStrategy:
    type: LoadBalancerService
    loadBalancer:
      scope: External
      providerParameters:
        type: AWS
        aws:
          type: Classic 3
          classicLoadBalancer: 4
            subnets:
              ids: 5
              - <updated_subnet> 6
              - <updated_subnet>
              - <updated_subnet>
```

Replace <name> with a name for the IngressController.
Replace <domain> with the DNS name serviced by the IngressController.
Specify updated subnet IDs (or names if you using names).
You can also use the networkLoadBalancer field if using an NLB.
You can optionally specify a subnet by name using the names field instead of specifying the subnet by ID.
Update subnet IDs (or names if you are using names).

[IMPORTANT]
----
You can specify a maximum of one subnet per availability zone. Only provide public subnets for external Ingress Controllers and private subnets for internal Ingress Controllers.
----
2. Examine the Progressing condition on the IngressController for instructions on how to apply the subnet updates by running the following command:

```terminal
$ oc get ingresscontroller -n openshift-ingress-operator subnets -o jsonpath="{.status.conditions[?(@.type==\"Progressing\")]}" | yq -PC
```

Example output

```terminal
lastTransitionTime: "2024-11-25T20:19:31Z"
message: 'One or more status conditions indicate progressing: LoadBalancerProgressing=True (OperandsProgressing: One or more managed resources are progressing: The IngressController subnets were changed from [...] to [...].  To effectuate this change, you must delete the service: `oc -n openshift-ingress delete svc/router-<name>`; the service load-balancer will then be deprovisioned and a new one created. This will most likely cause the new load-balancer to have a different host name and IP address and cause disruption. To return to the previous state, you can revert the change to the IngressController: [...]'
reason: IngressControllerProgressing
status: "True"
type: Progressing
```

3. To apply the update, delete the service associated with the Ingress controller by running the following command:


```terminal
$ oc -n openshift-ingress delete svc/router-<name>
```


* To confirm that the load balancer was provisioned successfully, check the IngressController conditions by running the following command:

```terminal
$ oc get ingresscontroller -n openshift-ingress-operator <name> -o jsonpath="{.status.conditions}" | yq -PC
```


## Configuring AWS Elastic IP (EIP) addresses for a Network Load Balancer (NLB)

You can specify static IPs, otherwise known as elastic IPs, for your network load balancer (NLB) in the Ingress Controller. This is useful in situations where you want to configure appropriate firewall rules for your cluster network.

* You must have an installed AWS cluster.
* You must know the names or IDs of the subnets to which you intend to map your IngressController.

1. Create a YAML file that contains the following content:
sample-ingress.yaml

```yaml
apiVersion: operator.openshift.io/v1
kind: IngressController
metadata:
  namespace: openshift-ingress-operator
  name: <name> 1
spec:
  domain: <domain> 2
  endpointPublishingStrategy:
    loadBalancer:
      scope: External 3
      type: LoadBalancerService
      providerParameters:
        type: AWS
        aws:
          type: NLB
          networkLoadBalancer:
            subnets: 4
              ids:
              - <subnet_ID>
              names:
              - <subnet_A>
              - <subnet_B>
            eipAllocations: 5
            - <eipalloc_A>
            - <eipalloc_B>
            - <eipalloc_C>
```

Replace the <name> placeholder with a name for the Ingress Controller.
Replace the <domain> placeholder with the DNS name serviced by the Ingress Controller.
The scope must be set to the value External and be Internet-facing in order to allocate EIPs.
Specify the IDs and names for your subnets. The total number of IDs and names must be equal to your allocated EIPs.
Specify the EIP addresses.

[IMPORTANT]
----
You can specify a maximum of one subnet per availability zone. Only provide public subnets for external Ingress Controllers. You can associate one EIP address per subnet.
----
2. Save and apply the CR file by entering the following command:

```terminal
$  oc apply -f sample-ingress.yaml
```


1. Confirm the load balancer was provisioned successfully by checking the IngressController conditions by running the following command:

```terminal
$ oc get ingresscontroller -n openshift-ingress-operator <name> -o jsonpath="{.status.conditions}" | yq -PC
```


# Additional resources

* Installing a cluster on AWS with network customizations.
* For more information on support for NLBs, see Network Load Balancer support on AWS.
* For more information on proxy protocol support for CLBs, see Configure proxy protocol support for your Classic Load Balancer