# Dynamic plugin reference


You can add extensions that allow you to customize your plugin. Those extensions are then loaded to the console at run-time.

# Dynamic plugin extension types

## console.action/filter

ActionFilter can be used to filter an action.



## console.action/group

ActionGroup contributes an action group that can also be a submenu.



## console.action/provider

ActionProvider contributes a hook that returns list of actions for specific context.



## console.action/resource-provider

ResourceActionProvider contributes a hook that returns list of actions for specific resource model.



## console.alert-action

This extension can be used to trigger a specific action when a specific Prometheus alert is observed by the Console based on its rule.name value.



## console.catalog/item-filter

This extension can be used for plugins to contribute a handler that can filter specific catalog items. For example, the plugin can contribute a filter that filters helm charts from specific provider.



## console.catalog/item-metadata

This extension can be used to contribute a provider that adds extra metadata to specific catalog items.



## console.catalog/item-provider

This extension allows plugins to contribute a provider for a catalog item type. For example, a Helm Plugin can add a provider that fetches all the Helm Charts. This extension can also be used by other plugins to add more items to a specific catalog item type.



## console.catalog/item-type

This extension allows plugins to contribute a new type of catalog item. For example, a Helm plugin can define a new catalog item type as HelmCharts that it wants to contribute to the Developer Catalog.



## console.catalog/item-type-metadata

This extension allows plugins to contribute extra metadata like custom filters or groupings for any catalog item type. For example, a plugin can attach a custom filter for HelmCharts that can filter based on chart provider.



## console.cluster-overview/inventory-item

Adds a new inventory item into cluster overview page.



## console.cluster-overview/multiline-utilization-item

Adds a new cluster overview multi-line utilization item.



## console.cluster-overview/utilization-item

Adds a new cluster overview utilization item.



## console.context-provider

Adds a new React context provider to the web console application root.



## console.create-project-modal

This extension can be used to pass a component that will be rendered in place of the standard create project modal.



## console.dashboards/card

Adds a new dashboard card.



## console.dashboards/custom/overview/detail/item

Adds an item to the Details card of Overview Dashboard.



## console.dashboards/overview/activity/resource

Adds an activity to the Activity Card of Overview Dashboard where the triggering of activity is based on watching a Kubernetes resource.



## console.dashboards/overview/health/operator

Adds a health subsystem to the status card of the Overview dashboard, where the source of status is a Kubernetes REST API.



## console.dashboards/overview/health/prometheus

Adds a health subsystem to the status card of Overview dashboard where the source of status is Prometheus.



## console.dashboards/overview/health/resource

Adds a health subsystem to the status card of Overview dashboard where the source of status is a Kubernetes Resource.



## console.dashboards/overview/health/url

Adds a health subsystem to the status card of Overview dashboard where the source of status is a Kubernetes REST API.



## console.dashboards/overview/inventory/item

Adds a resource tile to the overview inventory card.



## console.dashboards/overview/inventory/item/group

Adds an inventory status group.



## console.dashboards/overview/inventory/item/replacement

Replaces an overview inventory card.



## console.dashboards/overview/prometheus/activity/resource

Adds an activity to the Activity Card of Prometheus Overview Dashboard where the triggering of activity is based on watching a Kubernetes resource.



## console.dashboards/project/overview/item

Adds a resource tile to the project overview inventory card.



## console.dashboards/tab

Adds a new dashboard tab, placed after the Overview tab.



## console.file-upload

This extension can be used to provide a handler for the file drop action on specific file extensions.



## console.flag

Gives full control over the web console feature flags.



## console.flag/hookProvider

Gives full control over the web console feature flags with hook handlers.



## console.flag/model

Adds a new web console feature flag driven by the presence of a CustomResourceDefinition (CRD) object on the cluster.



## console.global-config

This extension identifies a resource used to manage the configuration of the cluster. A link to the resource will be added to the Administration &#8594; Cluster Settings &#8594; Configuration page.



## console.model-metadata

Customize the display of models by overriding values retrieved and generated through API discovery.



## console.navigation/href

This extension can be used to contribute a navigation item that points to a specific link in the UI.



## console.navigation/resource-cluster

This extension can be used to contribute a navigation item that points to a cluster resource details page. The K8s model of that resource can be used to define the navigation item.



## console.navigation/resource-ns

This extension can be used to contribute a navigation item that points to a namespaced resource details page. The K8s model of that resource can be used to define the navigation item.



## console.navigation/section

This extension can be used to define a new section of navigation items in the navigation tab.



## console.navigation/separator

This extension can be used to add a separator between navigation items in the navigation.



## console.page/resource/details



## console.page/resource/list

Adds new resource list page to Console router.



## console.page/route

Adds a new page to the web console router. See React Router.



## console.page/route/standalone

Adds a new standalone page, rendered outside the common page layout, to the web console router. See React Router.



## console.perspective

This extension contributes a new perspective to the console, which enables customization of the navigation menu.



## console.project-overview/inventory-item

Adds a new inventory item into the Project Overview page.



## console.project-overview/utilization-item

Adds a new project overview utilization item.



## console.pvc/alert

This extension can be used to contribute custom alerts on the PVC details page.



## console.pvc/create-prop

This extension can be used to specify additional properties that will be used when creating PVC resources on the PVC list page.



## console.pvc/delete

This extension allows hooking into deleting PVC resources. It can provide an alert with additional information and custom PVC delete logic.



## console.pvc/status



## console.redux-reducer

Adds new reducer to Console Redux store which operates on plugins.<scope> substate.



## console.resource/create

This extension allows plugins to provide a custom component (i.e., wizard or form) for specific resources, which will be rendered, when users try to create a new resource instance.



## console.resource/details-item

Adds a new details item to the default resource summary on the details page.



## console.storage-class/provisioner

Adds a new storage class provisioner as an option during storage class creation.



## console.storage-provider

This extension can be used to contribute a new storage provider to select, when attaching storage and a provider specific component.



## console.tab

Adds a tab to a horizontal nav matching the contextId.



## console.tab/horizontalNav

This extension can be used to add a tab on the resource details page.



## console.telemetry/listener

This component can be used to register a listener function receiving telemetry events. These events include user identification, page navigation, and other application specific events. The listener may use this data for reporting and analytics purposes.



## console.topology/adapter/build

BuildAdapter contributes an adapter to adapt element to data that can be used by the Build component.



## console.topology/adapter/network

NetworkAdapater contributes an adapter to adapt element to data that can be used by the Networking component.



## console.topology/adapter/pod

PodAdapter contributes an adapter to adapt element to data that can be used by the Pod component.



## console.topology/component/factory

Getter for a ViewComponentFactory.



## console.topology/create/connector

Getter for the create connector function.



## console.topology/data/factory

Topology Data Model Factory Extension



## console.topology/decorator/provider

Topology Decorator Provider Extension



## console.topology/details/resource-alert

DetailsResourceAlert contributes an alert for specific topology context or graph element.



## console.topology/details/resource-link

DetailsResourceLink contributes a link for specific topology context or graph element.



## console.topology/details/tab

DetailsTab contributes a tab for the topology details panel.



## console.topology/details/tab-section

DetailsTabSection contributes a section for a specific tab in the topology details panel.



## console.topology/display/filters

Topology Display Filters Extension



## console.topology/relationship/provider

Topology relationship provider connector extension



## console.user-preference/group

This extension can be used to add a group on the console user-preferences page. It will appear as a vertical tab option on the console user-preferences page.



## console.user-preference/item

This extension can be used to add an item to the user preferences group on the console user preferences page.



## console.yaml-template

YAML templates for editing resources via the yaml editor.



## dev-console.add/action

This extension allows plugins to contribute an add action item to the add page of developer perspective. For example, a Serverless plugin can add a new action item for adding serverless functions to the add page of developer console.



## dev-console.add/action-group

This extension allows plugins to contibute a group in the add page of developer console. Groups can be referenced by actions, which will be grouped together in the add action page based on their extension definition. For example, a Serverless plugin can contribute a Serverless group and together with multiple add actions.



## dev-console.import/environment

This extension can be used to specify extra build environment variable fields under the builder image selector in the developer console git import form. When set, the fields will override environment variables of the same name in the build section.



## console.dashboards/overview/detail/item

Deprecated: use CustomOverviewDetailItem type instead.



## console.page/resource/tab

Deprecated: Use console.tab/horizontalNav instead. Adds a new resource tab page to Console router.



# Dynamic plugin API

## useActivePerspective

Hook that provides the currently active perspective and a callback for setting the active perspective. It returns a tuple containing the current active perspective and setter callback.


```tsx
const Component: React.FC = (props) => {
   const [activePerspective, setActivePerspective] = useActivePerspective();
   return <select
     value={activePerspective}
     onChange={(e) => setActivePerspective(e.target.value)}
   >
     {
       // ...perspective options
     }
   </select>
}
```


## GreenCheckCircleIcon

Component for displaying a green check mark circle icon.


```tsx
<GreenCheckCircleIcon title="Healthy" />
```




## RedExclamationCircleIcon

Component for displaying a red exclamation mark circle icon.


```tsx
<RedExclamationCircleIcon title="Failed" />
```




## YellowExclamationTriangleIcon

Component for displaying a yellow triangle exclamation icon.


```tsx
<YellowExclamationTriangleIcon title="Warning" />
```




## BlueInfoCircleIcon

Component for displaying a blue info circle icon.


```tsx
<BlueInfoCircleIcon title="Info" />
```




## ErrorStatus

Component for displaying an error status popover.


```tsx
<ErrorStatus title={errorMsg} />
```




## InfoStatus

Component for displaying an information status popover.


```tsx
<InfoStatus title={infoMsg} />
```




## ProgressStatus

Component for displaying a progressing status popover.


```tsx
<ProgressStatus title={progressMsg} />
```




## SuccessStatus

Component for displaying a success status popover.


```tsx
<SuccessStatus title={successMsg} />
```




## checkAccess

Provides information about user access to a given resource. It returns an object with resource access information.



## useAccessReview

Hook that provides information about user access to a given resource. It returns an array with isAllowed and loading values.



## useResolvedExtensions

React hook for consuming Console extensions with resolved CodeRef properties. This hook accepts the same argument(s) as useExtensions hook and returns an adapted list of extension instances, resolving all code references within each extension&#8217;s properties.

Initially, the hook returns an empty array. After the resolution is complete, the React component is re-rendered with the hook returning an adapted list of extensions. When the list of matching extensions changes, the resolution is restarted. The hook continues to return the previous result until the resolution completes.

The hook&#8217;s result elements are guaranteed to be referentially stable across re-renders. It returns a tuple containing a list of adapted extension instances with resolved code references, a boolean flag indicating whether the resolution is complete, and a list of errors detected during the resolution.


```ts
const [navItemExtensions, navItemsResolved] = useResolvedExtensions<NavItem>(isNavItem);
// process adapted extensions and render your component
```




## HorizontalNav

A component that creates a Navigation bar for a page. Routing is handled as part of the component. console.tab/horizontalNav can be used to add additional content to any horizontal navigation.


```jsx
const HomePage: React.FC = (props) => {
    const page = {
      href: 'home',
      name: 'Home',
      component: () => <>Home</>
    }
    return <HorizontalNav match={props.match} pages={[page]} />
}
```




## TableData

Component for displaying table data within a table row.


```jsx
const PodRow: React.FC<RowProps<K8sResourceCommon>> = ({ obj, activeColumnIDs }) => {
  return (
    <>
      <TableData id={columns[0].id} activeColumnIDs={activeColumnIDs}>
        <ResourceLink kind="Pod" name={obj.metadata.name} namespace={obj.metadata.namespace} />
      </TableData>
      <TableData id={columns[1].id} activeColumnIDs={activeColumnIDs}>
        <ResourceLink kind="Namespace" name={obj.metadata.namespace} />
      </TableData>
    </>
  );
};
```




## useActiveColumns

A hook that provides a list of user-selected active TableColumns.


```text
// See implementation for more details on TableColumn type
  const [activeColumns, userSettingsLoaded] = useActiveColumns({
    columns,
    showNamespaceOverride: false,
    columnManagementID,
  });
  return userSettingsAreLoaded ? <VirtualizedTable columns={activeColumns} {...otherProps} /> : null
```




A tuple containing the current user selected active columns (a subset of options.columns), and a boolean flag indicating whether user settings have been loaded.

## ListPageHeader

Component for generating a page header.


```jsx
const exampleList: React.FC = () => {
  return (
    <>
      <ListPageHeader title="Example List Page"/>
    </>
  );
};
```




## ListPageCreate

Component for adding a create button for a specific resource kind that automatically generates a link to the create YAML for this resource.


```jsx
const exampleList: React.FC<MyProps> = () => {
  return (
    <>
      <ListPageHeader title="Example Pod List Page"/>
        <ListPageCreate groupVersionKind="Pod">Create Pod</ListPageCreate>
      </ListPageHeader>
    </>
  );
};
```




## ListPageCreateLink

Component for creating a stylized link.


```jsx
const exampleList: React.FC<MyProps> = () => {
 return (
  <>
   <ListPageHeader title="Example Pod List Page"/>
      <ListPageCreateLink to={'/link/to/my/page'}>Create Item</ListPageCreateLink>
   </ListPageHeader>
  </>
 );
};
```




## ListPageCreateButton

Component for creating button.


```jsx
const exampleList: React.FC<MyProps> = () => {
  return (
    <>
      <ListPageHeader title="Example Pod List Page"/>
        <ListPageCreateButton createAccessReview={access}>Create Pod</ListPageCreateButton>
      </ListPageHeader>
    </>
  );
};
```




## ListPageCreateDropdown

Component for creating a dropdown wrapped with permissions check.


```jsx
const exampleList: React.FC<MyProps> = () => {
  const items = {
    SAVE: 'Save',
    DELETE: 'Delete',
  }
  return (
    <>
     <ListPageHeader title="Example Pod List Page"/>
       <ListPageCreateDropdown createAccessReview={access} items={items}>Actions</ListPageCreateDropdown>
     </ListPageHeader>
    </>
  );
};
```




## ResourceLink

Component that creates a link to a specific resource type with an icon badge.


```tsx
  <ResourceLink
      kind="Pod"
      name="testPod"
      title={metadata.uid}
  />
```




## ResourceIcon

Component that creates an icon badge for a specific resource type.


```tsx
<ResourceIcon kind="Pod"/>
```




## useK8sModel

Hook that retrieves the k8s model for provided K8sGroupVersionKind from redux. It returns an array with the first item as k8s model and second item as inFlight status.


```ts
const Component: React.FC = () => {
  const [model, inFlight] = useK8sModel({ group: 'app'; version: 'v1'; kind: 'Deployment' });
  return ...
}
```




## useK8sModels

Hook that retrieves all current k8s models from redux. It returns an array with the first item as the list of k8s model and second item as inFlight status.


```ts
const Component: React.FC = () => {
  const [models, inFlight] = UseK8sModels();
  return ...
}
```


## useK8sWatchResource

Hook that retrieves the k8s resource along with status for loaded and error. It returns an array with first item as resource(s), second item as loaded status and third item as error state if any.


```ts
const Component: React.FC = () => {
  const watchRes = {
        ...
      }
  const [data, loaded, error] = useK8sWatchResource(watchRes)
  return ...
}
```




## useK8sWatchResources

Hook that retrieves the k8s resources along with their respective status for loaded and error. It returns a map where keys are as provided in initResouces and value has three properties data, loaded and error.


```tsx
const Component: React.FC = () => {
  const watchResources = {
        'deployment': {...},
        'pod': {...}
        ...
      }
  const {deployment, pod} = useK8sWatchResources(watchResources)
  return ...
}
```




## consoleFetch

A custom wrapper around fetch that adds console specific headers and allows for retries and timeouts.It also validates the response status code and throws appropriate error or logs out the user if required. It returns a promise that resolves to the response.



## consoleFetchJSON

A custom wrapper around fetch that adds console specific headers and allows for retries and timeouts. It also validates the response status code and throws appropriate error or logs out the user if required. It returns the response as a JSON object. Uses consoleFetch internally. It returns a promise that resolves to the response as JSON object.



## consoleFetchText

A custom wrapper around fetch that adds console specific headers and allows for retries and timeouts. It also validates the response status code and throws appropriate error or logs out the user if required. It returns the response as a text. Uses consoleFetch internally. It returns a promise that resolves to the response as text.



## getConsoleRequestHeaders

A function that creates impersonation and multicluster related headers for API requests using current redux state. It returns an object containing the appropriate impersonation and clustr requst headers, based on redux state.



## k8sGetResource

It fetches a resource from the cluster, based on the provided options. If the name is provided it returns one resource else it returns all the resources matching the model. It returns a promise that resolves to the response as JSON object with a resource if the name is providedelse it returns all the resources matching the
model. In case of failure, the promise gets rejected with HTTP error response.



## k8sCreateResource

It creates a resource in the cluster, based on the provided options. It returns a promise that resolves to the response of the resource created. In case of failure promise gets rejected with HTTP error response.



## k8sUpdateResource

It updates the entire resource in the cluster, based on providedoptions. When a client needs to replace an existing resource entirely, they can use k8sUpdate. Alternatively can use k8sPatch to perform the partial update. It returns a promise that resolves to the response of the resource updated. In case of failure promise gets rejected with HTTP error response.



## k8sPatchResource

It patches any resource in the cluster, based on provided options. When a client needs to perform the partial update, they can use
k8sPatch. Alternatively can use k8sUpdate to replace an existing resource entirely. See Data Tracker for more. It returns a promise that resolves to the response of the resource patched. In case of failure promise gets rejected with HTTP error response.



## k8sDeleteResource

It deletes resources from the cluster, based on the provided model, resource. The garbage collection works based on Foreground|Background can be configured with propagationPolicy property in provided model or passed in json. It returns a promise that resolves to the response of kind Status. In case of failure promise gets rejected with HTTP error response.

kind: 'DeleteOptions', apiVersion: 'v1', propagationPolicy



## k8sListResource

Lists the resources as an array in the cluster, based on provided options. It returns a promise that resolves to the response.



## k8sListResourceItems

Same interface as k8sListResource but returns the sub items. It returns the apiVersion for the model, i.e., group/version.

## getAPIVersionForModel

Provides apiVersion for a k8s model.



## getGroupVersionKindForResource

Provides a group, version, and kind for a resource. It returns the group, version, kind for the provided resource. If the resource does not have an API group, group "core" is returned. If the resource has an invalid apiVersion, then it throws an Error.



## getGroupVersionKindForModel

Provides a group, version, and kind for a k8s model. This returns the group, version, kind for the provided model. If the model does not have an apiGroup, group "core" is returned.



## StatusPopupSection

Component that shows the status in a popup window. Helpful component for building console.dashboards/overview/health/resource extensions.


```tsx
  <StatusPopupSection
    firstColumn={
      <>
        <span>{title}</span>
        <span className="text-secondary">
          My Example Item
        </span>
      </>
    }
    secondColumn='Status'
  >
```




## StatusPopupItem

Status element used in status popup; used in StatusPopupSection.


```text
<StatusPopupSection
   firstColumn='Example'
   secondColumn='Status'
>
   <StatusPopupItem icon={healthStateMapping[MCGMetrics.state]?.icon}>
      Complete
   </StatusPopupItem>
   <StatusPopupItem icon={healthStateMapping[RGWMetrics.state]?.icon}>
       Pending
   </StatusPopupItem>
</StatusPopupSection>
```




## Overview

Creates a wrapper component for a dashboard.


```text
    <Overview>
      <OverviewGrid mainCards={mainCards} leftCards={leftCards} rightCards={rightCards} />
    </Overview>
```




## OverviewGrid

Creates a grid of card elements for a dashboard; used within Overview.


```text
    <Overview>
      <OverviewGrid mainCards={mainCards} leftCards={leftCards} rightCards={rightCards} />
    </Overview>
```




## InventoryItem

Creates an inventory card item.


```tsx
  return (
    <InventoryItem>
      <InventoryItemTitle>{title}</InventoryItemTitle>
      <InventoryItemBody error={loadError}>
        {loaded && <InventoryItemStatus count={workerNodes.length} icon={<MonitoringIcon />} />}
      </InventoryItemBody>
    </InventoryItem>
  )
```




## InventoryItemTitle

Creates a title for an inventory card item; used within InventoryItem.


```tsx
 return (
   <InventoryItem>
     <InventoryItemTitle>{title}</InventoryItemTitle>
     <InventoryItemBody error={loadError}>
       {loaded && <InventoryItemStatus count={workerNodes.length} icon={<MonitoringIcon />} />}
     </InventoryItemBody>
   </InventoryItem>
 )
```




## InventoryItemBody

Creates the body of an inventory card; used within InventoryCard and can be used with InventoryTitle.


```tsx
 return (
   <InventoryItem>
     <InventoryItemTitle>{title}</InventoryItemTitle>
     <InventoryItemBody error={loadError}>
       {loaded && <InventoryItemStatus count={workerNodes.length} icon={<MonitoringIcon />} />}
     </InventoryItemBody>
   </InventoryItem>
 )
```




## InventoryItemStatus

Creates a count and icon for an inventory card with optional link address; used within InventoryItemBody


```tsx
 return (
   <InventoryItem>
     <InventoryItemTitle>{title}</InventoryItemTitle>
     <InventoryItemBody error={loadError}>
       {loaded && <InventoryItemStatus count={workerNodes.length} icon={<MonitoringIcon />} />}
     </InventoryItemBody>
   </InventoryItem>
 )
```




## InventoryItemLoading

Creates a skeleton container for when an inventory card is loading; used with InventoryItem and related components


```tsx
if (loadError) {
   title = <Link to={workerNodesLink}>{t('Worker Nodes')}</Link>;
} else if (!loaded) {
  title = <><InventoryItemLoading /><Link to={workerNodesLink}>{t('Worker Nodes')}</Link></>;
}
return (
  <InventoryItem>
    <InventoryItemTitle>{title}</InventoryItemTitle>
  </InventoryItem>
)
```


## useFlag

Hook that returns the given feature flag from FLAGS redux state. It returns the boolean value of the requested feature flag or undefined.



## CodeEditor

A basic lazy loaded Code editor with hover help and completion.


```text
<React.Suspense fallback={<LoadingBox />}>
  <CodeEditor
    value={code}
    language="yaml"
  />
</React.Suspense>
```




## ResourceYAMLEditor

A lazy loaded YAML editor for Kubernetes resources with hover help and completion. The component use the YAMLEditor and add on top of it more functionality likeresource update handling, alerts, save, cancel and reload buttons, accessibility and more. Unless onSave callback is provided, the resource update is automatically handled.It should be wrapped in a React.Suspense component.


```text
<React.Suspense fallback={<LoadingBox />}>
  <ResourceYAMLEditor
    initialResource={resource}
    header="Create resource"
    onSave={(content) => updateResource(content)}
  />
</React.Suspense>
```




## ResourceEventStream

A component to show events related to a particular resource.


```tsx
const [resource, loaded, loadError] = useK8sWatchResource(clusterResource);
return <ResourceEventStream resource={resource} />
```




## usePrometheusPoll

Sets up a poll to Prometheus for a single query. It returns a tuple containing the query response, a boolean flag indicating whether the response has completed, and any errors encountered during the request or post-processing of the request.



## Timestamp

A component to render timestamp. The timestamps are synchronized between invidual instances of the Timestamp component. The provided timestamp is formatted according to user locale.



## useOverlay

The useOverlay hook inserts a component directly to the DOM outside the web console&#8217;s page structure. This allows the component to be freely styled and positioning with CSS. For example, to float the overlay in the top right corner of the UI: style={{ position: 'absolute', right: '2rem', top: '2rem', zIndex: 999 }}. It is possible to add multiple overlays by calling useOverlay multiple times. A closeOverlay function is passed to the overlay component. Calling it removes the component from the DOM without affecting any other overlays that might have been added with useOverlay. Additional props can be passed to useOverlay and they will be passed through to the overlay component.


```tsx
const OverlayComponent = ({ closeOverlay, heading }) => {
  return (
    <div style={{ position: 'absolute', right: '2rem', top: '2rem', zIndex: 999 }}>
      <h2>{heading}</h2>
      <Button onClick={closeOverlay}>Close</Button>
    </div>
  );
};

const ModalComponent = ({ body, closeOverlay, title }) => (
  <Modal isOpen onClose={closeOverlay}>
    <ModalHeader title={title} />
    <ModalBody>{body}</ModalBody>
  </Modal>
);

const AppPage: React.FC = () => {
  const launchOverlay = useOverlay();
  const onClickOverlay = () => {
    launchOverlay(OverlayComponent, { heading: 'Test overlay' });
  };
  const onClickModal = () => {
    launchOverlay(ModalComponent, { body: 'Test modal', title: 'Overlay modal' });
  };
  return (
    <Button onClick={onClickOverlay}>Launch an Overlay</Button>
    <Button onClick={onClickModal}>Launch a Modal</Button>
  )
}
```


## ActionServiceProvider

Component that allows to receive contributions from other plugins for the console.action/provider extension type.


```text
   const context: ActionContext = { 'a-context-id': { dataFromDynamicPlugin } };

   ...

   <ActionServiceProvider context={context}>
       {({ actions, options, loaded }) =>
         loaded && (
           <ActionMenu actions={actions} options={options} variant={ActionMenuVariant.DROPDOWN} />
         )
       }
   </ActionServiceProvider>
```




## NamespaceBar

A component that renders a horizontal toolbar with a namespace dropdown menu in the leftmost position. Additional components can be passed in as children and is rendered to the right of the namespace dropdown. This component is designed to be used at the top of the page. It should be used on pages where the user needs to be able to change the active namespace, such as on pages with k8s resources.


```text
   const logNamespaceChange = (namespace) => console.log(`New namespace: ${namespace}`);

   ...

   <NamespaceBar onNamespaceChange={logNamespaceChange}>
     <NamespaceBarApplicationSelector />
   </NamespaceBar>
   <Page>

     ...
```




## ErrorBoundaryFallbackPage

Creates full page ErrorBoundaryFallbackPage component to display the "Oh no! Something went wrong." message along with the stack trace and other helpful debugging information. This is to be used inconjunction with an component.


```tsx
//in ErrorBoundary component
 return (
   if (this.state.hasError) {
     return <ErrorBoundaryFallbackPage errorMessage={errorString} componentStack={componentStackString}
      stack={stackTraceString} title={errorString}/>;
   }

   return this.props.children;
)
```




## QueryBrowser

A component that renders a graph of the results from a Prometheus PromQL query along with controls for interacting with the graph.


```tsx
<QueryBrowser
  defaultTimespan={15 * 60 * 1000}
  namespace={namespace}
  pollInterval={30 * 1000}
  queries={[
    'process_resident_memory_bytes{job="console"}',
    'sum(irate(container_network_receive_bytes_total[6h:5m])) by (pod)',
  ]}
/>
```




## useAnnotationsModal

A hook that provides a callback to launch a modal for editing Kubernetes resource annotations.


```tsx
const PodAnnotationsButton = ({ pod }) => {
  const { t } = useTranslation();
  const launchAnnotationsModal = useAnnotationsModal<PodKind>(pod);
  return <button onClick={launchAnnotationsModal}>{t('Edit Pod Annotations')}</button>
}
```




A function which launches a modal for editing a resource&#8217;s annotations.

## useDeleteModal

A hook that provides a callback to launch a modal for deleting a resource.


```tsx
const DeletePodButton = ({ pod }) => {
  const { t } = useTranslation();
  const launchDeleteModal = useDeleteModal<PodKind>(pod);
  return <button onClick={launchDeleteModal}>{t('Delete Pod')}</button>
}
```




A function which launches a modal for deleting a resource.

## useLabelsModel

A hook that provides a callback to launch a modal for editing Kubernetes resource labels.


```tsx
const PodLabelsButton = ({ pod }) => {
  const { t } = useTranslation();
  const launchLabelsModal = useLabelsModal<PodKind>(pod);
  return <button onClick={launchLabelsModal}>{t('Edit Pod Labels')}</button>
}
```




A function which launches a modal for editing a resource&#8217;s labels.

## useActiveNamespace

Hook that provides the currently active namespace and a callback for setting the active namespace.


```tsx
const Component: React.FC = (props) => {
   const [activeNamespace, setActiveNamespace] = useActiveNamespace();
   return <select
     value={activeNamespace}
     onChange={(e) => setActiveNamespace(e.target.value)}
   >
     {
       // ...namespace options
     }
   </select>
}
```


A tuple containing the current active namespace and setter callback.

## useUserSettings

Hook that provides a user setting value and a callback for setting the user setting value.


```tsx
const Component: React.FC = (props) => {
   const [state, setState, loaded] = useUserSettings(
     'devconsole.addPage.showDetails',
     true,
     true,
   );
   return loaded ? (
      <WrappedComponent {...props} userSettingState={state} setUserSettingState={setState} />
    ) : null;
};
```


A tuple containing the user setting vauel, a setter callback, and a loaded boolean.

## useQuickStartContext

Hook that provides the current quick start context values. This allows plugins to interoperate with console quick start functionality.


```tsx
const OpenQuickStartButton = ({ quickStartId }) => {
   const { setActiveQuickStart } = useQuickStartContext();
   const onClick = React.useCallback(() => {
       setActiveQuickStart(quickStartId);
   }, [quickStartId]);
   return <button onClick={onClick}>{t('Open Quick Start')}</button>
};
```


Quick start context values object.

## PerspectiveContext

Deprecated: Use the provided usePerspectiveContext instead. Creates the perspective context.



## useAccessReviewAllowed

Deprecated: Use useAccessReview from @console/dynamic-plugin-sdk instead. Hook that provides allowed status about user access to a given resource. It returns the isAllowed boolean value.



## useSafetyFirst

Deprecated: This hook is not related to console functionality. Hook that ensures a safe asynchronnous setting of React state in case a given component could be unmounted. It returns an array with a pair of state value and its set function.



## VirtualizedTable

Deprecated: Use PatternFly&#8217;s Data view instead. A component for making virtualized tables.


```text
const MachineList: React.FC<MachineListProps> = (props) => {
  return (
    <VirtualizedTable<MachineKind>
     {...props}
     aria-label='Machines'
     columns={getMachineColumns}
     Row={getMachineTableRow}
    />
  );
}
```




## ListPageFilter

Deprecated: Use PatternFly&#8217;s Data view instead. Component that generates filter for list page.


```tsx
  // See implementation for more details on RowFilter and FilterValue types
  const [staticData, filteredData, onFilterChange] = useListPageFilter(
    data,
    rowFilters,
    staticFilters,
  );
  // ListPageFilter updates filter state based on user interaction and resulting filtered data can be rendered in an independent component.
  return (
    <>
      <ListPageHeader .../>
      <ListPagBody>
        <ListPageFilter data={staticData} onFilterChange={onFilterChange} />
        <List data={filteredData} />
      </ListPageBody>
    </>
  )
```




## useListPageFilter

Deprecated: Use PatternFly&#8217;s Data view instead. A hook that manages filter state for the ListPageFilter component. It returns a tuple containing the data filtered by all static filters, the data filtered by all static and row filters, and a callback that updates rowFilters.


```tsx
  // See implementation for more details on RowFilter and FilterValue types
  const [staticData, filteredData, onFilterChange] = useListPageFilter(
    data,
    rowFilters,
    staticFilters,
  );
  // ListPageFilter updates filter state based on user interaction and resulting filtered data can be rendered in an independent component.
  return (
    <>
      <ListPageHeader .../>
      <ListPagBody>
        <ListPageFilter data={staticData} onFilterChange={onFilterChange} />
        <List data={filteredData} />
      </ListPageBody>
    </>
  )
```




## YAMLEditor

Deprecated: Use CodeEditor instead. A basic lazy loaded YAML editor with hover help and completion.


```text
<React.Suspense fallback={<LoadingBox />}>
  <YAMLEditor
    value={code}
  />
</React.Suspense>
```




## useModal

Deprecated: Use useOverlay from @console/dynamic-plugin-sdk instead. A hook to launch Modals.


```tsx
const AppPage: React.FC = () => {
 const launchModal = useModal();
 const onClick = () => launchModal(ModalComponent);
 return (
   <Button onClick={onClick}>Launch a Modal</Button>
 )
}
```


# Troubleshooting your dynamic plugin

Refer to this list of troubleshooting tips if you run into issues loading your plugin.

* Verify that you have enabled your plugin in the console Operator configuration and your plugin name is the output by running the following command:

```terminal
$ oc get console.operator.openshift.io cluster -o jsonpath='{.spec.plugins}'
```

* Verify the enabled plugins on the status card of the Overview page. You must refresh your browser if the plugin was recently enabled.
* Verify your plugin service is healthy by:
* Verifying your plugin pod status is running and your containers are ready.
* Verifying the service label selector matches the pod and the target port is correct.
* Curl the plugin-manifest.json from the service in a terminal on the console pod or another pod on the cluster.
* Verify your ConsolePlugin resource name (consolePlugin.name) matches the plugin name used in package.json.
* Verify your service name, namespace, port, and path are declared correctly in the ConsolePlugin resource.
* Verify your plugin service uses HTTPS and service serving certificates.
* Verify any certificates or connection errors in the console pod logs.
* Verify the feature flag your plugin relies on is not disabled.
* Verify your plugin does not have any consolePlugin.dependencies in package.json that are not met.
* This can include console version dependencies or dependencies on other plugins. Filter the JS console in your browser for your plugin's name to see messages that are logged.
* Verify there are no typos in the nav extension perspective or section IDs.
* Your plugin may be loaded, but nav items missing if IDs are incorrect. Try navigating to a plugin page directly by editing the URL.
* Verify there are no network policies that are blocking traffic from the console pod to your plugin service.
* If necessary, adjust network policies to allow console pods in the openshift-console namespace to make requests to your service.
* Verify the list of dynamic plugins to be loaded in your browser in the Console tab of the developer tools browser.
* Evaluate window.SERVER_FLAGS.consolePlugins to see the dynamic plugin on the Console frontend.

* Understanding service serving certificates