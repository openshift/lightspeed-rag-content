# Managing nodes


Red Hat OpenShift Container Platform uses a KubeletConfig custom resource (CR) to manage the
configuration of nodes. By creating an instance of a KubeletConfig object, a managed machine config is created to override setting on the node.

[NOTE]
----
Logging in to  remote machines for the purpose of changing their configuration is not supported.
----

# Modifying nodes

To make configuration changes to a cluster, or machine pool, you must create a custom resource definition (CRD), or kubeletConfig object. Red Hat OpenShift Container Platform uses the Machine Config Controller to watch for changes introduced through the CRD to apply the changes to the cluster.


[NOTE]
----
Because the fields in a kubeletConfig object are passed directly to the kubelet from upstream Kubernetes, the validation of those fields is handled directly by the kubelet itself. Please refer to the relevant Kubernetes documentation for the valid values for these fields. Invalid values in the kubeletConfig object can render cluster nodes unusable.
----

1. Obtain the label associated with the static CRD, Machine Config Pool, for the type of node you want to configure.
Perform one of the following steps:
1. Check current labels of the desired machine config pool.

For example:

```terminal
$  oc get machineconfigpool  --show-labels
```

Example output

```terminal
NAME      CONFIG                                             UPDATED   UPDATING   DEGRADED   LABELS
master    rendered-master-e05b81f5ca4db1d249a1bf32f9ec24fd   True      False      False      operator.machineconfiguration.openshift.io/required-for-upgrade=
worker    rendered-worker-f50e78e1bc06d8e82327763145bfcf62   True      False      False
```

2. Add a custom label to the desired machine config pool.

For example:

```terminal
$ oc label machineconfigpool worker custom-kubelet=enabled
```

2. Create a kubeletconfig custom resource (CR) for your configuration change.

For example:
Sample configuration for a custom-config CR

```yaml
apiVersion: machineconfiguration.openshift.io/v1
kind: KubeletConfig
metadata:
  name: custom-config 1
spec:
  machineConfigPoolSelector:
    matchLabels:
      custom-kubelet: enabled 2
  kubeletConfig: 3
    podsPerCore: 10
    maxPods: 250
    systemReserved:
      cpu: 2000m
      memory: 1Gi
#...
```

Assign a name to CR.
Specify the label to apply the configuration change, this is the label you added to the machine config pool.
Specify the new value(s) you want to change.
3. Create the CR object.

```terminal
$ oc create -f <file-name>
```


For example:

```terminal
$ oc create -f master-kube-config.yaml
```


Most Kubelet Configuration options can be set by the user. The following options are not allowed to be overwritten:

* CgroupDriver
* ClusterDNS
* ClusterDomain
* StaticPodPath


[NOTE]
----
If a single node contains more than 50 images, pod scheduling might be imbalanced across nodes. This is because the list of images on a node is shortened to 50 by default. You can disable the image limit by editing the KubeletConfig object and setting the value of nodeStatusMaxImages to -1.
----

# Configuring control plane nodes as schedulable

You can configure control plane nodes to be
schedulable, meaning that new pods are allowed for placement on the master
nodes. By default, control plane nodes are not schedulable.

You can set the masters to be schedulable, but must retain the worker nodes.


[NOTE]
----
You can deploy Red Hat OpenShift Container Platform with no worker nodes on a bare metal cluster.
In this case, the control plane nodes are marked schedulable by default.
----

You can allow or disallow control plane nodes to be schedulable by configuring the mastersSchedulable field.


[IMPORTANT]
----
When you configure control plane nodes from the default unschedulable to schedulable, additional subscriptions are required. This is because control plane nodes then become worker nodes.
----

1. Edit the schedulers.config.openshift.io resource.

```terminal
$ oc edit schedulers.config.openshift.io cluster
```

2. Configure the mastersSchedulable field.

```yaml
apiVersion: config.openshift.io/v1
kind: Scheduler
metadata:
  creationTimestamp: "2019-09-10T03:04:05Z"
  generation: 1
  name: cluster
  resourceVersion: "433"
  selfLink: /apis/config.openshift.io/v1/schedulers/cluster
  uid: a636d30a-d377-11e9-88d4-0a60097bee62
spec:
  mastersSchedulable: false 1
status: {}
#...
```

Set to true to allow control plane nodes to be schedulable, or false to
disallow control plane nodes to be schedulable.
3. Save the file to apply the changes.

# Setting SELinux booleans

Red Hat OpenShift Container Platform allows you to enable and disable an SELinux boolean on a Red Hat Enterprise Linux CoreOS (RHCOS) node. The following procedure explains how to modify SELinux booleans on nodes using the Machine Config Operator (MCO). This procedure uses container_manage_cgroup as the example boolean. You can modify this value to whichever boolean you need.

* You have installed the OpenShift CLI (oc).

1. Create a new YAML file with a MachineConfig object, displayed in the following example:

```yaml
apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  labels:
    machineconfiguration.openshift.io/role: worker
  name: 99-worker-setsebool
spec:
  config:
    ignition:
      version: 3.2.0
    systemd:
      units:
      - contents: |
          [Unit]
          Description=Set SELinux booleans
          Before=kubelet.service

          [Service]
          Type=oneshot
          ExecStart=/sbin/setsebool container_manage_cgroup=on
          RemainAfterExit=true

          [Install]
          WantedBy=multi-user.target graphical.target
        enabled: true
        name: setsebool.service
#...
```

2. Create the new MachineConfig object by running the following command:

```terminal
$ oc create -f 99-worker-setsebool.yaml
```



[NOTE]
----
Applying any changes to the MachineConfig object causes all affected nodes to gracefully reboot after the change is applied.
----

# Adding kernel arguments to nodes

In some special cases, you might want to add kernel arguments to a set of nodes in your cluster. This should only be done with caution and clear understanding of the implications of the arguments you set.


[WARNING]
----
Improper use of kernel arguments can result in your systems becoming unbootable.
----

Examples of kernel arguments you could set include:

* nosmt: Disables symmetric multithreading (SMT) in the kernel. Multithreading allows multiple logical threads for each CPU. You could consider nosmt in multi-tenant environments to reduce risks from potential cross-thread attacks. By disabling SMT, you essentially choose security over performance.
* enforcing=0: Configures Security Enhanced Linux (SELinux) to run in permissive mode. In permissive mode, the system acts as if SELinux is enforcing the loaded security policy, including labeling objects and emitting access denial entries in the logs, but it does not actually deny any operations. While not supported for production systems, permissive mode can be helpful for debugging.

[WARNING]
----
Disabling SELinux on RHCOS in production is not supported.
Once SELinux has been disabled on a node, it must be re-provisioned before re-inclusion in a production cluster.
----

See Kernel.org kernel parameters for a list and descriptions of kernel arguments.

In the following procedure, you create a MachineConfig object that identifies:

* A set of machines to which you want to add the kernel argument. In this case, machines with a worker role.
* Kernel arguments that are appended to the end of the existing kernel arguments.
* A label that indicates where in the list of machine configs the change is applied.

* Have administrative privilege to a working Red Hat OpenShift Container Platform cluster.

1. List existing MachineConfig objects for your Red Hat OpenShift Container Platform cluster to determine how to
label your machine config:

```terminal
$ oc get MachineConfig
```

Example output

```terminal
NAME                                               GENERATEDBYCONTROLLER                      IGNITIONVERSION   AGE
00-master                                          52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
00-worker                                          52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
01-master-container-runtime                        52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
01-master-kubelet                                  52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
01-worker-container-runtime                        52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
01-worker-kubelet                                  52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
99-master-generated-registries                     52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
99-master-ssh                                                                                 3.2.0             40m
99-worker-generated-registries                     52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
99-worker-ssh                                                                                 3.2.0             40m
rendered-master-23e785de7587df95a4b517e0647e5ab7   52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
rendered-worker-5d596d9293ca3ea80c896a1191735bb1   52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
```

2. Create a MachineConfig object file that identifies the kernel argument (for example, 05-worker-kernelarg-selinuxpermissive.yaml)

```yaml
apiVersion: machineconfiguration.openshift.io/v1
kind: MachineConfig
metadata:
  labels:
    machineconfiguration.openshift.io/role: worker1
  name: 05-worker-kernelarg-selinuxpermissive2
spec:
  kernelArguments:
    - enforcing=03
```

Applies the new kernel argument only to worker nodes.
Named to identify where it fits among the machine configs (05) and what it does (adds
a kernel argument to configure SELinux permissive mode).
Identifies the exact kernel argument as enforcing=0.
3. Create the new machine config:

```terminal
$ oc create -f 05-worker-kernelarg-selinuxpermissive.yaml
```

4. Check the machine configs to see that the new one was added:

```terminal
$ oc get MachineConfig
```

Example output

```terminal
NAME                                               GENERATEDBYCONTROLLER                      IGNITIONVERSION   AGE
00-master                                          52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
00-worker                                          52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
01-master-container-runtime                        52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
01-master-kubelet                                  52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
01-worker-container-runtime                        52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
01-worker-kubelet                                  52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
05-worker-kernelarg-selinuxpermissive                                                         3.5.0             105s
99-master-generated-registries                     52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
99-master-ssh                                                                                 3.2.0             40m
99-worker-generated-registries                     52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
99-worker-ssh                                                                                 3.2.0             40m
rendered-master-23e785de7587df95a4b517e0647e5ab7   52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
rendered-worker-5d596d9293ca3ea80c896a1191735bb1   52dd3ba6a9a527fc3ab42afac8d12b693534c8c9   3.5.0             33m
```

5. Check the nodes:

```terminal
$ oc get nodes
```

Example output

```terminal
NAME                           STATUS                     ROLES    AGE   VERSION
ip-10-0-136-161.ec2.internal   Ready                      worker   28m   v1.32.3
ip-10-0-136-243.ec2.internal   Ready                      master   34m   v1.32.3
ip-10-0-141-105.ec2.internal   Ready,SchedulingDisabled   worker   28m   v1.32.3
ip-10-0-142-249.ec2.internal   Ready                      master   34m   v1.32.3
ip-10-0-153-11.ec2.internal    Ready                      worker   28m   v1.32.3
ip-10-0-153-150.ec2.internal   Ready                      master   34m   v1.32.3
```


You can see that scheduling on each worker node is disabled as the change is being applied.
6. Check that the kernel argument worked by going to one of the worker nodes and listing
the kernel command-line arguments (in /proc/cmdline on the host):

```terminal
$ oc debug node/ip-10-0-141-105.ec2.internal
```

Example output

```terminal
Starting pod/ip-10-0-141-105ec2internal-debug ...
To use host binaries, run `chroot /host`

sh-4.2# cat /host/proc/cmdline
BOOT_IMAGE=/ostree/rhcos-... console=tty0 console=ttyS0,115200n8
rootflags=defaults,prjquota rw root=UUID=fd0... ostree=/ostree/boot.0/rhcos/16...
coreos.oem.id=qemu coreos.oem.id=ec2 ignition.platform.id=ec2 enforcing=0

sh-4.2# exit
```


You should see the enforcing=0 argument added to the other kernel arguments.

# Allowing swap memory use on nodes

You can allow workloads on the cluster nodes to use swap memory.


[IMPORTANT]
----
{FeatureName} is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----


[NOTE]
----
Swap memory support is available only for container-native virtualization (CNV) users or use cases.
----

To allow swap memory usage on your nodes, create a kubeletconfig custom resource (CR) to set the failSwapOn parameter to false.

Optionally, you can control swap memory usage by Red Hat OpenShift Container Platform workloads on those nodes by setting the swapBehavior parameter to one of the following values:

* NoSwap prevents Red Hat OpenShift Container Platform worloads from using swap memory.
* LimitedSwap allows Red Hat OpenShift Container Platform workloads that fall under the Burstable QoS class to use swap memory.

Regardless of the swapBehavior setting, any workloads that are not managed by Red Hat OpenShift Container Platform on that node can still use swap memory if the failSwapOn parameter is false.

Because the kubelet will not start in the presence of swap memory without this configuration, you must allow swap memory in Red Hat OpenShift Container Platform before enabling swap memory on the nodes. If there is no swap memory present on a node, enabling swap memory in Red Hat OpenShift Container Platform has no effect.


[WARNING]
----
Using swap memory can negatively impact workload performance and out-of-resource handling. Do not enable swap memory on control plane nodes.
----

* You have a running Red Hat OpenShift Container Platform cluster that uses version 4.10 or later.
* Your cluster is configured to use cgroup v2. Swap memory is not supported on nodes in clusters that use cgroup v1.
* You are logged in to the cluster as a user with administrative privileges.
* You have enabled the TechPreviewNoUpgrade feature set on the cluster (see Nodes -> Working with clusters -> Enabling features using feature gates).

[NOTE]
----
Enabling the TechPreviewNoUpgrade feature set cannot be undone and prevents minor version updates. These feature sets are not recommended on production clusters.
----

1. Apply a custom label to the machine config pool where you want to allow swap memory.

```terminal
$ oc label machineconfigpool worker kubelet-swap=enabled
```

2. Create a custom resource (CR) to enable and configure swap settings.

```yaml
apiVersion: machineconfiguration.openshift.io/v1
kind: KubeletConfig
metadata:
  name: swap-config
spec:
  machineConfigPoolSelector:
    matchLabels:
      kubelet-swap: enabled
  kubeletConfig:
    failSwapOn: false 1
    memorySwap:
      swapBehavior: LimitedSwap 2
#...
```

Set to false to enable swap memory use on the associated nodes. Set to true to disable swap memory use.
Optional: Specify the swap memory behavior for Red Hat OpenShift Container Platform pods.
* NoSwap: Red Hat OpenShift Container Platform pods cannot use swap. This is the default.
* LimitedSwap: Red Hat OpenShift Container Platform pods of Burstable QoS class only are permitted to employ swap.
3. Enable swap memory on the nodes by setting the swapaccount=1 kernel argument and configure swap memory as needed.

# About configuring parallel container image pulls

To help control bandwidth issues, you can configure the number of workload images that can be pulled at the same time.

By default, the cluster pulls images in parallel, which allows multiple workloads to pull images at the same time. Pulling multiple images in parallel can improve workload start-up time because workloads can pull needed images without waiting for each other. However, pulling too many images at the same time can use excessive network bandwidth and cause latency issues throughout your cluster.

The default setting allows unlimited simultaneous image pulls. But, you can configure the maximum number of images that can be pulled in parallel. You can also force serial image pulling, which means that only one image can be pulled at a time.

To control the number of images that can be pulled simultaneously, use a kubelet configuration to set the maxParallelImagePulls to specify a limit. Additional image pulls above this limit are held until one of the current pulls is complete.

To force serial image pulls, use a kubelet configuration to set serializeImagePulls field to true.

## Configuring parallel container image pulls

You can control the number of images that can be pulled by your workload simultaneously by using a kubelet configuration.

You can set a maximum number of images that can be pulled or force workloads to pull images one at a time.

* You have a running Red Hat OpenShift Container Platform cluster.
* You are logged in to the cluster as a user with administrative privileges.

1. Apply a custom label to the machine config pool where you want to configure parallel pulls by running a command similar to the following.

```terminal
$ oc label machineconfigpool <mcp_name> parallel-pulls=set
```

2. Create a custom resource (CR) to configure parallel image pulling.

```yaml
apiVersion: machineconfiguration.openshift.io/v1
kind: KubeletConfig
metadata:
  name: parallel-image-pulls
# ...
spec:
  machineConfigPoolSelector:
    matchLabels:
      parallel-pulls: set
  kubeletConfig:
    serializeImagePulls: false 1
    maxParallelImagePulls: 3 2
# ...
```

Set to false to enable parallel image pulls. Set to true to force serial image pulling. The default is false.
Specify the maximum number of images that can be pulled in parallel. Enter a number or set to nil to specify no limit. This field cannot be set if SerializeImagePulls is true. The default is nil.
3. Create the new machine config by running a command similar to the following:

```terminal
$ oc create -f <file_name>.yaml
```


1. Check the machine configs to see that a new one was added by running the following command:

```terminal
$ oc get MachineConfig
```

Example output

```terminal
NAME                                                GENERATEDBYCONTROLLER                        IGNITIONVERSION   AGE
00-master                                           70025364a114fc3067b2e82ce47fdb0149630e4b     3.5.0             133m
00-worker                                           70025364a114fc3067b2e82ce47fdb0149630e4b     3.5.0             133m
# ...
99-parallel-generated-kubelet                       70025364a114fc3067b2e82ce47fdb0149630e4b     3.5.0             15s 1
# ...
rendered-parallel-c634a80f644740974ceb40c054c79e50  70025364a114fc3067b2e82ce47fdb0149630e4b     3.5.0             10s 2
```

The new machine config. In this example, the machine config is for the parallel custom machine config pool.
The new rendered machine config. In this example, the machine config is for the parallel custom machine config pool.
2. Check to see that the nodes in the parallel machine config pool are being updated by running the following command:

```terminal
$ oc get machineconfigpool
```

Example output

```terminal
NAME       CONFIG                                               UPDATED   UPDATING   DEGRADED   MACHINECOUNT   READYMACHINECOUNT   UPDATEDMACHINECOUNT   DEGRADEDMACHINECOUNT   AGE
parallel   rendered-parallel-3904f0e69130d125b3b5ef0e981b1ce1   False     True       False      1              0                   0                     0                      65m
master     rendered-master-7536834c197384f3734c348c1d957c18     True      False      False      3              3                   3                     0                      140m
worker     rendered-worker-c634a80f644740974ceb40c054c79e50     True      False      False      2              2                   2                     0                      140m
```

3. When the nodes are updated, verify that the parallel pull maximum was configured:
1. Open an oc debug session to a node by running a command similar to the following:

```terminal
$ oc debug node/<node_name>
```

2. Set /host as the root directory within the debug shell by running the following command:

```terminal
sh-5.1# chroot /host
```

3. Examine the kubelet.conf file by running the following command:

```terminal
sh-5.1# cat /etc/kubernetes/kubelet.conf | grep -i maxParallelImagePulls
```

Example output

```terminal
maxParallelImagePulls: 3
```


# Migrating control plane nodes from one RHOSP host to another manually

If control plane machine sets are not enabled on your cluster, you can run a script that moves a control plane node from one Red Hat OpenStack Platform (RHOSP) node to another.


[NOTE]
----
Control plane machine sets are not enabled on clusters that run on user-provisioned infrastructure.
For information about control plane machine sets, see "Managing control plane machines with control plane machine sets".
----

* The environment variable OS_CLOUD refers to a clouds entry that has administrative credentials in a clouds.yaml file.
* The environment variable KUBECONFIG refers to a configuration that contains administrative Red Hat OpenShift Container Platform credentials.

* From a command line, run the following script:


```bash
#!/usr/bin/env bash

set -Eeuo pipefail

if [ $# -lt 1 ]; then
	echo "Usage: '$0 node_name'"
	exit 64
fi

# Check for admin OpenStack credentials
openstack server list --all-projects >/dev/null || { >&2 echo "The script needs OpenStack admin credentials. Exiting"; exit 77; }

# Check for admin OpenShift credentials
oc adm top node >/dev/null || { >&2 echo "The script needs OpenShift admin credentials. Exiting"; exit 77; }

set -x

declare -r node_name="$1"
declare server_id
server_id="$(openstack server list --all-projects -f value -c ID -c Name | grep "$node_name" | cut -d' ' -f1)"
readonly server_id

# Drain the node
oc adm cordon "$node_name"
oc adm drain "$node_name" --delete-emptydir-data --ignore-daemonsets --force

# Power off the server
oc debug "node/${node_name}" -- chroot /host shutdown -h 1

# Verify the server is shut off
until openstack server show "$server_id" -f value -c status | grep -q 'SHUTOFF'; do sleep 5; done

# Migrate the node
openstack server migrate --wait "$server_id"

# Resize the VM
openstack server resize confirm "$server_id"

# Wait for the resize confirm to finish
until openstack server show "$server_id" -f value -c status | grep -q 'SHUTOFF'; do sleep 5; done

# Restart the VM
openstack server start "$server_id"

# Wait for the node to show up as Ready:
until oc get node "$node_name" | grep -q "^${node_name}[[:space:]]\+Ready"; do sleep 5; done

# Uncordon the node
oc adm uncordon "$node_name"

# Wait for cluster operators to stabilize
until oc get co -o go-template='statuses: {{ range .items }}{{ range .status.conditions }}{{ if eq .type "Degraded" }}{{ if ne .status "False" }}DEGRADED{{ end }}{{ else if eq .type "Progressing"}}{{ if ne .status "False" }}PROGRESSING{{ end }}{{ else if eq .type "Available"}}{{ if ne .status "True" }}NOTAVAILABLE{{ end }}{{ end }}{{ end }}{{ end }}' | grep -qv '\(DEGRADED\|PROGRESSING\|NOTAVAILABLE\)'; do sleep 5; done
```


If the script completes, the control plane machine is migrated to a new RHOSP node.

* Managing control plane machines with control plane machine sets